cscope 15 $HOME/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn               0001121749
	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/include/arch/cc.h

32 #i‚de‡
__ARCH_CC_H__


33 
	#__ARCH_CC_H__


	)

36 
	~<°rög.h
>

37 
	~<sys/time.h
>

38 
	~<°döt.h
>

41 #i‚de‡
BYTE_ORDER


42 
	#BYTE_ORDER
 
LITTLE_ENDIAN


	)

46 
	tu8_t
;

47 sig√d 
	ts8_t
;

48 
	tu16_t
;

49 sig√d 
	ts16_t
;

50 
	tu32_t
;

51 sig√d 
	ts32_t
;

52 
uöt64_t
 
	tu64_t
;

54 
	tmem_±r_t
;

57 
	#X8_F
 "02x"

	)

58 
	#U16_F
 "hu"

	)

59 
	#S16_F
 "hd"

	)

60 
	#X16_F
 "hx"

	)

61 
	#U32_F
 "u"

	)

62 
	#S32_F
 "d"

	)

63 
	#X32_F
 "x"

	)

66 #i‡
deföed
(
__x86_64__
)

67 
	#SZT_F
 "lu"

	)

69 
	#SZT_F
 "u"

	)

73 
	#PACK_STRUCT_FIELD
(
x
Ë
	)
x

74 
	#PACK_STRUCT_STRUCT
 
	`__©åibuã__
((
∑cked
))

	)

75 
	#PACK_STRUCT_BEGIN


	)

76 
	#PACK_STRUCT_END


	)

79 
	~<°dio.h
>

80 
	~<°dlib.h
>

82 
	#LWIP_PLATFORM_DIAG
(
x
Ëdÿ{
¥ötf
 x;} 0)

	)

84 
	#LWIP_PLATFORM_ASSERT
(
x
Ëdÿ{
	`¥ötf
("Assertion \"%s\" failedátÜine %d in %s\n", \

85 
x
, 
__LINE__
, 
__FILE__
); 
	`fÊush
(
NULL
); 
	`ab‹t
();} 0)

	)

87 
	#LWIP_RAND
(Ë((
u32_t
)
	`ønd
())

	)

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/include/arch/perf.h

32 #i‚de‡
__ARCH_PERF_H__


33 
	#__ARCH_PERF_H__


	)

35 
	~<sys/times.h
>

37 #ifde‡
PERF


38 
	#PERF_START
 { \

39 
__c1l
, 
__c1h
, 
__c2l
, 
__c2h
; \

40 
	`__asm__
(".byã 0x0f, 0x31" : "˜" (
__c1l
), "=d" (
__c1h
))

	)

41 
	#PERF_STOP
(
x
Ë
	`__asm__
(".byã 0x0f, 0x31" : "˜" (
__c2l
), "=d" (
__c2h
)); \

42 
	`≥rf_¥öt
(
__c1l
, 
__c1h
, 
__c2l
, 
__c2h
, 
x
);}

	)

51 
	#PERF_START


	)

52 
	#PERF_STOP
(
x
Ë

	)

55 
≥rf_¥öt
(
c1l
, 
c1h
,

56 
c2l
, 
c2h
,

57 *
key
);

59 
≥rf_¥öt_times
(
tms
 *
°¨t
, tm†*
íd
, *
key
);

61 
≥rf_öô
(*
‚ame
);

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/include/arch/sys_arch.h

32 #i‚de‡
__ARCH_SYS_ARCH_H__


33 
	#__ARCH_SYS_ARCH_H__


	)

35 
	~<î∫o.h
>

37 
	#SYS_MBOX_NULL
 
NULL


	)

38 
	#SYS_SEM_NULL
 
NULL


	)

40 
u32_t
 
	tsys_¥Ÿ_t
;

42 
	gsys_£m
;

43 
sys_£m
 * 
	tsys_£m_t
;

44 
	#sys_£m_vÆid
(
£m
Ë(((£mË!
NULL
Ë&& (*(£mË!NULL))

	)

45 
	#sys_£m_£t_övÆid
(
£m
Ëdÿ{ if((£mË!
NULL
Ë{ *(£mËNULL; }}0)

	)

48 
	#LWIP_COMPAT_MUTEX
 1

	)

50 
	gsys_mbox
;

51 
sys_mbox
 *
	tsys_mbox_t
;

52 
sys_lwù_mbox
 *
	tlwù_mbox_t
;

53 
	#sys_mbox_vÆid
(
mbox
Ë(((mboxË!
NULL
Ë&& (*(mboxË!NULL))

	)

54 
	#sys_mbox_£t_övÆid
(
mbox
Ëdÿ{ if((mboxË!
NULL
Ë{ *(mboxËNULL; }}0)

	)

56 
	gsys_thªad
;

57 
sys_thªad
 * 
	tsys_thªad_t
;

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/include/netif/fifo.h

1 #i‚de‡
FIFO_H


2 
	#FIFO_H


	)

4 
	~"lwù/sys.h
"

7 
	#FIFOSIZE
 2048

	)

10 
	sfifo_t
 {

11 
u8_t
 
	md©a
[
FIFOSIZE
+10];

12 
	md©a¶Ÿ
;

13 
	mem±y¶Ÿ
;

14 
	mÀn
;

16 
sys_£m_t
 
	m£m
;

17 
sys_£m_t
 
	mgëSem
;

18 
u8_t
 
	mgëWaôög
;

20 } 
	tfifo_t
;

29 
u8_t
 
fifoGë
(
fifo_t
 * 
fifo
);

37 
s16_t
 
fifoGëN⁄Block
(
fifo_t
 * 
fifo
);

45 
fifoPut
(
fifo_t
 * 
fifo
, 
fd
);

51 
fifoInô
(
fifo_t
 * 
fifo
);

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/include/netif/ibvif.h

32 #i‚de‡
__IBVIF_H__


33 
	#__IBVIF_H__


	)

35 
	~"lwù/√tif.h
"

36 
	~"lwù/t˝ù_thªad.h
"

38 
	#FLOW_NUM
 100

	)

40 
	sibvif
 {

41 
ëh_addr
 *
	mëhaddr
;

42 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

43 
ibv_pd
 *
	mpd
;

44 
ibv_mr
 *
	m£nd_mr
;

45 
ibv_mr
 *
	mªcv_mr
;

46 
ibv_cq
 *
	m£nd_cq
;

47 
ibv_cq
 *
	mªcv_cq
;

48 
ibv_qp
 *
	mqp
;

50 
ibv_exp_Êow
 *
	mÊow
;

51 
t˝ù_thªad
 *
	mthªad
;

52 *
	m£nd_buf
;

53 *
	mªcv_buf
;

54 
	mªcv_shmid
;

55 
	m£nd_size
;

56 
	mtx_dïth
;

57 
	mrx_dïth
;

59 
	mbuf_size
;

60 
	m˝u
;

61 
	mfûÀr
[14];

64 
îr_t
 
ibvif_öô
(
√tif
 *netif);

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/include/netif/list.h

2 #i‚de‡
__LIST_H__


3 
	#__LIST_H__


	)

5 
	gñem
;

7 
	sli°
 {

8 
ñem
 *
	mfú°
, *
	mœ°
;

9 
	msize
, 
	mñems
;

12 
	sñem
 {

13 
ñem
 *
	m√xt
;

14 *
	md©a
;

17 
li°
 *
li°_√w
(
size
);

18 
li°_push
(
li°
 *li°, *
d©a
);

19 *
li°_p›
(
li°
 *list);

20 *
li°_fú°
(
li°
 *list);

21 
li°_ñems
(
li°
 *list);

22 
li°_dñëe
(
li°
 *list);

23 
li°_ªmove
(
li°
 *li°, *
ñem
);

24 
li°_m≠
(
li°
 *li°, (* 
func
)(*
¨g
));

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/include/netif/tcpdump.h

32 #i‚de‡
__NETIF_TCPDUMP_H__


33 
	#__NETIF_TCPDUMP_H__


	)

35 
	~"lwù/pbuf.h
"

37 
t˝dump_öô
();

38 
t˝dump
(
pbuf
 *
p
);

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/lib/app/main.c

1 
	~"lwù/öô.h
"

2 
	~"lwù/sys.h
"

3 
	~"lwù/mem.h
"

4 
	~"lwù/memp.h
"

5 
	~"lwù/pbuf.h
"

6 
	~"lwù/t˝.h
"

7 
	~"lwù/t˝ù.h
"

8 
	~"lwù/√tif.h
"

9 
	~"lwù/°©s.h
"

10 
	~"lwù/sockës.h
"

11 
	~<byãsw≠.h
>

12 
	~"√tif/ibvif.h
"

13 
	~<time.h
>

14 
	~<sys/time.h
>

15 
	~"lwù/°©s.h
"

16 
	~<sig«l.h
>

18 
	sthªad_°ru˘
 {

19 
	mc⁄nfd
;

20 
	m˝u
;

21 
	mp‹t
;

22 
sockaddr_ö
 
	m˛üddr
;

25 
	g£nd
[2];

26 
	gc⁄n
[2];

28 
	gcou¡6
, 
	gcou¡7
, 
	gcou¡8
, 
	gcou¡9
, 
	gcou¡10
, 
	gcou¡11
, 
	gcou¡12
, 
	gcou¡13
;

29 
	gc⁄√˘i⁄
[
NUM_CPU
];

32 
time_t
 
	$dñè_time_ö_mi¸o£c⁄ds
 (
timevÆ
 * 
t2
, timevÆ * 
t1
)

35 
time_t
 
dñè_£c⁄ds
 = 
t2
 -> 
tv_£c
 - 
t1
 ->Åv_sec;

36 
time_t
 
dñè_mi¸o£c⁄ds
 = 
t2
 -> 
tv_u£c
 - 
t1
 ->Åv_usec;

38 i‡(
dñè_mi¸o£c⁄ds
 < 0)

40 
dñè_mi¸o£c⁄ds
 += 1000000;

41 -- 
dñè_£c⁄ds
;

43  (
dñè_£c⁄ds
 * 1000000Ë+ 
dñè_mi¸o£c⁄ds
;

44 
	}
}

47 
	$h™dÀ_c⁄√˘i⁄
 (*
¨g
) {

48 
˝u
 = *(*Ë
¨g
;

49 
li°ífd
[100001], 
c⁄nfd
;

50 
sockaddr_ö
 
£rvaddr
, 
˛üddr
;

51 
sockÀn_t
 
˛ûí
;

52 
u64_t
 
n
,
i
;

53 
time•ec
 
°¨t
, 
°›
;

54 
code
;

55 
sockaddr_ö
 
ß_loc
;

56 
idx
, 
öc
 = 0;

57 
j
 =0;

58 sig√d 
x
;

59 
mesg
[1500];

61 
	`lwù_thªad_aff
(
˝u
);

62 
	`±hªad_yõld
();

63 
i
=1; i<11; i++) {

64 
li°ífd
[
i
] = 
	`lwù_sockë
(
AF_INET
,
SOCK_STREAM
,0);

65 
	`mem£t
(&
£rvaddr
,0,(
sockaddr_ö
));

66 
˛üddr
.
sö_Ámûy
 = 
AF_INET
;

67 
˛üddr
.
sö_p‹t
 = 
	`ht⁄s
(
i
);

68 i‡(
˝u
 == 19) {

69 
˛üddr
.
sö_addr
.
s_addr
 = 
	`öë_addr
("10.0.0.5");

70 } i‡(
˝u
 == 20) {

71 
˛üddr
.
sö_addr
.
s_addr
 = 
	`öë_addr
("10.0.0.6");

72 } i‡(
˝u
 == 21) {

73 
˛üddr
.
sö_addr
.
s_addr
 = 
	`öë_addr
("10.0.0.7");

74 } i‡(
˝u
 == 22) {

75 
˛üddr
.
sö_addr
.
s_addr
 = 
	`öë_addr
("10.0.0.8");

76 } i‡(
˝u
 == 23) {

77 
˛üddr
.
sö_addr
.
s_addr
 = 
	`öë_addr
("10.0.0.9");

80 
	`lwù_böd
(
li°ífd
[
i
], (
sockaddr
 *)&
˛üddr
, (cliaddr));

81 
	`mem£t
(&
£rvaddr
,0,(
sockaddr_ö
));

82 
£rvaddr
.
sö_Ámûy
 = 
AF_INET
;

83 
£rvaddr
.
sö_addr
.
s_addr
=
	`öë_addr
("10.0.0.1");

84 
£rvaddr
.
sö_p‹t
=
	`bsw≠_16
(90);

85 
x
 = 
	`lwù_c⁄√˘
(
li°ífd
[
i
], (
sockaddr
 *)&
£rvaddr
, (servaddr));

86 i‡(
x
<0) {

87 
	`¥ötf
("connectÉrror \n");

90 
c⁄n
[1]++;

93 
	`°∫˝y
(
mesg
, "hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohello", 1450);

96 
i
=1; i<11; i++) {

97 
	`lwù_£ndto
(
li°ífd
[
i
],
mesg
,1450,0,
NULL
,0);

99 
£nd
[1]++;

102 
	}
}

104 
	$¥öt_°©s
 (
sig
)

106 
	`¥ötf
 ("\n%Œd \¿%Œd\n", 
£nd
[0], send[1]);

107 
	`¥ötf
 ("\n%Œd \¿%Œd\n", 
c⁄n
[0], conn[1]);

108 
	`exô
(1);

109 
	}
}

111 
	$maö
(
¨gc
, **
¨gv
) {

112 
li°ífd
[100001], 
c⁄nfd
;

113 
sockaddr_ö
 
£rvaddr
, 
˛üddr
;

114 
sockÀn_t
 
˛ûí
;

115 
u64_t
 
n
,
i
;

116 
time•ec
 
°¨t
, 
°›
;

117 
code
;

118 
sockaddr_ö
 
ß_loc
;

119 
idx
, 
öc
 = 0;

120 
j
 =0;

121 sig√d 
x
;

122 
˝us
[
NUM_CPU
];

123 
±hªad_©å_t
 
©å
;

124 
sched_∑øm
 
∑øm
 = {

125 .
sched_¥i‹ôy
 = 9

127 
mesg
[1500];

128 
±hªad_t
 
ãmp
;

130 
	`lwù_thªad_aff
(12);

131 
	`±hªad_yõld
();

132 
	`t˝ù_öô
(
NULL
, NULL);

133 
	`sig«l
(
SIGINT
, 
¥öt_°©s
);

134 
£nd
[0] = 0;

135 
£nd
[1] = 0;

137 
i
=1; i<11; i++) {

138 
li°ífd
[
i
] = 
	`lwù_sockë
(
AF_INET
,
SOCK_STREAM
,0);

139 
	`mem£t
(&
£rvaddr
,0,(
sockaddr_ö
));

140 
˛üddr
.
sö_Ámûy
 = 
AF_INET
;

141 
˛üddr
.
sö_p‹t
 = 
	`ht⁄s
(
i
);

142 
˛üddr
.
sö_addr
.
s_addr
 = 
	`öë_addr
("10.0.0.3");

143 
	`lwù_böd
(
li°ífd
[
i
], (
sockaddr
 *)&
˛üddr
, (cliaddr));

144 
	`mem£t
(&
£rvaddr
,0,(
sockaddr_ö
));

145 
£rvaddr
.
sö_Ámûy
 = 
AF_INET
;

146 
£rvaddr
.
sö_addr
.
s_addr
=
	`öë_addr
(
¨gv
[1]);

147 
£rvaddr
.
sö_p‹t
=
	`bsw≠_16
(90);

148 
x
 = 
	`lwù_c⁄√˘
(
li°ífd
[
i
], (
sockaddr
 *)&
£rvaddr
, (servaddr));

149 i‡(
x
<0) {

150 
	`¥ötf
("connectÉrror \n");

153 
c⁄n
[0]++;

161 
˛ûí
 = (
£rvaddr
);

163 
	`°∫˝y
(
mesg
, "hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohello", 1450);

165 
	`¶ìp
(5);

169 
i
=1; i<11; i++) {

170 
x
=
	`lwù_£ndto
(
li°ífd
[
i
],
mesg
,1450,0,
NULL
,0);

172 i‡(
x
<0) {

173 
	`¥ötf
("£ndÉº‹ %d \n", 
i
);

176 
£nd
[0]++;

181 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/lib/lwipopts.h

38 #i‚de‡
__LWIPOPTS_H__


39 
	#__LWIPOPTS_H__


	)

45 
	~"lwù›ts.h
"

46 
	~"lwù/debug.h
"

59 
	#SYS_LIGHTWEIGHT_PROT
 1

	)

65 
	#NO_SYS
 0

	)

78 
	#MEM_ALIGNMENT
 4

	)

84 
	#MEM_SIZE
 1073741824

	)

98 
	#MEMP_NUM_PBUF
 0

	)

104 
	#MEMP_NUM_RAW_PCB
 0

	)

111 
	#MEMP_NUM_UDP_PCB
 0

	)

117 
	#MEMP_NUM_TCP_PCB
 204800

	)

123 
	#MEMP_NUM_TCP_PCB_LISTEN
 4

	)

129 
	#MEMP_NUM_TCP_SEG
 10000

	)

135 
	#MEMP_NUM_REASSDATA
 1

	)

143 
	#MEMP_NUM_ARP_QUEUE
 2

	)

149 
	#MEMP_NUM_SYS_TIMEOUT
 3

	)

155 
	#MEMP_NUM_NETBUF
 0

	)

161 
	#MEMP_NUM_NETCONN
 204800

	)

168 
	#MEMP_NUM_TCPIP_MSG_API
 100

	)

175 
	#MEMP_NUM_TCPIP_MSG_INPKT
 100

	)

180 
	#PBUF_POOL_SIZE
 16000

	)

182 
	#PBUF_READ_DEPTH
 16

	)

192 
	#LWIP_ARP
 1

	)

204 
	#IP_FORWARD
 0

	)

211 
	#IP_OPTIONS_ALLOWED
 0

	)

218 
	#IP_REASSEMBLY
 0

	)

225 
	#IP_FRAG
 0

	)

232 
	#IP_REASS_MAXAGE
 3

	)

240 
	#IP_REASS_MAX_PBUFS
 30

	)

247 
	#IP_FRAG_USES_STATIC_BUF
 0

	)

252 
	#IP_DEFAULT_TTL
 255

	)

263 
	#LWIP_ICMP
 0

	)

273 
	#LWIP_RAW
 0

	)

283 
	#LWIP_DHCP
 0

	)

294 
	#LWIP_AUTOIP
 0

	)

305 
	#LWIP_SNMP
 0

	)

315 
	#LWIP_IGMP
 0

	)

326 
	#LWIP_DNS
 0

	)

336 
	#LWIP_UDP
 0

	)

346 
	#LWIP_TCP
 1

	)

348 
	#LWIP_LISTEN_BACKLOG
 0

	)

350 
	#TCP_WND
 14600

	)

352 
	#TCP_MSS
 1460

	)

354 
	#TCP_SND_BUF
 14600

	)

356 
	#TCP_OVERSIZE
 
TCP_MSS


	)

358 
	#TCP_SND_QUEUELEN
 0xFFFF

	)

360 
	#TCP_TMR_INTERVAL
 1

	)

372 
	#PBUF_LINK_HLEN
 16

	)

374 
	#TCP_MAX_PACKET_SIZE
 1536

	)

383 
	#PBUF_POOL_BUFSIZE
 
	`LWIP_MEM_ALIGN_SIZE
(
TCP_MSS
+40+
PBUF_LINK_HLEN
)

	)

393 
	#LWIP_HAVE_LOOPIF
 0

	)

404 
	#LWIP_NETCONN
 1

	)

414 
	#LWIP_SOCKET
 1

	)

424 
	#LWIP_STATS
 0

	)

433 
	#PPP_SUPPORT
 0

	)

435 
	#ETHARP_SUPPORT_STATIC_ENTRIES
 1

	)

437 
	#CHECKSUM_CHECK_IP
 0

	)

439 
	#CHECKSUM_CHECK_TCP
 0

	)

441 
	#CHECKSUM_GEN_IP
 0

	)

443 
	#CHECKSUM_GEN_TCP
 0

	)

445 
	#LWIP_CHECKSUM_ON_COPY
 1

	)

447 
	~<byãsw≠.h
>

449 
	#LWIP_PLATFORM_BYTESWAP
 1

	)

450 
	#LWIP_PLATFORM_HTONS
(
x
Ë
	`bsw≠_16
(x)

	)

451 
	#LWIP_PLATFORM_HTONL
(
x
Ë
	`bsw≠_32
(x)

	)

453 
	#LWIP_THREADS_TIME
 0

	)

455 
	#LWIP_STATS_DISPLAY
 0

	)

457 
	#LWIP_STATS_LARGE
 0

	)

461 
	#LWIP_TIMEVAL_PRIVATE
 0

	)

463 
	#LWIP_COMPAT_SOCKETS
 0

	)

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/lib/lwippools.h

1 #i‡
MEM_USE_POOLS


2 
LWIP_MALLOC_MEMPOOL_START


3 
	$LWIP_MALLOC_MEMPOOL
(130, 1544)

4 
LWIP_MALLOC_MEMPOOL_END


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/lib/unixlib.c

44 
	~"lwù/öô.h
"

45 
	~"lwù/sys.h
"

46 
	~"lwù/mem.h
"

47 
	~"lwù/memp.h
"

48 
	~"lwù/pbuf.h
"

49 
	~"lwù/t˝.h
"

50 
	~"lwù/t˝ù.h
"

51 
	~"lwù/√tif.h
"

52 
	~"lwù/°©s.h
"

53 
	~"lwù/sockës.h
"

55 
	~"√tif/ibvif.h
"

57 
√tif
 
	g√tif
;

60 
	$t˝ù_öô_d⁄e
(*
¨g
)

63 
sys_£m_t
 *
£m
;

64 
£m
 = 
¨g
;

78 
	`sys_£m_sig«l
(
£m
);

79 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/lwip_chksum.c

33 
	~"lwù/debug.h
"

35 
	~"lwù/¨ch.h
"

37 
	~"lwù/def.h
"

38 
	~"lwù/öë.h
"

50 
u16_t


51 
	$lwù_chksum
(*
d©≠å
, 
Àn
)

53 
u32_t
 
acc
;

55 
acc
 = 0; 
Àn
 > 1;Üen -= 2) {

56 
acc
 +*((
u16_t
 *)
d©≠å
)++;

60 i‡(
Àn
 == 1) {

61 
acc
 +
	`ht⁄s
((
u16_t
)((*(
u8_t
 *)
d©≠å
) & 0xff) << 8);

62 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("öë: chksum: odd byã %d\n", *(
u8_t
 *)
d©≠å
));

64 
acc
 = (acc >> 16) + (acc & 0xffffUL);

66 i‡(
acc
 & 0xffff0000 != 0) {

67 
acc
 = (acc >> 16) + (acc & 0xffffUL);

70  (
u16_t
)
acc
;

71 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/netif/fifo.c

6 
	~"√tif/fifo.h
"

7 
	~"lwù/debug.h
"

8 
	~"lwù/def.h
"

9 
	~"lwù/sys.h
"

10 
	~"lwù/¨ch.h
"

11 
	~<uni°d.h
>

13 #i‚de‡
TRUE


14 
	#TRUE
 1

	)

16 #i‚de‡
FALSE


17 
	#FALSE
 0

	)

21 
u8_t
 
	$fifoGë
(
fifo_t
 * 
fifo
)

23 
u8_t
 
c
;

25 
	`sys_£m_waô
(&
fifo
->
£m
);

27 i‡(
fifo
->
d©a¶Ÿ
 =fifo->
em±y¶Ÿ
)

29 
fifo
->
gëWaôög
 = 
TRUE
;

30 
	`sys_£m_sig«l
(&
fifo
->
£m
);

31 
	`sys_£m_waô
(&
fifo
->
gëSem
);

32 
	`sys_£m_waô
(&
fifo
->
£m
);

35 
c
 = 
fifo
->
d©a
[fifo->
d©a¶Ÿ
++];

36 
fifo
->
Àn
--;

38 i‡(
fifo
->
d©a¶Ÿ
 =
FIFOSIZE
)

40 
fifo
->
d©a¶Ÿ
 = 0;

42 
	`sys_£m_sig«l
(&
fifo
->
£m
);

43  
c
;

44 
	}
}

47 
s16_t
 
	$fifoGëN⁄Block
(
fifo_t
 * 
fifo
)

49 
u16_t
 
c
;

51 
	`sys_£m_waô
(&
fifo
->
£m
);

53 i‡(
fifo
->
d©a¶Ÿ
 =fifo->
em±y¶Ÿ
)

56 
c
 = -1;

60 
c
 = 
fifo
->
d©a
[fifo->
d©a¶Ÿ
++];

61 
fifo
->
Àn
--;

63 i‡(
fifo
->
d©a¶Ÿ
 =
FIFOSIZE
)

65 
fifo
->
d©a¶Ÿ
 = 0;

68 
	`sys_£m_sig«l
(&
fifo
->
£m
);

69  
c
;

70 
	}
}

73 
	$fifoPut
(
fifo_t
 * 
fifo
, 
fd
)

76 
˙t
=0;

78 
	`sys_£m_waô
(&
fifo
->
£m
 );

80 
	`LWIP_DEBUGF
–
SIO_FIFO_DEBUG
,("fif›ut:Üí%d d©%dÉm±%d --> ", 
fifo
->
Àn
, fifo->
d©a¶Ÿ
, fifo->
em±y¶Ÿ
 ) );

82 i‡–
fifo
->
em±y¶Ÿ
 < fifo->
d©a¶Ÿ
 )

84 
˙t
 = 
	`ªad
–
fd
, &
fifo
->
d©a
[fifo->
em±y¶Ÿ
], fifo->
d©a¶Ÿ
 - fifo->emptyslot );

88 
˙t
 = 
	`ªad
–
fd
, &
fifo
->
d©a
[fifo->
em±y¶Ÿ
], 
FIFOSIZE
-fifo->emptyslot );

90 
fifo
->
em±y¶Ÿ
 +
˙t
;

91 
fifo
->
Àn
 +
˙t
;

93 
	`LWIP_DEBUGF
–
SIO_FIFO_DEBUG
,("Àn%d d©%dÉm±%d\n", 
fifo
->
Àn
, fifo->
d©a¶Ÿ
, fifo->
em±y¶Ÿ
 ) );

95 i‡–
fifo
->
Àn
 > 
FIFOSIZE
 )

97 
	`¥ötf
–"ERROR: fifÿovîru¿dëe˘edÜí=%d, flushög\n", 
fifo
->
Àn
 );

98 
fifo
->
d©a¶Ÿ
 = 0;

99 
fifo
->
em±y¶Ÿ
 = 0;

100 
fifo
->
Àn
 = 0;

103 i‡–
fifo
->
em±y¶Ÿ
 =
FIFOSIZE
 )

105 
fifo
->
em±y¶Ÿ
 = 0;

106 
	`LWIP_DEBUGF
–
SIO_FIFO_DEBUG
, ("(WRAP) ") );

108 
	`sys_£m_sig«l
(&
fifo
->
£m
 );

109 
	`fifoPut
–
fifo
, 
fd
 );

112 i‡–
fifo
->
gëWaôög
 )

114 
fifo
->
gëWaôög
 = 
FALSE
;

115 
	`sys_£m_sig«l
(&
fifo
->
gëSem
 );

118 
	`sys_£m_sig«l
(&
fifo
->
£m
 );

120 
	}
}

123 
	$fifoInô
(
fifo_t
 * 
fifo
)

125 
fifo
->
d©a¶Ÿ
 = 0;

126 
fifo
->
em±y¶Ÿ
 = 0;

127 
fifo
->
Àn
 = 0;

128 if(
	`sys_£m_√w
(&
fifo
->
£m
, 1Ë!
ERR_OK
) {

129 
	`LWIP_ASSERT
("FailedÅo create semaphore", 0);

131 if(
	`sys_£m_√w
(&
fifo
->
gëSem
, 0Ë!
ERR_OK
) {

132 
	`LWIP_ASSERT
("FailedÅo create semaphore", 0);

134 
fifo
->
gëWaôög
 = 
FALSE
;

135 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/netif/ibvif.c

5 
	~"lwù/°©s.h
"

6 
	~"√tif/ibvif.h
"

7 
	~<°dlib.h
>

8 
	~<°rög.h
>

9 
	~<uni°d.h
>

10 
	~<sys/ty≥s.h
>

11 
	~<sys/uio.h
>

12 
	~"lwù/debug.h
"

13 
	~"lwù/›t.h
"

14 
	~"lwù/def.h
"

15 
	~"lwù/ù.h
"

16 
	~"lwù/mem.h
"

17 
	~"lwù/pbuf.h
"

18 
	~"lwù/sys.h
"

19 
	~"lwù/t˝ù.h
"

21 
	~"√tif/ëh¨p.h
"

22 
	~<öföib™d/vîbs.h
>

23 
	~<sys/ùc.h
>

24 
	~<sys/shm.h
>

25 
	~<byãsw≠.h
>

26 
	~<time.h
>

27 
	~<sys/time.h
>

28 
	~"lwù/ßm∂e_åa˚poöt.h
"

30 #i‡
deföed
(
LWIP_DEBUG
Ë&& deföed(
LWIP_TCPDUMP
)

31 
	~"√tif/t˝dump.h
"

34 
	#IFNAME0
 'i'

	)

35 
	#IFNAME1
 'b'

	)

36 
	#IP_ETHER_TYPE
 (0x800)

	)

37 
	#LINK_FAILURE
 (4)

	)

39 
ibvif
 *
	gibvif
[
NUM_CPU
];

42 
	sÊow_ruÀs
 {

43 
ibv_exp_Êow_©å
 
	m©å_öfo
;

44 
ibv_exp_Êow_•ec_ëh
 
	m•ec_öfo
;

45 
ibv_exp_Êow_•ec_ùv4
 
	mù_•ec_öfo
;

46 
ibv_exp_Êow_•ec_t˝_udp
 
	mt˝_•ec_öfo
;

47 } 
	t__©åibuã__
((
	t∑cked
)Ë
	t‰_©å
;

49 
ibv_©èch_devi˚
 (
√tif
 *netif);

51 
uöt8_t
 
	$£t_lök_œyî
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
ib_p‹t
) {

52 
ibv_p‹t_©å
 
p‹t_©å
;

54 i‡(
	`ibv_quîy_p‹t
(
c⁄ãxt
,
ib_p‹t
,&
p‹t_©å
)) {

55 
	`≥º‹
("UnableÅo queryÖortáttributes\n");

56  
LINK_FAILURE
;

58 i‡(
p‹t_©å
.
°©e
 !
IBV_PORT_ACTIVE
) {

59 
	`≥º‹
("PortÇumber invalid state \n");

60  
LINK_FAILURE
;

62 i‡(
p‹t_©å
.
lök_œyî
 !
IBV_LINK_LAYER_ETHERNET
) {

63 
	`≥º‹
("U«bÀÅÿdëîmöêlökÜayî \n");  
LINK_FAILURE
;

65  
p‹t_©å
.
lök_œyî
;

66 
	}
}

68 
	#HUGE_PAGE_SIZE
 (2 * 1024 * 1024)

	)

69 
	#ALIGN_TO_PAGE_SIZE
(
x
) \

70 (((
x
Ë+ 
HUGE_PAGE_SIZE
 - 1Ë/ HUGE_PAGE_SIZE * HUGE_PAGE_SIZE)

	)

72 
	$ibv_buf„r
(
ibvif
 *
m
) {

74 
size_t
 
sz_byãs
 = 
	`ALIGN_TO_PAGE_SIZE
(
m
->
buf_size
 + 
HUGE_PAGE_SIZE
);

76 
m
->
ªcv_shmid
 = 
	`shmgë
(
IPC_PRIVATE
, 
sz_byãs
,

77 
SHM_HUGETLB
 | 
IPC_CREAT
 | 
SHM_R
 | 
SHM_W
);

79 i‡(
m
->
ªcv_shmid
 < 0) {

80 
	`≥º‹
("shmget failed !!!");

84 
m
->
£nd_buf
 = (*)
	`shm©
(m->
ªcv_shmid
, 
NULL
, 0);

85 i‡(
m
->
£nd_buf
 == (*)-1) {

86 
	`shm˘l
(
m
->
ªcv_shmid
, 
IPC_RMID
, 
NULL
);

87 
m
->
ªcv_shmid
 = -1;

88 
m
->
£nd_buf
 = 
NULL
;

89 
	`≥º‹
("shmat failed !!!");

93 i‡(
	`shm˘l
(
m
->
ªcv_shmid
, 
IPC_RMID
, 
NULL
)) {

94 
	`≥º‹
("shared memory markingÅo be destroyed - FAILED");

97 
m
->
buf_size
 = 
sz_byãs
;

99 
	}
}

101 
	$öföi_po°_ªcv
(
ibvif
 *
m
)

103 
ibv_sge
 
li°
;

104 
ibv_ªcv_wr
 
wr
;

105 
i
;

106 
ibv_ªcv_wr
 *
bad_wr_ªcv
;

108 
	`mem£t
(&
li°
, 0, (
ibv_sge
));

109 
li°
.
addr
 = (
uöçå_t
Ë
m
->
ªcv_buf
;

110 
li°
.
Àngth
 = 
m
->
£nd_size
;

111 
li°
.
lkey
 = 
m
->
ªcv_mr
->lkey;

113 
	`mem£t
(&
wr
, 0, (
ibv_ªcv_wr
));

114 
wr
.
wr_id
 = 
li°
.
addr
;

115 
wr
.
sg_li°
 = &
li°
;

116 
wr
.
num_sge
 = 1;

117 
wr
.
√xt
 = 
NULL
;

119 
i
 = 0; i < 
m
->
rx_dïth
 ; ++i) {

120 
bad_wr_ªcv
 = 
NULL
;

121 
wr
.
wr_id
 = 
li°
.
addr
;

122 
	`ibv_po°_ªcv
(
m
->
qp
, &
wr
, &
bad_wr_ªcv
);

123 i‡(
i
+1 < 
m
->
rx_dïth
)

124 
li°
.
addr
 +
m
->
£nd_size
;

126 
	}
}

128 
	$öföi_po°_ªcv_buf
(
t˝ù_thªad
 *
t
, 
pbuf
 *
p
)

130 
ibv_sge
 
li°
;

131 
ibv_ªcv_wr
 
wr
;

132 
ibv_ªcv_wr
 *
bad_wr_ªcv
;

133 
ibvif
 *
m
;

135 
m
 = (
ibvif
 *)
t
->
√tif
.
°©e
;

137 
	`mem£t
(&
li°
, 0, (
ibv_sge
));

138 
li°
.
addr
 = (
uöçå_t
Ë
p
->
a˘uÆ_∑ylﬂd
;

139 
li°
.
Àngth
 = 
m
->
£nd_size
;

140 
li°
.
lkey
 = 
m
->
ªcv_mr
->lkey;

142 
	`mem£t
(&
wr
, 0, (
ibv_ªcv_wr
));

143 
wr
.
wr_id
 = 
li°
.
addr
;

144 
wr
.
sg_li°
 = &
li°
;

145 
wr
.
num_sge
 = 1;

146 
wr
.
√xt
 = 
NULL
;

148 
	`ibv_po°_ªcv
(
m
->
qp
, &
wr
, &
bad_wr_ªcv
);

149 
	}
}

151 
	$öföi_po°_£nd
(
ibvif
 *
m
, *
∑ylﬂd
, 
Àngth
)

153 
ibv_sge
 
li°
;

154 
ibv_exp_£nd_wr
 
wr
;

155 
ibv_exp_£nd_wr
 *
bad_wr
 = 
NULL
;

157 
	`mem£t
(&
li°
, 0, (
ibv_sge
));

158 
li°
.
addr
 = (
uöçå_t
Ë
∑ylﬂd
;

159 
li°
.
Àngth
 =Üength;

160 
li°
.
lkey
 = 
m
->
£nd_mr
->lkey;

162 
	`mem£t
(&
wr
, 0, (
ibv_£nd_wr
));

163 
wr
.
wr_id
 = 
li°
.
addr
;

164 
wr
.
sg_li°
 = &
li°
;

165 
wr
.
num_sge
 = 1;

166 
wr
.
exp_›code
 = 
IBV_EXP_WR_SEND
;

167 
wr
.
exp_£nd_Êags
 = 
IBV_EXP_SEND_SIGNALED
 | 
IBV_EXP_SEND_IP_CSUM
;

168 
wr
.
√xt
 = 
NULL
;

170  
	`ibv_exp_po°_£nd
(
m
->
qp
, &
wr
, &
bad_wr
);

171 
	}
}

173 
îr_t
 
ibvif_thªad
(
√tif
 *netif);

177 
	$low_Àvñ_öô
(
√tif
 *netif)

179 
ibvif
 *ibvif;

180 
num_of_devi˚
, 
Êags
 = 
IBV_ACCESS_LOCAL_WRITE
;

181 
ibv_qp_öô_©å
 
©å
;

182 
ibv_qp_©å
 
qp_©å
;

183 
uöt8_t
 
p‹t_num
 = 1;

184 
qp_Êags
;

185 
ibv_devi˚
 **
ib_dev_li°
;

186 
t˝ù_thªad
 *
thªad
;

187 
ibv_exp_cq_öô_©å
 
cq_©å
;

189 
ibvif
 = (ibvi‡*)
√tif
->
°©e
;

192 
ibvif
->
ëhaddr
->
addr
[0] = 0x00;

193 
ibvif
->
ëhaddr
->
addr
[1] = 0x02;

194 
ibvif
->
ëhaddr
->
addr
[2] = 0xc9;

195 
ibvif
->
ëhaddr
->
addr
[3] = 0xa4;

196 
ibvif
->
ëhaddr
->
addr
[4] = 0x58;

197 
ibvif
->
ëhaddr
->
addr
[5] = 0xc1;

199 
ibvif
->
buf_size
 = 
PBUF_POOL_SIZE
 * 
TCP_MAX_PACKET_SIZE
;

203 
ib_dev_li°
 = 
	`ibv_gë_devi˚_li°
(&
num_of_devi˚
);

204 i‡(
num_of_devi˚
 <0 || !
ib_dev_li°
 || !ib_dev_list[0]) {

205 
	`≥º‹
("IBVÇo device found\n");

206 
	`exô
(1);

209 
ibvif
->
c⁄ãxt
 = 
	`ibv_›í_devi˚
(
ib_dev_li°
[1]);

210 i‡(!
ibvif
->
c⁄ãxt
) {

211 
	`≥º‹
("IBV can't open device\n");

212 
	`exô
(1);

215 
	`ibv_‰ì_devi˚_li°
(
ib_dev_li°
);

217 i‡(
	`£t_lök_œyî
(
ibvif
->
c⁄ãxt
, 1Ë=
LINK_FAILURE
) {

218 
	`≥º‹
("IBV can'tállocate PD\n");

219 
	`exô
(1);

222 
ibvif
->
pd
 = 
	`ibv_Æloc_pd
(ibvif->
c⁄ãxt
);

223 i‡(!
ibvif
->
pd
) {

224 
	`≥º‹
("IBV can'tállocate PD\n");

225 
	`exô
(1);

233 
ibvif
->
ªcv_buf
 = 
√tif
->
¥Ÿ_thªad
->
pbuf_rx_h™dÀ
.
buf
;

234 
ibvif
->
£nd_buf
 = 
√tif
->
¥Ÿ_thªad
->
pbuf_tx_h™dÀ
.
buf
;

235 
ibvif
->
£nd_size
 = 
TCP_MAX_PACKET_SIZE
;

236 
ibvif
->
rx_dïth
 = 
PBUF_POOL_SIZE
;

237 
ibvif
->
tx_dïth
 = 
PBUF_POOL_SIZE
;

239 
ibvif
->
£nd_mr
 = 
	`ibv_ªg_mr
(ibvif->
pd
, ibvif->
£nd_buf
, ibvif->
buf_size
, 
Êags
);

240 i‡(!
ibvif
->
£nd_mr
) {

241 
	`≥º‹
("IBVÉrrorÑeg send mr\n");

242 
	`exô
(1);

245 
ibvif
->
ªcv_mr
 = 
	`ibv_ªg_mr
(ibvif->
pd
, ibvif->
ªcv_buf
, ibvif->
buf_size
, 
Êags
);

246 i‡(!
ibvif
->
ªcv_mr
) {

247 
	`≥º‹
("IBVÉrrorÑegÑecv mr\n");

248 
	`exô
(1);

251 
ibvif
->
£nd_cq
 = 
	`ibv_¸óã_cq
(ibvif->
c⁄ãxt
, ibvif->
tx_dïth
, 
NULL
, NULL, 0);

252 i‡(!
ibvif
->
£nd_cq
) {

253 
	`≥º‹
("IBV can't create send cq\n");

254 
	`exô
(1);

257 
cq_©å
.
Êags
 = 
IBV_EXP_CQ_TIMESTAMP
;

258 
cq_©å
.
comp_mask
 = 
IBV_EXP_CQ_INIT_ATTR_FLAGS
;

259 
ibvif
->
ªcv_cq
 = 
	`ibv_exp_¸óã_cq
(ibvif->
c⁄ãxt
, ibvif->
rx_dïth
, 
NULL
, NULL, 0, &
cq_©å
);

260 i‡(!
ibvif
->
ªcv_cq
) {

261 
	`≥º‹
("IBV can't createÑecv cq\n");

262 
	`exô
(1);

265 
	`mem£t
(&
©å
, 0, (
ibv_qp_öô_©å
));

266 
©å
.
£nd_cq
 = 
ibvif
->send_cq;

267 
©å
.
ªcv_cq
 = 
ibvif
->recv_cq;

268 
©å
.
ˇp
.
max_£nd_wr
 = 
ibvif
->
tx_dïth
;

269 
©å
.
ˇp
.
max_£nd_sge
 = 1;

270 
©å
.
ˇp
.
max_ªcv_wr
 = 
ibvif
->
rx_dïth
;

271 
©å
.
ˇp
.
max_ªcv_sge
 = 1;

272 
©å
.
qp_ty≥
 = 
IBV_QPT_RAW_PACKET
;

274 
ibvif
->
qp
 = 
	`ibv_¸óã_qp
(ibvif->
pd
, &
©å
);

275 i‡(!
ibvif
->
qp
) {

276 
	`≥º‹
("IBV can't create QP\n");

277 
	`exô
(1);

280 
qp_Êags
 = 
IBV_QP_STATE
 | 
IBV_QP_PORT
;

281 
	`mem£t
(&
qp_©å
, 0, (
ibv_qp_©å
));

282 
qp_©å
.
qp_°©e
 = 
IBV_QPS_INIT
;

283 
qp_©å
.
pkey_ödex
 = 0;

284 
qp_©å
.
p‹t_num
 =Öort_num;

285 
qp_©å
.
qp_ac˚ss_Êags
 = 0;

287 i‡(
	`ibv_modify_qp
(
ibvif
->
qp
, &
qp_©å
, 
qp_Êags
)) {

288 
	`≥º‹
("IBV can't set qpÅo init\n");

289 
	`exô
(1);

291 
	`ibv_©èch_devi˚
(
√tif
);

292 
	}
}

294 
	$ibv_©èch_devi˚
 (
√tif
 *netif)

296 
ibvif
 *ibvif;

297 
uöt8_t
 
mac
[6] = {0x00, 0x02, 0xc9, 0xa4, 0x58, 0xc1};

298 
ibv_qp_©å
 
qp_©å
;

299 
qp_Êags
;

300 
uöt8_t
 
p‹t_num
 = 1;

301 
‰_©å
 
‰
;

302 
°¨t
, 
íd
, 
ödex
, 
i
;

304 
ibvif
 = (ibvi‡*)
√tif
->
°©e
;

307 
	`mem£t
(&
‰
.
©å_öfo
, 0 , (
ibv_exp_Êow_©å
));

308 
‰
.
©å_öfo
.
ty≥
 = 
IBV_EXP_FLOW_ATTR_NORMAL
;

309 
‰
.
©å_öfo
.
size
 = (
Êow_ruÀs
);

310 
‰
.
©å_öfo
.
¥i‹ôy
 = 0;

311 
‰
.
©å_öfo
.
num_of_•ecs
 = 3;

312 
‰
.
©å_öfo
.
p‹t
 = 
p‹t_num
;

313 
‰
.
©å_öfo
.
Êags
 = 0;

315 
	`mem£t
(&
‰
.
•ec_öfo
, 0 , (
ibv_exp_Êow_•ec_ëh
));

316 
‰
.
•ec_öfo
.
ty≥
 = 
IBV_EXP_FLOW_SPEC_ETH
;

317 
‰
.
•ec_öfo
.
size
 = (
ibv_exp_Êow_•ec_ëh
);

318 
‰
.
•ec_öfo
.
vÆ
.
ëhî_ty≥
 = 
IP_ETHER_TYPE
;

319 
‰
.
•ec_öfo
.
mask
.
ëhî_ty≥
 = 0xffff;

320 
	`mem˝y
(
‰
.
•ec_öfo
.
vÆ
.
d°_mac
, 
mac
, (‰.•ec_öfo.
mask
.dst_mac));

321 
	`mem£t
(
‰
.
•ec_öfo
.
mask
.
d°_mac
, 0xff, (fr.spec_info.mask.dst_mac));

323 
	`mem£t
(&
‰
.
ù_•ec_öfo
, 0 , (
ibv_exp_Êow_•ec_ùv4
));

324 
‰
.
ù_•ec_öfo
.
ty≥
 = 
IBV_EXP_FLOW_SPEC_IPV4
;

325 
‰
.
ù_•ec_öfo
.
size
 = (
ibv_exp_Êow_•ec_ùv4
);

326 i‡(
√tif
->
¥Ÿ_thªad
->
˝u
 == 6) {

327 
‰
.
ù_•ec_öfo
.
vÆ
.
d°_ù
 = 
	`öë_addr
("10.0.0.3");

328 } i‡(
√tif
->
¥Ÿ_thªad
->
˝u
 == 7) {

329 
‰
.
ù_•ec_öfo
.
vÆ
.
d°_ù
 = 
	`öë_addr
("10.0.0.5");

330 } i‡(
√tif
->
¥Ÿ_thªad
->
˝u
 == 8) {

331 
‰
.
ù_•ec_öfo
.
vÆ
.
d°_ù
 = 
	`öë_addr
("10.0.0.6");

332 } i‡(
√tif
->
¥Ÿ_thªad
->
˝u
 == 9) {

333 
‰
.
ù_•ec_öfo
.
vÆ
.
d°_ù
 = 
	`öë_addr
("10.0.0.7");

334 } i‡(
√tif
->
¥Ÿ_thªad
->
˝u
 == 10) {

335 
‰
.
ù_•ec_öfo
.
vÆ
.
d°_ù
 = 
	`öë_addr
("10.0.0.8");

336 } i‡(
√tif
->
¥Ÿ_thªad
->
˝u
 == 11) {

337 
‰
.
ù_•ec_öfo
.
vÆ
.
d°_ù
 = 
	`öë_addr
("10.0.0.9");

340 
‰
.
ù_•ec_öfo
.
mask
.
d°_ù
 = 0xffffffff;

342 
	`mem£t
(&
‰
.
t˝_•ec_öfo
, 0 , (
ibv_exp_Êow_•ec_t˝_udp
));

343 
‰
.
t˝_•ec_öfo
.
ty≥
 = 
IBV_EXP_FLOW_SPEC_TCP
;

344 
‰
.
t˝_•ec_öfo
.
size
 = (
ibv_exp_Êow_•ec_t˝_udp
);

345 
‰
.
t˝_•ec_öfo
.
vÆ
.
§c_p‹t
 = 
	`bsw≠_16
(90);

346 
‰
.
t˝_•ec_öfo
.
mask
.
§c_p‹t
 = 0xffff;

348 
ibvif
->
Êow
 = 
	`ibv_exp_¸óã_Êow
(ibvif->
qp
, &
‰
.
©å_öfo
);

349 i‡(!
ibvif
->
Êow
) {

350 
	`≥º‹
("IBV can't create flow\n");

351 
	`exô
(1);

372 
qp_Êags
 = 
IBV_QP_STATE
 | 
IBV_QP_AV
;

374 
	`mem£t
(&
qp_©å
, 0, (
ibv_qp_©å
));

375 
qp_©å
.
qp_°©e
 = 
IBV_QPS_RTR
;

376 
qp_©å
.
ah_©å
.
§c_∑th_bôs
 = 0;

377 
qp_©å
.
ah_©å
.
p‹t_num
 = 1;

378 
qp_©å
.
ah_©å
.
is_globÆ
 = 0;

379 
qp_©å
.
ah_©å
.
¶
 = 1;

380 i‡(
	`ibv_modify_qp
(
ibvif
->
qp
, &
qp_©å
, 
qp_Êags
)) {

381 
	`≥º‹
("IBV can't set stateÅo RTR\n");

382 
	`exô
(1);

385 
qp_Êags
 = 
IBV_QP_STATE
;

386 
	`mem£t
(&
qp_©å
, 0, (
ibv_qp_©å
));

387 
qp_©å
.
qp_°©e
 = 
IBV_QPS_RTS
;

388 
qp_©å
.
ah_©å
.
§c_∑th_bôs
 = 0;

389 
qp_©å
.
ah_©å
.
p‹t_num
 = 1;

390 i‡(
	`ibv_modify_qp
(
ibvif
->
qp
, &
qp_©å
, 
qp_Êags
)) {

391 
	`≥º‹
("IBV can't set stateÅo RTS\n");

392 
	`exô
(1);

395 
	`öföi_po°_ªcv
(
ibvif
);

397 
√tif
->
Êags
 = 
NETIF_FLAG_BROADCAST
 | 
NETIF_FLAG_ETHARP
 | 
NETIF_FLAG_LINK_UP
 | 
NETIF_FLAG_UP
;

399 
	}
}

411 
îr_t


412 
	$low_Àvñ_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
)

414 
ibvif
 *ibvif;

415 
pbuf
 *
q
;

416 *
buÂå
;

418 
ibvif
 = 
√tif
->
°©e
;

421 i‡(
	`öföi_po°_£nd
(
ibvif
, 
p
->
∑ylﬂd
,Ö->
tŸ_Àn
)) {

422 
	`≥º‹
("tapif: write 1");

427  
ERR_OK
;

428 
	}
}

445 
	$low_Àvñ_öput
(
√tif
 *netif)

447 
pbuf
 *
p
;

448 
u16_t
 
Àn
;

449 *
buÂå
;

450 
ibv_exp_wc
 
wc
[
PBUF_READ_DEPTH
];

451 
u16_t
 
√
, 
i
;

452 
ibvif
 *ibvif;

453 
time•ec
 
°¨t
;

455 
ibvif
 = (ibvi‡*)
√tif
->
°©e
;

459 
√
 = 
	`ibv_exp_pﬁl_cq
(
ibvif
->
ªcv_cq
, 
PBUF_READ_DEPTH
, 
wc
, (
ibv_exp_wc
));

461 i‡(
√
 == 0)

466 
i
=0; i<
√
; i++) {

467 
Àn
 = 
wc
[
i
].
byã_Àn
;

470 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
Àn
, 
PBUF_POOL_RX
, 
√tif
->
¥Ÿ_thªad
);

472 i‡(
p
 !
NULL
) {

475 
buÂå
 = (*Ë
wc
[
i
].
wr_id
;

476 
p
->
a˘uÆ_∑ylﬂd
 =Ö->
∑ylﬂd
 = 
buÂå
;

477 
p
->
cu°om_‰ì_fun˘i⁄
 = 
öföi_po°_ªcv_buf
;

481 i‡(
√tif
->
	`öput
(
p
,ÇëifË!
ERR_OK
) {

482 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("ethernetif_input: IP inputÉrror\n"));

483 
	`pbuf_‰ì
(
p
, 
√tif
->
¥Ÿ_thªad
);

484 
p
 = 
NULL
;

487 
	`≥º‹
("CouldÇotállocateÖbufs\n");

490 
	}
}

492 
îr_t


493 
	$ibvif_thªad
(
√tif
 *netif)

495 
ibvif
 *ibvif;

496 
√
, 
i
;

497 
ibv_wc
 
wc
[
PBUF_READ_DEPTH
];

499 
ibvif
 = (ibvi‡*)
√tif
->
°©e
;

501 
√tif
->
¥Ÿ_thªad
->
öô_d⁄e
 = 1;

503 
√
 = 
	`ibv_pﬁl_cq
(
ibvif
->
£nd_cq
, 
PBUF_READ_DEPTH
, 
wc
);

505 
i
=0; i<
√
; i++) {

506 i‡(
wc
[
i
].
°©us
 !
IBV_WC_SUCCESS
) {

507 
	`≥º‹
("tapif: write 2");

512 
	`low_Àvñ_öput
(
√tif
);

513 
	}
}

524 
îr_t


525 
	$ibvif_öô
(
√tif
 *netif)

527 
ibvif
 *
ibvif_ãmp
;

529 
ibvif_ãmp
 = (
ibvif
 *)
	`mÆloc
((ibvif));

530 i‡(!
ibvif_ãmp
) {

531  
ERR_MEM
;

533 
	`mem£t
(
ibvif_ãmp
, 0, (
ibvif
));

535 
ibvif_ãmp
->
thªad
 = 
√tif
->
¥Ÿ_thªad
;

536 
√tif
->
°©e
 = 
ibvif_ãmp
;

537 
√tif
->
«me
[0] = 
IFNAME0
;

538 
√tif
->
«me
[1] = 
IFNAME1
;

539 
√tif
->
ouçut
 = 
ëh¨p_ouçut
;

540 
√tif
->
lökouçut
 = 
low_Àvñ_ouçut
;

541 
√tif
->
lököput
 = 
ibvif_thªad
;

542 
√tif
->
mtu
 = 1500;

544 
√tif
->
hwaddr_Àn
 = 6;

546 
ibvif_ãmp
->
ëhaddr
 = (
ëh_addr
 *)&(
√tif
->
hwaddr
[0]);

548 
√tif
->
Êags
 = 
NETIF_FLAG_BROADCAST
 | 
NETIF_FLAG_ETHARP
 | 
NETIF_FLAG_LINK_UP
 | 
NETIF_FLAG_UP
;

550 
	`low_Àvñ_öô
(
√tif
);

552  
ERR_OK
;

553 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/netif/list.c

35 
	~<°dlib.h
>

36 
	~<√tif/li°.h
>

40 
li°
 *

41 
	$li°_√w
(
size
)

43 
li°
 *list;

44 
li°
 = (li° *)
	`mÆloc
((list));

45 
li°
->
fú°
 =Üi°->
œ°
 = 
NULL
;

46 
li°
->
size
 = size;

47 
li°
->
ñems
 = 0;

48  
li°
;

49 
	}
}

52 
	$li°_push
(
li°
 *li°, *
d©a
)

54 
ñem
 *elem;

56 i‡(
li°
->
ñems
 <Üi°->
size
) {

57 
ñem
 = (ñem *)
	`mÆloc
((elem));

58 
ñem
->
d©a
 = data;

59 
ñem
->
√xt
 = 
NULL
;

60 i‡(
li°
->
œ°
 !
NULL
) {

61 
li°
->
œ°
->
√xt
 = 
ñem
;

63 
li°
->
œ°
 = 
ñem
;

64 i‡(
li°
->
fú°
 =
NULL
) {

65 
li°
->
fú°
 = 
ñem
;

67 
li°
->
ñems
++;

71 
	}
}

74 
	$li°_p›
(
li°
 *list)

76 
ñem
 *elem;

77 *
d©a
;

79 i‡(
li°
->
ñems
 > 0) {

80 
ñem
 = 
li°
->
fú°
;

81 i‡(
ñem
 =
li°
->
œ°
) {

82 
li°
->
œ°
 = 
ñem
->
√xt
;

84 
li°
->
fú°
 = 
ñem
->
√xt
;

86 
li°
->
ñems
--;

88 
d©a
 = 
ñem
->data;

89 
	`‰ì
(
ñem
);

91  
d©a
;

93  
NULL
;

94 
	}
}

97 
	$li°_fú°
(
li°
 *list)

99  
li°
->
fú°
;

100 
	}
}

103 
	$li°_ñems
(
li°
 *list)

105  
li°
->
ñems
;

106 
	}
}

109 
	$li°_dñëe
(
li°
 *list)

111 
	`li°_p›
(
li°
Ë!
NULL
);

112 
	`‰ì
(
li°
);

113 
	}
}

116 
	$li°_ªmove
(
li°
 *li°, *
ñem
)

118 
ñem
 *
e
, *
p
;

120 
p
 = 
NULL
;

121 
e
 = 
li°
->
fú°
;É !
NULL
;É =É->
√xt
) {

122 i‡(
e
->
d©a
 =
ñem
) {

123 i‡(
p
 !
NULL
) {

124 
p
->
√xt
 = 
e
->next;

126 
li°
->
fú°
 = 
e
->
√xt
;

128 i‡(
li°
->
œ°
 =
e
) {

129 
li°
->
œ°
 = 
p
;

130 i‡(
p
 !
NULL
) {

131 
p
->
√xt
 = 
NULL
;

134 
	`‰ì
(
e
);

135 
li°
->
ñems
--;

138 
p
 = 
e
;

141 
	}
}

144 
li°_m≠
(
li°
 *li°, (* 
func
)(*
¨g
))

146 
ñem
 *
e
;

148 
e
 = 
li°
->
fú°
;É !
NULL
;É =É->
√xt
) {

149 
	`func
(
e
->
d©a
);

151 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/netif/tcpdump.c

33 
	~<°dio.h
>

35 
	~"√tif/t˝dump.h
"

36 
	~"lwù/ù.h
"

37 
	~"lwù/t˝_im∂.h
"

38 
	~"lwù/öë.h
"

39 
	~"lwù/öë_chksum.h
"

41 #i‚de‡
TCPDUMP_DEBUG


42 
	#TCPDUMP_DEBUG
 
LWIP_DBG_OFF


	)

45 
FILE
 *
	gfûe
 = 
NULL
;

49 
	$t˝dump_öô
()

51 
	#TCPDUMP_FNAME
 "/tmp/t˝dump"

	)

52 
fûe
 = 
	`f›í
(
TCPDUMP_FNAME
, "w");

53 i‡(
fûe
 =
NULL
) {

54 
	`≥º‹
("t˝dump_öô: c™nŸ o≥¿\""
TCPDUMP_FNAME
"\" for writing");

56 
	`LWIP_DEBUGF
(
TCPDUMP_DEBUG
, ("t˝dump: fûê%s\n", 
TCPDUMP_FNAME
));

57 
	}
}

60 
	$t˝dump
(
pbuf
 *
p
)

62 
ù_hdr
 *
ùhdr
;

63 
t˝_hdr
 *
t˝hdr
;

64 #i‡
LWIP_UDP


65 
udp_hdr
 *
udphdr
;

67 
Êags
[5];

68 
i
;

69 
Àn
;

70 
off£t
;

72 i‡(
fûe
 =
NULL
) {

75 #ifde‡
IPv4


76 
ùhdr
 = (
ù_hdr
 *)
p
->
∑ylﬂd
;

77 
	`IPH_PROTO
(
ùhdr
)) {

78 #i‡
LWIP_TCP


79 
IP_PROTO_TCP
:

80 
t˝hdr
 = (
t˝_hdr
 *)((*)
ùhdr
 + 
IP_HLEN
);

82 
	`pbuf_hódî
(
p
, -
IP_HLEN
);

83 i‡(
	`öë_chksum_p£udo
(
p
, (
ù_addr_t
 *)&(
ùhdr
->
§c
),

84 (
ù_addr_t
 *)&(
ùhdr
->
de°
),

85 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
) != 0) {

86 
	`LWIP_DEBUGF
(
TCPDUMP_DEBUG
, ("tcpdump: IP checksum failed!\n"));

92 
	`Ârötf
(
fûe
, "!chksum ");

95 
i
 = 0;

96 i‡(
	`TCPH_FLAGS
(
t˝hdr
Ë& 
TCP_SYN
) {

97 
Êags
[
i
++] = 'S';

99 i‡(
	`TCPH_FLAGS
(
t˝hdr
Ë& 
TCP_PSH
) {

100 
Êags
[
i
++] = 'P';

102 i‡(
	`TCPH_FLAGS
(
t˝hdr
Ë& 
TCP_FIN
) {

103 
Êags
[
i
++] = 'F';

105 i‡(
	`TCPH_FLAGS
(
t˝hdr
Ë& 
TCP_RST
) {

106 
Êags
[
i
++] = 'R';

108 i‡(
i
 == 0) {

109 
Êags
[
i
++] = '.';

111 
Êags
[
i
++] = 0;

115 
	`Ârötf
(
fûe
, "%d.%d.%d.%d.%u > %d.%d.%d.%d.%u: ",

116 ()(
	`¡ohl
(
ùhdr
->
§c
.
addr
) >> 24) & 0xff,

117 ()(
	`¡ohl
(
ùhdr
->
§c
.
addr
) >> 16) & 0xff,

118 ()(
	`¡ohl
(
ùhdr
->
§c
.
addr
) >> 8) & 0xff,

119 ()(
	`¡ohl
(
ùhdr
->
§c
.
addr
) >> 0) & 0xff,

120 
	`¡ohs
(
t˝hdr
->
§c
),

121 ()(
	`¡ohl
(
ùhdr
->
de°
.
addr
) >> 24) & 0xff,

122 ()(
	`¡ohl
(
ùhdr
->
de°
.
addr
) >> 16) & 0xff,

123 ()(
	`¡ohl
(
ùhdr
->
de°
.
addr
) >> 8) & 0xff,

124 ()(
	`¡ohl
(
ùhdr
->
de°
.
addr
) >> 0) & 0xff,

125 
	`¡ohs
(
t˝hdr
->
de°
));

126 
off£t
 = 
	`TCPH_OFFSET
(
t˝hdr
) >> 4;

128 
Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
ùhdr
)Ë- 
off£t
 * 4 - 
IP_HLEN
;

129 i‡(
Àn
 !0 || 
Êags
[0] != '.') {

130 
	`Ârötf
(
fûe
, "%s %u:%u(%u) ",

131 
Êags
,

132 
	`¡ohl
(
t˝hdr
->
£qno
),

133 
	`¡ohl
(
t˝hdr
->
£qno
Ë+ 
Àn
,

134 
Àn
);

136 i‡(
	`TCPH_FLAGS
(
t˝hdr
Ë& 
TCP_ACK
) {

137 
	`Ârötf
(
fûe
, "ack %u ",

138 
	`¡ohl
(
t˝hdr
->
ackno
));

140 
	`Ârötf
(
fûe
, "wnd %u\n",

141 
	`¡ohs
(
t˝hdr
->
wnd
));

143 
	`fÊush
(
fûe
);

145 
	`pbuf_hódî
(
p
, 
IP_HLEN
);

149 #i‡
LWIP_UDP


150 
IP_PROTO_UDP
:

151 
udphdr
 = (
udp_hdr
 *)((*)
ùhdr
 + 
IP_HLEN
);

153 
	`pbuf_hódî
(
p
, -
IP_HLEN
);

154 i‡(
	`öë_chksum_p£udo
(
p
, (
ù_addr_t
 *)&(
ùhdr
->
§c
),

155 (
ù_addr_t
 *)&(
ùhdr
->
de°
),

156 
IP_PROTO_UDP
, 
p
->
tŸ_Àn
) != 0) {

157 
	`LWIP_DEBUGF
(
TCPDUMP_DEBUG
, ("tcpdump: IP checksum failed!\n"));

163 
	`Ârötf
(
fûe
, "!chksum ");

166 
	`Ârötf
(
fûe
, "%d.%d.%d.%d.%u > %d.%d.%d.%d.%u: ",

167 ()(
	`¡ohl
(
ùhdr
->
§c
.
addr
) >> 24) & 0xff,

168 ()(
	`¡ohl
(
ùhdr
->
§c
.
addr
) >> 16) & 0xff,

169 ()(
	`¡ohl
(
ùhdr
->
§c
.
addr
) >> 8) & 0xff,

170 ()(
	`¡ohl
(
ùhdr
->
§c
.
addr
) >> 0) & 0xff,

171 
	`¡ohs
(
udphdr
->
§c
),

172 ()(
	`¡ohl
(
ùhdr
->
de°
.
addr
) >> 24) & 0xff,

173 ()(
	`¡ohl
(
ùhdr
->
de°
.
addr
) >> 16) & 0xff,

174 ()(
	`¡ohl
(
ùhdr
->
de°
.
addr
) >> 8) & 0xff,

175 ()(
	`¡ohl
(
ùhdr
->
de°
.
addr
) >> 0) & 0xff,

176 
	`¡ohs
(
udphdr
->
de°
));

177 
	`Ârötf
(
fûe
, "U ");

178 
Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
ùhdr
)Ë- (
udp_hdr
Ë- 
IP_HLEN
;

179 
	`Ârötf
(
fûe
, " %d\n", 
Àn
);

181 
	`fÊush
(
fûe
);

183 
	`pbuf_hódî
(
p
, 
IP_HLEN
);

187 
	`LWIP_DEBUGF
(
TCPDUMP_DEBUG
, ("unh™dÀd IPÖrŸocﬁ: %d\n", ()
	`IPH_PROTO
(
ùhdr
)));

192 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/perf.c

33 
	~"¨ch/≥rf.h
"

35 
	~<°dio.h
>

37 
FILE
 *
	gf
;

40 
	$≥rf_¥öt
(
c1l
, 
c1h
,

41 
c2l
, 
c2h
,

42 *
key
)

44 
sub_ms
, 
sub_ls
;

46 
sub_ms
 = 
c2h
 - 
c1h
;

47 
sub_ls
 = 
c2l
 - 
c1l
;

48 i‡(
c2l
 < 
c1l
Ë
sub_ms
--;

49 
	`Ârötf
(
f
, "%s: %.8lu%.8lu\n", 
key
, 
sub_ms
, 
sub_ls
);

50 
	`fÊush
(
NULL
);

51 
	}
}

54 
	$≥rf_¥öt_times
(
tms
 *
°¨t
, tm†*
íd
, *
key
)

56 
	`Ârötf
(
f
, "%s: %lu\n", 
key
, 
íd
->
tms_°ime
 - 
°¨t
->tms_stime);

57 
	`fÊush
(
NULL
);

58 
	}
}

61 
	$≥rf_öô
(*
‚ame
)

63 
f
 = 
	`f›í
(
‚ame
, "w");

64 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/sys_arch.c

47 
	~"lwù/debug.h
"

49 
	~<°rög.h
>

50 
	~<sys/time.h
>

51 
	~<sys/ty≥s.h
>

52 
	~<°dlib.h
>

53 
	~<uni°d.h
>

54 
	~<±hªad.h
>

56 
	~"lwù/sys.h
"

57 
	~"lwù/›t.h
"

58 
	~"lwù/°©s.h
"

60 
	#UMAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

62 
timevÆ
 
	g°¨âime
;

64 #i‡!
NO_SYS


66 
sys_thªad
 *
	gthªads
 = 
NULL
;

67 
±hªad_muãx_t
 
	gthªads_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

69 
	ssys_mbox_msg
 {

70 
sys_mbox_msg
 *
	m√xt
;

71 *
	mmsg
;

74 
	#SYS_MBOX_SIZE
 16000

	)

76 
	ssys_mbox
 {

77 
	mfú°
, 
	mœ°
;

78 *
	mmsgs
[
SYS_MBOX_SIZE
];

79 
sys_£m
 *
	mnŸ_em±y
;

80 
sys_£m
 *
	mnŸ_fuŒ
;

81 
sys_£m
 *
	mmuãx
;

82 
	mwaô_£nd
;

83 
	mfûÀr
;

86 
	ssys_lwù_mbox
 {

87 
	mfú°
, 
	mœ°
;

88 *
	mmsgs
[
SYS_MBOX_SIZE
];

91 
	ssys_£m
 {

92 
	mc
;

93 
±hªad_c⁄d_t
 
	mc⁄d
;

94 
±hªad_muãx_t
 
	mmuãx
;

97 
	ssys_thªad
 {

98 
sys_thªad
 *
	m√xt
;

99 
±hªad_t
 
	m±hªad
;

102 #i‡
SYS_LIGHTWEIGHT_PROT


103 
±hªad_muãx_t
 
	glw¥Ÿ_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

104 
±hªad_t
 
	glw¥Ÿ_thªad
 = (pthread_t)0xDEAD;

105 
	glw¥Ÿ_cou¡
 = 0;

108 
sys_£m
 *
sys_£m_√w_öã∫Æ
(
u8_t
 
cou¡
);

109 
sys_£m_‰ì_öã∫Æ
(
sys_£m
 *
£m
);

111 
u32_t
 
c⁄d_waô
(
±hªad_c⁄d_t
 * 
c⁄d
, 
±hªad_muãx_t
 * 
muãx
,

112 
u32_t
 
timeout
);

115 
sys_thªad
 *

116 
	$öåodu˚_thªad
(
±hªad_t
 
id
)

118 
sys_thªad
 *
thªad
;

120 
thªad
 = (
sys_thªad
 *)
	`mÆloc
((sys_thread));

122 i‡(
thªad
 !
NULL
) {

123 
	`±hªad_muãx_lock
(&
thªads_muãx
);

124 
thªad
->
√xt
 = 
thªads
;

125 
thªad
->
±hªad
 = 
id
;

126 
thªads
 = 
thªad
;

127 
	`±hªad_muãx_u∆ock
(&
thªads_muãx
);

130  
thªad
;

131 
	}
}

133 
sys_thªad_t


134 
	$sys_thªad_√w
(c⁄° *
«me
, 
lwù_thªad_‚
 
fun˘i⁄
, *
¨g
, 
°acksize
, 
¥io
)

136 
code
;

137 
±hªad_t
 
tmp
;

138 
±hªad_©å_t
 
©å
;

139 
sys_thªad
 *
°
 = 
NULL
;

140 
sched_∑øm
 
∑øm
 = {

141 .
sched_¥i‹ôy
 = 90

143 
	`LWIP_UNUSED_ARG
(
«me
);

144 
	`LWIP_UNUSED_ARG
(
°acksize
);

145 
	`LWIP_UNUSED_ARG
(
¥io
);

147 
	`±hªad_©å_öô
(&
©å
);

148 
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
);

149 
	`±hªad_©å_£tsched∑øm
(&
©å
, &
∑øm
);

151 
code
 = 
	`±hªad_¸óã
(&
tmp
,

152 
NULL
,

154 
fun˘i⁄
,

155 
¨g
);

157 i‡(0 =
code
) {

158 
°
 = 
	`öåodu˚_thªad
(
tmp
);

161 i‡(
NULL
 =
°
) {

162 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sys_thread_new:Öthread_create %d, st = 0x%lx",

163 
code
, ()
°
));

164 
	`ab‹t
();

166  
°
;

167 
	}
}

169 
îr_t


170 
	$sys_lwù_mbox_√w
(
sys_lwù_mbox
 **
mb
, 
size
)

172 
sys_lwù_mbox
 *
mbox
;

173 
	`LWIP_UNUSED_ARG
(
size
);

175 
mbox
 = (
sys_lwù_mbox
 *)
	`mÆloc
((sys_lwip_mbox));

176 i‡(
mbox
 =
NULL
) {

177  
ERR_MEM
;

179 
mbox
->
fú°
 = mbox->
œ°
 = 0;

180 *
mb
 = 
mbox
;

181  
ERR_OK
;

182 
	}
}

184 
îr_t


185 
	$sys_mbox_√w
(
sys_mbox
 **
mb
, 
size
)

187 
sys_mbox
 *
mbox
;

188 
	`LWIP_UNUSED_ARG
(
size
);

190 
mbox
 = (
sys_mbox
 *)
	`mÆloc
((sys_mbox));

191 i‡(
mbox
 =
NULL
) {

192  
ERR_MEM
;

194 
mbox
->
fú°
 = mbox->
œ°
 = 0;

195 
mbox
->
nŸ_em±y
 = 
	`sys_£m_√w_öã∫Æ
(0);

196 
mbox
->
nŸ_fuŒ
 = 
	`sys_£m_√w_öã∫Æ
(0);

197 
mbox
->
muãx
 = 
	`sys_£m_√w_öã∫Æ
(1);

198 
mbox
->
waô_£nd
 = 0;

200 
	`SYS_STATS_INC_USED
(
mbox
);

201 *
mb
 = 
mbox
;

202  
ERR_OK
;

203 
	}
}

206 
	$sys_lwù_mbox_‰ì
(
sys_lwù_mbox
 **
mb
)

208 i‡((
mb
 !
NULL
Ë&& (*mb !
SYS_MBOX_NULL
)) {

209 
sys_lwù_mbox
 *
mbox
 = *
mb
;

210 
	`‰ì
(
mbox
);

212 
	}
}

215 
	$sys_mbox_‰ì
(
sys_mbox
 **
mb
)

217 i‡((
mb
 !
NULL
Ë&& (*mb !
SYS_MBOX_NULL
)) {

218 
sys_mbox
 *
mbox
 = *
mb
;

219 
	`SYS_STATS_DEC
(
mbox
.
u£d
);

220 
	`sys_¨ch_£m_waô
(&
mbox
->
muãx
, 0);

222 
	`sys_£m_‰ì_öã∫Æ
(
mbox
->
nŸ_em±y
);

223 
	`sys_£m_‰ì_öã∫Æ
(
mbox
->
nŸ_fuŒ
);

224 
	`sys_£m_‰ì_öã∫Æ
(
mbox
->
muãx
);

225 
mbox
->
nŸ_em±y
 = mbox->
nŸ_fuŒ
 = mbox->
muãx
 = 
NULL
;

227 
	`‰ì
(
mbox
);

229 
	}
}

231 
îr_t


232 
	$sys_lwù_mbox_åypo°
(
sys_lwù_mbox
 **
mb
, *
msg
)

234 
u8_t
 
fú°
;

235 
sys_lwù_mbox
 *
mbox
;

236 
	`LWIP_ASSERT
("övÆid mbox", (
mb
 !
NULL
) && (*mb != NULL));

237 
mbox
 = *
mb
;

239 
mbox
->
msgs
[mbox->
œ°
 % 
SYS_MBOX_SIZE
] = 
msg
;

241 
mbox
->
œ°
++;

243  
ERR_OK
;

244 
	}
}

246 
îr_t


247 
	$sys_mbox_åypo°
(
sys_mbox
 **
mb
, *
msg
)

249 
u8_t
 
fú°
;

250 
sys_mbox
 *
mbox
;

251 
	`LWIP_ASSERT
("övÆid mbox", (
mb
 !
NULL
) && (*mb != NULL));

252 
mbox
 = *
mb
;

254 
	`sys_¨ch_£m_waô
(&
mbox
->
muãx
, 0);

256 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sys_mbox_trypost: mbox %p msg %p\n",

257 (*)
mbox
, (*)
msg
));

259 i‡((
mbox
->
œ°
 + 1Ë>(mbox->
fú°
 + 
SYS_MBOX_SIZE
)) {

260 
	`sys_£m_sig«l
(&
mbox
->
muãx
);

261  
ERR_MEM
;

264 
mbox
->
msgs
[mbox->
œ°
 % 
SYS_MBOX_SIZE
] = 
msg
;

266 i‡(
mbox
->
œ°
 =mbox->
fú°
) {

267 
fú°
 = 1;

269 
fú°
 = 0;

272 
mbox
->
œ°
++;

274 i‡(
fú°
) {

275 
	`sys_£m_sig«l
(&
mbox
->
nŸ_em±y
);

278 
	`sys_£m_sig«l
(&
mbox
->
muãx
);

280  
ERR_OK
;

281 
	}
}

284 
	$sys_lwù_mbox_po°
(
sys_lwù_mbox
 **
mb
, *
msg
)

286 
u8_t
 
fú°
;

287 
sys_lwù_mbox
 *
mbox
;

288 
	`LWIP_ASSERT
("övÆid mbox", (
mb
 !
NULL
) && (*mb != NULL));

289 
mbox
 = *
mb
;

291 
mbox
->
msgs
[mbox->
œ°
 % 
SYS_MBOX_SIZE
] = 
msg
;

293 
mbox
->
œ°
++;

295 
	}
}

298 
	$sys_mbox_po°
(
sys_mbox
 **
mb
, *
msg
)

300 
u8_t
 
fú°
;

301 
sys_mbox
 *
mbox
;

302 
	`LWIP_ASSERT
("övÆid mbox", (
mb
 !
NULL
) && (*mb != NULL));

303 
mbox
 = *
mb
;

305 
	`sys_¨ch_£m_waô
(&
mbox
->
muãx
, 0);

307 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sys_mbox_po°: mbox %∞msg %p\n", (*)
mbox
, (*)
msg
));

309 (
mbox
->
œ°
 + 1Ë>(mbox->
fú°
 + 
SYS_MBOX_SIZE
)) {

310 
mbox
->
waô_£nd
++;

311 
	`sys_£m_sig«l
(&
mbox
->
muãx
);

312 
	`sys_¨ch_£m_waô
(&
mbox
->
nŸ_fuŒ
, 0);

313 
	`sys_¨ch_£m_waô
(&
mbox
->
muãx
, 0);

314 
mbox
->
waô_£nd
--;

317 
mbox
->
msgs
[mbox->
œ°
 % 
SYS_MBOX_SIZE
] = 
msg
;

319 i‡(
mbox
->
œ°
 =mbox->
fú°
) {

320 
fú°
 = 1;

322 
fú°
 = 0;

325 
mbox
->
œ°
++;

327 i‡(
fú°
) {

328 
	`sys_£m_sig«l
(&
mbox
->
nŸ_em±y
);

331 
	`sys_£m_sig«l
(&
mbox
->
muãx
);

332 
	}
}

334 
u32_t


335 
	$sys_lwù_¨ch_mbox_åy„tch
(
sys_lwù_mbox
 **
mb
, **
msg
)

337 
sys_lwù_mbox
 *
mbox
;

338 
	`LWIP_ASSERT
("övÆid mbox", (
mb
 !
NULL
) && (*mb != NULL));

339 
mbox
 = *
mb
;

341 i‡(
msg
 !
NULL
) {

342 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sys_mbox_åy„tch: mbox %∞msg %p\n", (*)
mbox
, *
msg
));

343 *
msg
 = 
mbox
->
msgs
[mbox->
fú°
 % 
SYS_MBOX_SIZE
];

344 
mbox
->
msgs
[mbox->
fú°
 % 
SYS_MBOX_SIZE
] = 
NULL
;

347 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sys_mbox_åy„tch: mbox %p,ÇuŒ msg\n", (*)
mbox
));

350 
mbox
->
fú°
++;

353 
	}
}

355 
u32_t


356 
	$sys_¨ch_mbox_åy„tch
(
sys_mbox
 **
mb
, **
msg
)

358 
sys_mbox
 *
mbox
;

359 
	`LWIP_ASSERT
("övÆid mbox", (
mb
 !
NULL
) && (*mb != NULL));

360 
mbox
 = *
mb
;

362 
	`sys_¨ch_£m_waô
(&
mbox
->
muãx
, 0);

364 i‡(
mbox
->
fú°
 =mbox->
œ°
) {

365 
	`sys_£m_sig«l
(&
mbox
->
muãx
);

366  
SYS_MBOX_EMPTY
;

369 i‡(
msg
 !
NULL
) {

370 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sys_mbox_åy„tch: mbox %∞msg %p\n", (*)
mbox
, *
msg
));

371 *
msg
 = 
mbox
->
msgs
[mbox->
fú°
 % 
SYS_MBOX_SIZE
];

372 
mbox
->
msgs
[mbox->
fú°
 % 
SYS_MBOX_SIZE
] = 
NULL
;

375 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sys_mbox_åy„tch: mbox %p,ÇuŒ msg\n", (*)
mbox
));

378 
mbox
->
fú°
++;

380 i‡(
mbox
->
waô_£nd
) {

381 
	`sys_£m_sig«l
(&
mbox
->
nŸ_fuŒ
);

384 
	`sys_£m_sig«l
(&
mbox
->
muãx
);

387 
	}
}

389 
u32_t


390 
	$sys_lwù_¨ch_mbox_check
(
sys_lwù_mbox
 **
mb
, **
msg
)

392 
u32_t
 
time_√eded
 = 0;

393 
sys_lwù_mbox
 *
mbox
;

394 
	`LWIP_ASSERT
("övÆid mbox", (
mb
 !
NULL
) && (*mb != NULL));

395 
mbox
 = *
mb
;

397 i‡(
mbox
->
fú°
 =mbox->
œ°
) {

401 i‡(
msg
 !
NULL
) {

402 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sys_mbox_„tch: mbox %∞msg %p\n", (*)
mbox
, *
msg
));

403 *
msg
 = 
mbox
->
msgs
[mbox->
fú°
 % 
SYS_MBOX_SIZE
];

406 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sys_mbox_„tch: mbox %p,ÇuŒ msg\n", (*)
mbox
));

409 
	}
}

411 
u32_t


412 
	$sys_lwù_¨ch_mbox_„tch
(
sys_lwù_mbox
 **
mb
, **
msg
, 
u32_t
 
timeout
, 
u8_t
 
t˝t
)

414 
u32_t
 
time_√eded
 = 0;

415 
sys_lwù_mbox
 *
mbox
;

416 
	`LWIP_ASSERT
("övÆid mbox", (
mb
 !
NULL
) && (*mb != NULL));

417 
mbox
 = *
mb
;

419 
mbox
->
fú°
 =mbox->
œ°
) {

420 i‡(
t˝t
) {

421  
SYS_ARCH_TIMEOUT
;

425 i‡(
msg
 !
NULL
) {

426 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sys_mbox_„tch: mbox %∞msg %p\n", (*)
mbox
, *
msg
));

427 *
msg
 = 
mbox
->
msgs
[mbox->
fú°
 % 
SYS_MBOX_SIZE
];

428 
mbox
->
msgs
[mbox->
fú°
 % 
SYS_MBOX_SIZE
] = 
NULL
;

431 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sys_mbox_„tch: mbox %p,ÇuŒ msg\n", (*)
mbox
));

434 
mbox
->
fú°
++;

436 
	}
}

438 
u32_t


439 
	$sys_¨ch_mbox_„tch
(
sys_mbox
 **
mb
, **
msg
, 
u32_t
 
timeout
, 
u8_t
 
t˝t
)

441 
u32_t
 
time_√eded
 = 0;

442 
sys_mbox
 *
mbox
;

443 
	`LWIP_ASSERT
("övÆid mbox", (
mb
 !
NULL
) && (*mb != NULL));

444 
mbox
 = *
mb
;

448 
	`sys_¨ch_£m_waô
(&
mbox
->
muãx
, 0);

450 
mbox
->
fú°
 =mbox->
œ°
) {

451 
	`sys_£m_sig«l
(&
mbox
->
muãx
);

453 i‡(
t˝t
) {

454  
SYS_ARCH_TIMEOUT
;

459 i‡(
timeout
 != 0) {

460 
time_√eded
 = 
	`sys_¨ch_£m_waô
(&
mbox
->
nŸ_em±y
, 
timeout
);

462 i‡(
time_√eded
 =
SYS_ARCH_TIMEOUT
) {

463  
SYS_ARCH_TIMEOUT
;

466 
	`sys_¨ch_£m_waô
(&
mbox
->
nŸ_em±y
, 0);

469 
	`sys_¨ch_£m_waô
(&
mbox
->
muãx
, 0);

472 i‡(
msg
 !
NULL
) {

473 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sys_mbox_„tch: mbox %∞msg %p\n", (*)
mbox
, *
msg
));

474 *
msg
 = 
mbox
->
msgs
[mbox->
fú°
 % 
SYS_MBOX_SIZE
];

475 
mbox
->
msgs
[mbox->
fú°
 % 
SYS_MBOX_SIZE
] = 
NULL
;

478 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sys_mbox_„tch: mbox %p,ÇuŒ msg\n", (*)
mbox
));

481 
mbox
->
fú°
++;

483 i‡(
mbox
->
waô_£nd
) {

484 
	`sys_£m_sig«l
(&
mbox
->
nŸ_fuŒ
);

487 
	`sys_£m_sig«l
(&
mbox
->
muãx
);

489  
time_√eded
;

490 
	}
}

492 
sys_£m
 *

493 
	$sys_£m_√w_öã∫Æ
(
u8_t
 
cou¡
)

495 
sys_£m
 *
£m
;

497 
£m
 = (
sys_£m
 *)
	`mÆloc
((sys_sem));

498 i‡(
£m
 !
NULL
) {

499 
£m
->
c
 = 
cou¡
;

500 
	`±hªad_c⁄d_öô
(&(
£m
->
c⁄d
), 
NULL
);

501 
	`±hªad_muãx_öô
(&(
£m
->
muãx
), 
NULL
);

503  
£m
;

504 
	}
}

506 
îr_t


507 
	$sys_£m_√w
(
sys_£m
 **
£m
, 
u8_t
 
cou¡
)

509 
	`SYS_STATS_INC_USED
(
£m
);

510 *
£m
 = 
	`sys_£m_√w_öã∫Æ
(
cou¡
);

511 i‡(*
£m
 =
NULL
) {

512  
ERR_MEM
;

514  
ERR_OK
;

515 
	}
}

517 
u32_t


518 
	$c⁄d_waô
(
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_muãx_t
 *
muãx
, 
u32_t
 
timeout
)

520 
tdiff
;

521 
£c
, 
u£c
;

522 
timevÆ
 
πime1
, 
πime2
;

523 
time•ec
 
ts
;

524 
ªtvÆ
;

526 i‡(
timeout
 > 0) {

528 
	`gëtimeofday
(&
πime1
, 
NULL
);

529 
£c
 = 
πime1
.
tv_£c
;

530 
u£c
 = 
πime1
.
tv_u£c
;

531 
u£c
 +
timeout
 % 1000;

532 
£c
 +()(
timeout
 / 1000Ë+ ()(
u£c
 / 1000000);

533 
u£c
 = usec % 1000000;

534 
ts
.
tv_n£c
 = 
u£c
 * 1000;

535 
ts
.
tv_£c
 = 
£c
;

537 
ªtvÆ
 = 
	`±hªad_c⁄d_timedwaô
(
c⁄d
, 
muãx
, &
ts
);

539 i‡(
ªtvÆ
 =
ETIMEDOUT
) {

540  
SYS_ARCH_TIMEOUT
;

543 
	`gëtimeofday
(&
πime2
, 
NULL
);

544 
tdiff
 = (
πime2
.
tv_£c
 - 
πime1
.tv_sec) * 1000 +

545 (
πime2
.
tv_u£c
 - 
πime1
.tv_usec) / 1000;

547 i‡(
tdiff
 <= 0) {

551  
tdiff
;

554 
	`±hªad_c⁄d_waô
(
c⁄d
, 
muãx
);

555  
SYS_ARCH_TIMEOUT
;

557 
	}
}

559 
u32_t


560 
	$sys_¨ch_£m_waô
(
sys_£m
 **
s
, 
u32_t
 
timeout
)

562 
u32_t
 
time_√eded
 = 0;

563 
sys_£m
 *
£m
;

564 
	`LWIP_ASSERT
("övÆid sem", (
s
 !
NULL
) && (*s != NULL));

565 
£m
 = *
s
;

567 
	`±hªad_muãx_lock
(&(
£m
->
muãx
));

568 
£m
->
c
 <= 0) {

569 i‡(
timeout
 > 0) {

570 
time_√eded
 = 
	`c⁄d_waô
(&(
£m
->
c⁄d
), &(£m->
muãx
), 
timeout
);

572 i‡(
time_√eded
 =
SYS_ARCH_TIMEOUT
) {

573 
	`±hªad_muãx_u∆ock
(&(
£m
->
muãx
));

574  
SYS_ARCH_TIMEOUT
;

579 
	`c⁄d_waô
(&(
£m
->
c⁄d
), &(£m->
muãx
), 0);

582 
£m
->
c
--;

583 
	`±hªad_muãx_u∆ock
(&(
£m
->
muãx
));

584  
time_√eded
;

585 
	}
}

588 
	$sys_£m_sig«l
(
sys_£m
 **
s
)

590 
sys_£m
 *
£m
;

591 
	`LWIP_ASSERT
("övÆid sem", (
s
 !
NULL
) && (*s != NULL));

592 
£m
 = *
s
;

594 
	`±hªad_muãx_lock
(&(
£m
->
muãx
));

595 
£m
->
c
++;

597 i‡(
£m
->
c
 > 1) {

598 
£m
->
c
 = 1;

601 
	`±hªad_c⁄d_brﬂdˇ°
(&(
£m
->
c⁄d
));

602 
	`±hªad_muãx_u∆ock
(&(
£m
->
muãx
));

603 
	}
}

606 
	$sys_£m_‰ì_öã∫Æ
(
sys_£m
 *
£m
)

608 
	`±hªad_c⁄d_de°roy
(&(
£m
->
c⁄d
));

609 
	`±hªad_muãx_de°roy
(&(
£m
->
muãx
));

610 
	`‰ì
(
£m
);

611 
	}
}

614 
	$sys_£m_‰ì
(
sys_£m
 **
£m
)

616 i‡((
£m
 !
NULL
Ë&& (*£m !
SYS_SEM_NULL
)) {

617 
	`SYS_STATS_DEC
(
£m
.
u£d
);

618 
	`sys_£m_‰ì_öã∫Æ
(*
£m
);

620 
	}
}

623 
u32_t


624 
	$sys_now
()

626 
timevÆ
 
tv
;

627 
u32_t
 
£c
, 
u£c
, 
m£c
;

628 
	`gëtimeofday
(&
tv
, 
NULL
);

630 
£c
 = (
u32_t
)(
tv
.
tv_£c
 - 
°¨âime
.tv_sec);

631 
u£c
 = (
u32_t
)(
tv
.
tv_u£c
 - 
°¨âime
.tv_usec);

632 
m£c
 = 
£c
 * 1000 + 
u£c
 / 1000;

634  
m£c
;

635 
	}
}

638 
	$sys_öô
()

640 
	`gëtimeofday
(&
°¨âime
, 
NULL
);

641 
	}
}

643 #i‡
SYS_LIGHTWEIGHT_PROT


658 
sys_¥Ÿ_t


659 
	$sys_¨ch_¥Ÿe˘
()

664 i‡(
lw¥Ÿ_thªad
 !
	`±hªad_£lf
())

668 
	`±hªad_muãx_lock
(&
lw¥Ÿ_muãx
);

669 
lw¥Ÿ_thªad
 = 
	`±hªad_£lf
();

670 
lw¥Ÿ_cou¡
 = 1;

674 
lw¥Ÿ_cou¡
++;

676 
	}
}

686 
	$sys_¨ch_u≈rŸe˘
(
sys_¥Ÿ_t
 
pvÆ
)

688 
	`LWIP_UNUSED_ARG
(
pvÆ
);

689 i‡(
lw¥Ÿ_thªad
 =
	`±hªad_£lf
())

691 i‡(--
lw¥Ÿ_cou¡
 == 0)

693 
lw¥Ÿ_thªad
 = (
±hªad_t
) 0xDEAD;

694 
	`±hªad_muãx_u∆ock
(&
lw¥Ÿ_muãx
);

697 
	}
}

702 #i‚de‡
MAX_JIFFY_OFFSET


703 
	#MAX_JIFFY_OFFSET
 ((~0U >> 1)-1)

	)

706 #i‚de‡
HZ


707 
	#HZ
 1600000000

	)

710 
u32_t


711 
	$sys_jiffõs
()

713 
timevÆ
 
tv
;

714 
£c
;

715 
u£c
;

717 
	`gëtimeofday
(&
tv
,
NULL
);

718 
£c
 = 
tv
.
tv_£c
 - 
°¨âime
.tv_sec;

719 
u£c
 = 
tv
.
tv_u£c
;

721 i‡(
£c
 >(
MAX_JIFFY_OFFSET
 / 
HZ
))

722  
MAX_JIFFY_OFFSET
;

723 
u£c
 +1000000L / 
HZ
 - 1;

724 
u£c
 /1000000L / 
HZ
;

725  
HZ
 * 
£c
 + 
u£c
;

726 
	}
}

728 #i‡
PPP_DEBUG


730 
	~<°d¨g.h
>

732 
	$µp_åa˚
(
Àvñ
, c⁄° *
f‹m©
, ...)

734 
va_li°
 
¨gs
;

736 ()
Àvñ
;

737 
	`va_°¨t
(
¨gs
, 
f‹m©
);

738 
	`v¥ötf
(
f‹m©
, 
¨gs
);

739 
	`va_íd
(
¨gs
);

740 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/api/api_lib.c

42 
	~"lwù/›t.h
"

44 #i‡
LWIP_NETCONN


46 
	~"lwù/≠i.h
"

47 
	~"lwù/t˝ù.h
"

48 
	~"lwù/memp.h
"

50 
	~"lwù/ù.h
"

51 
	~"lwù/t˝.h
"

53 
	~<°rög.h
>

54 
	~"lwù/ßm∂e_åa˚poöt.h
"

66 
√tc⁄n
*

67 
	$√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
√tc⁄n_ty≥
 
t
, 
u8_t
 
¥Ÿo
, 
√tc⁄n_ˇŒback
 
ˇŒback
)

69 
√tc⁄n
 *
c⁄n
;

70 
≠i_msg
 
msg
;

72 
c⁄n
 = 
	`√tc⁄n_Æloc
(
t
, 
ˇŒback
);

73 i‡(
c⁄n
 !
NULL
) {

74 
msg
.
fun˘i⁄
 = 
do_√wc⁄n
;

75 
msg
.msg.msg.
n
.
¥Ÿo
 =Öroto;

76 
msg
.msg.
c⁄n
 = conn;

77 i‡(
	`TCPIP_APIMSG
(&
msg
Ë!
ERR_OK
) {

78 
	`LWIP_ASSERT
("‰ìög c⁄¿wôhouà‰ìögÖcb", 
c⁄n
->
pcb
.
t˝
 =
NULL
);

79 
	`LWIP_ASSERT
("c⁄¿ha†nÿ›_com∂ëed", 
	`sys_£m_vÆid
(&
c⁄n
->
›_com∂ëed
));

80 
	`LWIP_ASSERT
("c⁄¿ha†nÿªcvmbox", 
	`sys_mbox_vÆid
(&
c⁄n
->
ªcvmbox
));

81 #i‡
LWIP_TCP


82 
	`LWIP_ASSERT
("c⁄n->ac˚±mbox shouldn'àexi°", !
	`sys_mbox_vÆid
(&
c⁄n
->
ac˚±mbox
));

84 
	`sys_£m_‰ì
(&
c⁄n
->
›_com∂ëed
);

85 
	`sys_mbox_‰ì
(&
c⁄n
->
ªcvmbox
);

86 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
, 
NULL
);

87  
NULL
;

90  
c⁄n
;

91 
	}
}

101 
îr_t


102 
	$√tc⁄n_dñëe
(
√tc⁄n
 *
c⁄n
)

104 
≠i_msg
 
msg
;

107 i‡(
c⁄n
 =
NULL
) {

108  
ERR_OK
;

111 
msg
.
fun˘i⁄
 = 
do_dñc⁄n
;

112 
msg
.msg.
c⁄n
 = conn;

113 
	`t˝ù_≠imsg
(&
msg
);

115 
	`√tc⁄n_‰ì
(
c⁄n
);

119  
ERR_OK
;

120 
	}
}

133 
îr_t


134 
	$√tc⁄n_gëaddr
(
√tc⁄n
 *
c⁄n
, 
ù_addr_t
 *
addr
, 
u16_t
 *
p‹t
, 
u8_t
 
loˇl
)

136 
≠i_msg
 
msg
;

137 
îr_t
 
îr
;

139 
	`LWIP_ERROR
("√tc⁄n_gëaddr: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

140 
	`LWIP_ERROR
("√tc⁄n_gëaddr: invÆidáddr", (
addr
 !
NULL
),  
ERR_ARG
;);

141 
	`LWIP_ERROR
("√tc⁄n_gëaddr: invÆidÖ‹t", (
p‹t
 !
NULL
),  
ERR_ARG
;);

143 
msg
.
fun˘i⁄
 = 
do_gëaddr
;

144 
msg
.msg.
c⁄n
 = conn;

145 
msg
.msg.msg.
ad
.
ùaddr
 = 
addr
;

146 
msg
.msg.msg.
ad
.
p‹t
 =Öort;

147 
msg
.msg.msg.
ad
.
loˇl
 =Üocal;

148 
îr
 = 
	`TCPIP_APIMSG
(&
msg
);

151  
îr
;

152 
	}
}

164 
îr_t


165 
	$√tc⁄n_böd
(
√tc⁄n
 *
c⁄n
, 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
)

167 
≠i_msg
 
msg
;

168 
îr_t
 
îr
;

170 
	`LWIP_ERROR
("√tc⁄n_böd: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

172 
msg
.
fun˘i⁄
 = 
do_böd
;

173 
msg
.msg.
c⁄n
 = conn;

174 
msg
.msg.msg.
bc
.
ùaddr
 = 
addr
;

175 
msg
.msg.msg.
bc
.
p‹t
 =Öort;

176 
îr
 = 
	`TCPIP_APIMSG
(&
msg
);

178 
	`NETCONN_SET_SAFE_ERR
(
c⁄n
, 
îr
);

179  
îr
;

180 
	}
}

190 
îr_t


191 
	$√tc⁄n_c⁄√˘
(
√tc⁄n
 *
c⁄n
, 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
)

193 
≠i_msg
 
msg
;

194 
îr_t
 
îr
;

196 
	`LWIP_ERROR
("√tc⁄n_c⁄√˘: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

198 
msg
.
fun˘i⁄
 = 
do_c⁄√˘
;

199 
msg
.msg.
c⁄n
 = conn;

200 
msg
.msg.msg.
bc
.
ùaddr
 = 
addr
;

201 
msg
.msg.msg.
bc
.
p‹t
 =Öort;

203 
îr
 = 
	`t˝ù_≠imsg
(&
msg
);

205 
	`NETCONN_SET_SAFE_ERR
(
c⁄n
, 
îr
);

206  
îr
;

207 
	}
}

215 
îr_t


216 
	$√tc⁄n_disc⁄√˘
(
√tc⁄n
 *
c⁄n
)

218 
≠i_msg
 
msg
;

219 
îr_t
 
îr
;

221 
	`LWIP_ERROR
("√tc⁄n_disc⁄√˘: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

223 
msg
.
fun˘i⁄
 = 
do_disc⁄√˘
;

224 
msg
.msg.
c⁄n
 = conn;

225 
îr
 = 
	`TCPIP_APIMSG
(&
msg
);

227 
	`NETCONN_SET_SAFE_ERR
(
c⁄n
, 
îr
);

228  
îr
;

229 
	}
}

239 
îr_t


240 
	$√tc⁄n_li°í_wôh_backlog
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
backlog
)

242 #i‡
LWIP_TCP


243 
≠i_msg
 
msg
;

244 
îr_t
 
îr
;

247 
	`LWIP_UNUSED_ARG
(
backlog
);

249 
	`LWIP_ERROR
("√tc⁄n_li°í: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

251 
msg
.
fun˘i⁄
 = 
do_li°í
;

252 
msg
.msg.
c⁄n
 = conn;

253 #i‡
TCP_LISTEN_BACKLOG


254 
msg
.msg.msg.
lb
.
backlog
 = backlog;

256 
îr
 = 
	`TCPIP_APIMSG
(&
msg
);

258 
	`NETCONN_SET_SAFE_ERR
(
c⁄n
, 
îr
);

259  
îr
;

261 
	`LWIP_UNUSED_ARG
(
c⁄n
);

262 
	`LWIP_UNUSED_ARG
(
backlog
);

263  
ERR_ARG
;

265 
	}
}

275 
îr_t


276 
	$√tc⁄n_ac˚±
(
√tc⁄n
 *
c⁄n
, √tc⁄¿**
√w_c⁄n
)

278 #i‡
LWIP_TCP


279 
√tc⁄n
 *
√wc⁄n
;

280 
îr_t
 
îr
;

281 #i‡
TCP_LISTEN_BACKLOG


282 
≠i_msg
 
msg
;

285 
	`LWIP_ERROR
("√tc⁄n_ac˚±: invÆidÖoöãr", (
√w_c⁄n
 !
NULL
),  
ERR_ARG
;);

286 *
√w_c⁄n
 = 
NULL
;

287 
	`LWIP_ERROR
("√tc⁄n_ac˚±: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

288 
	`LWIP_ERROR
("√tc⁄n_ac˚±: invÆidác˚±mbox", 
	`sys_mbox_vÆid
(&
c⁄n
->
ac˚±mbox
),  
ERR_ARG
;);

290 
îr
 = 
c⁄n
->
œ°_îr
;

291 i‡(
	`ERR_IS_FATAL
(
îr
)) {

294  
îr
;

297 #i‡
LWIP_SO_RCVTIMEO


298 i‡(
c⁄n
->
u£_ïﬁl
) {

299 
îr
 = 
	`sys_lwù_¨ch_mbox_„tch
(&
c⁄n
->
ïﬁl_±r
->
li°íî_mbox
, (**)&
√wc⁄n
, c⁄n->
ªcv_timeout
);

301 
îr
 = 
	`sys_¨ch_mbox_„tch
(&
c⁄n
->
ac˚±mbox
, (**)&
√wc⁄n
, c⁄n->
ªcv_timeout
);

304 i‡(
îr
 =
SYS_ARCH_TIMEOUT
) {

305 
	`NETCONN_SET_SAFE_ERR
(
c⁄n
, 
ERR_TIMEOUT
);

306  
ERR_TIMEOUT
;

309 i‡(!
c⁄n
->
u£_ïﬁl
) {

310 
	`sys_¨ch_mbox_„tch
(&
c⁄n
->
ac˚±mbox
, (**)&
√wc⁄n
, 0, 0);

312 
	`sys_lwù_¨ch_mbox_„tch
(&
c⁄n
->
ïﬁl_±r
->
li°íî_mbox
, (**)&
√wc⁄n
, 0, 0);

316 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVMINUS
, 0);

318 i‡(
√wc⁄n
 =
NULL
) {

320 
	`NETCONN_SET_SAFE_ERR
(
c⁄n
, 
ERR_ABRT
);

321  
ERR_ABRT
;

323 #i‡
TCP_LISTEN_BACKLOG


325 
msg
.
fun˘i⁄
 = 
do_ªcv
;

326 
msg
.msg.
c⁄n
 = conn;

328 
	`TCPIP_APIMSG
(&
msg
);

331 *
√w_c⁄n
 = 
√wc⁄n
;

333  
ERR_OK
;

335 
	`LWIP_UNUSED_ARG
(
c⁄n
);

336 
	`LWIP_UNUSED_ARG
(
√w_c⁄n
);

337  
ERR_ARG
;

339 
	}
}

350 
îr_t


351 
	$√tc⁄n_ªcv_d©a
(
√tc⁄n
 *
c⁄n
, **
√w_buf
)

353 *
buf
 = 
NULL
;

354 
u16_t
 
Àn
;

355 
îr_t
 
îr
;

356 #i‡
LWIP_TCP


357 
≠i_msg
 
msg
;

360 
	`LWIP_ERROR
("√tc⁄n_ªcv: invÆidÖoöãr", (
√w_buf
 !
NULL
),  
ERR_ARG
;);

361 *
√w_buf
 = 
NULL
;

362 
	`LWIP_ERROR
("√tc⁄n_ªcv: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

363 
	`LWIP_ERROR
("√tc⁄n_ac˚±: invÆidÑecvmbox", 
	`sys_mbox_vÆid
(&
c⁄n
->
ªcvmbox
),  
ERR_CONN
;);

365 
îr
 = 
c⁄n
->
œ°_îr
;

366 i‡(
	`ERR_IS_FATAL
(
îr
)) {

371  
îr
;

374 #i‡
LWIP_SO_RCVTIMEO


375 i‡(
	`sys_¨ch_mbox_„tch
(&
c⁄n
->
ªcvmbox
, &
buf
, c⁄n->
ªcv_timeout
Ë=
SYS_ARCH_TIMEOUT
) {

376 
	`NETCONN_SET_SAFE_ERR
(
c⁄n
, 
ERR_TIMEOUT
);

377  
ERR_TIMEOUT
;

381 !
buf
) {

382 i‡(!
c⁄n
->
u£_ïﬁl
) {

383 
	`sys_lwù_¨ch_mbox_„tch
(&
c⁄n
->
ªcvbox
, &
buf
, 0, 1);

385 
	`sys_lwù_¨ch_mbox_„tch
(&
c⁄n
->
ïﬁl_±r
->
Ÿhî_mbox
, &
buf
, 0, 1);

392 #i‡
LWIP_TCP


393 i‡(
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

394 i‡(!
	`√tc⁄n_gë_nﬂut‹ecved
(
c⁄n
Ë|| (
buf
 =
NULL
)) {

398 
msg
.
fun˘i⁄
 = 
do_ªcv
;

399 
msg
.msg.
c⁄n
 = conn;

400 i‡(
buf
 !
NULL
) {

401 
msg
.msg.msg.
r
.
Àn
 = ((
pbuf
 *)
buf
)->
tŸ_Àn
;

403 
msg
.msg.msg.
r
.
Àn
 = 1;

406 
	`TCPIP_APIMSG
(&
msg
);

410 i‡(
buf
 =
NULL
) {

411 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVMINUS
, 0);

413 
	`NETCONN_SET_SAFE_ERR
(
c⁄n
, 
ERR_CLSD
);

414  
ERR_CLSD
;

416 
Àn
 = ((
pbuf
 *)
buf
)->
tŸ_Àn
;

419 #i‡
LWIP_TCP
 && (
LWIP_UDP
 || 
LWIP_RAW
)

422 #i‡(
LWIP_UDP
 || 
LWIP_RAW
)

424 
	`LWIP_ASSERT
("bu‡!NULL", 
buf
 !
NULL
);

425 
Àn
 = 
	`√tbuf_Àn
((
√tbuf
 *)
buf
);

429 #i‡
LWIP_SO_RCVBUF


430 
	`SYS_ARCH_DEC
(
c⁄n
->
ªcv_avaû
, 
Àn
);

434 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVMINUS
, 
Àn
);

436 
	`LWIP_DEBUGF
(
API_LIB_DEBUG
, ("√tc⁄n_ªcv_d©a:Ñe˚ived %p,Üí=%"
U16_F
"\n", 
buf
, 
Àn
));

438 *
√w_buf
 = 
buf
;

440  
ERR_OK
;

441 
	}
}

452 
îr_t


453 
	$√tc⁄n_ªcv_t˝_pbuf
(
√tc⁄n
 *
c⁄n
, 
pbuf
 **
√w_buf
)

455 
	`LWIP_ERROR
("√tc⁄n_ªcv: invÆid c⁄n", (
c⁄n
 !
NULL
) &&

456 
	`√tc⁄n_ty≥
(
c⁄n
Ë=
NETCONN_TCP
,  
ERR_ARG
;);

458  
	`√tc⁄n_ªcv_d©a
(
c⁄n
, (**)
√w_buf
);

459 
	}
}

469 
îr_t


470 
	$√tc⁄n_ªcv
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 **
√w_buf
)

472 #i‡
LWIP_TCP


473 
√tbuf
 *
buf
 = 
NULL
;

474 
îr_t
 
îr
;

477 
	`LWIP_ERROR
("√tc⁄n_ªcv: invÆidÖoöãr", (
√w_buf
 !
NULL
),  
ERR_ARG
;);

478 *
√w_buf
 = 
NULL
;

479 
	`LWIP_ERROR
("√tc⁄n_ªcv: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

480 
	`LWIP_ERROR
("√tc⁄n_ac˚±: invÆidÑecvmbox", 
	`sys_mbox_vÆid
(&
c⁄n
->
ªcvmbox
),  
ERR_CONN
;);

482 #i‡
LWIP_TCP


483 i‡(
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

484 
pbuf
 *
p
 = 
NULL
;

487 
buf
 = (
√tbuf
 *)
	`memp_mÆloc
(
MEMP_NETBUF
, 
NULL
);

488 i‡(
buf
 =
NULL
) {

489 
	`NETCONN_SET_SAFE_ERR
(
c⁄n
, 
ERR_MEM
);

490  
ERR_MEM
;

493 
îr
 = 
	`√tc⁄n_ªcv_d©a
(
c⁄n
, (**)&
p
);

494 i‡(
îr
 !
ERR_OK
) {

495 
	`memp_‰ì
(
MEMP_NETBUF
, 
buf
, 
NULL
);

496  
îr
;

498 
	`LWIP_ASSERT
("∞!NULL", 
p
 !
NULL
);

500 
buf
->
p
 =Ö;

501 
buf
->
±r
 = 
p
;

502 
buf
->
p‹t
 = 0;

503 
	`ù_addr_£t_™y
(&
buf
->
addr
);

504 *
√w_buf
 = 
buf
;

506  
ERR_OK
;

510 #i‡(
LWIP_UDP
 || 
LWIP_RAW
)

511  
	`√tc⁄n_ªcv_d©a
(
c⁄n
, (**)
√w_buf
);

514 
	}
}

527 
	$√tc⁄n_ªcved
(
√tc⁄n
 *
c⁄n
, 
u32_t
 
Àngth
)

529 #i‡
LWIP_TCP


530 i‡((
c⁄n
 !
NULL
Ë&& (c⁄n->
ty≥
 =
NETCONN_TCP
) &&

531 (
	`√tc⁄n_gë_nﬂut‹ecved
(
c⁄n
))) {

532 
≠i_msg
 
msg
;

536 
msg
.
fun˘i⁄
 = 
do_ªcv
;

537 
msg
.msg.
c⁄n
 = conn;

538 
msg
.msg.msg.
r
.
Àn
 = 
Àngth
;

541 
	`TCPIP_APIMSG_NO
(&
msg
);

545 
	`LWIP_UNUSED_ARG
(
c⁄n
);

546 
	`LWIP_UNUSED_ARG
(
Àngth
);

548 
	}
}

560 
îr_t


561 
	$√tc⁄n_£ndto
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 *
buf
, 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
)

563 i‡(
buf
 !
NULL
) {

564 
	`ù_addr_£t
(&
buf
->
addr
,áddr);

565 
buf
->
p‹t
 =Öort;

566  
	`√tc⁄n_£nd
(
c⁄n
, 
buf
);

568  
ERR_VAL
;

569 
	}
}

578 
îr_t


579 
	$√tc⁄n_£nd
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 *
buf
)

581 
≠i_msg
 *
msg
;

582 
îr_t
 
îr
;

584 
	`LWIP_ERROR
("√tc⁄n_£nd: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

586 
	`LWIP_DEBUGF
(
API_LIB_DEBUG
, ("√tc⁄n_£nd: sídög %"
U16_F
" byãs\n", 
buf
->
p
->
tŸ_Àn
));

587 
msg
->
fun˘i⁄
 = 
do_£nd
;

588 
msg
->msg.
c⁄n
 = conn;

589 
msg
->msg.msg.
b
 = 
buf
;

590 
îr
 = 
	`TCPIP_APIMSG
(&
msg
);

592 
	`NETCONN_SET_SAFE_ERR
(
c⁄n
, 
îr
);

593  
îr
;

594 
	}
}

608 
îr_t


609 
	$√tc⁄n_wrôe
(
√tc⁄n
 *
c⁄n
, c⁄° *
d©≠å
, 
size_t
 
size
, 
u8_t
 
≠iÊags
)

611 
≠i_msg
 
msg
;

612 
îr_t
 
îr
;

614 
	`LWIP_ERROR
("√tc⁄n_wrôe: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

615 
	`LWIP_ERROR
("√tc⁄n_wrôe: invÆid c⁄n->ty≥", (
c⁄n
->
ty≥
 =
NETCONN_TCP
),  
ERR_VAL
;);

616 i‡(
size
 == 0) {

617  
ERR_OK
;

624 
msg
.
fun˘i⁄
 = 
do_wrôe
;

625 
msg
.msg.
c⁄n
 = conn;

626 
msg
.msg.msg.
w
.
d©≠å
 = dataptr;

627 
msg
.msg.msg.
w
.
≠iÊags
 =ápiflags;

628 
msg
.msg.msg.
w
.
Àn
 = 
size
;

632 
îr
 = 
	`TCPIP_APIMSG_NO
(&
msg
);

635  
îr
;

636 
	}
}

645 
îr_t


646 
	$√tc⁄n_˛o£_shutdown
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
how
)

648 
≠i_msg
 
msg
;

649 
îr_t
 
îr
;

651 
	`LWIP_ERROR
("√tc⁄n_˛o£: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

653 
msg
.
fun˘i⁄
 = 
do_˛o£
;

654 
msg
.msg.
c⁄n
 = conn;

656 
msg
.msg.msg.
sd
.
shut
 = 
how
;

659 
îr
 = 
	`t˝ù_≠imsg
(&
msg
);

661 
	`NETCONN_SET_SAFE_ERR
(
c⁄n
, 
îr
);

662  
îr
;

663 
	}
}

671 
îr_t


672 
	$√tc⁄n_˛o£
(
√tc⁄n
 *
c⁄n
)

675  
	`√tc⁄n_˛o£_shutdown
(
c⁄n
, 
NETCONN_SHUT_RDWR
);

676 
	}
}

684 
îr_t


685 
	$√tc⁄n_shutdown
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
shut_rx
, u8_à
shut_tx
)

687  
	`√tc⁄n_˛o£_shutdown
(
c⁄n
, (
shut_rx
 ? 
NETCONN_SHUT_RD
 : 0Ë| (
shut_tx
 ? 
NETCONN_SHUT_WR
 : 0));

688 
	}
}

690 #i‡
LWIP_IGMP


701 
îr_t


702 
	$√tc⁄n_joö_Àave_group
(
√tc⁄n
 *
c⁄n
,

703 
ù_addr_t
 *
mu…üddr
,

704 
ù_addr_t
 *
√tif_addr
,

705 
√tc⁄n_igmp
 
joö_‹_Àave
)

707 
≠i_msg
 
msg
;

708 
îr_t
 
îr
;

710 
	`LWIP_ERROR
("√tc⁄n_joö_Àave_group: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

712 
msg
.
fun˘i⁄
 = 
do_joö_Àave_group
;

713 
msg
.msg.
c⁄n
 = conn;

714 
msg
.msg.msg.
jl
.
mu…üddr
 = multiaddr;

715 
msg
.msg.msg.
jl
.
√tif_addr
 =Çetif_addr;

716 
msg
.msg.msg.
jl
.
joö_‹_Àave
 = join_or_leave;

717 
îr
 = 
	`TCPIP_APIMSG
(&
msg
);

719 
	`NETCONN_SET_SAFE_ERR
(
c⁄n
, 
îr
);

720  
îr
;

721 
	}
}

724 #i‡
LWIP_DNS


735 
îr_t


736 
	$√tc⁄n_gëho°by«me
(c⁄° *
«me
, 
ù_addr_t
 *
addr
)

738 
dns_≠i_msg
 
msg
;

739 
îr_t
 
îr
;

740 
sys_£m_t
 
£m
;

742 
	`LWIP_ERROR
("√tc⁄n_gëho°by«me: invÆidÇame", (
«me
 !
NULL
),  
ERR_ARG
;);

743 
	`LWIP_ERROR
("√tc⁄n_gëho°by«me: invÆidáddr", (
addr
 !
NULL
),  
ERR_ARG
;);

745 
îr
 = 
	`sys_£m_√w
(&
£m
, 0);

746 i‡(
îr
 !
ERR_OK
) {

747  
îr
;

750 
msg
.
«me
 =Çame;

751 
msg
.
addr
 =áddr;

752 
msg
.
îr
 = &err;

753 
msg
.
£m
 = &sem;

755 
	`t˝ù_ˇŒback
(
do_gëho°by«me
, &
msg
);

756 
	`sys_£m_waô
(&
£m
);

757 
	`sys_£m_‰ì
(&
£m
);

759  
îr
;

760 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/api/api_msg.c

39 
	~"lwù/›t.h
"

41 #i‡
LWIP_NETCONN


43 
	~"lwù/≠i_msg.h
"

45 
	~"lwù/ù.h
"

46 
	~"lwù/t˝.h
"

48 
	~"lwù/memp.h
"

49 
	~"lwù/t˝ù.h
"

50 
	~"lwù/igmp.h
"

51 
	~"lwù/ßm∂e_åa˚poöt.h
"

53 
	~<°rög.h
>

55 
	#SET_NONBLOCKING_CONNECT
(
c⁄n
, 
vÆ
) do { if(val) { \

56 (
c⁄n
)->
Êags
 |
NETCONN_FLAG_IN_NONBLOCKING_CONNECT
; \

58 (
c⁄n
)->
Êags
 &~ 
NETCONN_FLAG_IN_NONBLOCKING_CONNECT
; }} 0)

	)

59 
	#IN_NONBLOCKING_CONNECT
(
c⁄n
Ë(((c⁄n)->
Êags
 & 
NETCONN_FLAG_IN_NONBLOCKING_CONNECT
Ë!0)

	)

62 #i‡
LWIP_TCP


63 
îr_t
 
do_wrôem‹e
(
√tc⁄n
 *
c⁄n
);

64 
do_˛o£_öã∫Æ
(
√tc⁄n
 *
c⁄n
);

67 #i‡
LWIP_RAW


75 
u8_t


76 
	$ªcv_øw
(*
¨g
, 
øw_pcb
 *
pcb
, 
pbuf
 *
p
,

77 
ù_addr_t
 *
addr
)

79 
pbuf
 *
q
;

80 
√tbuf
 *
buf
;

81 
√tc⁄n
 *
c⁄n
;

83 
	`LWIP_UNUSED_ARG
(
addr
);

84 
c⁄n
 = (
√tc⁄n
 *)
¨g
;

86 i‡((
c⁄n
 !
NULL
Ë&& 
	`sys_mbox_vÆid
(&c⁄n->
ªcvmbox
)) {

87 #i‡
LWIP_SO_RCVBUF


88 
ªcv_avaû
;

89 
	`SYS_ARCH_GET
(
c⁄n
->
ªcv_avaû
,Ñecv_avail);

90 i‡((
ªcv_avaû
 + ()(
p
->
tŸ_Àn
)Ë> 
c⁄n
->
ªcv_bufsize
) {

95 
q
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
p
->
tŸ_Àn
, 
PBUF_RAM
, 
NULL
);

96 if(
q
 !
NULL
) {

97 i‡(
	`pbuf_c›y
(
q
, 
p
Ë!
ERR_OK
) {

98 
	`pbuf_‰ì
(
q
, 
NULL
);

99 
q
 = 
NULL
;

103 i‡(
q
 !
NULL
) {

104 
u16_t
 
Àn
;

105 
buf
 = (
√tbuf
 *)
	`memp_mÆloc
(
MEMP_NETBUF
, 
NULL
);

106 i‡(
buf
 =
NULL
) {

107 
	`pbuf_‰ì
(
q
, 
NULL
);

111 
buf
->
p
 = 
q
;

112 
buf
->
±r
 = 
q
;

113 
	`ù_addr_c›y
(
buf
->
addr
, *
	`ù_cuºít_§c_addr
());

114 
buf
->
p‹t
 = 
pcb
->
¥Ÿocﬁ
;

116 
Àn
 = 
q
->
tŸ_Àn
;

117 i‡(
	`sys_mbox_åypo°
(&
c⁄n
->
ªcvmbox
, 
buf
Ë!
ERR_OK
) {

118 
	`√tbuf_dñëe
(
buf
);

121 #i‡
LWIP_SO_RCVBUF


122 
	`SYS_ARCH_INC
(
c⁄n
->
ªcv_avaû
, 
Àn
);

125 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 
Àn
);

131 
	}
}

134 #i‡
LWIP_UDP


142 
	$ªcv_udp
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

143 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
)

145 
√tbuf
 *
buf
;

146 
√tc⁄n
 *
c⁄n
;

147 
u16_t
 
Àn
;

148 #i‡
LWIP_SO_RCVBUF


149 
ªcv_avaû
;

152 
	`LWIP_UNUSED_ARG
(
pcb
);

153 
	`LWIP_ASSERT
("ªcv_ud∞mu° havê®pcbárgumít", 
pcb
 !
NULL
);

154 
	`LWIP_ASSERT
("ªcv_ud∞mu° havê™árgumít", 
¨g
 !
NULL
);

155 
c⁄n
 = (
√tc⁄n
 *)
¨g
;

156 
	`LWIP_ASSERT
("ªcv_udp:Ñecv f‹ wr⁄gÖcb!", 
c⁄n
->
pcb
.
udp
 ==Öcb);

158 #i‡
LWIP_SO_RCVBUF


159 
	`SYS_ARCH_GET
(
c⁄n
->
ªcv_avaû
,Ñecv_avail);

160 i‡((
c⁄n
 =
NULL
Ë|| !
	`sys_mbox_vÆid
(&c⁄n->
ªcvmbox
) ||

161 ((
ªcv_avaû
 + ()(
p
->
tŸ_Àn
)Ë> 
c⁄n
->
ªcv_bufsize
)) {

163 i‡((
c⁄n
 =
NULL
Ë|| !
	`sys_mbox_vÆid
(&c⁄n->
ªcvmbox
)) {

165 
	`pbuf_‰ì
(
p
, 
NULL
);

169 
buf
 = (
√tbuf
 *)
	`memp_mÆloc
(
MEMP_NETBUF
, 
NULL
);

170 i‡(
buf
 =
NULL
) {

171 
	`pbuf_‰ì
(
p
, 
NULL
);

174 
buf
->
p
 =Ö;

175 
buf
->
±r
 = 
p
;

176 
	`ù_addr_£t
(&
buf
->
addr
,áddr);

177 
buf
->
p‹t
 =Öort;

178 #i‡
LWIP_NETBUF_RECVINFO


180 c⁄° 
ù_hdr
* 
ùhdr
 = 
	`ù_cuºít_hódî
();

182 c⁄° 
udp_hdr
* 
udphdr
 = (*)(((*)
ùhdr
Ë+ 
	`IPH_LEN
(iphdr));

183 #i‡
LWIP_CHECKSUM_ON_COPY


184 
buf
->
Êags
 = 
NETBUF_FLAG_DESTADDR
;

186 
	`ù_addr_£t
(&
buf
->
tﬂddr
, 
	`ù_cuºít_de°_addr
());

187 
buf
->
t›‹t_chksum
 = 
udphdr
->
de°
;

192 
Àn
 = 
p
->
tŸ_Àn
;

193 i‡(
	`sys_mbox_åypo°
(&
c⁄n
->
ªcvmbox
, 
buf
Ë!
ERR_OK
) {

194 
	`√tbuf_dñëe
(
buf
);

197 #i‡
LWIP_SO_RCVBUF


198 
	`SYS_ARCH_INC
(
c⁄n
->
ªcv_avaû
, 
Àn
);

201 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 
Àn
);

203 
	}
}

206 #i‡
LWIP_TCP


213 
îr_t


214 
	$ªcv_t˝
(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
, 
îr_t
 
îr
)

216 
√tc⁄n
 *
c⁄n
;

217 
u16_t
 
Àn
;

218 
îr‹
;

220 
	`LWIP_UNUSED_ARG
(
pcb
);

221 
	`LWIP_ASSERT
("ªcv_t˝ mu° havê®pcbárgumít", 
pcb
 !
NULL
);

222 
	`LWIP_ASSERT
("ªcv_t˝ mu° havê™árgumít", 
¨g
 !
NULL
);

223 
c⁄n
 = (
√tc⁄n
 *)
¨g
;

224 
	`LWIP_ASSERT
("ªcv_t˝:Ñecv f‹ wr⁄gÖcb!", 
c⁄n
->
pcb
.
t˝
 ==Öcb);

226 i‡(
c⁄n
 =
NULL
) {

227  
ERR_VAL
;

229 i‡(!
c⁄n
->
u£_ïﬁl
) {

230 i‡(!
	`sys_mbox_vÆid
(&
c⁄n
->
ªcvmbox
)) {

232 i‡(
p
 !
NULL
) {

233 
	`t˝_ªcved
(
pcb
, 
p
->
tŸ_Àn
);

234 
	`pbuf_‰ì
(
p
, 
NULL
);

236  
ERR_OK
;

239 i‡(!
	`sys_mbox_vÆid
(&
c⁄n
->
ïﬁl_±r
->
Ÿhî_mbox
)) {

241 i‡(
p
 !
NULL
) {

242 
	`t˝_ªcved
(
pcb
, 
p
->
tŸ_Àn
);

243 
	`pbuf_‰ì
(
p
, 
NULL
);

245  
ERR_OK
;

255 i‡(
p
 !
NULL
) {

256 
Àn
 = 
p
->
tŸ_Àn
;

258 
Àn
 = 0;

261 i‡(
c⁄n
->
u£_ïﬁl
) {

262 
p
->
sock_id
 = 
c⁄n
->
sockë
;

263 
îr‹
 = 
	`sys_lwù_mbox_åypo°
(&
c⁄n
->
ïﬁl_±r
->
Ÿhî_mbox
, 
p
);

265 
îr‹
 = 
	`sys_lwù_mbox_åypo°
(&
c⁄n
->
ªcvbox
, 
p
);

268 i‡(
îr‹
 !
ERR_OK
) {

269  
ERR_MEM
;

271 #i‡
LWIP_SO_RCVBUF


272 
	`SYS_ARCH_INC
(
c⁄n
->
ªcv_avaû
, 
Àn
);

274 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 
Àn
);

279 i‡(
p
 !
NULL
) {

280 
	`t˝_ªcved
(
pcb
, 
p
->
tŸ_Àn
);

282 
	`t˝_£nd_em±y_ack
(
pcb
);

284  
ERR_OK
;

285 
	}
}

298 
îr_t


299 
	$pﬁl_t˝
(*
¨g
, 
t˝_pcb
 *
pcb
)

301 
√tc⁄n
 *
c⁄n
 = (√tc⁄¿*)
¨g
;

303 
	`LWIP_UNUSED_ARG
(
pcb
);

304 
	`LWIP_ASSERT
("c⁄¿!NULL", (
c⁄n
 !
NULL
));

306 i‡(
c⁄n
->
°©e
 =
NETCONN_WRITE
) {

307 
	`do_wrôem‹e
(
c⁄n
);

308 } i‡(
c⁄n
->
°©e
 =
NETCONN_CLOSE
) {

309 
	`do_˛o£_öã∫Æ
(
c⁄n
);

314 i‡(
c⁄n
->
Êags
 & 
NETCONN_FLAG_CHECK_WRITESPACE
) {

317 i‡((
c⁄n
->
pcb
.
t˝
 !
NULL
Ë&& (
	`t˝_¢dbuf
(c⁄n->pcb.t˝Ë> 
TCP_SNDLOWAT
) &&

318 (
	`t˝_¢dqueuñí
(
c⁄n
->
pcb
.
t˝
Ë< 
TCP_SNDQUEUELOWAT
)) {

319 
c⁄n
->
Êags
 &~
NETCONN_FLAG_CHECK_WRITESPACE
;

320 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDPLUS
, 0);

324  
ERR_OK
;

325 
	}
}

334 
îr_t


335 
	$£¡_t˝
(*
¨g
, 
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
)

337 
√tc⁄n
 *
c⁄n
 = (√tc⁄¿*)
¨g
;

339 
	`LWIP_UNUSED_ARG
(
pcb
);

340 
	`LWIP_ASSERT
("c⁄¿!NULL", (
c⁄n
 !
NULL
));

342 i‡(
c⁄n
->
°©e
 =
NETCONN_WRITE
) {

343 
	`do_wrôem‹e
(
c⁄n
);

344 } i‡(
c⁄n
->
°©e
 =
NETCONN_CLOSE
) {

345 
	`do_˛o£_öã∫Æ
(
c⁄n
);

348 i‡(
c⁄n
) {

351 i‡((
c⁄n
->
pcb
.
t˝
 !
NULL
Ë&& (
	`t˝_¢dbuf
(c⁄n->pcb.t˝Ë> 
TCP_SNDLOWAT
) &&

352 (
	`t˝_¢dqueuñí
(
c⁄n
->
pcb
.
t˝
Ë< 
TCP_SNDQUEUELOWAT
)) {

353 
c⁄n
->
Êags
 &~
NETCONN_FLAG_CHECK_WRITESPACE
;

354 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDPLUS
, 
Àn
);

358  
ERR_OK
;

359 
	}
}

369 
	$îr_t˝
(*
¨g
, 
îr_t
 
îr
)

371 
√tc⁄n
 *
c⁄n
;

372 
√tc⁄n_°©e
 
ﬁd_°©e
;

373 
îr‹
;

374 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

376 
c⁄n
 = (
√tc⁄n
 *)
¨g
;

377 
	`LWIP_ASSERT
("c⁄¿!NULL", (
c⁄n
 !
NULL
));

379 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

382 
	`SYS_ARCH_PROTECT
(
Àv
);

383 
c⁄n
->
œ°_îr
 = 
îr
;

384 
	`SYS_ARCH_UNPROTECT
(
Àv
);

387 
ﬁd_°©e
 = 
c⁄n
->
°©e
;

388 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

392 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_ERROR
, 0);

395 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

396 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDPLUS
, 0);

399 i‡(
	`sys_mbox_vÆid
(&
c⁄n
->
ªcvmbox
)) {

400 i‡(
c⁄n
->
u£_ïﬁl
) {

402 
îr‹
 = 
	`sys_lwù_mbox_åypo°
(&
c⁄n
->
ïﬁl_±r
->
Ÿhî_mbox
, 
NULL
);

405 
îr‹
 = 
	`sys_mbox_åypo°
(&
c⁄n
->
ªcvmbox
, 
NULL
);

409 i‡(
	`sys_mbox_vÆid
(&
c⁄n
->
ac˚±mbox
)) {

411 
	`sys_mbox_åypo°
(&
c⁄n
->
ac˚±mbox
, 
NULL
);

414 i‡((
ﬁd_°©e
 =
NETCONN_WRITE
Ë|| (ﬁd_°©ê=
NETCONN_CLOSE
) ||

415 (
ﬁd_°©e
 =
NETCONN_CONNECT
)) {

418 
was_n⁄blockög_c⁄√˘
 = 
	`IN_NONBLOCKING_CONNECT
(
c⁄n
);

419 
	`SET_NONBLOCKING_CONNECT
(
c⁄n
, 0);

421 i‡(!
was_n⁄blockög_c⁄√˘
) {

423 
	`LWIP_ASSERT
("c⁄n->cuºít_msg !NULL", 
c⁄n
->
cuºít_msg
 !
NULL
);

424 
c⁄n
->
cuºít_msg
->
îr
 =Érr;

425 
c⁄n
->
cuºít_msg
 = 
NULL
;

427 
	`sys_£m_sig«l
(&
c⁄n
->
›_com∂ëed
);

430 
	`LWIP_ASSERT
("c⁄n->cuºít_msg =NULL", 
c⁄n
->
cuºít_msg
 =
NULL
);

432 
	}
}

441 
	$£tup_t˝
(
√tc⁄n
 *
c⁄n
)

443 
t˝_pcb
 *
pcb
;

445 
pcb
 = 
c⁄n
->pcb.
t˝
;

446 
	`t˝_¨g
(
pcb
, 
c⁄n
);

447 
	`t˝_ªcv
(
pcb
, 
ªcv_t˝
);

448 
	`t˝_£¡
(
pcb
, 
£¡_t˝
);

449 
	`t˝_pﬁl
(
pcb
, 
pﬁl_t˝
, 4);

450 
	`t˝_îr
(
pcb
, 
îr_t˝
);

451 
	}
}

459 
îr_t


460 
	$ac˚±_fun˘i⁄
(*
¨g
, 
t˝_pcb
 *
√wpcb
, 
îr_t
 
îr
)

462 
√tc⁄n
 *
√wc⁄n
;

463 
√tc⁄n
 *
c⁄n
 = (√tc⁄¿*)
¨g
;

464 
îr‹
;

466 
	`LWIP_DEBUGF
(
API_MSG_DEBUG
, ("ac˚±_fun˘i⁄:Çewpcb->èã: %s\n", 
	`t˝_debug_°©e_°r
(
√wpcb
->
°©e
)));

468 i‡(!
c⁄n
->
u£_ïﬁl
) {

469 i‡(!
	`sys_mbox_vÆid
(&
c⁄n
->
ac˚±mbox
)) {

470 
	`LWIP_DEBUGF
(
API_MSG_DEBUG
, ("accept_function:ácceptmboxálready deleted\n"));

471  
ERR_VAL
;

474 i‡(!
	`sys_mbox_vÆid
(&
c⁄n
->
ïﬁl_±r
->
li°íî_mbox
)) {

475 
	`LWIP_DEBUGF
(
API_MSG_DEBUG
, ("accept_function:ácceptmboxálready deleted\n"));

476  
ERR_VAL
;

482 
√wc⁄n
 = 
	`√tc⁄n_Æloc
(
c⁄n
->
ty≥
, c⁄n->
ˇŒback
);

483 i‡(
√wc⁄n
 =
NULL
) {

484  
ERR_MEM
;

486 
√wc⁄n
->
pcb
.
t˝
 = 
√wpcb
;

487 
	`£tup_t˝
(
√wc⁄n
);

490 
√wc⁄n
->
œ°_îr
 = 
îr
;

492 i‡(
îr‹
 !
ERR_OK
) {

495 
√wc⁄n
->
pcb
.
t˝
 = 
NULL
;

497 
	`sys_mbox_‰ì
(&
√wc⁄n
->
ªcvmbox
);

498 
	`sys_lwù_mbox_‰ì
(&
√wc⁄n
->
ªcvbox
);

499 
	`sys_mbox_£t_övÆid
(&
√wc⁄n
->
ªcvmbox
);

500 
	`√tc⁄n_‰ì
(
√wc⁄n
);

501  
ERR_MEM
;

504 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

507 i‡(!
c⁄n
->
u£_ïﬁl
) {

508 
	`sys_mbox_åypo°
(&
c⁄n
->
ac˚±mbox
, 
√wc⁄n
);

510 
	`sys_lwù_mbox_åypo°
(&
c⁄n
->
ïﬁl_±r
->
li°íî_mbox
, 
√wc⁄n
);

513  
ERR_OK
;

514 
	}
}

525 
	$pcb_√w
(
≠i_msg_msg
 *
msg
)

527 
	`LWIP_ASSERT
("pcb_√w:ÖcbáÃódyáŒoˇãd", 
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
);

530 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

531 #i‡
LWIP_RAW


532 
NETCONN_RAW
:

533 
msg
->
c⁄n
->
pcb
.
øw
 = 
	`øw_√w
(msg->msg.
n
.
¥Ÿo
);

534 if(
msg
->
c⁄n
->
pcb
.
øw
 =
NULL
) {

535 
msg
->
îr
 = 
ERR_MEM
;

538 
	`øw_ªcv
(
msg
->
c⁄n
->
pcb
.
øw
, 
ªcv_øw
, msg->conn);

541 #i‡
LWIP_UDP


542 
NETCONN_UDP
:

543 
msg
->
c⁄n
->
pcb
.
udp
 = 
	`udp_√w
();

544 if(
msg
->
c⁄n
->
pcb
.
udp
 =
NULL
) {

545 
msg
->
îr
 = 
ERR_MEM
;

548 #i‡
LWIP_UDPLITE


549 i‡(
msg
->
c⁄n
->
ty≥
==
NETCONN_UDPLITE
) {

550 
	`udp_£tÊags
(
msg
->
c⁄n
->
pcb
.
udp
, 
UDP_FLAGS_UDPLITE
);

553 i‡(
msg
->
c⁄n
->
ty≥
==
NETCONN_UDPNOCHKSUM
) {

554 
	`udp_£tÊags
(
msg
->
c⁄n
->
pcb
.
udp
, 
UDP_FLAGS_NOCHKSUM
);

556 
	`udp_ªcv
(
msg
->
c⁄n
->
pcb
.
udp
, 
ªcv_udp
, msg->conn);

559 #i‡
LWIP_TCP


560 
NETCONN_TCP
:

561 
msg
->
c⁄n
->
pcb
.
t˝
 = 
	`t˝_√w
();

562 if(
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
) {

563 
msg
->
îr
 = 
ERR_MEM
;

566 
	`£tup_t˝
(
msg
->
c⁄n
);

571 
msg
->
îr
 = 
ERR_VAL
;

574 
	}
}

583 
	$do_√wc⁄n
(
≠i_msg_msg
 *
msg
)

585 
msg
->
îr
 = 
ERR_OK
;

586 if(
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
) {

587 
	`pcb_√w
(
msg
);

593 
	`TCPIP_APIMSG_ACK
(
msg
);

594 
	}
}

606 
√tc⁄n
*

607 
	$√tc⁄n_Æloc
(
√tc⁄n_ty≥
 
t
, 
√tc⁄n_ˇŒback
 
ˇŒback
)

609 
√tc⁄n
 *
c⁄n
;

610 
size
;

611 
˝u
 = 
	`sched_gë˝u
(Ë% 
CPU_MOD
;

613 
c⁄n
 = (
√tc⁄n
 *)
	`memp_mÆloc
(
MEMP_NETCONN
, 
lwù_t˝ù_thªad
[
˝u
]);

614 i‡(
c⁄n
 =
NULL
) {

615  
NULL
;

618 
c⁄n
->
œ°_îr
 = 
ERR_OK
;

619 
c⁄n
->
ty≥
 = 
t
;

620 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

622 #i‡(
DEFAULT_RAW_RECVMBOX_SIZE
 =
DEFAULT_UDP_RECVMBOX_SIZE
) && \

623 (
DEFAULT_RAW_RECVMBOX_SIZE
 =
DEFAULT_TCP_RECVMBOX_SIZE
)

624 
size
 = 
DEFAULT_RAW_RECVMBOX_SIZE
;

626 
	`NETCONNTYPE_GROUP
(
t
)) {

627 #i‡
LWIP_RAW


628 
NETCONN_RAW
:

629 
size
 = 
DEFAULT_RAW_RECVMBOX_SIZE
;

632 #i‡
LWIP_UDP


633 
NETCONN_UDP
:

634 
size
 = 
DEFAULT_UDP_RECVMBOX_SIZE
;

637 #i‡
LWIP_TCP


638 
NETCONN_TCP
:

639 
size
 = 
DEFAULT_TCP_RECVMBOX_SIZE
;

643 
	`LWIP_ASSERT
("netconn_alloc: undefinedÇetconn_type", 0);

648 i‡(
	`±hªad_c⁄d_öô
(&
c⁄n
->
ªad_c⁄d
, 
NULL
Ë!
ERR_OK
) {

649 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
, 
NULL
);

650  
NULL
;

653 i‡(
	`±hªad_muãx_öô
(&
c⁄n
->
ªad_muãx
, 
NULL
Ë!
ERR_OK
) {

654 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
, 
NULL
);

655  
NULL
;

658 i‡(
	`sys_£m_√w
(&
c⁄n
->
›_com∂ëed
, 0Ë!
ERR_OK
) {

659 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
, 
NULL
);

660  
NULL
;

662 i‡(
	`sys_mbox_√w
(&
c⁄n
->
ªcvmbox
, 
size
Ë!
ERR_OK
) {

663 
	`sys_£m_‰ì
(&
c⁄n
->
›_com∂ëed
);

664 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
, 
NULL
);

665  
NULL
;

668 i‡(
	`sys_lwù_mbox_√w
(&
c⁄n
->
ªcvbox
, 
size
Ë!
ERR_OK
) {

669 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
, 
NULL
);

670  
NULL
;

673 #i‡
LWIP_TCP


674 
	`sys_mbox_£t_övÆid
(&
c⁄n
->
ac˚±mbox
);

676 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

677 #i‡
LWIP_SOCKET


679 
c⁄n
->
sockë
 = -1;

681 
c⁄n
->
ˇŒback
 = callback;

682 #i‡
LWIP_TCP


683 
c⁄n
->
cuºít_msg
 = 
NULL
;

684 
c⁄n
->
wrôe_off£t
 = 0;

686 #i‡
LWIP_SO_RCVTIMEO


687 
c⁄n
->
ªcv_timeout
 = 0;

689 #i‡
LWIP_SO_RCVBUF


690 
c⁄n
->
ªcv_bufsize
 = 
RECV_BUFSIZE_DEFAULT
;

691 
c⁄n
->
ªcv_avaû
 = 0;

693 
c⁄n
->
Êags
 = 0;

694  
c⁄n
;

695 
	}
}

704 
	$√tc⁄n_‰ì
(
√tc⁄n
 *
c⁄n
)

706 
	`LWIP_ASSERT
("PCB mu° bêdóŒoˇãd outsidêthi†fun˘i⁄", 
c⁄n
->
pcb
.
t˝
 =
NULL
);

707 
	`LWIP_ASSERT
("recvmbox must be deallocated before callingÅhis function",

708 !
	`sys_mbox_vÆid
(&
c⁄n
->
ªcvmbox
));

709 #i‡
LWIP_TCP


710 
	`LWIP_ASSERT
("acceptmbox must be deallocated before callingÅhis function",

711 !
	`sys_mbox_vÆid
(&
c⁄n
->
ac˚±mbox
));

714 
	`sys_£m_‰ì
(&
c⁄n
->
›_com∂ëed
);

715 
	`sys_£m_£t_övÆid
(&
c⁄n
->
›_com∂ëed
);

717 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
, 
NULL
);

718 
	}
}

729 
	$√tc⁄n_døö
(
√tc⁄n
 *
c⁄n
)

731 *
mem
;

732 #i‡
LWIP_TCP


733 
pbuf
 *
p
;

739 i‡(
	`sys_mbox_vÆid
(&
c⁄n
->
ªcvmbox
)) {

740 
	`sys_mbox_åy„tch
(&
c⁄n
->
ªcvmbox
, &
mem
Ë!
SYS_MBOX_EMPTY
) {

741 #i‡
LWIP_TCP


742 i‡(
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

743 if(
mem
 !
NULL
) {

744 
p
 = (
pbuf
*)
mem
;

746 i‡(
c⁄n
->
pcb
.
t˝
 !
NULL
) {

747 
	`t˝_ªcved
(
c⁄n
->
pcb
.
t˝
, 
p
->
tŸ_Àn
);

749 
	`pbuf_‰ì
(
p
, 
NULL
);

754 
	`√tbuf_dñëe
((
√tbuf
 *)
mem
);

757 
	`sys_mbox_‰ì
(&
c⁄n
->
ªcvmbox
);

758 
	`sys_mbox_£t_övÆid
(&
c⁄n
->
ªcvmbox
);

761 i‡(
	`sys_mbox_vÆid
(&
c⁄n
->
ªcvbox
)) {

762 
	`sys_lwù_mbox_åy„tch
(&
c⁄n
->
ªcvbox
, &
mem
Ë!
SYS_MBOX_EMPTY
) {

763 #i‡
LWIP_TCP


764 i‡(
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

765 if(
mem
 !
NULL
) {

766 
p
 = (
pbuf
*)
mem
;

768 i‡(
c⁄n
->
pcb
.
t˝
 !
NULL
) {

769 
	`t˝_ªcved
(
c⁄n
->
pcb
.
t˝
, 
p
->
tŸ_Àn
);

771 
	`pbuf_‰ì
(
p
, 
NULL
);

776 
	`√tbuf_dñëe
((
√tbuf
 *)
mem
);

779 
	`sys_lwù_mbox_‰ì
(&
c⁄n
->
ªcvbox
);

783 #i‡
LWIP_TCP


784 i‡(
	`sys_mbox_vÆid
(&
c⁄n
->
ac˚±mbox
)) {

785 
	`sys_mbox_åy„tch
(&
c⁄n
->
ac˚±mbox
, &
mem
Ë!
SYS_MBOX_EMPTY
) {

786 
√tc⁄n
 *
√wc⁄n
 = (√tc⁄¿*)
mem
;

789 i‡(
c⁄n
->
pcb
.
t˝
 !
NULL
) {

790 
	`t˝_ac˚±ed
(
c⁄n
->
pcb
.
t˝
);

793 
	`√tc⁄n_døö
(
√wc⁄n
);

794 i‡(
√wc⁄n
->
pcb
.
t˝
 !
NULL
) {

795 
	`t˝_ab‹t
(
√wc⁄n
->
pcb
.
t˝
);

796 
√wc⁄n
->
pcb
.
t˝
 = 
NULL
;

798 
	`√tc⁄n_‰ì
(
√wc⁄n
);

800 
	`sys_mbox_‰ì
(&
c⁄n
->
ac˚±mbox
);

801 
	`sys_mbox_£t_övÆid
(&
c⁄n
->
ac˚±mbox
);

804 
	}
}

806 #i‡
LWIP_TCP


815 
	$do_˛o£_öã∫Æ
(
√tc⁄n
 *
c⁄n
)

817 
îr_t
 
îr
;

818 
u8_t
 
shut
, 
shut_rx
, 
shut_tx
, 
˛o£
;

820 
	`LWIP_ASSERT
("övÆid c⁄n", (
c⁄n
 !
NULL
));

821 
	`LWIP_ASSERT
("thi†i†f‹Å˝Çëc⁄n†⁄ly", (
c⁄n
->
ty≥
 =
NETCONN_TCP
));

822 
	`LWIP_ASSERT
("c⁄¿mu° bêö sèã NETCONN_CLOSE", (
c⁄n
->
°©e
 =
NETCONN_CLOSE
));

823 
	`LWIP_ASSERT
("pcbáÃódy clo£d", (
c⁄n
->
pcb
.
t˝
 !
NULL
));

824 
	`LWIP_ASSERT
("c⁄n->cuºít_msg !NULL", 
c⁄n
->
cuºít_msg
 !
NULL
);

826 
shut
 = 
c⁄n
->
cuºít_msg
->
msg
.
sd
.shut;

827 
shut_rx
 = 
shut
 & 
NETCONN_SHUT_RD
;

828 
shut_tx
 = 
shut
 & 
NETCONN_SHUT_WR
;

830 
˛o£
 = 
shut
 =
NETCONN_SHUT_RDWR
;

833 i‡(
˛o£
) {

834 
	`t˝_¨g
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

836 i‡(
c⁄n
->
pcb
.
t˝
->
°©e
 =
LISTEN
) {

837 
	`t˝_ac˚±
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

840 i‡(
shut_rx
) {

841 
	`t˝_ªcv
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

842 
	`t˝_ac˚±
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

844 i‡(
shut_tx
) {

845 
	`t˝_£¡
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

847 i‡(
˛o£
) {

848 
	`t˝_pﬁl
(
c⁄n
->
pcb
.
t˝
, 
NULL
, 4);

849 
	`t˝_îr
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

853 i‡(
shut
 =
NETCONN_SHUT_RDWR
) {

854 
îr
 = 
	`t˝_˛o£
(
c⁄n
->
pcb
.
t˝
);

856 
îr
 = 
	`t˝_shutdown
(
c⁄n
->
pcb
.
t˝
, 
shut
 & 
NETCONN_SHUT_RD
, shuà& 
NETCONN_SHUT_WR
);

858 i‡(
îr
 =
ERR_OK
) {

860 
c⁄n
->
cuºít_msg
->
îr
 = 
ERR_OK
;

861 
c⁄n
->
cuºít_msg
 = 
NULL
;

862 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

864 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

867 i‡(
˛o£
) {

868 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_ERROR
, 0);

870 i‡(
shut_rx
) {

871 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

873 i‡(
shut_tx
) {

874 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDPLUS
, 0);

877 
	`sys_£m_sig«l
(&
c⁄n
->
›_com∂ëed
);

881 
	`LWIP_ASSERT
("ClosögáÜi°íÖcb mayÇŸ faû!", (
c⁄n
->
pcb
.
t˝
->
°©e
 !
LISTEN
));

882 
	`t˝_£¡
(
c⁄n
->
pcb
.
t˝
, 
£¡_t˝
);

883 
	`t˝_pﬁl
(
c⁄n
->
pcb
.
t˝
, 
pﬁl_t˝
, 4);

884 
	`t˝_îr
(
c⁄n
->
pcb
.
t˝
, 
îr_t˝
);

885 
	`t˝_¨g
(
c⁄n
->
pcb
.
t˝
, conn);

890 
	}
}

900 
	$do_dñc⁄n
(
≠i_msg_msg
 *
msg
)

903 i‡((
msg
->
c⁄n
->
°©e
 !
NETCONN_NONE
) &&

904 (
msg
->
c⁄n
->
°©e
 !
NETCONN_LISTEN
) &&

905 (
msg
->
c⁄n
->
°©e
 !
NETCONN_CONNECT
)) {

907 
	`LWIP_ASSERT
("msg->c⁄n->ty≥ =NETCONN_TCP", 
msg
->
c⁄n
->
ty≥
 =
NETCONN_TCP
);

908 
msg
->
îr
 = 
ERR_INPROGRESS
;

910 
	`LWIP_ASSERT
("blocking connect inÖrogress",

911 (
msg
->
c⁄n
->
°©e
 !
NETCONN_CONNECT
Ë|| 
	`IN_NONBLOCKING_CONNECT
(msg->conn));

913 
	`√tc⁄n_døö
(
msg
->
c⁄n
);

915 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

917 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

918 #i‡
LWIP_RAW


919 
NETCONN_RAW
:

920 
	`øw_ªmove
(
msg
->
c⁄n
->
pcb
.
øw
);

923 #i‡
LWIP_UDP


924 
NETCONN_UDP
:

925 
msg
->
c⁄n
->
pcb
.
udp
->
ªcv_¨g
 = 
NULL
;

926 
	`udp_ªmove
(
msg
->
c⁄n
->
pcb
.
udp
);

929 #i‡
LWIP_TCP


930 
NETCONN_TCP
:

931 
	`LWIP_ASSERT
("Æªady wrôög o∏˛osög", 
msg
->
c⁄n
->
cuºít_msg
 =
NULL
 &&

932 
msg
->
c⁄n
->
wrôe_off£t
 == 0);

933 
msg
->
c⁄n
->
°©e
 = 
NETCONN_CLOSE
;

934 
msg
->msg.
sd
.
shut
 = 
NETCONN_SHUT_RDWR
;

935 
msg
->
c⁄n
->
cuºít_msg
 = msg;

936 
	`do_˛o£_öã∫Æ
(
msg
->
c⁄n
);

944 
msg
->
c⁄n
->
pcb
.
t˝
 = 
NULL
;

950 
	`API_EVENT
(
msg
->
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

951 
	`API_EVENT
(
msg
->
c⁄n
, 
NETCONN_EVT_SENDPLUS
, 0);

953 i‡(
	`sys_£m_vÆid
(&
msg
->
c⁄n
->
›_com∂ëed
)) {

954 
	`sys_£m_sig«l
(&
msg
->
c⁄n
->
›_com∂ëed
);

956 
	}
}

966 
	$do_böd
(
≠i_msg_msg
 *
msg
)

968 i‡(
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
œ°_îr
)) {

969 
msg
->
îr
 = msg->
c⁄n
->
œ°_îr
;

971 
msg
->
îr
 = 
ERR_VAL
;

972 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

973 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

974 #i‡
LWIP_RAW


975 
NETCONN_RAW
:

976 
msg
->
îr
 = 
	`øw_böd
(msg->
c⁄n
->
pcb
.
øw
, msg->msg.
bc
.
ùaddr
);

979 #i‡
LWIP_UDP


980 
NETCONN_UDP
:

981 
msg
->
îr
 = 
	`udp_böd
(msg->
c⁄n
->
pcb
.
udp
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
);

984 #i‡
LWIP_TCP


985 
NETCONN_TCP
:

986 
msg
->
îr
 = 
	`t˝_böd
(msg->
c⁄n
->
pcb
.
t˝
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
);

994 
	`TCPIP_APIMSG_ACK
(
msg
);

995 
	}
}

997 #i‡
LWIP_TCP


1004 
îr_t


1005 
	$do_c⁄√˘ed
(*
¨g
, 
t˝_pcb
 *
pcb
, 
îr_t
 
îr
)

1007 
√tc⁄n
 *
c⁄n
;

1008 
was_blockög
;

1010 
	`LWIP_UNUSED_ARG
(
pcb
);

1012 
c⁄n
 = (
√tc⁄n
 *)
¨g
;

1014 i‡(
c⁄n
 =
NULL
) {

1015  
ERR_VAL
;

1018 
	`LWIP_ASSERT
("c⁄n->°©ê=NETCONN_CONNECT", 
c⁄n
->
°©e
 =
NETCONN_CONNECT
);

1019 
	`LWIP_ASSERT
("(conn->current_msg != NULL) || conn->in_non_blocking_connect",

1020 (
c⁄n
->
cuºít_msg
 !
NULL
Ë|| 
	`IN_NONBLOCKING_CONNECT
(conn));

1022 i‡(
c⁄n
->
cuºít_msg
 !
NULL
) {

1023 
c⁄n
->
cuºít_msg
->
îr
 =Érr;

1025 i‡((
c⁄n
->
ty≥
 =
NETCONN_TCP
Ë&& (
îr
 =
ERR_OK
)) {

1026 
	`£tup_t˝
(
c⁄n
);

1028 
was_blockög
 = !
	`IN_NONBLOCKING_CONNECT
(
c⁄n
);

1029 
	`SET_NONBLOCKING_CONNECT
(
c⁄n
, 0);

1030 
c⁄n
->
cuºít_msg
 = 
NULL
;

1031 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

1032 i‡(!
was_blockög
) {

1033 
	`NETCONN_SET_SAFE_ERR
(
c⁄n
, 
ERR_OK
);

1035 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDPLUS
, 0);

1037 i‡(
was_blockög
) {

1038 
	`sys_£m_sig«l
(&
c⁄n
->
›_com∂ëed
);

1040  
ERR_OK
;

1041 
	}
}

1052 
	$do_c⁄√˘
(
≠i_msg_msg
 *
msg
)

1054 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
) {

1056 
msg
->
îr
 = 
ERR_CLSD
;

1058 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

1059 #i‡
LWIP_RAW


1060 
NETCONN_RAW
:

1061 
msg
->
îr
 = 
	`øw_c⁄√˘
(msg->
c⁄n
->
pcb
.
øw
, msg->msg.
bc
.
ùaddr
);

1064 #i‡
LWIP_UDP


1065 
NETCONN_UDP
:

1066 
msg
->
îr
 = 
	`udp_c⁄√˘
(msg->
c⁄n
->
pcb
.
udp
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
);

1069 #i‡
LWIP_TCP


1070 
NETCONN_TCP
:

1072 i‡(
msg
->
c⁄n
->
°©e
 !
NETCONN_NONE
) {

1073 
msg
->
îr
 = 
ERR_ISCONN
;

1075 
	`£tup_t˝
(
msg
->
c⁄n
);

1076 
msg
->
îr
 = 
	`t˝_c⁄√˘
(msg->
c⁄n
->
pcb
.
t˝
, msg->msg.
bc
.
ùaddr
,

1077 
msg
->msg.
bc
.
p‹t
, 
do_c⁄√˘ed
);

1078 i‡(
msg
->
îr
 =
ERR_OK
) {

1079 
u8_t
 
n⁄_blockög
 = 
	`√tc⁄n_is_n⁄blockög
(
msg
->
c⁄n
);

1080 
msg
->
c⁄n
->
°©e
 = 
NETCONN_CONNECT
;

1081 
	`SET_NONBLOCKING_CONNECT
(
msg
->
c⁄n
, 
n⁄_blockög
);

1082 i‡(
n⁄_blockög
) {

1083 
msg
->
îr
 = 
ERR_INPROGRESS
;

1085 
msg
->
c⁄n
->
cuºít_msg
 = msg;

1095 
	`LWIP_ERROR
("InvÆidÇëc⁄¿ty≥", 0, do{ 
msg
->
îr
 = 
ERR_VAL
; }0));

1099 
	`sys_£m_sig«l
(&
msg
->
c⁄n
->
›_com∂ëed
);

1100 
	}
}

1110 
	$do_disc⁄√˘
(
≠i_msg_msg
 *
msg
)

1112 #i‡
LWIP_UDP


1113 i‡(
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
Ë=
NETCONN_UDP
) {

1114 
	`udp_disc⁄√˘
(
msg
->
c⁄n
->
pcb
.
udp
);

1115 
msg
->
îr
 = 
ERR_OK
;

1119 
msg
->
îr
 = 
ERR_VAL
;

1121 
	`TCPIP_APIMSG_ACK
(
msg
);

1122 
	}
}

1124 #i‡
LWIP_TCP


1132 
	$do_li°í
(
≠i_msg_msg
 *
msg
)

1134 i‡(
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
œ°_îr
)) {

1135 
msg
->
îr
 = msg->
c⁄n
->
œ°_îr
;

1137 
msg
->
îr
 = 
ERR_CONN
;

1138 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

1139 i‡(
msg
->
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

1140 i‡(
msg
->
c⁄n
->
°©e
 =
NETCONN_NONE
) {

1141 #i‡
TCP_LISTEN_BACKLOG


1142 
t˝_pcb
* 
Õcb
 = 
	`t˝_li°í_wôh_backlog
(
msg
->
c⁄n
->
pcb
.
t˝
, msg->msg.
lb
.
backlog
);

1144 
t˝_pcb
* 
Õcb
 = 
	`t˝_li°í
(
msg
->
c⁄n
->
pcb
.
t˝
);

1146 i‡(
Õcb
 =
NULL
) {

1148 
msg
->
îr
 = 
ERR_MEM
;

1151 i‡(
	`sys_mbox_vÆid
(&
msg
->
c⁄n
->
ªcvmbox
)) {

1153 
	`sys_mbox_‰ì
(&
msg
->
c⁄n
->
ªcvmbox
);

1154 
	`sys_mbox_£t_övÆid
(&
msg
->
c⁄n
->
ªcvmbox
);

1156 i‡(
	`sys_mbox_vÆid
(&
msg
->
c⁄n
->
ªcvbox
)) {

1158 
	`sys_lwù_mbox_‰ì
(&
msg
->
c⁄n
->
ªcvbox
);

1160 
msg
->
îr
 = 
ERR_OK
;

1161 i‡(!
	`sys_mbox_vÆid
(&
msg
->
c⁄n
->
ac˚±mbox
)) {

1162 
msg
->
îr
 = 
	`sys_mbox_√w
(&msg->
c⁄n
->
ac˚±mbox
, 
DEFAULT_ACCEPTMBOX_SIZE
);

1164 i‡(
msg
->
îr
 =
ERR_OK
) {

1165 
msg
->
c⁄n
->
°©e
 = 
NETCONN_LISTEN
;

1166 
msg
->
c⁄n
->
pcb
.
t˝
 = 
Õcb
;

1167 
	`t˝_¨g
(
msg
->
c⁄n
->
pcb
.
t˝
, msg->conn);

1168 
	`t˝_ac˚±
(
msg
->
c⁄n
->
pcb
.
t˝
, 
ac˚±_fun˘i⁄
);

1171 
	`t˝_˛o£
(
Õcb
);

1172 
msg
->
c⁄n
->
pcb
.
t˝
 = 
NULL
;

1179 
	`TCPIP_APIMSG_ACK
(
msg
);

1180 
	}
}

1190 
	$do_£nd
(
≠i_msg_msg
 *
msg
)

1192 i‡(
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
œ°_îr
)) {

1193 
msg
->
îr
 = msg->
c⁄n
->
œ°_îr
;

1195 
msg
->
îr
 = 
ERR_CONN
;

1196 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

1197 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

1198 #i‡
LWIP_RAW


1199 
NETCONN_RAW
:

1200 i‡(
	`ù_addr_ißny
(&
msg
->msg.
b
->
addr
)) {

1201 
msg
->
îr
 = 
	`øw_£nd
(msg->
c⁄n
->
pcb
.
øw
, msg->msg.
b
->
p
);

1203 
msg
->
îr
 = 
	`øw_£ndto
(msg->
c⁄n
->
pcb
.
øw
, msg->msg.
b
->
p
, &msg->msg.b->
addr
);

1207 #i‡
LWIP_UDP


1208 
NETCONN_UDP
:

1209 #i‡
LWIP_CHECKSUM_ON_COPY


1210 i‡(
	`ù_addr_ißny
(&
msg
->msg.
b
->
addr
)) {

1211 
msg
->
îr
 = 
	`udp_£nd_chksum
(msg->
c⁄n
->
pcb
.
udp
, msg->msg.
b
->
p
,

1212 
msg
->msg.
b
->
Êags
 & 
NETBUF_FLAG_CHKSUM
, msg->msg.b->
t›‹t_chksum
);

1214 
msg
->
îr
 = 
	`udp_£ndto_chksum
(msg->
c⁄n
->
pcb
.
udp
, msg->msg.
b
->
p
,

1215 &
msg
->msg.
b
->
addr
, msg->msg.b->
p‹t
,

1216 
msg
->msg.
b
->
Êags
 & 
NETBUF_FLAG_CHKSUM
, msg->msg.b->
t›‹t_chksum
);

1219 i‡(
	`ù_addr_ißny
(&
msg
->msg.
b
->
addr
)) {

1220 
msg
->
îr
 = 
	`udp_£nd
(msg->
c⁄n
->
pcb
.
udp
, msg->msg.
b
->
p
);

1222 
msg
->
îr
 = 
	`udp_£ndto
(msg->
c⁄n
->
pcb
.
udp
, msg->msg.
b
->
p
, &msg->msg.b->
addr
, msg->msg.b->
p‹t
);

1232 
	`TCPIP_APIMSG_ACK
(
msg
);

1233 
	}
}

1235 #i‡
LWIP_TCP


1243 
	$do_ªcv
(
≠i_msg_msg
 *
msg
)

1245 
msg
->
îr
 = 
ERR_OK
;

1246 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

1247 i‡(
msg
->
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

1248 #i‡
TCP_LISTEN_BACKLOG


1249 i‡(
msg
->
c⁄n
->
pcb
.
t˝
->
°©e
 =
LISTEN
) {

1250 
	`t˝_ac˚±ed
(
msg
->
c⁄n
->
pcb
.
t˝
);

1254 
u32_t
 
ªmaöög
 = 
msg
->msg.
r
.
Àn
;

1256 
u16_t
 
ªcved
 = (
ªmaöög
 > 0xffff) ? 0xffff : (u16_t)remaining;

1257 
	`t˝_ªcved
(
msg
->
c⁄n
->
pcb
.
t˝
, 
ªcved
);

1258 
ªmaöög
 -
ªcved
;

1259 }
ªmaöög
 != 0);

1263 
	`TCPIP_APIMSG_ACK
(
msg
);

1264 
	}
}

1277 
îr_t


1278 
	$do_wrôem‹e
(
√tc⁄n
 *
c⁄n
)

1280 
îr_t
 
îr
 = 
ERR_OK
;

1281 *
d©≠å
;

1282 
u16_t
 
Àn
, 
avaûabÀ
;

1283 
u8_t
 
wrôe_föished
 = 0;

1284 
size_t
 
diff
;

1285 
u8_t
 
d⁄tblock
;

1286 
u8_t
 
≠iÊags
;

1288 i‡(
c⁄n
->
cuºít_msg
 =
NULL
) {

1289  
ERR_OK
;

1292 
d⁄tblock
 = 
	`√tc⁄n_is_n⁄blockög
(
c⁄n
) ||

1293 (
c⁄n
->
cuºít_msg
->
msg
.
w
.
≠iÊags
 & 
NETCONN_DONTBLOCK
);

1294 
≠iÊags
 = 
c⁄n
->
cuºít_msg
->
msg
.
w
.apiflags;

1296 
	`LWIP_ASSERT
("c⁄¿!NULL", 
c⁄n
 !
NULL
);

1297 
	`LWIP_ASSERT
("c⁄n->cuºít_msg !NULL", 
c⁄n
->
cuºít_msg
 !
NULL
);

1298 
	`LWIP_ASSERT
("c⁄n->pcb.t˝ !NULL", 
c⁄n
->
pcb
.
t˝
 !
NULL
);

1299 
	`LWIP_ASSERT
("conn->write_offset < conn->current_msg->msg.w.len",

1300 
c⁄n
->
wrôe_off£t
 < c⁄n->
cuºít_msg
->
msg
.
w
.
Àn
);

1303 
d©≠å
 = (
u8_t
*)
c⁄n
->
cuºít_msg
->
msg
.
w
.d©≠å + c⁄n->
wrôe_off£t
;

1304 
diff
 = 
c⁄n
->
cuºít_msg
->
msg
.
w
.
Àn
 - c⁄n->
wrôe_off£t
;

1305 i‡(
diff
 > 0xffffUL) {

1306 
Àn
 = 0xffff;

1307 #i‡
LWIP_TCPIP_CORE_LOCKING


1308 
c⁄n
->
Êags
 |
NETCONN_FLAG_WRITE_DELAYED
;

1310 
≠iÊags
 |
TCP_WRITE_FLAG_MORE
;

1312 
Àn
 = (
u16_t
)
diff
;

1314 
avaûabÀ
 = 
	`t˝_¢dbuf
(
c⁄n
->
pcb
.
t˝
);

1315 i‡(
avaûabÀ
 < 
Àn
) {

1317 
Àn
 = 
avaûabÀ
;

1318 #i‡
LWIP_TCPIP_CORE_LOCKING


1319 
c⁄n
->
Êags
 |
NETCONN_FLAG_WRITE_DELAYED
;

1321 
≠iÊags
 |
TCP_WRITE_FLAG_MORE
;

1323 i‡(
d⁄tblock
 && (
Àn
 < 
c⁄n
->
cuºít_msg
->
msg
.
w
.len)) {

1325 
îr
 = 
ERR_MEM
;

1327 i‡(
îr
 =
ERR_OK
) {

1328 
	`LWIP_ASSERT
("do_wrôem‹e: invÆidÜígth!", ((
c⁄n
->
wrôe_off£t
 + 
Àn
Ë<c⁄n->
cuºít_msg
->
msg
.
w
.len));

1329 
îr
 = 
	`t˝_wrôe
(
c⁄n
->
pcb
.
t˝
, 
d©≠å
, 
Àn
, 
≠iÊags
);

1331 i‡(
d⁄tblock
 && (
îr
 =
ERR_MEM
)) {

1333 
wrôe_föished
 = 1;

1334 
îr
 = 
ERR_WOULDBLOCK
;

1337 
c⁄n
->
Êags
 |
NETCONN_FLAG_CHECK_WRITESPACE
;

1339 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDMINUS
, 
Àn
);

1342 i‡(((
îr
 =
ERR_OK
Ë|| (î∏=
ERR_MEM
)) &&

1343 ((
	`t˝_¢dbuf
(
c⁄n
->
pcb
.
t˝
Ë<
TCP_SNDLOWAT
) ||

1344 (
	`t˝_¢dqueuñí
(
c⁄n
->
pcb
.
t˝
Ë>
TCP_SNDQUEUELOWAT
))) {

1347 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDMINUS
, 
Àn
);

1350 i‡(
îr
 =
ERR_OK
) {

1351 
c⁄n
->
wrôe_off£t
 +
Àn
;

1352 i‡(
c⁄n
->
wrôe_off£t
 =c⁄n->
cuºít_msg
->
msg
.
w
.
Àn
) {

1354 
wrôe_föished
 = 1;

1355 
c⁄n
->
wrôe_off£t
 = 0;

1357 
	`t˝_ouçut
(
c⁄n
->
pcb
.
t˝
);

1358 } i‡(
îr
 =
ERR_MEM
) {

1364 
	`t˝_ouçut
(
c⁄n
->
pcb
.
t˝
);

1366 #i‡
LWIP_TCPIP_CORE_LOCKING


1367 
c⁄n
->
Êags
 |
NETCONN_FLAG_WRITE_DELAYED
;

1372 
wrôe_föished
 = 1;

1376 i‡(
wrôe_föished
) {

1379 
c⁄n
->
cuºít_msg
->
îr
 =Érr;

1380 
c⁄n
->
cuºít_msg
 = 
NULL
;

1381 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

1382 #i‡
LWIP_TCPIP_CORE_LOCKING


1383 i‡((
c⁄n
->
Êags
 & 
NETCONN_FLAG_WRITE_DELAYED
) != 0)

1386 
	`sys_£m_sig«l
(&
c⁄n
->
›_com∂ëed
);

1389 #i‡
LWIP_TCPIP_CORE_LOCKING


1391  
ERR_MEM
;

1393  
ERR_OK
;

1394 
	}
}

1404 
	$do_wrôe
(
≠i_msg_msg
 *
msg
)

1406 i‡(
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
œ°_îr
)) {

1407 
msg
->
îr
 = msg->
c⁄n
->
œ°_îr
;

1409 i‡(
msg
->
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

1410 #i‡
LWIP_TCP


1411 i‡(
msg
->
c⁄n
->
°©e
 !
NETCONN_NONE
) {

1413 
msg
->
îr
 = 
ERR_INPROGRESS
;

1414 } i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

1415 
msg
->
c⁄n
->
°©e
 = 
NETCONN_WRITE
;

1417 
	`LWIP_ASSERT
("Æªady wrôög o∏˛osög", 
msg
->
c⁄n
->
cuºít_msg
 =
NULL
 &&

1418 
msg
->
c⁄n
->
wrôe_off£t
 == 0);

1419 
	`LWIP_ASSERT
("msg->msg.w.À¿!0", 
msg
->msg.
w
.
Àn
 != 0);

1420 
msg
->
c⁄n
->
cuºít_msg
 = msg;

1421 
msg
->
c⁄n
->
wrôe_off£t
 = 0;

1422 
	`do_wrôem‹e
(
msg
->
c⁄n
);

1427 
msg
->
îr
 = 
ERR_CONN
;

1430 
msg
->
îr
 = 
ERR_VAL
;

1432 #i‡(
LWIP_UDP
 || 
LWIP_RAW
)

1434 
msg
->
îr
 = 
ERR_VAL
;

1438 
	`TCPIP_APIMSG_ACK
(
msg
);

1439 
	}
}

1448 
	$do_gëaddr
(
≠i_msg_msg
 *
msg
)

1450 i‡(
msg
->
c⁄n
->
pcb
.
ù
 !
NULL
) {

1451 *(
msg
->msg.
ad
.
ùaddr
Ë(msg->msg.ad.
loˇl
 ? msg->
c⁄n
->
pcb
.
ù
->
loˇl_ù
 :

1452 
msg
->
c⁄n
->
pcb
.
ù
->
ªmŸe_ù
);

1454 
msg
->
îr
 = 
ERR_OK
;

1455 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

1456 #i‡
LWIP_RAW


1457 
NETCONN_RAW
:

1458 i‡(
msg
->msg.
ad
.
loˇl
) {

1459 *(
msg
->msg.
ad
.
p‹t
Ëmsg->
c⁄n
->
pcb
.
øw
->
¥Ÿocﬁ
;

1462 
msg
->
îr
 = 
ERR_CONN
;

1466 #i‡
LWIP_UDP


1467 
NETCONN_UDP
:

1468 i‡(
msg
->msg.
ad
.
loˇl
) {

1469 *(
msg
->msg.
ad
.
p‹t
Ëmsg->
c⁄n
->
pcb
.
udp
->
loˇl_p‹t
;

1471 i‡((
msg
->
c⁄n
->
pcb
.
udp
->
Êags
 & 
UDP_FLAGS_CONNECTED
) == 0) {

1472 
msg
->
îr
 = 
ERR_CONN
;

1474 *(
msg
->msg.
ad
.
p‹t
Ëmsg->
c⁄n
->
pcb
.
udp
->
ªmŸe_p‹t
;

1479 #i‡
LWIP_TCP


1480 
NETCONN_TCP
:

1481 *(
msg
->msg.
ad
.
p‹t
Ë(msg->msg.ad.
loˇl
?msg->
c⁄n
->
pcb
.
t˝
->
loˇl_p‹t
:msg->c⁄n->pcb.t˝->
ªmŸe_p‹t
);

1485 
	`LWIP_ASSERT
("invalidÇetconn_type", 0);

1489 
msg
->
îr
 = 
ERR_CONN
;

1491 
	`TCPIP_APIMSG_ACK
(
msg
);

1492 
	}
}

1501 
	$do_˛o£
(
≠i_msg_msg
 *
msg
)

1503 #i‡
LWIP_TCP


1505 i‡((
msg
->
c⁄n
->
°©e
 !
NETCONN_NONE
Ë&& (msg->c⁄n->°©ê!
NETCONN_LISTEN
)) {

1507 
	`LWIP_ASSERT
("msg->c⁄n->ty≥ =NETCONN_TCP", 
msg
->
c⁄n
->
ty≥
 =
NETCONN_TCP
);

1508 
msg
->
îr
 = 
ERR_INPROGRESS
;

1509 } i‡((
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
Ë&& (msg->c⁄n->
ty≥
 =
NETCONN_TCP
)) {

1510 i‡((
msg
->msg.
sd
.
shut
 !
NETCONN_SHUT_RDWR
Ë&& (msg->
c⁄n
->
°©e
 =
NETCONN_LISTEN
)) {

1512 
msg
->
îr
 = 
ERR_CONN
;

1514 i‡(
msg
->msg.
sd
.
shut
 & 
NETCONN_SHUT_RD
) {

1516 
	`√tc⁄n_døö
(
msg
->
c⁄n
);

1518 
	`LWIP_ASSERT
("Æªady wrôög o∏˛osög", 
msg
->
c⁄n
->
cuºít_msg
 =
NULL
 &&

1519 
msg
->
c⁄n
->
wrôe_off£t
 == 0);

1520 
msg
->
c⁄n
->
°©e
 = 
NETCONN_CLOSE
;

1521 
msg
->
c⁄n
->
cuºít_msg
 = msg;

1522 
	`do_˛o£_öã∫Æ
(
msg
->
c⁄n
);

1529 
msg
->
îr
 = 
ERR_VAL
;

1531 
	`sys_£m_sig«l
(&
msg
->
c⁄n
->
›_com∂ëed
);

1532 
	}
}

1534 #i‡
LWIP_IGMP


1542 
	$do_joö_Àave_group
(
≠i_msg_msg
 *
msg
)

1544 i‡(
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
œ°_îr
)) {

1545 
msg
->
îr
 = msg->
c⁄n
->
œ°_îr
;

1547 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

1548 i‡(
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
Ë=
NETCONN_UDP
) {

1549 #i‡
LWIP_UDP


1550 i‡(
msg
->msg.
jl
.
joö_‹_Àave
 =
NETCONN_JOIN
) {

1551 
msg
->
îr
 = 
	`igmp_joögroup
(msg->msg.
jl
.
√tif_addr
, msg->msg.jl.
mu…üddr
);

1553 
msg
->
îr
 = 
	`igmp_Àavegroup
(msg->msg.
jl
.
√tif_addr
, msg->msg.jl.
mu…üddr
);

1556 #i‡(
LWIP_TCP
 || 
LWIP_RAW
)

1558 
msg
->
îr
 = 
ERR_VAL
;

1562 
msg
->
îr
 = 
ERR_CONN
;

1565 
	`TCPIP_APIMSG_ACK
(
msg
);

1566 
	}
}

1569 #i‡
LWIP_DNS


1576 
	$do_dns_found
(c⁄° *
«me
, 
ù_addr_t
 *
ùaddr
, *
¨g
)

1578 
dns_≠i_msg
 *
msg
 = (dns_≠i_msg*)
¨g
;

1580 
	`LWIP_ASSERT
("DNSÑe•⁄£ f‹ wr⁄g ho°Çame", 
	`°rcmp
(
msg
->
«me
,Çame) == 0);

1581 
	`LWIP_UNUSED_ARG
(
«me
);

1583 i‡(
ùaddr
 =
NULL
) {

1585 *
msg
->
îr
 = 
ERR_VAL
;

1588 *
msg
->
îr
 = 
ERR_OK
;

1589 *
msg
->
addr
 = *
ùaddr
;

1592 
	`sys_£m_sig«l
(
msg
->
£m
);

1593 
	}
}

1602 
	$do_gëho°by«me
(*
¨g
)

1604 
dns_≠i_msg
 *
msg
 = (dns_≠i_msg*)
¨g
;

1606 *
msg
->
îr
 = 
	`dns_gëho°by«me
(msg->
«me
, msg->
addr
, 
do_dns_found
, msg);

1607 i‡(*
msg
->
îr
 !
ERR_INPROGRESS
) {

1610 
	`sys_£m_sig«l
(
msg
->
£m
);

1612 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/api/epoll.c

1 
	~"lwù/›t.h
"

2 
	~<°ddef.h
>

4 
	~"lwù/√tbuf.h
"

5 
	~"lwù/sys.h
"

6 
	~"lwù/ù_addr.h
"

7 
	~"lwù/îr.h
"

8 
	~"lwù/ïﬁl.h
"

9 
	~"lwù/sockës.h
"

10 
	~"lwù/≠i.h
"

13 
	$lwù_ïﬁl_˘l
(
sockid
, 
lwù_ïﬁl_evít
 *
evít
)

15 
lwù_sock
 *
sock
;

17 
sock
 = 
	`gë_sockë
(
sockid
);

18 i‡((!
sock
Ë&& (!sock->
c⁄n
)) {

22 
sock
->
c⁄n
->
u£_ïﬁl
 = 1;

23 
sock
->
c⁄n
->
ïﬁl_id
 = 0;

24 
evít
->
evíts
 |(
EPOLLERR
 | 
EPOLLHUP
);

25 
sock
->
c⁄n
->
ïﬁl
 = 
evít
->
evíts
;

26  (
sock
->
c⁄n
->
ïﬁl_id
);

27 
	}
}

30 
	$lwù_ïﬁl_waô
(
ïid
, 
lwù_ïﬁl_evít
 *
evíts
)

32 
√tc⁄n
 *
√wc⁄n
 = 
NULL
;

33 *
buff
 = 
NULL
;

34 
lwù_ïﬁl
 *
ïﬁl_±r
 = &
lwù_t˝ù_thªad
[
	`sched_gë˝u
(Ë% 
CPU_MOD
]->
ïﬁl
[
ïid
];

37 
	`sys_lwù_¨ch_mbox_check
(&
ïﬁl_±r
->
li°íî_mbox
, (**)&
√wc⁄n
);

38 i‡(
√wc⁄n
 !
NULL
) {

42 
	`sys_lwù_¨ch_mbox_check
(&
ïﬁl_±r
->
Ÿhî_mbox
, (**)&
buff
);

43 i‡(
buff
 !
NULL
) {

44 
evíts
->evít†|
EPOLLIN
;

45 
evíts
->
d©a
.
sockid
 = ((
pbuf
 *)
buff
)->
sock_id
;

49 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/api/err.c

39 
	~"lwù/îr.h
"

41 #ifde‡
LWIP_DEBUG


43 c⁄° *
	gîr_°ªº
[] = {

69 
	$lwù_°ªº
(
îr_t
 
îr
)

71  
îr_°ªº
[-
îr
];

73 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/api/netbuf.c

39 
	~"lwù/›t.h
"

41 #i‡
LWIP_NETCONN


43 
	~"lwù/√tbuf.h
"

44 
	~"lwù/memp.h
"

46 
	~<°rög.h
>

56 
√tbuf
 *
	$√tbuf_√w
()

58 
√tbuf
 *
buf
;

60 
buf
 = (
√tbuf
 *)
	`memp_mÆloc
(
MEMP_NETBUF
, 
NULL
);

61 i‡(
buf
 !
NULL
) {

62 
buf
->
p
 = 
NULL
;

63 
buf
->
±r
 = 
NULL
;

64 
	`ù_addr_£t_™y
(&
buf
->
addr
);

65 
buf
->
p‹t
 = 0;

66 #i‡
LWIP_NETBUF_RECVINFO
 || 
LWIP_CHECKSUM_ON_COPY


67 #i‡
LWIP_CHECKSUM_ON_COPY


68 
buf
->
Êags
 = 0;

70 
buf
->
t›‹t_chksum
 = 0;

71 #i‡
LWIP_NETBUF_RECVINFO


72 
	`ù_addr_£t_™y
(&
buf
->
tﬂddr
);

75  
buf
;

77  
NULL
;

79 
	}
}

87 
	$√tbuf_dñëe
(
√tbuf
 *
buf
)

89 i‡(
buf
 !
NULL
) {

90 i‡(
buf
->
p
 !
NULL
) {

91 
	`pbuf_‰ì
(
buf
->
p
, 
NULL
);

92 
buf
->
p
 = buf->
±r
 = 
NULL
;

94 
	`memp_‰ì
(
MEMP_NETBUF
, 
buf
, 
NULL
);

96 
	}
}

107 
	$√tbuf_Æloc
(
√tbuf
 *
buf
, 
u16_t
 
size
)

109 
	`LWIP_ERROR
("√tbuf_Æloc: invÆid buf", (
buf
 !
NULL
),  NULL;);

112 i‡(
buf
->
p
 !
NULL
) {

113 
	`pbuf_‰ì
(
buf
->
p
, 
NULL
);

115 
buf
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
size
, 
PBUF_RAM
, 
NULL
);

116 i‡(
buf
->
p
 =
NULL
) {

117  
NULL
;

119 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold size",

120 (
buf
->
p
->
Àn
 >
size
));

121 
buf
->
±r
 = buf->
p
;

122  
buf
->
p
->
∑ylﬂd
;

123 
	}
}

131 
	$√tbuf_‰ì
(
√tbuf
 *
buf
)

133 
	`LWIP_ERROR
("√tbuf_‰ì: invÆid buf", (
buf
 !
NULL
), ;);

134 i‡(
buf
->
p
 !
NULL
) {

135 
	`pbuf_‰ì
(
buf
->
p
, 
NULL
);

137 
buf
->
p
 = buf->
±r
 = 
NULL
;

138 
	}
}

149 
îr_t


150 
	$√tbuf_ªf
(
√tbuf
 *
buf
, c⁄° *
d©≠å
, 
u16_t
 
size
)

152 
	`LWIP_ERROR
("√tbuf_ªf: invÆid buf", (
buf
 !
NULL
),  
ERR_ARG
;);

153 i‡(
buf
->
p
 !
NULL
) {

154 
	`pbuf_‰ì
(
buf
->
p
, 
NULL
);

156 
buf
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 0, 
PBUF_REF
, 
NULL
);

157 i‡(
buf
->
p
 =
NULL
) {

158 
buf
->
±r
 = 
NULL
;

159  
ERR_MEM
;

161 
buf
->
p
->
∑ylﬂd
 = (*)
d©≠å
;

162 
buf
->
p
->
Àn
 = buf->p->
tŸ_Àn
 = 
size
;

163 
buf
->
±r
 = buf->
p
;

164  
ERR_OK
;

165 
	}
}

174 
	$√tbuf_chaö
(
√tbuf
 *
hód
, √tbu‡*
èû
)

176 
	`LWIP_ERROR
("√tbuf_ªf: invÆid hód", (
hód
 !
NULL
), ;);

177 
	`LWIP_ERROR
("√tbuf_chaö: invÆidÅaû", (
èû
 !
NULL
), ;);

178 
	`pbuf_ˇt
(
hód
->
p
, 
èû
->p);

179 
hód
->
±r
 = hód->
p
;

180 
	`memp_‰ì
(
MEMP_NETBUF
, 
èû
, 
NULL
);

181 
	}
}

192 
îr_t


193 
	$√tbuf_d©a
(
√tbuf
 *
buf
, **
d©≠å
, 
u16_t
 *
Àn
)

195 
	`LWIP_ERROR
("√tbuf_d©a: invÆid buf", (
buf
 !
NULL
),  
ERR_ARG
;);

196 
	`LWIP_ERROR
("√tbuf_d©a: invÆid d©≠å", (
d©≠å
 !
NULL
),  
ERR_ARG
;);

197 
	`LWIP_ERROR
("√tbuf_d©a: invÆidÜí", (
Àn
 !
NULL
),  
ERR_ARG
;);

199 i‡(
buf
->
±r
 =
NULL
) {

200  
ERR_BUF
;

202 *
d©≠å
 = 
buf
->
±r
->
∑ylﬂd
;

203 *
Àn
 = 
buf
->
±r
->len;

204  
ERR_OK
;

205 
	}
}

217 
s8_t


218 
	$√tbuf_√xt
(
√tbuf
 *
buf
)

220 
	`LWIP_ERROR
("√tbuf_‰ì: invÆid buf", (
buf
 !
NULL
),  -1;);

221 i‡(
buf
->
±r
->
√xt
 =
NULL
) {

224 
buf
->
±r
 = buf->±r->
√xt
;

225 i‡(
buf
->
±r
->
√xt
 =
NULL
) {

229 
	}
}

239 
	$√tbuf_fú°
(
√tbuf
 *
buf
)

241 
	`LWIP_ERROR
("√tbuf_‰ì: invÆid buf", (
buf
 !
NULL
), ;);

242 
buf
->
±r
 = buf->
p
;

243 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/api/netdb.c

36 
	~"lwù/√tdb.h
"

38 #i‡
LWIP_DNS
 && 
LWIP_SOCKET


40 
	~"lwù/îr.h
"

41 
	~"lwù/mem.h
"

42 
	~"lwù/memp.h
"

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/≠i.h
"

45 
	~"lwù/dns.h
"

47 
	~<°rög.h
>

48 
	~<°dlib.h
>

51 
	sgëho°by«me_r_hñ≥r
 {

52 
ù_addr_t
 *
	maddrs
;

53 
ù_addr_t
 
	maddr
;

54 *
	mÆü£s
;

58 #i‡
LWIP_DNS_API_DECLARE_H_ERRNO


59 
	gh_î∫o
;

64 #i‚de‡
LWIP_DNS_API_HOSTENT_STORAGE


65 
	#LWIP_DNS_API_HOSTENT_STORAGE
 0

	)

69 #i‡
LWIP_DNS_API_HOSTENT_STORAGE


70 
	#HOSTENT_STORAGE


	)

72 
	#HOSTENT_STORAGE
 

	)

84 
ho°ít
*

85 
	$lwù_gëho°by«me
(c⁄° *
«me
)

87 
îr_t
 
îr
;

88 
ù_addr_t
 
addr
;

91 
HOSTENT_STORAGE
 
ho°ít
 
s_ho°ít
;

92 
HOSTENT_STORAGE
 *
s_Æü£s
;

93 
HOSTENT_STORAGE
 
ù_addr_t
 
s_ho°ít_addr
;

94 
HOSTENT_STORAGE
 
ù_addr_t
 *
s_pho°ít_addr
[2];

97 
îr
 = 
	`√tc⁄n_gëho°by«me
(
«me
, &
addr
);

98 i‡(
îr
 !
ERR_OK
) {

99 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("lwù_gëho°by«me(%sËÁûed,Éº=%d\n", 
«me
, 
îr
));

100 
h_î∫o
 = 
HOST_NOT_FOUND
;

101  
NULL
;

105 
s_ho°ít_addr
 = 
addr
;

106 
s_pho°ít_addr
[0] = &
s_ho°ít_addr
;

107 
s_pho°ít_addr
[1] = 
NULL
;

108 
s_ho°ít
.
h_«me
 = (*)
«me
;

109 
s_ho°ít
.
h_Æü£s
 = &
s_Æü£s
;

110 
s_ho°ít
.
h_addπy≥
 = 
AF_INET
;

111 
s_ho°ít
.
h_Àngth
 = (
ù_addr_t
);

112 
s_ho°ít
.
h_addr_li°
 = (**)&
s_pho°ít_addr
;

114 #i‡
DNS_DEBUG


116 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_«mê =%s\n", 
s_ho°ít
.
h_«me
));

117 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Æü£† =%p\n", 
s_ho°ít
.
h_Æü£s
));

118 i‡(
s_ho°ít
.
h_Æü£s
 !
NULL
) {

119 
u8_t
 
idx
;

120  
idx
=0; 
s_ho°ít
.
h_Æü£s
[idx]; idx++) {

121 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Æü£s[%i]-> =%p\n", 
idx
, 
s_ho°ít
.
h_Æü£s
[idx]));

122 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Æü£s[%i]-> =%s\n", 
idx
, 
s_ho°ít
.
h_Æü£s
[idx]));

125 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addπy≥ =%d\n", 
s_ho°ít
.
h_addπy≥
));

126 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Àngth =%d\n", 
s_ho°ít
.
h_Àngth
));

127 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addr_li° =%p\n", 
s_ho°ít
.
h_addr_li°
));

128 i‡(
s_ho°ít
.
h_addr_li°
 !
NULL
) {

129 
u8_t
 
idx
;

130  
idx
=0; 
s_ho°ít
.
h_addr_li°
[idx]; idx++) {

131 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addr_li°[%i] =%p\n", 
idx
, 
s_ho°ít
.
h_addr_li°
[idx]));

132 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addr_li°[%i]-> =%s\n", 
idx
, 
	`ù_¡ﬂ
((
ù_addr_t
*)
s_ho°ít
.
h_addr_li°
[idx])));

137 #i‡
LWIP_DNS_API_HOSTENT_STORAGE


139  
	`sys_thªad_ho°ít
(&
s_ho°ít
);

141  &
s_ho°ít
;

143 
	}
}

162 
	$lwù_gëho°by«me_r
(c⁄° *
«me
, 
ho°ít
 *
ªt
, *
buf
,

163 
size_t
 
buÊí
, 
ho°ít
 **
ªsu…
, *
h_î∫›
)

165 
îr_t
 
îr
;

166 
gëho°by«me_r_hñ≥r
 *
h
;

167 *
ho°«me
;

168 
size_t
 
«mñí
;

169 
lh_î∫o
;

171 i‡(
h_î∫›
 =
NULL
) {

173 
h_î∫›
 = &
lh_î∫o
;

176 i‡(
ªsu…
 =
NULL
) {

178 *
h_î∫›
 = 
EINVAL
;

182 *
ªsu…
 = 
NULL
;

183 i‡((
«me
 =
NULL
Ë|| (
ªt
 =NULLË|| (
buf
 == 0)) {

185 *
h_î∫›
 = 
EINVAL
;

189 
«mñí
 = 
	`°æí
(
«me
);

190 i‡(
buÊí
 < ((
gëho°by«me_r_hñ≥r
Ë+ 
«mñí
 + 1 + (
MEM_ALIGNMENT
 - 1))) {

192 *
h_î∫›
 = 
ERANGE
;

196 
h
 = (
gëho°by«me_r_hñ≥r
*)
	`LWIP_MEM_ALIGN
(
buf
);

197 
ho°«me
 = ((*)
h
Ë+ (
gëho°by«me_r_hñ≥r
);

200 
îr
 = 
	`√tc⁄n_gëho°by«me
(
«me
, &(
h
->
addr
));

201 i‡(
îr
 !
ERR_OK
) {

202 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("lwù_gëho°by«me(%sËÁûed,Éº=%d\n", 
«me
, 
îr
));

203 *
h_î∫›
 = 
ENSRNOTFOUND
;

208 
	`MEMCPY
(
ho°«me
, 
«me
, 
«mñí
);

209 
ho°«me
[
«mñí
] = 0;

212 
h
->
addrs
 = &(h->
addr
);

213 
h
->
Æü£s
 = 
NULL
;

214 
ªt
->
h_«me
 = (*)
ho°«me
;

215 
ªt
->
h_Æü£s
 = &(
h
->
Æü£s
);

216 
ªt
->
h_addπy≥
 = 
AF_INET
;

217 
ªt
->
h_Àngth
 = (
ù_addr_t
);

218 
ªt
->
h_addr_li°
 = (**)&(
h
->
addrs
);

221 *
ªsu…
 = 
ªt
;

225 
	}
}

235 
	$lwù_‰ìaddröfo
(
addröfo
 *
ai
)

237 
addröfo
 *
√xt
;

239 
ai
 !
NULL
) {

240 
√xt
 = 
ai
->
ai_√xt
;

241 
	`memp_‰ì
(
MEMP_NETDB
, 
ai
, 
NULL
);

242 
ai
 = 
√xt
;

244 
	}
}

266 
	$lwù_gëaddröfo
(c⁄° *
nodíame
, c⁄° *
£rv«me
,

267 c⁄° 
addröfo
 *
höts
, addröfÿ**
ªs
)

269 
îr_t
 
îr
;

270 
ù_addr_t
 
addr
;

271 
addröfo
 *
ai
;

272 
sockaddr_ö
 *
ß
 = 
NULL
;

273 
p‹t_ƒ
 = 0;

274 
size_t
 
tŸÆ_size
;

275 
size_t
 
«mñí
 = 0;

277 i‡(
ªs
 =
NULL
) {

278  
EAI_FAIL
;

280 *
ªs
 = 
NULL
;

281 i‡((
nodíame
 =
NULL
Ë&& (
£rv«me
 == NULL)) {

282  
EAI_NONAME
;

285 i‡(
£rv«me
 !
NULL
) {

288 
p‹t_ƒ
 = 
	`©oi
(
£rv«me
);

289 i‡((
p‹t_ƒ
 <= 0) || (port_nr > 0xffff)) {

290  
EAI_SERVICE
;

294 i‡(
nodíame
 !
NULL
) {

296 
îr
 = 
	`√tc⁄n_gëho°by«me
(
nodíame
, &
addr
);

297 i‡(
îr
 !
ERR_OK
) {

298  
EAI_FAIL
;

302 
	`ù_addr_£t_lo›back
(&
addr
);

305 
tŸÆ_size
 = (
addröfo
Ë+ (
sockaddr_ö
);

306 i‡(
nodíame
 !
NULL
) {

307 
«mñí
 = 
	`°æí
(
nodíame
);

308 
	`LWIP_ASSERT
("«mñí i†toÿl⁄g", (
«mñí
 + 1Ë<(
mem_size_t
)-1);

309 
tŸÆ_size
 +
«mñí
 + 1;

312 
	`LWIP_ASSERT
("total_size <= NETDB_ELEM_SIZE:ÖleaseÑeportÅhis!",

313 
tŸÆ_size
 <
NETDB_ELEM_SIZE
);

314 
ai
 = (
addröfo
 *)
	`memp_mÆloc
(
MEMP_NETDB
, 
NULL
);

315 i‡(
ai
 =
NULL
) {

316 
memîr
;

318 
	`mem£t
(
ai
, 0, 
tŸÆ_size
);

319 
ß
 = (
sockaddr_ö
*)((
u8_t
*)
ai
 + (
addröfo
));

321 
	`öë_addr_‰om_ùaddr
(&
ß
->
sö_addr
, &
addr
);

322 
ß
->
sö_Ámûy
 = 
AF_INET
;

323 
ß
->
sö_Àn
 = (
sockaddr_ö
);

324 
ß
->
sö_p‹t
 = 
	`ht⁄s
((
u16_t
)
p‹t_ƒ
);

327 
ai
->
ai_Ámûy
 = 
AF_INET
;

328 i‡(
höts
 !
NULL
) {

330 
ai
->
ai_sockty≥
 = 
höts
->ai_socktype;

331 
ai
->
ai_¥Ÿocﬁ
 = 
höts
->ai_protocol;

333 i‡(
nodíame
 !
NULL
) {

335 
ai
->
ai_ˇn⁄«me
 = ((*Ôò+ (
addröfo
Ë+ (
sockaddr_ö
));

336 
	`MEMCPY
(
ai
->
ai_ˇn⁄«me
, 
nodíame
, 
«mñí
);

337 
ai
->
ai_ˇn⁄«me
[
«mñí
] = 0;

339 
ai
->
ai_addæí
 = (
sockaddr_ö
);

340 
ai
->
ai_addr
 = (
sockaddr
*)
ß
;

342 *
ªs
 = 
ai
;

345 
memîr
:

346 i‡(
ai
 !
NULL
) {

347 
	`memp_‰ì
(
MEMP_NETDB
, 
ai
, 
NULL
);

349  
EAI_MEMORY
;

350 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/api/netifapi.c

34 
	~"lwù/›t.h
"

36 #i‡
LWIP_NETIF_API


38 
	~"lwù/√tiÁpi.h
"

39 
	~"lwù/t˝ù.h
"

45 
	$do_√tiÁpi_√tif_add
(
√tiÁpi_msg_msg
 *
msg
)

47 i‡(!
	`√tif_add
–
msg
->
√tif
,

48 
msg
->msg.
add
.
ùaddr
,

49 
msg
->msg.
add
.
√tmask
,

50 
msg
->msg.
add
.
gw
,

51 
msg
->msg.
add
.
°©e
,

52 
msg
->msg.
add
.
öô
,

53 
msg
->msg.
add
.
öput
)) {

54 
msg
->
îr
 = 
ERR_IF
;

56 
msg
->
îr
 = 
ERR_OK
;

58 
	`TCPIP_NETIFAPI_ACK
(
msg
);

59 
	}
}

65 
	$do_√tiÁpi_√tif_£t_addr
(
√tiÁpi_msg_msg
 *
msg
)

67 
	`√tif_£t_addr
–
msg
->
√tif
,

68 
msg
->msg.
add
.
ùaddr
,

69 
msg
->msg.
add
.
√tmask
,

70 
msg
->msg.
add
.
gw
);

71 
msg
->
îr
 = 
ERR_OK
;

72 
	`TCPIP_NETIFAPI_ACK
(
msg
);

73 
	}
}

80 
	$do_√tiÁpi_√tif_comm⁄
(
√tiÁpi_msg_msg
 *
msg
)

82 i‡(
msg
->msg.
comm⁄
.
îπfunc
 !
NULL
) {

83 
msg
->
îr
 = msg->msg.
comm⁄
.
	`îπfunc
(msg->
√tif
);

85 
msg
->
îr
 = 
ERR_OK
;

86 
msg
->msg.
comm⁄
.
	`voidfunc
(msg->
√tif
);

88 
	`TCPIP_NETIFAPI_ACK
(
msg
);

89 
	}
}

97 
îr_t


98 
	$√tiÁpi_√tif_add
(
√tif
 *netif,

99 
ù_addr_t
 *
ùaddr
,

100 
ù_addr_t
 *
√tmask
,

101 
ù_addr_t
 *
gw
,

102 *
°©e
,

103 
√tif_öô_‚
 
öô
,

104 
√tif_öput_‚
 
öput
)

106 
√tiÁpi_msg
 
msg
;

107 
msg
.
fun˘i⁄
 = 
do_√tiÁpi_√tif_add
;

108 
msg
.msg.
√tif
 =Çetif;

109 
msg
.msg.msg.
add
.
ùaddr
 = ipaddr;

110 
msg
.msg.msg.
add
.
√tmask
 =Çetmask;

111 
msg
.msg.msg.
add
.
gw
 = gw;

112 
msg
.msg.msg.
add
.
°©e
 = state;

113 
msg
.msg.msg.
add
.
öô
 = init;

114 
msg
.msg.msg.
add
.
öput
 = input;

115 
	`TCPIP_NETIFAPI
(&
msg
);

116  
msg
.msg.
îr
;

117 
	}
}

125 
îr_t


126 
	$√tiÁpi_√tif_£t_addr
(
√tif
 *netif,

127 
ù_addr_t
 *
ùaddr
,

128 
ù_addr_t
 *
√tmask
,

129 
ù_addr_t
 *
gw
)

131 
√tiÁpi_msg
 
msg
;

132 
msg
.
fun˘i⁄
 = 
do_√tiÁpi_√tif_£t_addr
;

133 
msg
.msg.
√tif
 =Çetif;

134 
msg
.msg.msg.
add
.
ùaddr
 = ipaddr;

135 
msg
.msg.msg.
add
.
√tmask
 =Çetmask;

136 
msg
.msg.msg.
add
.
gw
 = gw;

137 
	`TCPIP_NETIFAPI
(&
msg
);

138  
msg
.msg.
îr
;

139 
	}
}

147 
îr_t


148 
	$√tiÁpi_√tif_comm⁄
(
√tif
 *√tif, 
√tiÁpi_void_‚
 
voidfunc
,

149 
√tiÁpi_îπ_‚
 
îπfunc
)

151 
√tiÁpi_msg
 
msg
;

152 
msg
.
fun˘i⁄
 = 
do_√tiÁpi_√tif_comm⁄
;

153 
msg
.msg.
√tif
 =Çetif;

154 
msg
.msg.msg.
comm⁄
.
voidfunc
 = voidfunc;

155 
msg
.msg.msg.
comm⁄
.
îπfunc
 =Érrtfunc;

156 
	`TCPIP_NETIFAPI
(&
msg
);

157  
msg
.msg.
îr
;

158 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/api/sockets.c

41 
	~"lwù/›t.h
"

43 #i‡
LWIP_SOCKET


45 
	~"lwù/sockës.h
"

46 
	~"lwù/≠i.h
"

47 
	~"lwù/sys.h
"

48 
	~"lwù/igmp.h
"

49 
	~"lwù/öë.h
"

50 
	~"lwù/t˝.h
"

51 
	~"lwù/t˝ù.h
"

52 
	~"lwù/t˝ù_thªad.h
"

53 
	~"lwù/pbuf.h
"

54 #i‡
LWIP_CHECKSUM_ON_COPY


55 
	~"lwù/öë_chksum.h
"

58 
	~<°rög.h
>

59 
	~"lwù/ßm∂e_åa˚poöt.h
"

63 
	slwù_£tgësock›t_d©a
 {

65 
lwù_sock
 *
	msock
;

66 #ifde‡
LWIP_DEBUG


68 
	ms
;

71 
	mÀvñ
;

73 
	m›äame
;

76 *
	m›tvÆ
;

78 
sockÀn_t
 *
	m›éí
;

80 
îr_t
 
	mîr
;

85 c⁄° 
	gîr_to_î∫o_èbÀ
[] = {

87 
ENOMEM
,

88 
ENOBUFS
,

89 
EWOULDBLOCK
,

90 
EHOSTUNREACH
,

91 
EINPROGRESS
,

92 
EINVAL
,

93 
EWOULDBLOCK
,

94 
EADDRINUSE
,

95 
EALREADY
,

96 
ECONNABORTED
,

97 
ECONNRESET
,

98 
ENOTCONN
,

99 
ENOTCONN
,

100 
EIO
,

104 
	#ERR_TO_ERRNO_TABLE_SIZE
 \

105 ((
îr_to_î∫o_èbÀ
)/”º_to_î∫o_èbÀ[0]))

	)

107 
	#îr_to_î∫o
(
îr
) \

108 (()(-(
îr
)Ë< 
ERR_TO_ERRNO_TABLE_SIZE
 ? \

109 
îr_to_î∫o_èbÀ
[-(
îr
)] : 
EIO
)

	)

111 #ifde‡
ERRNO


112 #i‚de‡
£t_î∫o


113 
	#£t_î∫o
(
îr
Ë
î∫o
 = (îr)

	)

116 
	#£t_î∫o
(
îr
)

	)

119 
	#sock_£t_î∫o
(
sk
, 
e
) do { \

120 
sk
->
îr
 = (
e
); \

121 
	`£t_î∫o
(
sk
->
îr
); \

122 } 0)

	)

125 
evít_ˇŒback
(
√tc⁄n
 *
c⁄n
, 
√tc⁄n_evt
 
evt
, 
u16_t
 
Àn
);

126 
lwù_gësock›t_öã∫Æ
(*
¨g
);

127 
lwù_£tsock›t_öã∫Æ
(*
¨g
);

134 
	$lwù_sockë_öô
()

136 
	}
}

144 
lwù_sock
 *

145 
	$gë_sockë
(
s
)

147 
lwù_sock
 *
sock
;

148 
˝u
 = 
	`sched_gë˝u
(Ë% 
CPU_MOD
;

150 i‡((
s
 < 0Ë|| (†>
NUM_SOCKETS
)) {

151 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("gë_sockë(%d): invÆid\n", 
s
));

152 
	`£t_î∫o
(
EBADF
);

153  
NULL
;

156 
sock
 = &
lwù_t˝ù_thªad
[
˝u
]->
sockës
[
s
];

158 i‡(!
sock
->
c⁄n
) {

159 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("gë_sockë(%d):ÇŸá˘ive\n", 
s
));

160 
	`£t_î∫o
(
EBADF
);

161  
NULL
;

164  
sock
;

165 
	}
}

173 
lwù_sock
 *

174 
	$åygë_sockë
(
s
)

176 
˝u
 = 
	`sched_gë˝u
(Ë% 
CPU_MOD
;

177 i‡((
s
 < 0Ë|| (†>
NUM_SOCKETS
)) {

178  
NULL
;

180 i‡(!
lwù_t˝ù_thªad
[
˝u
]->
sockës
[
s
].
c⁄n
) {

181  
NULL
;

183  &
lwù_t˝ù_thªad
[
˝u
]->
sockës
[
s
];

184 
	}
}

195 
	$Æloc_sockë
(
√tc⁄n
 *
√wc⁄n
, 
ac˚±ed
)

197 
i
;

198 
˝u
 = 
	`sched_gë˝u
(Ë% 
CPU_MOD
;

201 
i
 = 0; i < 
NUM_SOCKETS
; ++i) {

203 
	`±hªad_muãx_lock
(&
lwù_t˝ù_thªad
[
˝u
]->
sock_Æloc
);

204 i‡(!
lwù_t˝ù_thªad
[
˝u
]->
sockës
[
i
].
c⁄n
) {

205 
lwù_t˝ù_thªad
[
˝u
]->
sockës
[
i
].
c⁄n
 = 
√wc⁄n
;

208 
	`±hªad_muãx_u∆ock
(&
lwù_t˝ù_thªad
[
˝u
]->
sock_Æloc
);

209 
lwù_t˝ù_thªad
[
˝u
]->
sockës
[
i
].
œ°d©a
 = 
NULL
;

210 
lwù_t˝ù_thªad
[
˝u
]->
sockës
[
i
].
œ°off£t
 = 0;

211 
lwù_t˝ù_thªad
[
˝u
]->
sockës
[
i
].
rcvevít
 = 0;

214 
lwù_t˝ù_thªad
[
˝u
]->
sockës
[
i
].
£ndevít
 = (
√wc⁄n
->
ty≥
 =
NETCONN_TCP
 ? (
ac˚±ed
 != 0) : 1);

215 
lwù_t˝ù_thªad
[
˝u
]->
sockës
[
i
].
îªvít
 = 0;

216 
lwù_t˝ù_thªad
[
˝u
]->
sockës
[
i
].
îr
 = 0;

217 
lwù_t˝ù_thªad
[
˝u
]->
sockës
[
i
].
£À˘_waôög
 = 0;

218 
lwù_t˝ù_thªad
[
˝u
]->
sockës
[
i
].cpu = cpu;

219 
lwù_t˝ù_thªad
[
˝u
]->
sockës
[
i
].
c⁄n
->
u£_ïﬁl
 = 1;

220 
lwù_t˝ù_thªad
[
˝u
]->
sockës
[
i
].
c⁄n
->
ïﬁl_id
 = 0;

221 
lwù_t˝ù_thªad
[
˝u
]->
sockës
[
i
].
c⁄n
->
ïﬁl_±r
 = &lwù_t˝ù_thªad[˝u]->
ïﬁl
[0];

222  
i
;

224 
	`±hªad_muãx_u∆ock
(&
lwù_t˝ù_thªad
[
˝u
]->
sock_Æloc
);

227 
	}
}

236 
	$‰ì_sockë
(
lwù_sock
 *
sock
, 
is_t˝
)

238 *
œ°d©a
;

239 
˝u
 = 
	`sched_gë˝u
(Ë% 
CPU_MOD
;

241 
œ°d©a
 = 
sock
->lastdata;

242 
sock
->
œ°d©a
 = 
NULL
;

243 
sock
->
œ°off£t
 = 0;

244 
sock
->
îr
 = 0;

248 
	`±hªad_muãx_lock
(&
lwù_t˝ù_thªad
[
˝u
]->
sock_‰ì
);

249 
sock
->
c⁄n
 = 
NULL
;

250 
	`±hªad_muãx_u∆ock
(&
lwù_t˝ù_thªad
[
˝u
]->
sock_‰ì
);

253 i‡(
œ°d©a
 !
NULL
) {

254 i‡(
is_t˝
) {

255 
	`pbuf_‰ì
((
pbuf
 *)
œ°d©a
, 
NULL
);

257 
	`√tbuf_dñëe
((
√tbuf
 *)
œ°d©a
);

260 
	}
}

269 
	$lwù_ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
)

271 
lwù_sock
 *
sock
, *
nsock
;

272 
√tc⁄n
 *
√wc⁄n
;

273 
ù_addr_t
 
«ddr
;

274 
u16_t
 
p‹t
;

275 
√wsock
;

276 
sockaddr_ö
 
sö
;

277 
îr_t
 
îr
;

278 
˝u
;

280 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%d)...\n", 
s
));

281 
sock
 = 
	`gë_sockë
(
s
);

282 i‡(!
sock
) {

285 
˝u
 = 
sock
->cpu;

287 i‡(
	`√tc⁄n_is_n⁄blockög
(
sock
->
c⁄n
Ë&& (sock->
rcvevít
 <= 0)) {

288 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%d):Ñëu∫ög EWOULDBLOCK\n", 
s
));

289 
	`sock_£t_î∫o
(
sock
, 
EWOULDBLOCK
);

294 
îr
 = 
	`√tc⁄n_ac˚±
(
sock
->
c⁄n
, &
√wc⁄n
);

295 i‡(
îr
 !
ERR_OK
) {

296 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%d):Çëc⁄n_a˚± faûed,Éº=%d\n", 
s
, 
îr
));

297 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

300 
	`LWIP_ASSERT
("√wc⁄¿!NULL", 
√wc⁄n
 !
NULL
);

302 
	`√tc⁄n_£t_nﬂut‹ecved
(
√wc⁄n
, 1);

305 
îr
 = 
	`√tc⁄n_≥î
(
√wc⁄n
, &
«ddr
, &
p‹t
);

306 i‡(
îr
 !
ERR_OK
) {

307 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%d):Çëc⁄n_≥î faûed,Éº=%d\n", 
s
, 
îr
));

308 
	`√tc⁄n_dñëe
(
√wc⁄n
);

309 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

316 i‡(
NULL
 !
addr
) {

317 
	`LWIP_ASSERT
("add∏vÆid buàaddæí NULL", 
addæí
 !
NULL
);

318 
	`mem£t
(&
sö
, 0, (sin));

319 
sö
.
sö_Àn
 = (sin);

320 
sö
.
sö_Ámûy
 = 
AF_INET
;

321 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

322 
	`öë_addr_‰om_ùaddr
(&
sö
.
sö_addr
, &
«ddr
);

324 i‡(*
addæí
 > (
sö
))

325 *
addæí
 = (
sö
);

327 
	`MEMCPY
(
addr
, &
sö
, *
addæí
);

330 
√wsock
 = 
	`Æloc_sockë
(
√wc⁄n
, 1);

331 i‡(
√wsock
 == -1) {

332 
	`√tc⁄n_dñëe
(
√wc⁄n
);

333 
	`sock_£t_î∫o
(
sock
, 
ENFILE
);

336 
	`LWIP_ASSERT
("övÆid sockë index", (
√wsock
 >0Ë&& (√wsock < 
NUM_SOCKETS
));

337 
	`LWIP_ASSERT
("√wc⁄n->ˇŒback =evít_ˇŒback", 
√wc⁄n
->
ˇŒback
 =
evít_ˇŒback
);

338 
nsock
 = &
lwù_t˝ù_thªad
[
˝u
]->
sockës
[
√wsock
];

345 
	`±hªad_muãx_lock
(&
lwù_t˝ù_thªad
[
˝u
]->
sock_ac˚±
);

346 
nsock
->
rcvevít
 +(
s16_t
)(-1 - 
√wc⁄n
->
sockë
);

347 
√wc⁄n
->
sockë
 = 
√wsock
;

348 
	`±hªad_muãx_u∆ock
(&
lwù_t˝ù_thªad
[
˝u
]->
sock_ac˚±
);

350 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%dËªtu∫ögÇew sock=%dáddr=", 
s
, 
√wsock
));

351 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, &
«ddr
);

352 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
"\n", 
p‹t
));

354 
	`sock_£t_î∫o
(
sock
, 0);

355  
√wsock
;

356 
	}
}

359 
	$lwù_böd
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

361 
lwù_sock
 *
sock
;

362 
ù_addr_t
 
loˇl_addr
;

363 
u16_t
 
loˇl_p‹t
;

364 
îr_t
 
îr
;

365 c⁄° 
sockaddr_ö
 *
«me_ö
;

367 
sock
 = 
	`gë_sockë
(
s
);

368 i‡(!
sock
) {

373 
	`LWIP_ERROR
("lwù_böd: invÆidáddªss", ((
«mñí
 =(
sockaddr_ö
)) &&

374 ((
«me
->
ß_Ámûy
Ë=
AF_INET
Ë&& ((((
mem_±r_t
)name) % 4) == 0)),

375 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));  -1;);

376 
«me_ö
 = (c⁄° 
sockaddr_ö
 *)(*)
«me
;

378 
	`öë_addr_to_ùaddr
(&
loˇl_addr
, &
«me_ö
->
sö_addr
);

379 
loˇl_p‹t
 = 
«me_ö
->
sö_p‹t
;

381 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_böd(%d,áddr=", 
s
));

382 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, &
loˇl_addr
);

383 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
")\n", 
	`¡ohs
(
loˇl_p‹t
)));

385 
îr
 = 
	`√tc⁄n_böd
(
sock
->
c⁄n
, &
loˇl_addr
, 
	`¡ohs
(
loˇl_p‹t
));

387 i‡(
îr
 !
ERR_OK
) {

388 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_böd(%dËÁûed,Éº=%d\n", 
s
, 
îr
));

389 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

393 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_böd(%dËsuc˚eded\n", 
s
));

394 
	`sock_£t_î∫o
(
sock
, 0);

396 
	}
}

399 
	$lwù_˛o£
(
s
)

401 
lwù_sock
 *
sock
;

402 
is_t˝
 = 0;

404 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_˛o£(%d)\n", 
s
));

406 
sock
 = 
	`gë_sockë
(
s
);

407 i‡(!
sock
) {

411 if(
sock
->
c⁄n
 !
NULL
) {

412 
is_t˝
 = 
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
;

414 
	`LWIP_ASSERT
("sock->œ°d©®=NULL", 
sock
->
œ°d©a
 =
NULL
);

417 
	`√tc⁄n_dñëe
(
sock
->
c⁄n
);

419 
	`‰ì_sockë
(
sock
, 
is_t˝
);

420 
	`£t_î∫o
(0);

422 
	}
}

425 
	$lwù_c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

427 
lwù_sock
 *
sock
;

428 
îr_t
 
îr
;

429 c⁄° 
sockaddr_ö
 *
«me_ö
;

431 
sock
 = 
	`gë_sockë
(
s
);

432 i‡(!
sock
) {

437 
	`LWIP_ERROR
("lwù_c⁄√˘: invÆidáddªss", ((
«mñí
 =(
sockaddr_ö
)) &&

438 ((
«me
->
ß_Ámûy
Ë=
AF_INET
Ë&& ((((
mem_±r_t
)name) % 4) == 0)),

439 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));  -1;);

440 
«me_ö
 = (c⁄° 
sockaddr_ö
 *)(*)
«me
;

442 i‡(
«me_ö
->
sö_Ámûy
 =
AF_UNSPEC
) {

443 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%d, AF_UNSPEC)\n", 
s
));

444 
îr
 = 
	`√tc⁄n_disc⁄√˘
(
sock
->
c⁄n
);

446 
ù_addr_t
 
ªmŸe_addr
;

447 
u16_t
 
ªmŸe_p‹t
;

449 
	`öë_addr_to_ùaddr
(&
ªmŸe_addr
, &
«me_ö
->
sö_addr
);

450 
ªmŸe_p‹t
 = 
«me_ö
->
sö_p‹t
;

452 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%d,áddr=", 
s
));

453 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, &
ªmŸe_addr
);

454 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
")\n", 
	`¡ohs
(
ªmŸe_p‹t
)));

456 
îr
 = 
	`√tc⁄n_c⁄√˘
(
sock
->
c⁄n
, &
ªmŸe_addr
, 
	`¡ohs
(
ªmŸe_p‹t
));

459 i‡(
îr
 !
ERR_OK
) {

460 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%dËÁûed,Éº=%d\n", 
s
, 
îr
));

461 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

465 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%dËsuc˚eded\n", 
s
));

466 
	`sock_£t_î∫o
(
sock
, 0);

468 
	}
}

479 
	$lwù_li°í
(
s
, 
backlog
)

481 
lwù_sock
 *
sock
;

482 
îr_t
 
îr
;

484 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_li°í(%d, backlog=%d)\n", 
s
, 
backlog
));

486 
sock
 = 
	`gë_sockë
(
s
);

487 i‡(!
sock
) {

492 
backlog
 = 
	`LWIP_MIN
(
	`LWIP_MAX
(backlog, 0), 0xff);

494 
îr
 = 
	`√tc⁄n_li°í_wôh_backlog
(
sock
->
c⁄n
, (
u8_t
)
backlog
);

496 i‡(
îr
 !
ERR_OK
) {

497 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_li°í(%dËÁûed,Éº=%d\n", 
s
, 
îr
));

498 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

502 
	`sock_£t_î∫o
(
sock
, 0);

504 
	}
}

507 
	$lwù_ªcv‰om
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
,

508 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
)

510 
lwù_sock
 *
sock
;

511 *
buf
 = 
NULL
;

512 
pbuf
 *
p
;

513 
u16_t
 
buÊí
, 
c›yÀn
;

514 
u16_t
 
p‹t
 = 0;

515 
off
 = 0;

516 
ù_addr_t
 *
addr
;

517 
u8_t
 
d⁄e
 = 0;

518 
îr_t
 
îr
;

519 
˝u
 = 
	`sched_gë˝u
(Ë% 
CPU_MOD
;

521 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d, %p, %"
SZT_F
", 0x%x, ..)\n", 
s
, 
mem
, 
Àn
, 
Êags
));

522 
sock
 = 
	`gë_sockë
(
s
);

523 i‡(!
sock
) {

528 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om:Å› whûêsock->œ°d©a=%p\n", 
sock
->
œ°d©a
));

530 i‡(
sock
->
œ°d©a
) {

531 
buf
 = 
sock
->
œ°d©a
;

547 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
) {

548 
îr
 = 
	`√tc⁄n_ªcv_t˝_pbuf
(
sock
->
c⁄n
, (
pbuf
 **)&
buf
);

550 
îr
 = 
	`√tc⁄n_ªcv
(
sock
->
c⁄n
, (
√tbuf
 **)&
buf
);

552 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_recvfrom:Çetconn_recvÉrr=%d,Çetbuf=%p\n",

553 
îr
, 
buf
));

555 i‡(
îr
 !
ERR_OK
) {

556 i‡(
off
 > 0) {

558 
	`√tc⁄n_ªcved
(
sock
->
c⁄n
, (
u32_t
)
off
);

560 
	`sock_£t_î∫o
(
sock
, 0);

561  
off
;

564 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_recvfrom(%d): buf == NULL,Érror is \"%s\"!\n",

565 
s
, 
	`lwù_°ªº
(
îr
)));

566 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

567 i‡(
îr
 =
ERR_CLSD
) {

573 
	`LWIP_ASSERT
("bu‡!NULL", 
buf
 !
NULL
);

574 
sock
->
œ°d©a
 = 
buf
;

577 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
) {

578 
p
 = (
pbuf
 *)
buf
;

580 
p
 = ((
√tbuf
 *)
buf
)->p;

582 
buÊí
 = 
p
->
tŸ_Àn
;

583 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om: buÊí=%"
U16_F
"Üí=%"
SZT_F
" off=%d sock->lastoffset=%"U16_F"\n",

584 
buÊí
, 
Àn
, 
off
, 
sock
->
œ°off£t
));

586 
buÊí
 -
sock
->
œ°off£t
;

588 i‡(
Àn
 > 
buÊí
) {

589 
c›yÀn
 = 
buÊí
;

591 
c›yÀn
 = (
u16_t
)
Àn
;

597 
	`pbuf_c›y_∑πül
(
p
, (
u8_t
*)
mem
 + 
off
, 
c›yÀn
, 
sock
->
œ°off£t
);

599 
off
 +
c›yÀn
;

601 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
) {

602 
	`LWIP_ASSERT
("övÆid c›yÀn,Üí would undîÊow", 
Àn
 >
c›yÀn
);

603 
Àn
 -
c›yÀn
;

604 i‡–(
Àn
 <= 0) ||

605 (
p
->
Êags
 & 
PBUF_FLAG_PUSH
) ||

606 (
sock
->
rcvevít
 <= 0) ||

607 ((
Êags
 & 
MSG_PEEK
)!=0)) {

608 
d⁄e
 = 1;

611 
d⁄e
 = 1;

615 i‡(
d⁄e
) {

616 
ù_addr_t
 
‰omaddr
;

617 i‡(
‰om
 && 
‰omÀn
) {

618 
sockaddr_ö
 
sö
;

620 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
) {

621 
addr
 = &
‰omaddr
;

624 
addr
 = 
	`√tbuf_‰omaddr
((
√tbuf
 *)
buf
);

625 
p‹t
 = 
	`√tbuf_‰omp‹t
((
√tbuf
 *)
buf
);

628 
	`mem£t
(&
sö
, 0, (sin));

629 
sö
.
sö_Àn
 = (sin);

630 
sö
.
sö_Ámûy
 = 
AF_INET
;

631 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

632 
	`öë_addr_‰om_ùaddr
(&
sö
.
sö_addr
, 
addr
);

640 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d):áddr=", 
s
));

641 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, 
addr
);

642 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
"Üí=%d\n", 
p‹t
, 
off
));

644 #i‡
SOCKETS_DEBUG


645 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
) {

646 
addr
 = &
‰omaddr
;

649 
addr
 = 
	`√tbuf_‰omaddr
((
√tbuf
 *)
buf
);

650 
p‹t
 = 
	`√tbuf_‰omp‹t
((
√tbuf
 *)
buf
);

653 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d):áddr=", 
s
));

654 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, 
addr
);

655 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
"Üí=%d\n", 
p‹t
, 
off
));

661 i‡((
Êags
 & 
MSG_PEEK
) == 0) {

665 i‡((
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
Ë&& (
buÊí
 - 
c›yÀn
 > 0)) {

666 
sock
->
œ°d©a
 = 
buf
;

667 
sock
->
œ°off£t
 +
c›yÀn
;

668 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om:Üa°d©®nowÇëbuf=%p\n", 
buf
));

670 
sock
->
œ°d©a
 = 
NULL
;

671 
sock
->
œ°off£t
 = 0;

672 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om: dñëögÇëbuf=%p\n", 
buf
));

673 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
) {

674 
	`pbuf_‰ì
((
pbuf
 *)
buf
, 
lwù_t˝ù_thªad
[
˝u
]);

676 
	`√tbuf_dñëe
((
√tbuf
 *)
buf
);

680 } !
d⁄e
);

686 
	`sock_£t_î∫o
(
sock
, 0);

687  
off
;

688 
	}
}

691 
	$lwù_ªad
(
s
, *
mem
, 
size_t
 
Àn
)

693  
	`lwù_ªcv‰om
(
s
, 
mem
, 
Àn
, 0, 
NULL
, NULL);

694 
	}
}

697 
	$lwù_ªcv
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
)

699  
	`lwù_ªcv‰om
(
s
, 
mem
, 
Àn
, 
Êags
, 
NULL
, NULL);

700 
	}
}

703 
	$lwù_£nd
(
s
, c⁄° *
d©a
, 
size_t
 
size
, 
Êags
)

705 
lwù_sock
 *
sock
;

706 
îr_t
 
îr
;

707 
u8_t
 
wrôe_Êags
;

709 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£nd(%d, d©a=%p, size=%"
SZT_F
", flags=0x%x)\n",

710 
s
, 
d©a
, 
size
, 
Êags
));

712 
sock
 = 
	`gë_sockë
(
s
);

713 i‡(!
sock
) {

717 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_TCP
) {

718 #i‡(
LWIP_UDP
 || 
LWIP_RAW
)

719  
	`lwù_£ndto
(
s
, 
d©a
, 
size
, 
Êags
, 
NULL
, 0);

721 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));

726 i‡((
Êags
 & 
MSG_DONTWAIT
Ë|| 
	`√tc⁄n_is_n⁄blockög
(
sock
->
c⁄n
)) {

727 i‡((
size
 > 
TCP_SND_BUF
Ë|| ((sizê/ 
TCP_MSS
Ë> 
TCP_SND_QUEUELEN
)) {

729 
	`sock_£t_î∫o
(
sock
, 
EMSGSIZE
);

734 
wrôe_Êags
 = 
NETCONN_COPY
 |

735 ((
Êags
 & 
MSG_MORE
Ë? 
NETCONN_MORE
 : 0) |

736 ((
Êags
 & 
MSG_DONTWAIT
Ë? 
NETCONN_DONTBLOCK
 : 0);

737 
îr
 = 
	`√tc⁄n_wrôe
(
sock
->
c⁄n
, 
d©a
, 
size
, 
wrôe_Êags
);

739 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£nd(%dËîr=%d size=%"
SZT_F
"\n", 
s
, 
îr
, 
size
));

740 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

741  (
îr
 =
ERR_OK
 ? ()
size
 : -1);

742 
	}
}

745 
	$lwù_£ndto
(
s
, c⁄° *
d©a
, 
size_t
 
size
, 
Êags
,

746 c⁄° 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
)

748 
lwù_sock
 *
sock
;

749 
îr_t
 
îr
;

750 
u16_t
 
sh‹t_size
;

751 c⁄° 
sockaddr_ö
 *
to_ö
;

752 
u16_t
 
ªmŸe_p‹t
;

753 #i‡!
LWIP_TCPIP_CORE_LOCKING


754 
√tbuf
 
buf
;

757 
sock
 = 
	`gë_sockë
(
s
);

758 i‡(!
sock
) {

762 i‡(
sock
->
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

763 #i‡
LWIP_TCP


764  
	`lwù_£nd
(
s
, 
d©a
, 
size
, 
Êags
);

766 
	`LWIP_UNUSED_ARG
(
Êags
);

767 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));

773 
	`LWIP_ASSERT
("lwù_£ndto: sizêmu° fô i¿u16_t", 
size
 <= 0xffff);

774 
sh‹t_size
 = (
u16_t
)
size
;

775 
	`LWIP_ERROR
("lwù_£ndto: invÆidáddªss", (((
to
 =
NULL
Ë&& (
tﬁí
 == 0)) ||

776 ((
tﬁí
 =(
sockaddr_ö
)) &&

777 ((
to
->
ß_Ámûy
Ë=
AF_INET
Ë&& ((((
mem_±r_t
)to) % 4) == 0))),

778 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));  -1;);

779 
to_ö
 = (c⁄° 
sockaddr_ö
 *)(*)
to
;

781 #i‡
LWIP_TCPIP_CORE_LOCKING


784 
pbuf
* 
p
;

785 
ù_addr_t
 *
ªmŸe_addr
;

787 #i‡
LWIP_NETIF_TX_SINGLE_PBUF


788 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
sh‹t_size
, 
PBUF_RAM
, 
NULL
);

789 i‡(
p
 !
NULL
) {

790 #i‡
LWIP_CHECKSUM_ON_COPY


791 
u16_t
 
chksum
 = 0;

792 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_RAW
) {

793 
chksum
 = 
	`LWIP_CHKSUM_COPY
(
p
->
∑ylﬂd
, 
d©a
, 
sh‹t_size
);

796 
	`MEMCPY
(
p
->
∑ylﬂd
, 
d©a
, 
size
);

798 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
sh‹t_size
, 
PBUF_REF
, 
NULL
);

799 i‡(
p
 !
NULL
) {

800 
p
->
∑ylﬂd
 = (*)
d©a
;

803 i‡(
to_ö
 !
NULL
) {

804 
	`öë_addr_to_ùaddr_p
(
ªmŸe_addr
, &
to_ö
->
sö_addr
);

805 
ªmŸe_p‹t
 = 
	`¡ohs
(
to_ö
->
sö_p‹t
);

807 
ªmŸe_addr
 = &
sock
->
c⁄n
->
pcb
.
øw
->
ªmŸe_ù
;

808 i‡(
sock
->
c⁄n
->
ty≥
 =
NETCONN_RAW
) {

809 
ªmŸe_p‹t
 = 0;

811 
ªmŸe_p‹t
 = 
sock
->
c⁄n
->
pcb
.
udp
->remote_port;

815 
	`LOCK_TCPIP_CORE
();

816 i‡(
sock
->
c⁄n
->
ty≥
 =
NETCONN_RAW
) {

817 
îr
 = 
sock
->
c⁄n
->
œ°_îr
 = 
	`øw_£ndto
(sock->c⁄n->
pcb
.
øw
, 
p
, 
ªmŸe_addr
);

819 #i‡
LWIP_UDP


820 #i‡
LWIP_CHECKSUM_ON_COPY
 && 
LWIP_NETIF_TX_SINGLE_PBUF


821 
îr
 = 
sock
->
c⁄n
->
œ°_îr
 = 
	`udp_£ndto_chksum
(sock->c⁄n->
pcb
.
udp
, 
p
,

822 
ªmŸe_addr
, 
ªmŸe_p‹t
, 1, 
chksum
);

824 
îr
 = 
sock
->
c⁄n
->
œ°_îr
 = 
	`udp_£ndto
(sock->c⁄n->
pcb
.
udp
, 
p
,

825 
ªmŸe_addr
, 
ªmŸe_p‹t
);

828 
îr
 = 
ERR_ARG
;

831 
	`UNLOCK_TCPIP_CORE
();

833 
	`pbuf_‰ì
(
p
, 
NULL
);

835 
îr
 = 
ERR_MEM
;

840 
buf
.
p
 = buf.
±r
 = 
NULL
;

841 #i‡
LWIP_CHECKSUM_ON_COPY


842 
buf
.
Êags
 = 0;

844 i‡(
to
) {

845 
	`öë_addr_to_ùaddr
(&
buf
.
addr
, &
to_ö
->
sö_addr
);

846 
ªmŸe_p‹t
 = 
	`¡ohs
(
to_ö
->
sö_p‹t
);

847 
	`√tbuf_‰omp‹t
(&
buf
Ë
ªmŸe_p‹t
;

849 
ªmŸe_p‹t
 = 0;

850 
	`ù_addr_£t_™y
(&
buf
.
addr
);

851 
	`√tbuf_‰omp‹t
(&
buf
) = 0;

854 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£ndto(%d, d©a=%p, sh‹t_size=%"
U16_F
", flags=0x%xÅo=",

855 
s
, 
d©a
, 
sh‹t_size
, 
Êags
));

856 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, &
buf
.
addr
);

857 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
"\n", 
ªmŸe_p‹t
));

860 #i‡
LWIP_NETIF_TX_SINGLE_PBUF


862 i‡(
	`√tbuf_Æloc
(&
buf
, 
sh‹t_size
Ë=
NULL
) {

863 
îr
 = 
ERR_MEM
;

865 #i‡
LWIP_CHECKSUM_ON_COPY


866 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_RAW
) {

867 
u16_t
 
chksum
 = 
	`LWIP_CHKSUM_COPY
(
buf
.
p
->
∑ylﬂd
, 
d©a
, 
sh‹t_size
);

868 
	`√tbuf_£t_chksum
(&
buf
, 
chksum
);

869 
îr
 = 
ERR_OK
;

873 
îr
 = 
	`√tbuf_èke
(&
buf
, 
d©a
, 
sh‹t_size
);

877 
îr
 = 
	`√tbuf_ªf
(&
buf
, 
d©a
, 
sh‹t_size
);

879 i‡(
îr
 =
ERR_OK
) {

881 
îr
 = 
	`√tc⁄n_£nd
(
sock
->
c⁄n
, &
buf
);

885 
	`√tbuf_‰ì
(&
buf
);

887 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

888  (
îr
 =
ERR_OK
 ? 
sh‹t_size
 : -1);

889 
	}
}

892 
	$lwù_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
)

894 
√tc⁄n
 *
c⁄n
;

895 
i
;

897 
	`LWIP_UNUSED_ARG
(
domaö
);

900 
ty≥
) {

901 
SOCK_RAW
:

902 
c⁄n
 = 
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
NETCONN_RAW
, (
u8_t
)
¥Ÿocﬁ
, 
evít_ˇŒback
);

903 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%s, SOCK_RAW, %d) = ",

904 
domaö
 =
PF_INET
 ? "PF_INET" : "UNKNOWN", 
¥Ÿocﬁ
));

906 
SOCK_DGRAM
:

907 
c⁄n
 = 
	`√tc⁄n_√w_wôh_ˇŒback
–(
¥Ÿocﬁ
 =
IPPROTO_UDPLITE
) ?

908 
NETCONN_UDPLITE
 : 
NETCONN_UDP
, 
evít_ˇŒback
);

909 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",

910 
domaö
 =
PF_INET
 ? "PF_INET" : "UNKNOWN", 
¥Ÿocﬁ
));

912 
SOCK_STREAM
:

913 
c⁄n
 = 
	`√tc⁄n_√w_wôh_ˇŒback
(
NETCONN_TCP
, 
evít_ˇŒback
);

914 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%s, SOCK_STREAM, %d) = ",

915 
domaö
 =
PF_INET
 ? "PF_INET" : "UNKNOWN", 
¥Ÿocﬁ
));

916 i‡(
c⁄n
 !
NULL
) {

918 
	`√tc⁄n_£t_nﬂut‹ecved
(
c⁄n
, 1);

922 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",

923 
domaö
, 
ty≥
, 
¥Ÿocﬁ
));

924 
	`£t_î∫o
(
EINVAL
);

928 i‡(!
c⁄n
) {

929 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("-1 / ENOBUFS (couldÇot createÇetconn)\n"));

930 
	`£t_î∫o
(
ENOBUFS
);

934 
i
 = 
	`Æloc_sockë
(
c⁄n
, 0);

936 i‡(
i
 == -1) {

937 
	`√tc⁄n_dñëe
(
c⁄n
);

938 
	`£t_î∫o
(
ENFILE
);

941 
c⁄n
->
sockë
 = 
i
;

942 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("%d\n", 
i
));

943 
	`£t_î∫o
(0);

944  
i
;

945 
	}
}

948 
	$lwù_wrôe
(
s
, c⁄° *
d©a
, 
size_t
 
size
)

950  
	`lwù_£nd
(
s
, 
d©a
, 
size
, 0);

951 
	}
}

970 
	$lwù_£lsˇn
(
maxfdp1
, 
fd_£t
 *
ªad£t_ö
, fd_£à*
wrôe£t_ö
, fd_£à*
ex˚±£t_ö
,

971 
fd_£t
 *
ªad£t_out
, fd_£à*
wrôe£t_out
, fd_£à*
ex˚±£t_out
)

973 
i
, 
ƒódy
 = 0;

974 
fd_£t
 
Ãód£t
, 
lwrôe£t
, 
Àx˚±£t
;

975 
lwù_sock
 *
sock
;

976 
˝u
 = 
	`sched_gë˝u
(Ë% 
CPU_MOD
;

978 
	`FD_ZERO
(&
Ãód£t
);

979 
	`FD_ZERO
(&
lwrôe£t
);

980 
	`FD_ZERO
(&
Àx˚±£t
);

984 
i
 = 0; i < 
maxfdp1
; i++) {

985 * 
œ°d©a
 = 
NULL
;

986 
s16_t
 
rcvevít
 = 0;

987 
u16_t
 
£ndevít
 = 0;

988 
u16_t
 
îªvít
 = 0;

990 
	`±hªad_muãx_lock
(&
lwù_t˝ù_thªad
[
˝u
]->
sock_£lsˇn
);

991 
sock
 = 
	`åygë_sockë
(
i
);

992 i‡(
sock
 !
NULL
) {

993 
œ°d©a
 = 
sock
->lastdata;

994 
rcvevít
 = 
sock
->rcvevent;

995 
£ndevít
 = 
sock
->sendevent;

996 
îªvít
 = 
sock
->errevent;

998 
	`±hªad_muãx_u∆ock
(&
lwù_t˝ù_thªad
[
˝u
]->
sock_£lsˇn
);

1001 i‡(
ªad£t_ö
 && 
	`FD_ISSET
(
i
,Ñód£t_öË&& ((
œ°d©a
 !
NULL
Ë|| (
rcvevít
 > 0))) {

1002 
	`FD_SET
(
i
, &
Ãód£t
);

1003 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£lsˇn: fd=%dÑódy f‹Ñódög\n", 
i
));

1004 
ƒódy
++;

1007 i‡(
wrôe£t_ö
 && 
	`FD_ISSET
(
i
, wrôe£t_öË&& (
£ndevít
 != 0)) {

1008 
	`FD_SET
(
i
, &
lwrôe£t
);

1009 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£lsˇn: fd=%dÑódy f‹ wrôög\n", 
i
));

1010 
ƒódy
++;

1013 i‡(
ex˚±£t_ö
 && 
	`FD_ISSET
(
i
,Éx˚±£t_öË&& (
îªvít
 != 0)) {

1014 
	`FD_SET
(
i
, &
Àx˚±£t
);

1015 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£lsˇn: fd=%dÑódy f‹Éx˚±i⁄\n", 
i
));

1016 
ƒódy
++;

1020 *
ªad£t_out
 = 
Ãód£t
;

1021 *
wrôe£t_out
 = 
lwrôe£t
;

1022 *
ex˚±£t_out
 = 
Àx˚±£t
;

1024 
	`LWIP_ASSERT
("ƒódy >0", 
ƒódy
 >= 0);

1025  
ƒódy
;

1026 
	}
}

1032 
	$lwù_£À˘
(
maxfdp1
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
,

1033 
timevÆ
 *
timeout
)

1035 
u32_t
 
waôªs
 = 0;

1036 
ƒódy
;

1037 
fd_£t
 
Ãód£t
, 
lwrôe£t
, 
Àx˚±£t
;

1038 
u32_t
 
m£˘imeout
;

1039 
lwù_£À˘_cb
 
£À˘_cb
;

1040 
îr_t
 
îr
;

1041 
i
;

1042 
˝u
 = 
	`sched_gë˝u
(Ë% 
CPU_MOD
;

1044 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£À˘(%d, %p, %p, %p,Åv£c=%"
S32_F
"Åvusec=%"S32_F")\n",

1045 
maxfdp1
, (*)
ªad£t
, (*Ë
wrôe£t
, (*Ë
ex˚±£t
,

1046 
timeout
 ? (
s32_t
Èimeout->
tv_£c
 : (s32_t)-1,

1047 
timeout
 ? (
s32_t
Èimeout->
tv_u£c
 : (s32_t)-1));

1051 
ƒódy
 = 
	`lwù_£lsˇn
(
maxfdp1
, 
ªad£t
, 
wrôe£t
, 
ex˚±£t
, &
Ãód£t
, &
lwrôe£t
, &
Àx˚±£t
);

1054 i‡(!
ƒódy
) {

1055 i‡(
timeout
 &&Åimeout->
tv_£c
 =0 &&Åimeout->
tv_u£c
 == 0) {

1056 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_select:ÇoÅimeout,Ñeturning 0\n"));

1059 
ªtu∫_c›y_fd£ts
;

1067 
£À˘_cb
.
√xt
 = 
NULL
;

1068 
£À˘_cb
.
¥ev
 = 
NULL
;

1069 
£À˘_cb
.
ªad£t
 =Ñeadset;

1070 
£À˘_cb
.
wrôe£t
 = writeset;

1071 
£À˘_cb
.
ex˚±£t
 =Éxceptset;

1072 
£À˘_cb
.
£m_sig«Œed
 = 0;

1073 
îr
 = 
	`sys_£m_√w
(&
£À˘_cb
.
£m
, 0);

1074 i‡(
îr
 !
ERR_OK
) {

1076 
	`£t_î∫o
(
ENOMEM
);

1081 
	`±hªad_muãx_lock
(&
lwù_t˝ù_thªad
[
˝u
]->
sock_£À˘
);

1084 
£À˘_cb
.
√xt
 = 
lwù_t˝ù_thªad
[
˝u
]->
£À˘_cb_li°
;

1085 i‡(
lwù_t˝ù_thªad
[
˝u
]->
£À˘_cb_li°
 !
NULL
) {

1086 
lwù_t˝ù_thªad
[
˝u
]->
£À˘_cb_li°
->
¥ev
 = &
£À˘_cb
;

1088 
lwù_t˝ù_thªad
[
˝u
]->
£À˘_cb_li°
 = &
£À˘_cb
;

1090 
lwù_t˝ù_thªad
[
˝u
]->
£À˘_cb_˘r
++;

1093 
	`±hªad_muãx_u∆ock
(&
lwù_t˝ù_thªad
[
˝u
]->
sock_£À˘
);

1096 
i
 = 0; i < 
maxfdp1
; i++) {

1097 i‡((
ªad£t
 && 
	`FD_ISSET
(
i
,Ñeadset)) ||

1098 (
wrôe£t
 && 
	`FD_ISSET
(
i
, writeset)) ||

1099 (
ex˚±£t
 && 
	`FD_ISSET
(
i
,Éxceptset))) {

1100 
lwù_sock
 *
sock
 = 
	`åygë_sockë
(
i
);

1101 
	`LWIP_ASSERT
("sock !NULL", 
sock
 !
NULL
);

1102 
	`±hªad_muãx_lock
(&
lwù_t˝ù_thªad
[
˝u
]->
sock_£À˘
);

1103 
sock
->
£À˘_waôög
++;

1104 
	`LWIP_ASSERT
("sock->£À˘_waôög > 0", 
sock
->
£À˘_waôög
 > 0);

1105 
	`±hªad_muãx_u∆ock
(&
lwù_t˝ù_thªad
[
˝u
]->
sock_£À˘
);

1111 
ƒódy
 = 
	`lwù_£lsˇn
(
maxfdp1
, 
ªad£t
, 
wrôe£t
, 
ex˚±£t
, &
Ãód£t
, &
lwrôe£t
, &
Àx˚±£t
);

1112 i‡(!
ƒódy
) {

1114 i‡(
timeout
 == 0) {

1116 
m£˘imeout
 = 0;

1118 
m£˘imeout
 = ((
timeout
->
tv_£c
 * 1000Ë+ (—imeout->
tv_u£c
 + 500)/1000));

1119 i‡(
m£˘imeout
 == 0) {

1121 
m£˘imeout
 = 1;

1125 
waôªs
 = 
	`sys_¨ch_£m_waô
(&
£À˘_cb
.
£m
, 
m£˘imeout
);

1128 
i
 = 0; i < 
maxfdp1
; i++) {

1129 i‡((
ªad£t
 && 
	`FD_ISSET
(
i
,Ñeadset)) ||

1130 (
wrôe£t
 && 
	`FD_ISSET
(
i
, writeset)) ||

1131 (
ex˚±£t
 && 
	`FD_ISSET
(
i
,Éxceptset))) {

1132 
lwù_sock
 *
sock
 = 
	`åygë_sockë
(
i
);

1133 
	`LWIP_ASSERT
("sock !NULL", 
sock
 !
NULL
);

1134 
	`±hªad_muãx_lock
(&
lwù_t˝ù_thªad
[
˝u
]->
sock_£À˘
);

1135 
sock
->
£À˘_waôög
--;

1136 
	`LWIP_ASSERT
("sock->£À˘_waôög >0", 
sock
->
£À˘_waôög
 >= 0);

1137 
	`±hªad_muãx_u∆ock
(&
lwù_t˝ù_thªad
[
˝u
]->
sock_£À˘
);

1141 
	`±hªad_muãx_lock
(&
lwù_t˝ù_thªad
[
˝u
]->
sock_£À˘
);

1142 i‡(
£À˘_cb
.
√xt
 !
NULL
) {

1143 
£À˘_cb
.
√xt
->
¥ev
 = select_cb.prev;

1145 i‡(
lwù_t˝ù_thªad
[
˝u
]->
£À˘_cb_li°
 =&
£À˘_cb
) {

1146 
	`LWIP_ASSERT
("£À˘_cb.¥ev =NULL", 
£À˘_cb
.
¥ev
 =
NULL
);

1147 
lwù_t˝ù_thªad
[
˝u
]->
£À˘_cb_li°
 = 
£À˘_cb
.
√xt
;

1149 
	`LWIP_ASSERT
("£À˘_cb.¥ev !NULL", 
£À˘_cb
.
¥ev
 !
NULL
);

1150 
£À˘_cb
.
¥ev
->
√xt
 = select_cb.next;

1153 
lwù_t˝ù_thªad
[
˝u
]->
£À˘_cb_˘r
++;

1154 
	`±hªad_muãx_u∆ock
(&
lwù_t˝ù_thªad
[
˝u
]->
sock_£À˘
);

1156 
	`sys_£m_‰ì
(&
£À˘_cb
.
£m
);

1157 i‡(
waôªs
 =
SYS_ARCH_TIMEOUT
) {

1159 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_select:ÅimeoutÉxpired\n"));

1162 
ªtu∫_c›y_fd£ts
;

1166 
ƒódy
 = 
	`lwù_£lsˇn
(
maxfdp1
, 
ªad£t
, 
wrôe£t
, 
ex˚±£t
, &
Ãód£t
, &
lwrôe£t
, &
Àx˚±£t
);

1169 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£À˘:Çªady=%d\n", 
ƒódy
));

1170 
ªtu∫_c›y_fd£ts
:

1171 
	`£t_î∫o
(0);

1172 i‡(
ªad£t
) {

1173 *
ªad£t
 = 
Ãód£t
;

1175 i‡(
wrôe£t
) {

1176 *
wrôe£t
 = 
lwrôe£t
;

1178 i‡(
ex˚±£t
) {

1179 *
ex˚±£t
 = 
Àx˚±£t
;

1182  
ƒódy
;

1183 
	}
}

1190 
	$evít_ˇŒback
(
√tc⁄n
 *
c⁄n
, 
√tc⁄n_evt
 
evt
, 
u16_t
 
Àn
)

1192 
s
;

1193 
lwù_sock
 *
sock
;

1194 
lwù_£À˘_cb
 *
scb
;

1195 
œ°_£À˘_cb_˘r
;

1196 
˝u
 = 
	`sched_gë˝u
(Ë% 
CPU_MOD
;

1198 
	`LWIP_UNUSED_ARG
(
Àn
);

1201 i‡(
c⁄n
) {

1202 
s
 = 
c⁄n
->
sockë
;

1203 i‡(
s
 < 0) {

1209 
	`±hªad_muãx_lock
(&
lwù_t˝ù_thªad
[
˝u
]->
evt_muãx
);

1210 i‡(
c⁄n
->
sockë
 < 0) {

1211 i‡(
evt
 =
NETCONN_EVT_RCVPLUS
) {

1212 
c⁄n
->
sockë
--;

1214 
	`±hªad_muãx_u∆ock
(&
lwù_t˝ù_thªad
[
˝u
]->
evt_muãx
);

1217 
s
 = 
c⁄n
->
sockë
;

1218 
	`±hªad_muãx_u∆ock
(&
lwù_t˝ù_thªad
[
˝u
]->
evt_muãx
);

1221 
sock
 = 
	`gë_sockë
(
s
);

1222 i‡(!
sock
) {

1229 
	`±hªad_muãx_lock
(&
lwù_t˝ù_thªad
[
˝u
]->
evt_muãx
);

1231 
evt
) {

1232 
NETCONN_EVT_RCVPLUS
:

1233 
sock
->
rcvevít
++;

1235 
NETCONN_EVT_RCVMINUS
:

1236 
sock
->
rcvevít
--;

1238 
NETCONN_EVT_SENDPLUS
:

1239 
sock
->
£ndevít
 = 1;

1241 
NETCONN_EVT_SENDMINUS
:

1242 
sock
->
£ndevít
 = 0;

1244 
NETCONN_EVT_ERROR
:

1245 
sock
->
îªvít
 = 1;

1248 
	`LWIP_ASSERT
("unknownÉvent", 0);

1252 i‡(
sock
->
£À˘_waôög
 == 0) {

1254 
	`±hªad_muãx_u∆ock
(&
lwù_t˝ù_thªad
[
˝u
]->
evt_muãx
);

1264 
agaö
:

1265 
scb
 = 
lwù_t˝ù_thªad
[
˝u
]->
£À˘_cb_li°
; scb !
NULL
; scb = scb->
√xt
) {

1266 i‡(
scb
->
£m_sig«Œed
 == 0) {

1268 
do_sig«l
 = 0;

1270 i‡(
sock
->
rcvevít
 > 0) {

1271 i‡(
scb
->
ªad£t
 && 
	`FD_ISSET
(
s
, scb->readset)) {

1272 
do_sig«l
 = 1;

1275 i‡(
sock
->
£ndevít
 != 0) {

1276 i‡(!
do_sig«l
 && 
scb
->
wrôe£t
 && 
	`FD_ISSET
(
s
, scb->writeset)) {

1277 
do_sig«l
 = 1;

1280 i‡(
sock
->
îªvít
 != 0) {

1281 i‡(!
do_sig«l
 && 
scb
->
ex˚±£t
 && 
	`FD_ISSET
(
s
, scb->exceptset)) {

1282 
do_sig«l
 = 1;

1285 i‡(
do_sig«l
) {

1286 
scb
->
£m_sig«Œed
 = 1;

1289 
	`sys_£m_sig«l
(&
scb
->
£m
);

1293 
œ°_£À˘_cb_˘r
 = 
lwù_t˝ù_thªad
[
˝u
]->
£À˘_cb_˘r
;

1294 i‡(
œ°_£À˘_cb_˘r
 !
lwù_t˝ù_thªad
[
˝u
]->
£À˘_cb_˘r
) {

1296 
agaö
;

1299 
	`±hªad_muãx_u∆ock
(&
lwù_t˝ù_thªad
[
˝u
]->
evt_muãx
);

1300 
	}
}

1307 
	$lwù_shutdown
(
s
, 
how
)

1309 
lwù_sock
 *
sock
;

1310 
îr_t
 
îr
;

1311 
u8_t
 
shut_rx
 = 0, 
shut_tx
 = 0;

1313 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_shutdown(%d, how=%d)\n", 
s
, 
how
));

1315 
sock
 = 
	`gë_sockë
(
s
);

1316 i‡(!
sock
) {

1320 i‡(
sock
->
c⁄n
 !
NULL
) {

1321 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë!
NETCONN_TCP
) {

1322 
	`sock_£t_î∫o
(
sock
, 
EOPNOTSUPP
);

1323  
EOPNOTSUPP
;

1326 
	`sock_£t_î∫o
(
sock
, 
ENOTCONN
);

1327  
ENOTCONN
;

1330 i‡(
how
 =
SHUT_RD
) {

1331 
shut_rx
 = 1;

1332 } i‡(
how
 =
SHUT_WR
) {

1333 
shut_tx
 = 1;

1334 } if(
how
 =
SHUT_RDWR
) {

1335 
shut_rx
 = 1;

1336 
shut_tx
 = 1;

1338 
	`sock_£t_î∫o
(
sock
, 
EINVAL
);

1339  
EINVAL
;

1341 
îr
 = 
	`√tc⁄n_shutdown
(
sock
->
c⁄n
, 
shut_rx
, 
shut_tx
);

1343 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

1344  (
îr
 =
ERR_OK
 ? 0 : -1);

1345 
	}
}

1348 
	$lwù_gëadd∫ame
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
, 
u8_t
 
loˇl
)

1350 
lwù_sock
 *
sock
;

1351 
sockaddr_ö
 
sö
;

1352 
ù_addr_t
 
«ddr
;

1354 
sock
 = 
	`gë_sockë
(
s
);

1355 i‡(!
sock
) {

1359 
	`mem£t
(&
sö
, 0, (sin));

1360 
sö
.
sö_Àn
 = (sin);

1361 
sö
.
sö_Ámûy
 = 
AF_INET
;

1364 
	`√tc⁄n_gëaddr
(
sock
->
c⁄n
, &
«ddr
, &
sö
.
sö_p‹t
, 
loˇl
);

1366 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_gëadd∫ame(%d,áddr=", 
s
));

1367 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, &
«ddr
);

1368 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
")\n", 
sö
.
sö_p‹t
));

1370 
sö
.
sö_p‹t
 = 
	`ht⁄s
(sin.sin_port);

1371 
	`öë_addr_‰om_ùaddr
(&
sö
.
sö_addr
, &
«ddr
);

1373 i‡(*
«mñí
 > (
sö
)) {

1374 *
«mñí
 = (
sö
);

1377 
	`MEMCPY
(
«me
, &
sö
, *
«mñí
);

1378 
	`sock_£t_î∫o
(
sock
, 0);

1380 
	}
}

1383 
	$lwù_gë≥î«me
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
)

1385  
	`lwù_gëadd∫ame
(
s
, 
«me
, 
«mñí
, 0);

1386 
	}
}

1389 
	$lwù_gësock«me
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
)

1391  
	`lwù_gëadd∫ame
(
s
, 
«me
, 
«mñí
, 1);

1392 
	}
}

1395 
	$lwù_gësock›t
(
s
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
sockÀn_t
 *
›éí
)

1397 
îr_t
 
îr
 = 
ERR_OK
;

1398 
lwù_sock
 *
sock
 = 
	`gë_sockë
(
s
);

1399 
lwù_£tgësock›t_d©a
 
d©a
;

1401 i‡(!
sock
) {

1405 i‡((
NULL
 =
›tvÆ
Ë|| (NULL =
›éí
)) {

1406 
	`sock_£t_î∫o
(
sock
, 
EFAULT
);

1411 
Àvñ
) {

1414 
SOL_SOCKET
:

1415 
›äame
) {

1417 
SO_ACCEPTCONN
:

1418 
SO_BROADCAST
:

1421 
SO_ERROR
:

1422 
SO_KEEPALIVE
:

1425 #i‡
LWIP_SO_RCVTIMEO


1426 
SO_RCVTIMEO
:

1428 #i‡
LWIP_SO_RCVBUF


1429 
SO_RCVBUF
:

1435 #i‡
SO_REUSE


1436 
SO_REUSEADDR
:

1437 
SO_REUSEPORT
:

1439 
SO_TYPE
:

1441 i‡(*
›éí
 < ()) {

1442 
îr
 = 
EINVAL
;

1446 
SO_NO_CHECK
:

1447 i‡(*
›éí
 < ()) {

1448 
îr
 = 
EINVAL
;

1450 #i‡
LWIP_UDP


1451 i‡((
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDP
) ||

1452 ((
	`udp_Êags
(
sock
->
c⁄n
->
pcb
.
udp
Ë& 
UDP_FLAGS_UDPLITE
) != 0)) {

1454 
îr
 = 
EAFNOSUPPORT
;

1460 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",

1461 
s
, 
›äame
));

1462 
îr
 = 
ENOPROTOOPT
;

1467 
IPPROTO_IP
:

1468 
›äame
) {

1472 
IP_TTL
:

1473 
IP_TOS
:

1474 i‡(*
›éí
 < ()) {

1475 
îr
 = 
EINVAL
;

1478 #i‡
LWIP_IGMP


1479 
IP_MULTICAST_TTL
:

1480 i‡(*
›éí
 < (
u8_t
)) {

1481 
îr
 = 
EINVAL
;

1484 
IP_MULTICAST_IF
:

1485 i‡(*
›éí
 < (
ö_addr
)) {

1486 
îr
 = 
EINVAL
;

1489 
IP_MULTICAST_LOOP
:

1490 i‡(*
›éí
 < (
u8_t
)) {

1491 
îr
 = 
EINVAL
;

1493 i‡(
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
Ë!
NETCONN_UDP
) {

1494 
îr
 = 
EAFNOSUPPORT
;

1500 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",

1501 
s
, 
›äame
));

1502 
îr
 = 
ENOPROTOOPT
;

1506 #i‡
LWIP_TCP


1508 
IPPROTO_TCP
:

1509 i‡(*
›éí
 < ()) {

1510 
îr
 = 
EINVAL
;

1515 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_TCP
)

1518 
›äame
) {

1519 
TCP_NODELAY
:

1520 
TCP_KEEPALIVE
:

1521 #i‡
LWIP_TCP_KEEPALIVE


1522 
TCP_KEEPIDLE
:

1523 
TCP_KEEPINTVL
:

1524 
TCP_KEEPCNT
:

1529 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",

1530 
s
, 
›äame
));

1531 
îr
 = 
ENOPROTOOPT
;

1535 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1537 
IPPROTO_UDPLITE
:

1538 i‡(*
›éí
 < ()) {

1539 
îr
 = 
EINVAL
;

1544 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDPLITE
) {

1548 
›äame
) {

1549 
UDPLITE_SEND_CSCOV
:

1550 
UDPLITE_RECV_CSCOV
:

1554 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UNIMPL: optname=0x%x, ..)\n",

1555 
s
, 
›äame
));

1556 
îr
 = 
ENOPROTOOPT
;

1562 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d,Üevel=0x%x, UNIMPL: optname=0x%x, ..)\n",

1563 
s
, 
Àvñ
, 
›äame
));

1564 
îr
 = 
ENOPROTOOPT
;

1568 i‡(
îr
 !
ERR_OK
) {

1569 
	`sock_£t_î∫o
(
sock
, 
îr
);

1574 
d©a
.
sock
 = sock;

1575 #ifde‡
LWIP_DEBUG


1576 
d©a
.
s
 = s;

1578 
d©a
.
Àvñ
 =Üevel;

1579 
d©a
.
›äame
 = optname;

1580 
d©a
.
›tvÆ
 = optval;

1581 
d©a
.
›éí
 = optlen;

1582 
d©a
.
îr
 =Érr;

1583 
	`t˝ù_ˇŒback
(
lwù_gësock›t_öã∫Æ
, &
d©a
);

1584 
	`sys_¨ch_£m_waô
(&
sock
->
c⁄n
->
›_com∂ëed
, 0);

1586 
îr
 = 
d©a
.err;

1588 
	`sock_£t_î∫o
(
sock
, 
îr
);

1589  
îr
 ? -1 : 0;

1590 
	}
}

1593 
	$lwù_gësock›t_öã∫Æ
(*
¨g
)

1595 
lwù_sock
 *
sock
;

1596 #ifde‡
LWIP_DEBUG


1597 
s
;

1599 
Àvñ
, 
›äame
;

1600 *
›tvÆ
;

1601 
lwù_£tgësock›t_d©a
 *
d©a
;

1603 
	`LWIP_ASSERT
("¨g !NULL", 
¨g
 !
NULL
);

1605 
d©a
 = (
lwù_£tgësock›t_d©a
*)
¨g
;

1606 
sock
 = 
d©a
->sock;

1607 #ifde‡
LWIP_DEBUG


1608 
s
 = 
d©a
->s;

1610 
Àvñ
 = 
d©a
->level;

1611 
›äame
 = 
d©a
->optname;

1612 
›tvÆ
 = 
d©a
->optval;

1614 
Àvñ
) {

1617 
SOL_SOCKET
:

1618 
›äame
) {

1621 
SO_ACCEPTCONN
:

1622 
SO_BROADCAST
:

1625 
SO_KEEPALIVE
:

1627 #i‡
SO_REUSE


1628 
SO_REUSEADDR
:

1629 
SO_REUSEPORT
:

1632 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
so_›ti⁄s
 & 
›äame
;

1633 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",

1634 
s
, 
›äame
, (*(*)
›tvÆ
?"on":"off")));

1637 
SO_TYPE
:

1638 
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
)) {

1639 
NETCONN_RAW
:

1640 *(*)
›tvÆ
 = 
SOCK_RAW
;

1642 
NETCONN_TCP
:

1643 *(*)
›tvÆ
 = 
SOCK_STREAM
;

1645 
NETCONN_UDP
:

1646 *(*)
›tvÆ
 = 
SOCK_DGRAM
;

1649 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
ty≥
;

1650 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
,

1652 
s
, *(*)
›tvÆ
));

1654 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",

1655 
s
, *(*)
›tvÆ
));

1658 
SO_ERROR
:

1660 i‡((
sock
->
îr
 =0Ë|| (sock->î∏=
EINPROGRESS
)) {

1661 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(sock->
c⁄n
->
œ°_îr
));

1663 *(*)
›tvÆ
 = 
sock
->
îr
;

1664 
sock
->
îr
 = 0;

1665 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",

1666 
s
, *(*)
›tvÆ
));

1669 #i‡
LWIP_SO_RCVTIMEO


1670 
SO_RCVTIMEO
:

1671 *(*)
›tvÆ
 = 
	`√tc⁄n_gë_ªcvtimeout
(
sock
->
c⁄n
);

1674 #i‡
LWIP_SO_RCVBUF


1675 
SO_RCVBUF
:

1676 *(*)
›tvÆ
 = 
	`√tc⁄n_gë_ªcvbufsize
(
sock
->
c⁄n
);

1679 #i‡
LWIP_UDP


1680 
SO_NO_CHECK
:

1681 *(*)
›tvÆ
 = (
	`udp_Êags
(
sock
->
c⁄n
->
pcb
.
udp
Ë& 
UDP_FLAGS_NOCHKSUM
) ? 1 : 0;

1685 
	`LWIP_ASSERT
("unhandled optname", 0);

1691 
IPPROTO_IP
:

1692 
›äame
) {

1693 
IP_TTL
:

1694 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
âl
;

1695 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",

1696 
s
, *(*)
›tvÆ
));

1698 
IP_TOS
:

1699 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
tos
;

1700 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",

1701 
s
, *(*)
›tvÆ
));

1703 #i‡
LWIP_IGMP


1704 
IP_MULTICAST_TTL
:

1705 *(
u8_t
*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
âl
;

1706 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_TTL) = %d\n",

1707 
s
, *(*)
›tvÆ
));

1709 
IP_MULTICAST_IF
:

1710 
	`öë_addr_‰om_ùaddr
((
ö_addr
*)
›tvÆ
, &
sock
->
c⁄n
->
pcb
.
udp
->
mu…iˇ°_ù
);

1711 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_gësock›t(%d, IPPROTO_IP, IP_MULTICAST_IFË0x%"
X32_F
"\n",

1712 
s
, *(
u32_t
 *)
›tvÆ
));

1714 
IP_MULTICAST_LOOP
:

1715 i‡((
sock
->
c⁄n
->
pcb
.
udp
->
Êags
 & 
UDP_FLAGS_MULTICAST_LOOP
) != 0) {

1716 *(
u8_t
*)
›tvÆ
 = 1;

1718 *(
u8_t
*)
›tvÆ
 = 0;

1720 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_LOOP) = %d\n",

1721 
s
, *(*)
›tvÆ
));

1725 
	`LWIP_ASSERT
("unhandled optname", 0);

1730 #i‡
LWIP_TCP


1732 
IPPROTO_TCP
:

1733 
›äame
) {

1734 
TCP_NODELAY
:

1735 *(*)
›tvÆ
 = 
	`t˝_«gÀ_dißbÀd
(
sock
->
c⁄n
->
pcb
.
t˝
);

1736 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",

1737 
s
, (*(*)
›tvÆ
)?"on":"off") );

1739 
TCP_KEEPALIVE
:

1740 *(*)
›tvÆ
 = ()
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
;

1741 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPALIVE) = %d\n",

1742 
s
, *(*)
›tvÆ
));

1745 #i‡
LWIP_TCP_KEEPALIVE


1746 
TCP_KEEPIDLE
:

1747 *(*)
›tvÆ
 = ()(
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
/1000);

1748 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPIDLE) = %d\n",

1749 
s
, *(*)
›tvÆ
));

1751 
TCP_KEEPINTVL
:

1752 *(*)
›tvÆ
 = ()(
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_ötvl
/1000);

1753 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPINTVL) = %d\n",

1754 
s
, *(*)
›tvÆ
));

1756 
TCP_KEEPCNT
:

1757 *(*)
›tvÆ
 = ()
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_˙t
;

1758 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPCNT) = %d\n",

1759 
s
, *(*)
›tvÆ
));

1763 
	`LWIP_ASSERT
("unhandled optname", 0);

1768 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1770 
IPPROTO_UDPLITE
:

1771 
›äame
) {

1772 
UDPLITE_SEND_CSCOV
:

1773 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_tx
;

1774 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV) = %d\n",

1775 
s
, (*(*)
›tvÆ
)) );

1777 
UDPLITE_RECV_CSCOV
:

1778 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_rx
;

1779 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV) = %d\n",

1780 
s
, (*(*)
›tvÆ
)) );

1783 
	`LWIP_ASSERT
("unhandled optname", 0);

1789 
	`LWIP_ASSERT
("unhandledÜevel", 0);

1792 
	`sys_£m_sig«l
(&
sock
->
c⁄n
->
›_com∂ëed
);

1793 
	}
}

1796 
	$lwù_£tsock›t
(
s
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
)

1798 
lwù_sock
 *
sock
 = 
	`gë_sockë
(
s
);

1799 
îr_t
 
îr
 = 
ERR_OK
;

1800 
lwù_£tgësock›t_d©a
 
d©a
;

1802 i‡(!
sock
) {

1806 i‡(
NULL
 =
›tvÆ
) {

1807 
	`sock_£t_î∫o
(
sock
, 
EFAULT
);

1812 
Àvñ
) {

1815 
SOL_SOCKET
:

1816 
›äame
) {

1818 
SO_BROADCAST
:

1821 
SO_KEEPALIVE
:

1824 #i‡
LWIP_SO_RCVTIMEO


1825 
SO_RCVTIMEO
:

1827 #i‡
LWIP_SO_RCVBUF


1828 
SO_RCVBUF
:

1834 #i‡
SO_REUSE


1835 
SO_REUSEADDR
:

1836 
SO_REUSEPORT
:

1839 i‡(
›éí
 < ()) {

1840 
îr
 = 
EINVAL
;

1843 
SO_NO_CHECK
:

1844 i‡(
›éí
 < ()) {

1845 
îr
 = 
EINVAL
;

1847 #i‡
LWIP_UDP


1848 i‡((
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDP
) ||

1849 ((
	`udp_Êags
(
sock
->
c⁄n
->
pcb
.
udp
Ë& 
UDP_FLAGS_UDPLITE
) != 0)) {

1851 
îr
 = 
EAFNOSUPPORT
;

1856 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",

1857 
s
, 
›äame
));

1858 
îr
 = 
ENOPROTOOPT
;

1863 
IPPROTO_IP
:

1864 
›äame
) {

1868 
IP_TTL
:

1869 
IP_TOS
:

1870 i‡(
›éí
 < ()) {

1871 
îr
 = 
EINVAL
;

1874 #i‡
LWIP_IGMP


1875 
IP_MULTICAST_TTL
:

1876 i‡(
›éí
 < (
u8_t
)) {

1877 
îr
 = 
EINVAL
;

1879 i‡(
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
Ë!
NETCONN_UDP
) {

1880 
îr
 = 
EAFNOSUPPORT
;

1883 
IP_MULTICAST_IF
:

1884 i‡(
›éí
 < (
ö_addr
)) {

1885 
îr
 = 
EINVAL
;

1887 i‡(
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
Ë!
NETCONN_UDP
) {

1888 
îr
 = 
EAFNOSUPPORT
;

1891 
IP_MULTICAST_LOOP
:

1892 i‡(
›éí
 < (
u8_t
)) {

1893 
îr
 = 
EINVAL
;

1895 i‡(
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
Ë!
NETCONN_UDP
) {

1896 
îr
 = 
EAFNOSUPPORT
;

1899 
IP_ADD_MEMBERSHIP
:

1900 
IP_DROP_MEMBERSHIP
:

1901 i‡(
›éí
 < (
ù_mªq
)) {

1902 
îr
 = 
EINVAL
;

1904 i‡(
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
Ë!
NETCONN_UDP
) {

1905 
îr
 = 
EAFNOSUPPORT
;

1910 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",

1911 
s
, 
›äame
));

1912 
îr
 = 
ENOPROTOOPT
;

1916 #i‡
LWIP_TCP


1918 
IPPROTO_TCP
:

1919 i‡(
›éí
 < ()) {

1920 
îr
 = 
EINVAL
;

1925 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_TCP
)

1928 
›äame
) {

1929 
TCP_NODELAY
:

1930 
TCP_KEEPALIVE
:

1931 #i‡
LWIP_TCP_KEEPALIVE


1932 
TCP_KEEPIDLE
:

1933 
TCP_KEEPINTVL
:

1934 
TCP_KEEPCNT
:

1939 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",

1940 
s
, 
›äame
));

1941 
îr
 = 
ENOPROTOOPT
;

1945 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1947 
IPPROTO_UDPLITE
:

1948 i‡(
›éí
 < ()) {

1949 
îr
 = 
EINVAL
;

1954 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDPLITE
)

1957 
›äame
) {

1958 
UDPLITE_SEND_CSCOV
:

1959 
UDPLITE_RECV_CSCOV
:

1963 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UNIMPL: optname=0x%x, ..)\n",

1964 
s
, 
›äame
));

1965 
îr
 = 
ENOPROTOOPT
;

1971 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d,Üevel=0x%x, UNIMPL: optname=0x%x, ..)\n",

1972 
s
, 
Àvñ
, 
›äame
));

1973 
îr
 = 
ENOPROTOOPT
;

1977 i‡(
îr
 !
ERR_OK
) {

1978 
	`sock_£t_î∫o
(
sock
, 
îr
);

1984 
d©a
.
sock
 = sock;

1985 #ifde‡
LWIP_DEBUG


1986 
d©a
.
s
 = s;

1988 
d©a
.
Àvñ
 =Üevel;

1989 
d©a
.
›äame
 = optname;

1990 
d©a
.
›tvÆ
 = (*)optval;

1991 
d©a
.
›éí
 = &optlen;

1992 
d©a
.
îr
 =Érr;

1993 
	`t˝ù_ˇŒback
(
lwù_£tsock›t_öã∫Æ
, &
d©a
);

1994 
	`sys_¨ch_£m_waô
(&
sock
->
c⁄n
->
›_com∂ëed
, 0);

1996 
îr
 = 
d©a
.err;

1998 
	`sock_£t_î∫o
(
sock
, 
îr
);

1999  
îr
 ? -1 : 0;

2000 
	}
}

2003 
	$lwù_£tsock›t_öã∫Æ
(*
¨g
)

2005 
lwù_sock
 *
sock
;

2006 #ifde‡
LWIP_DEBUG


2007 
s
;

2009 
Àvñ
, 
›äame
;

2010 c⁄° *
›tvÆ
;

2011 
lwù_£tgësock›t_d©a
 *
d©a
;

2013 
	`LWIP_ASSERT
("¨g !NULL", 
¨g
 !
NULL
);

2015 
d©a
 = (
lwù_£tgësock›t_d©a
*)
¨g
;

2016 
sock
 = 
d©a
->sock;

2017 #ifde‡
LWIP_DEBUG


2018 
s
 = 
d©a
->s;

2020 
Àvñ
 = 
d©a
->level;

2021 
›äame
 = 
d©a
->optname;

2022 
›tvÆ
 = 
d©a
->optval;

2024 
Àvñ
) {

2027 
SOL_SOCKET
:

2028 
›äame
) {

2031 
SO_BROADCAST
:

2034 
SO_KEEPALIVE
:

2036 #i‡
SO_REUSE


2037 
SO_REUSEADDR
:

2038 
SO_REUSEPORT
:

2041 i‡(*(*)
›tvÆ
) {

2042 
sock
->
c⁄n
->
pcb
.
ù
->
so_›ti⁄s
 |
›äame
;

2044 
sock
->
c⁄n
->
pcb
.
ù
->
so_›ti⁄s
 &~
›äame
;

2046 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",

2047 
s
, 
›äame
, (*(*)
›tvÆ
?"on":"off")));

2049 #i‡
LWIP_SO_RCVTIMEO


2050 
SO_RCVTIMEO
:

2051 
	`√tc⁄n_£t_ªcvtimeout
(
sock
->
c⁄n
, *(*)
›tvÆ
);

2054 #i‡
LWIP_SO_RCVBUF


2055 
SO_RCVBUF
:

2056 
	`√tc⁄n_£t_ªcvbufsize
(
sock
->
c⁄n
, *(*)
›tvÆ
);

2059 #i‡
LWIP_UDP


2060 
SO_NO_CHECK
:

2061 i‡(*(*)
›tvÆ
) {

2062 
	`udp_£tÊags
(
sock
->
c⁄n
->
pcb
.
udp
, 
	`udp_Êags
(sock->c⁄n->pcb.udpË| 
UDP_FLAGS_NOCHKSUM
);

2064 
	`udp_£tÊags
(
sock
->
c⁄n
->
pcb
.
udp
, 
	`udp_Êags
(sock->c⁄n->pcb.udpË& ~
UDP_FLAGS_NOCHKSUM
);

2069 
	`LWIP_ASSERT
("unhandled optname", 0);

2075 
IPPROTO_IP
:

2076 
›äame
) {

2077 
IP_TTL
:

2078 
sock
->
c⁄n
->
pcb
.
ù
->
âl
 = (
u8_t
)(*(*)
›tvÆ
);

2079 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",

2080 
s
, 
sock
->
c⁄n
->
pcb
.
ù
->
âl
));

2082 
IP_TOS
:

2083 
sock
->
c⁄n
->
pcb
.
ù
->
tos
 = (
u8_t
)(*(*)
›tvÆ
);

2084 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",

2085 
s
, 
sock
->
c⁄n
->
pcb
.
ù
->
tos
));

2087 #i‡
LWIP_IGMP


2088 
IP_MULTICAST_TTL
:

2089 
sock
->
c⁄n
->
pcb
.
udp
->
âl
 = (
u8_t
)(*(u8_t*)
›tvÆ
);

2091 
IP_MULTICAST_IF
:

2092 
	`öë_addr_to_ùaddr
(&
sock
->
c⁄n
->
pcb
.
udp
->
mu…iˇ°_ù
, (
ö_addr
*)
›tvÆ
);

2094 
IP_MULTICAST_LOOP
:

2095 i‡(*(
u8_t
*)
›tvÆ
) {

2096 
	`udp_£tÊags
(
sock
->
c⁄n
->
pcb
.
udp
, 
	`udp_Êags
(sock->c⁄n->pcb.udpË| 
UDP_FLAGS_MULTICAST_LOOP
);

2098 
	`udp_£tÊags
(
sock
->
c⁄n
->
pcb
.
udp
, 
	`udp_Êags
(sock->c⁄n->pcb.udpË& ~
UDP_FLAGS_MULTICAST_LOOP
);

2101 
IP_ADD_MEMBERSHIP
:

2102 
IP_DROP_MEMBERSHIP
:

2105 
ù_mªq
 *
imr
 = (ù_mªq *)
›tvÆ
;

2106 
ù_addr_t
 
if_addr
;

2107 
ù_addr_t
 
mu…i_addr
;

2108 
	`öë_addr_to_ùaddr
(&
if_addr
, &
imr
->
imr_öãrÁ˚
);

2109 
	`öë_addr_to_ùaddr
(&
mu…i_addr
, &
imr
->
imr_mu…üddr
);

2110 if(
›äame
 =
IP_ADD_MEMBERSHIP
){

2111 
d©a
->
îr
 = 
	`igmp_joögroup
(&
if_addr
, &
mu…i_addr
);

2113 
d©a
->
îr
 = 
	`igmp_Àavegroup
(&
if_addr
, &
mu…i_addr
);

2115 if(
d©a
->
îr
 !
ERR_OK
) {

2116 
d©a
->
îr
 = 
EADDRNOTAVAIL
;

2122 
	`LWIP_ASSERT
("unhandled optname", 0);

2127 #i‡
LWIP_TCP


2129 
IPPROTO_TCP
:

2130 
›äame
) {

2131 
TCP_NODELAY
:

2132 i‡(*(*)
›tvÆ
) {

2133 
	`t˝_«gÀ_dißbÀ
(
sock
->
c⁄n
->
pcb
.
t˝
);

2135 
	`t˝_«gÀ_íabÀ
(
sock
->
c⁄n
->
pcb
.
t˝
);

2137 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",

2138 
s
, (*(*)
›tvÆ
)?"on":"off") );

2140 
TCP_KEEPALIVE
:

2141 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
 = (
u32_t
)(*(*)
›tvÆ
);

2142 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£tsock›t(%d, IPPROTO_TCP, TCP_KEEPALIVEË-> %"
U32_F
"\n",

2143 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
));

2146 #i‡
LWIP_TCP_KEEPALIVE


2147 
TCP_KEEPIDLE
:

2148 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
 = 1000*(
u32_t
)(*(*)
›tvÆ
);

2149 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£tsock›t(%d, IPPROTO_TCP, TCP_KEEPIDLEË-> %"
U32_F
"\n",

2150 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
));

2152 
TCP_KEEPINTVL
:

2153 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_ötvl
 = 1000*(
u32_t
)(*(*)
›tvÆ
);

2154 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£tsock›t(%d, IPPROTO_TCP, TCP_KEEPINTVLË-> %"
U32_F
"\n",

2155 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_ötvl
));

2157 
TCP_KEEPCNT
:

2158 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_˙t
 = (
u32_t
)(*(*)
›tvÆ
);

2159 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£tsock›t(%d, IPPROTO_TCP, TCP_KEEPCNTË-> %"
U32_F
"\n",

2160 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_˙t
));

2164 
	`LWIP_ASSERT
("unhandled optname", 0);

2169 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


2171 
IPPROTO_UDPLITE
:

2172 
›äame
) {

2173 
UDPLITE_SEND_CSCOV
:

2174 i‡((*(*)
›tvÆ
 != 0) && ((*(*)optval < 8)) || (*(*)optval > 0xffff)) {

2176 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_tx
 = 8;

2178 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_tx
 = (
u16_t
)*(*)
›tvÆ
;

2180 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV) -> %d\n",

2181 
s
, (*(*)
›tvÆ
)) );

2183 
UDPLITE_RECV_CSCOV
:

2184 i‡((*(*)
›tvÆ
 != 0) && ((*(*)optval < 8)) || (*(*)optval > 0xffff)) {

2186 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_rx
 = 8;

2188 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_rx
 = (
u16_t
)*(*)
›tvÆ
;

2190 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV) -> %d\n",

2191 
s
, (*(*)
›tvÆ
)) );

2194 
	`LWIP_ASSERT
("unhandled optname", 0);

2200 
	`LWIP_ASSERT
("unhandledÜevel", 0);

2203 
	`sys_£m_sig«l
(&
sock
->
c⁄n
->
›_com∂ëed
);

2204 
	}
}

2207 
	$lwù_io˘l
(
s
, 
cmd
, *
¨gp
)

2209 
lwù_sock
 *
sock
 = 
	`gë_sockë
(
s
);

2210 
u8_t
 
vÆ
;

2211 #i‡
LWIP_SO_RCVBUF


2212 
u16_t
 
buÊí
 = 0;

2213 
s16_t
 
ªcv_avaû
;

2216 i‡(!
sock
) {

2220 
cmd
) {

2221 #i‡
LWIP_SO_RCVBUF


2222 
FIONREAD
:

2223 i‡(!
¨gp
) {

2224 
	`sock_£t_î∫o
(
sock
, 
EINVAL
);

2228 
	`SYS_ARCH_GET
(
sock
->
c⁄n
->
ªcv_avaû
,Ñecv_avail);

2229 i‡(
ªcv_avaû
 < 0) {

2230 
ªcv_avaû
 = 0;

2232 *((
u16_t
*)
¨gp
Ë(u16_t)
ªcv_avaû
;

2235 i‡(
sock
->
œ°d©a
) {

2236 
pbuf
 *
p
 = (pbu‡*)
sock
->
œ°d©a
;

2237 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë!
NETCONN_TCP
) {

2238 
p
 = ((
√tbuf
 *)p)->p;

2240 
buÊí
 = 
p
->
tŸ_Àn
;

2241 
buÊí
 -
sock
->
œ°off£t
;

2243 *((
u16_t
*)
¨gp
Ë+
buÊí
;

2246 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_io˘l(%d, FIONREAD, %pË%"
U16_F
"\n", 
s
, 
¨gp
, *((
u16_t
*)argp)));

2247 
	`sock_£t_î∫o
(
sock
, 0);

2251 
FIONBIO
:

2252 
vÆ
 = 0;

2253 i‡(
¨gp
 && *(
u32_t
*)argp) {

2254 
vÆ
 = 1;

2256 
	`√tc⁄n_£t_n⁄blockög
(
sock
->
c⁄n
, 
vÆ
);

2257 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_io˘l(%d, FIONBIO, %d)\n", 
s
, 
vÆ
));

2258 
	`sock_£t_î∫o
(
sock
, 0);

2262 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_io˘l(%d, UNIMPL: 0x%lx, %p)\n", 
s
, 
cmd
, 
¨gp
));

2263 
	`sock_£t_î∫o
(
sock
, 
ENOSYS
);

2266 
	}
}

2273 
	$lwù_f˙é
(
s
, 
cmd
, 
vÆ
)

2275 
lwù_sock
 *
sock
 = 
	`gë_sockë
(
s
);

2276 
ªt
 = -1;

2278 i‡(!
sock
 || !sock->
c⁄n
) {

2282 
cmd
) {

2283 
F_GETFL
:

2284 
ªt
 = 
	`√tc⁄n_is_n⁄blockög
(
sock
->
c⁄n
Ë? 
O_NONBLOCK
 : 0;

2286 
F_SETFL
:

2287 i‡((
vÆ
 & ~
O_NONBLOCK
) == 0) {

2289 
	`√tc⁄n_£t_n⁄blockög
(
sock
->
c⁄n
, 
vÆ
 & 
O_NONBLOCK
);

2290 
ªt
 = 0;

2294 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_f˙é(%d, UNIMPL: %d, %d)\n", 
s
, 
cmd
, 
vÆ
));

2297  
ªt
;

2298 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/api/tcpip.c

39 
	~"lwù/›t.h
"

41 #i‡!
NO_SYS


43 
	~"lwù/sys.h
"

44 
	~"lwù/memp.h
"

45 
	~"lwù/mem.h
"

46 
	~"lwù/pbuf.h
"

47 
	~"lwù/t˝ù.h
"

48 
	~"lwù/öô.h
"

49 
	~"√tif/ëh¨p.h
"

50 
	~"lwù/t˝ù_thªad.h
"

51 
	~"lwù/ßm∂e_åa˚poöt.h
"

54 
t˝ù_öô_d⁄e_‚
 
	gt˝ù_öô_d⁄e
;

55 *
	gt˝ù_öô_d⁄e_¨g
;

57 #i‡
LWIP_TCPIP_CORE_LOCKING


59 
sys_muãx_t
 
	glock_t˝ù_c‹e
;

62 
	#TCP_LOCAL_PORT_RANGE_START
 0xc000

	)

64 
	$lwù_ïﬁl_öô
(
t˝ù_thªad
 *
thªad
) {

65 
num_ïﬁl
;

66 
num_ïﬁl
=0;Çum_ïﬁl<
NUM_EPOLL
;Çum_epoll++) {

67 
thªad
->
ïﬁl
[
num_ïﬁl
].thread =Åhread;

68 
thªad
->
ïﬁl
[
num_ïﬁl
].
˝u
 =Åhread->cpu;

70 if(
	`sys_lwù_mbox_√w
(&
thªad
->
ïﬁl
[
num_ïﬁl
].
li°íî_mbox
, 
TCPIP_MBOX_SIZE
Ë!
ERR_OK
) {

71 
	`LWIP_ASSERT
("failedÅo createÉpollÜisten mbox", 0);

74 if(
	`sys_lwù_mbox_√w
(&
thªad
->
ïﬁl
[
num_ïﬁl
].
Ÿhî_mbox
, 
TCPIP_MBOX_SIZE
Ë!
ERR_OK
) {

75 
	`LWIP_ASSERT
("failedÅo createÉpollÜisten mbox", 0);

78 
	}
}

81 
	$t˝ù_thªad_öô
(
t˝ù_thªad
 *
thªad
)

83 
i
;

85 
	`lwù_thªad_aff
(
thªad
->
˝u
);

86 
	`±hªad_yõld
();

87 if(
	`sys_lwù_mbox_√w
(&
thªad
->
mbox
, 
TCPIP_MBOX_SIZE
Ë!
ERR_OK
) {

88 
	`LWIP_ASSERT
("failedÅo createÅcpip_thread mbox", 0);

90 
thªad
->
iss
 = 6510;

91 
thªad
->
t˝ù_d©a
.
t˝_pcb_li°s
[0] = &thªad->t˝ù_d©a.
t˝_li°í_pcbs
.
pcbs
;

92 
thªad
->
t˝ù_d©a
.
t˝_pcb_li°s
[1] = &thªad->t˝ù_d©a.
t˝_bound_pcbs
;

93 
thªad
->
t˝ù_d©a
.
t˝_pcb_li°s
[2] = &thªad->t˝ù_d©a.
t˝_a˘ive_pcbs
;

94 
thªad
->
t˝ù_d©a
.
t˝_pcb_li°s
[3] = &thªad->t˝ù_d©a.
t˝_tw_pcbs
;

95 
thªad
->
t˝ù_d©a
.
p‹t
 = 
TCP_LOCAL_PORT_RANGE_START
;

96 
i
=0; i<
MAX_MEM_TAB
; i++) {

97 
	`±hªad_muãx_öô
(&
thªad
->
mem_muãx
[
i
], 
NULL
);

99 
	`±hªad_muãx_öô
(&
thªad
->
pbuf_muãx
, 
NULL
);

100 
	`±hªad_muãx_öô
(&
thªad
->
evt_muãx
, 
NULL
);

101 
	`±hªad_muãx_öô
(&
thªad
->
sock_Æloc
, 
NULL
);

102 
	`±hªad_muãx_öô
(&
thªad
->
sock_‰ì
, 
NULL
);

103 
	`±hªad_muãx_öô
(&
thªad
->
sock_ac˚±
, 
NULL
);

104 
	`±hªad_muãx_öô
(&
thªad
->
sock_£lsˇn
, 
NULL
);

105 
	`±hªad_muãx_öô
(&
thªad
->
sock_£À˘
, 
NULL
);

106 
	`lwù_öô
();

107 
	`√tif_öô
(
thªad
->
˝u
);

108 
	`ëh¨p_öô_add
(
thªad
->
˝u
);

109 
	`lwù_ïﬁl_öô
(
thªad
);

110 
	}
}

123 
	$t˝ù_thªad_exec
(*
¨g
)

125 
t˝ù_msg
 *
msg
 = 
NULL
;

126 
t˝ù_thªad
 *
thªad
;

127 
uöt32_t
 
i
;

129 
thªad
 = (
t˝ù_thªad
 *Ë
¨g
;

132 
	`t˝ù_thªad_öô
(
thªad
);

134 i‡(
t˝ù_öô_d⁄e
 !
NULL
) {

135 
	`t˝ù_öô_d⁄e
(
t˝ù_öô_d⁄e_¨g
);

137 
thªad
->
öô_d⁄e
 = 1;

139 
	`LWIP_TCPIP_THREAD_ALIVE
();

140 
i
=0; i<
PBUF_READ_DEPTH
; i++) {

142 
	`sys_timeouts_mbox_„tch
(&
thªad
->
mbox
, (**)&
msg
);

143 i‡(!
msg
) {

146 
msg
->
ty≥
) {

147 
TCPIP_MSG_API
:

148 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: API mesßgê%p\n", (*)
msg
));

149 
msg
->msg.
≠imsg
.
	`fun˘i⁄
(&(msg->msg.apimsg.msg));

152 
TCPIP_MSG_INPKT
:

153 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: PACKET %p\n", (*)
msg
));

155 i‡(
msg
->msg.
öp
.
√tif
->
Êags
 & (
NETIF_FLAG_ETHARP
 | 
NETIF_FLAG_ETHERNET
)) {

156 
	`ëhî√t_öput
(
msg
->msg.
öp
.
p
, msg->msg.öp.
√tif
);

158 
	`ù_öput
(
msg
->msg.
öp
.
p
, msg->msg.öp.
√tif
);

160 
	`memp_‰ì
(
MEMP_TCPIP_MSG_INPKT
, 
msg
, 
thªad
);

163 
TCPIP_MSG_CALLBACK
:

164 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: CALLBACK %p\n", (*)
msg
));

165 
msg
->msg.
cb
.
	`fun˘i⁄
(msg->msg.cb.
˘x
);

166 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
, 
thªad
);

169 #i‡
LWIP_TCPIP_TIMEOUT


170 
TCPIP_MSG_TIMEOUT
:

171 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: TIMEOUT %p\n", (*)
msg
));

172 
	`sys_timeout
(
msg
->msg.
tmo
.
m£cs
, msg->msg.tmo.
h
, msg->msg.tmo.
¨g
);

173 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
, 
thªad
);

175 
TCPIP_MSG_UNTIMEOUT
:

176 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: UNTIMEOUT %p\n", (*)
msg
));

177 
	`sys_u¡imeout
(
msg
->msg.
tmo
.
h
, msg->msg.tmo.
¨g
);

178 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
, 
thªad
);

183 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: invÆid mesßge: %d\n", 
msg
->
ty≥
));

187 
msg
 = 
NULL
;

189 
thªad
->
√tif
.
	`lököput
(&thread->netif);

191 
	}
}

201 
îr_t


202 
	$t˝ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

204 
t˝ù_msg
 *
msg
;

205 
t˝ù_thªad
 *
thªad
 = 
öp
->
¥Ÿ_thªad
;

207 i‡(
öp
->
Êags
 & (
NETIF_FLAG_ETHARP
 | 
NETIF_FLAG_ETHERNET
)) {

208 
	`ëhî√t_öput
(
p
, 
öp
);

210  
ERR_OK
;

211 
	}
}

224 
îr_t


225 
	$t˝ù_ˇŒback_wôh_block
(
t˝ù_ˇŒback_‚
 
fun˘i⁄
, *
˘x
, 
u8_t
 
block
)

227 
t˝ù_msg
 *
msg
;

228 
˝u
 = 
	`sched_gë˝u
(Ë% 
CPU_MOD
;

230 i‡(
	`sys_mbox_vÆid
(&
lwù_t˝ù_thªad
[
˝u
]->
mbox
)) {

231 
msg
 = (
t˝ù_msg
 *)
	`memp_mÆloc
(
MEMP_TCPIP_MSG_API
, 
lwù_t˝ù_thªad
[
˝u
]);

232 i‡(
msg
 =
NULL
) {

233  
ERR_MEM
;

236 
msg
->
ty≥
 = 
TCPIP_MSG_CALLBACK
;

237 
msg
->msg.
cb
.
fun˘i⁄
 = function;

238 
msg
->msg.
cb
.
˘x
 = ctx;

239 i‡(
block
) {

240 
	`sys_lwù_mbox_po°
(&
lwù_t˝ù_thªad
[
˝u
]->
mbox
, 
msg
);

242 i‡(
	`sys_mbox_åypo°
(&
lwù_t˝ù_thªad
[
˝u
]->
mbox
, 
msg
Ë!
ERR_OK
) {

243 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
, 
lwù_t˝ù_thªad
[
˝u
]);

244  
ERR_MEM
;

247  
ERR_OK
;

249  
ERR_VAL
;

250 
	}
}

252 #i‡
LWIP_TCPIP_TIMEOUT


261 
îr_t


262 
	$t˝ù_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
)

264 
t˝ù_msg
 *
msg
;

265 
˝u
 = 
	`sched_gë˝u
();

267 i‡(
	`sys_mbox_vÆid
(&
lwù_t˝ù_thªad
[
˝u
]->
mbox
)) {

268 
msg
 = (
t˝ù_msg
 *)
	`memp_mÆloc
(
MEMP_TCPIP_MSG_API
, 
lwù_t˝ù_thªad
[
˝u
]);

269 i‡(
msg
 =
NULL
) {

270  
ERR_MEM
;

273 
msg
->
ty≥
 = 
TCPIP_MSG_TIMEOUT
;

274 
msg
->msg.
tmo
.
m£cs
 = msecs;

275 
msg
->msg.
tmo
.
h
 = h;

276 
msg
->msg.
tmo
.
¨g
 =árg;

277 
	`sys_lwù_mbox_po°
(&
lwù_t˝ù_thªad
[
˝u
]->
mbox
, 
msg
);

278  
ERR_OK
;

280  
ERR_VAL
;

281 
	}
}

291 
îr_t


292 
	$t˝ù_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
)

294 
t˝ù_msg
 *
msg
;

295 
˝u
 = 
	`sched_gë˝u
();

297 i‡(
	`sys_mbox_vÆid
(&
lwù_t˝ù_thªad
[
˝u
]->
mbox
)) {

298 
msg
 = (
t˝ù_msg
 *)
	`memp_mÆloc
(
MEMP_TCPIP_MSG_API
, 
lwù_t˝ù_thªad
[
˝u
]);

299 i‡(
msg
 =
NULL
) {

300  
ERR_MEM
;

303 
msg
->
ty≥
 = 
TCPIP_MSG_UNTIMEOUT
;

304 
msg
->msg.
tmo
.
h
 = h;

305 
msg
->msg.
tmo
.
¨g
 =árg;

306 
	`sys_lwù_mbox_po°
(&
lwù_t˝ù_thªad
[
˝u
]->
mbox
, 
msg
);

307  
ERR_OK
;

309  
ERR_VAL
;

310 
	}
}

313 #i‡
LWIP_NETCONN


322 
îr_t


323 
	$t˝ù_≠imsg
(
≠i_msg
 *
≠imsg
)

325 
x
;

326 
t˝ù_msg
 *
msg
;

327 
˝u
 = 
	`sched_gë˝u
(Ë% 
CPU_MOD
;

328 #ifde‡
LWIP_DEBUG


330 
≠imsg
->
msg
.
îr
 = 
ERR_VAL
;

333 i‡(
	`sys_mbox_vÆid
(&
lwù_t˝ù_thªad
[
˝u
]->
mbox
)) {

334 
msg
 = (
t˝ù_msg
 *)
	`memp_mÆloc_t˝ù_msg
(
lwù_t˝ù_thªad
[
˝u
]);

335 i‡(
msg
 !
NULL
) {

336 
msg
->
ty≥
 = 
TCPIP_MSG_API
;

337 
msg
->msg.
≠imsg
 = *apimsg;

338 
	`sys_lwù_mbox_po°
(&
lwù_t˝ù_thªad
[
˝u
]->
mbox
, 
msg
);

339 
	`sys_¨ch_£m_waô
(&
≠imsg
->
msg
.
c⁄n
->
›_com∂ëed
, 0);

340  
ERR_OK
;

342 
x
++;

343 i‡(
x
 > 2000000) {

344 
x
 = 0;

348  
ERR_VAL
;

349 
	}
}

359 
îr_t


360 
	$t˝ù_≠imsg_no_waô
(
≠i_msg
 *
≠imsg
)

362 
x
;

363 
t˝ù_msg
 *
msg
;

364 
˝u
 = 
	`sched_gë˝u
(Ë% 
CPU_MOD
;

365 #ifde‡
LWIP_DEBUG


367 
≠imsg
->
msg
.
îr
 = 
ERR_VAL
;

370 
≠imsg
->
msg
.
îr
 = 
ERR_OK
;

371 i‡(
	`sys_mbox_vÆid
(&
lwù_t˝ù_thªad
[
˝u
]->
mbox
)) {

372 
msg
 = (
t˝ù_msg
 *)
	`memp_mÆloc_t˝ù_msg
(
lwù_t˝ù_thªad
[
˝u
]);

373 i‡(
msg
 !
NULL
) {

374 
msg
->
ty≥
 = 
TCPIP_MSG_API
;

375 
msg
->msg.
≠imsg
 = *apimsg;

376 
	`sys_lwù_mbox_po°
(&
lwù_t˝ù_thªad
[
˝u
]->
mbox
, 
msg
);

377  
ERR_OK
;

379 
x
++;

380 i‡(
x
 > 2000000) {

381 
x
 = 0;

385  
ERR_VAL
;

386 
	}
}

388 #i‡
LWIP_TCPIP_CORE_LOCKING


397 
îr_t


398 
	$t˝ù_≠imsg_lock
(
≠i_msg
 *
≠imsg
)

400 #ifde‡
LWIP_DEBUG


402 
≠imsg
->
msg
.
îr
 = 
ERR_VAL
;

405 
	`LOCK_TCPIP_CORE
();

406 
≠imsg
->
	`fun˘i⁄
(&◊pimsg->
msg
));

407 
	`UNLOCK_TCPIP_CORE
();

408  
≠imsg
->
msg
.
îr
;

410 
	}
}

414 #i‡
LWIP_NETIF_API


415 #i‡!
LWIP_TCPIP_CORE_LOCKING


423 
îr_t


424 
	$t˝ù_√tiÁpi
(
√tiÁpi_msg
* 
√tiÁpimsg
)

426 
t˝ù_msg
 
msg
;

428 i‡(
	`sys_mbox_vÆid
(&
mbox
)) {

429 
îr_t
 
îr
 = 
	`sys_£m_√w
(&
√tiÁpimsg
->
msg
.
£m
, 0);

430 i‡(
îr
 !
ERR_OK
) {

431 
√tiÁpimsg
->
msg
.
îr
 =Érr;

432  
îr
;

435 
msg
.
ty≥
 = 
TCPIP_MSG_NETIFAPI
;

436 
msg
.msg.
√tiÁpimsg
 =Çetifapimsg;

437 
	`sys_mbox_po°
(&
mbox
, &
msg
);

438 
	`sys_£m_waô
(&
√tiÁpimsg
->
msg
.
£m
);

439 
	`sys_£m_‰ì
(&
√tiÁpimsg
->
msg
.
£m
);

440  
√tiÁpimsg
->
msg
.
îr
;

442  
ERR_VAL
;

443 
	}
}

453 
îr_t


454 
	$t˝ù_√tiÁpi_lock
(
√tiÁpi_msg
* 
√tiÁpimsg
)

456 
	`LOCK_TCPIP_CORE
();

457 
√tiÁpimsg
->
	`fun˘i⁄
(&“ëiÁpimsg->
msg
));

458 
	`UNLOCK_TCPIP_CORE
();

459  
√tiÁpimsg
->
msg
.
îr
;

460 
	}
}

473 
	$t˝ù_öô
(
t˝ù_öô_d⁄e_‚
 
öôfunc
, *
¨g
)

475 
u16_t
 
i
;

477 
t˝ù_öô_d⁄e
 = 
öôfunc
;

478 
t˝ù_öô_d⁄e_¨g
 = 
¨g
;

480 
i
=0; i<
NUM_CPU
; i++) {

481 
lwù_t˝ù_thªad
[
i
] = 
	`mÆloc
((
t˝ù_thªad
));

482 
	`mem£t
(
lwù_t˝ù_thªad
[
i
], 0 , (
t˝ù_thªad
));

483 
lwù_t˝ù_thªad
[
i
]->
˝u
 = i;

485 
	`sys_thªad_√w
(
TCPIP_THREAD_NAME
, 
t˝ù_thªad_exec
, 
lwù_t˝ù_thªad
[
i
],

486 
TCPIP_THREAD_STACKSIZE
, 
TCPIP_THREAD_PRIO
);

488 i‡(!
lwù_t˝ù_thªad
[
i
]->
öô_d⁄e
) {

489 
	`¶ìp
(1);

492 
	}
}

501 
	$pbuf_‰ì_öt
(*
p
)

503 
pbuf
 *
q
 = (pbu‡*)
p
;

504 
	`pbuf_‰ì
(
q
, 
NULL
);

505 
	}
}

513 
îr_t


514 
	$pbuf_‰ì_ˇŒback
(
pbuf
 *
p
)

516  
	`t˝ù_ˇŒback_wôh_block
(
pbuf_‰ì_öt
, 
p
, 0);

517 
	}
}

526 
îr_t


527 
	$mem_‰ì_ˇŒback
(*
m
)

529  
	`t˝ù_ˇŒback_wôh_block
(
mem_‰ì
, 
m
, 0);

530 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/def.c

39 
	~"lwù/›t.h
"

40 
	~"lwù/def.h
"

55 #i‡(
LWIP_PLATFORM_BYTESWAP
 =0Ë&& (
BYTE_ORDER
 =
LITTLE_ENDIAN
)

63 
u16_t


64 
	$lwù_ht⁄s
(
u16_t
 
n
)

66  ((
n
 & 0xff) << 8) | ((n & 0xff00) >> 8);

67 
	}
}

75 
u16_t


76 
	$lwù_¡ohs
(
u16_t
 
n
)

78  
	`lwù_ht⁄s
(
n
);

79 
	}
}

87 
u32_t


88 
	$lwù_ht⁄l
(
u32_t
 
n
)

90  ((
n
 & 0xff) << 24) |

91 ((
n
 & 0xff00) << 8) |

92 ((
n
 & 0xff0000UL) >> 8) |

93 ((
n
 & 0xff000000UL) >> 24);

94 
	}
}

102 
u32_t


103 
	$lwù_¡ohl
(
u32_t
 
n
)

105  
	`lwù_ht⁄l
(
n
);

106 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/init.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/öô.h
"

42 
	~"lwù/°©s.h
"

43 
	~"lwù/sys.h
"

44 
	~"lwù/mem.h
"

45 
	~"lwù/memp.h
"

46 
	~"lwù/pbuf.h
"

47 
	~"lwù/√tif.h
"

48 
	~"lwù/sockës.h
"

49 
	~"lwù/ù.h
"

50 
	~"lwù/t˝_im∂.h
"

51 
	~"lwù/¢mp_msg.h
"

52 
	~"lwù/autoù.h
"

53 
	~"lwù/igmp.h
"

54 
	~"lwù/timîs.h
"

55 
	~"√tif/ëh¨p.h
"

60 #i‚de‡
BYTE_ORDER


63 #i‡(!
IP_SOF_BROADCAST
 && 
IP_SOF_BROADCAST_RECV
)

66 #i‡(!
LWIP_ARP
 && 
ARP_QUEUEING
)

69 #i‡(!
LWIP_UDP
 && 
LWIP_UDPLITE
)

72 #i‡(!
LWIP_UDP
 && 
LWIP_SNMP
)

75 #i‡(!
LWIP_UDP
 && 
LWIP_DHCP
)

78 #i‡(!
LWIP_UDP
 && 
LWIP_IGMP
)

81 #i‡(!
LWIP_UDP
 && 
LWIP_SNMP
)

84 #i‡(!
LWIP_UDP
 && 
LWIP_DNS
)

87 #i‡(
LWIP_ARP
 && 
ARP_QUEUEING
 && (
MEMP_NUM_ARP_QUEUE
<=0))

90 #i‡(
LWIP_RAW
 && (
MEMP_NUM_RAW_PCB
<=0))

93 #i‡(
LWIP_UDP
 && (
MEMP_NUM_UDP_PCB
<=0))

96 #i‡(
LWIP_TCP
 && (
MEMP_NUM_TCP_PCB
<=0))

99 #i‡(
LWIP_TCP
 && (
TCP_WND
 > 0xffff))

102 #i‡(
LWIP_TCP
 && (
TCP_SND_QUEUELEN
 > 0xffff))

105 #i‡(
LWIP_TCP
 && (
TCP_SND_QUEUELEN
 < 2))

108 #i‡(
LWIP_TCP
 && ((
TCP_MAXRTX
 > 12Ë|| (
TCP_SYNMAXRTX
 > 12)))

111 #i‡(
LWIP_TCP
 && 
TCP_LISTEN_BACKLOG
 && (
TCP_DEFAULT_LISTEN_BACKLOG
 < 0) || (TCP_DEFAULT_LISTEN_BACKLOG > 0xff))

114 #i‡(
LWIP_IGMP
 && (
MEMP_NUM_IGMP_GROUP
<=1))

117 #i‡(
LWIP_NETIF_API
 && (
NO_SYS
==1))

120 #i‡((
LWIP_SOCKET
 || 
LWIP_NETCONN
Ë&& (
NO_SYS
==1))

123 #i‡((
LWIP_NETCONN
 || 
LWIP_SOCKET
Ë&& (
MEMP_NUM_TCPIP_MSG_API
<=0))

126 #i‡(!
LWIP_NETCONN
 && 
LWIP_SOCKET
)

129 #i‡(((!
LWIP_DHCP
Ë|| (!
LWIP_AUTOIP
)Ë&& 
LWIP_DHCP_AUTOIP_COOP
)

132 #i‡(((!
LWIP_DHCP
Ë|| (!
LWIP_ARP
)Ë&& 
DHCP_DOES_ARP_CHECK
)

135 #i‡(!
LWIP_ARP
 && 
LWIP_AUTOIP
)

138 #i‡(
LWIP_SNMP
 && (
SNMP_CONCURRENT_REQUESTS
<=0))

141 #i‡(
LWIP_SNMP
 && (
SNMP_TRAP_DESTINATIONS
<=0))

144 #i‡(
LWIP_TCP
 && ((
LWIP_EVENT_API
 && 
LWIP_CALLBACK_API
) || (!LWIP_EVENT_API && !LWIP_CALLBACK_API)))

148 #i‡
LWIP_TIMERS
 && (
MEMP_NUM_SYS_TIMEOUT
 < (
LWIP_TCP
 + 
IP_REASSEMBLY
 + 
LWIP_ARP
 + (2*
LWIP_DHCP
Ë+ 
LWIP_AUTOIP
 + 
LWIP_IGMP
 + 
LWIP_DNS
 + 
PPP_SUPPORT
))

151 #i‡(
IP_REASSEMBLY
 && (
MEMP_NUM_REASSDATA
 > 
IP_REASS_MAX_PBUFS
))

154 #i‡(
MEM_LIBC_MALLOC
 && 
MEM_USE_POOLS
)

157 #i‡(
MEM_USE_POOLS
 && !
MEMP_USE_CUSTOM_POOLS
)

160 #i‡(
PBUF_POOL_BUFSIZE
 <
MEM_ALIGNMENT
)

163 #i‡(
TCP_QUEUE_OOSEQ
 && !
LWIP_TCP
)

166 #i‡(
DNS_LOCAL_HOSTLIST
 && !
DNS_LOCAL_HOSTLIST_IS_DYNAMIC
 && !(
deföed
(
DNS_LOCAL_HOSTLIST_INIT
)))

169 #i‡
PPP_SUPPORT
 && !
PPPOS_SUPPORT
 & !
PPPOE_SUPPORT


172 #i‡!
LWIP_ETHERNET
 && (
LWIP_ARP
 || 
PPPOE_SUPPORT
)

175 #i‡
LWIP_IGMP
 && !
deföed
(
LWIP_RAND
)

178 #i‡
LWIP_TCPIP_CORE_LOCKING_INPUT
 && !
LWIP_TCPIP_CORE_LOCKING


181 #i‡
LWIP_TCP
 && 
LWIP_NETIF_TX_SINGLE_PBUF
 && !
TCP_OVERSIZE


184 #i‡
IP_FRAG
 && 
IP_FRAG_USES_STATIC_BUF
 && 
LWIP_NETIF_TX_SINGLE_PBUF


191 #ifde‡
MEMP_NUM_TCPIP_MSG


194 #ifde‡
MEMP_NUM_API_MSG


197 #ifde‡
TCP_REXMIT_DEBUG


200 #ifde‡
RAW_STATS


203 #ifde‡
ETHARP_QUEUE_FIRST


206 #ifde‡
ETHARP_ALWAYS_INSERT


210 #ifde‡
LWIP_DEBUG


212 
	$lwù_ßnôy_check
()

215 #i‡
LWIP_NETCONN


216 i‡(
MEMP_NUM_NETCONN
 > (
MEMP_NUM_TCP_PCB
+
MEMP_NUM_TCP_PCB_LISTEN
+
MEMP_NUM_UDP_PCB
+
MEMP_NUM_RAW_PCB
))

217 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: MEMP_NUM_NETCONN should beÜessÅhanÅhe sum of MEMP_NUM_{TCP,RAW,UDP}_PCB+MEMP_NUM_TCP_PCB_LISTEN\n"));

219 #i‡
LWIP_TCP


220 i‡(
MEMP_NUM_TCP_SEG
 < 
TCP_SND_QUEUELEN
)

221 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: MEMP_NUM_TCP_SEG should beátÜeastás bigás TCP_SND_QUEUELEN\n"));

222 i‡(
TCP_SND_BUF
 < 2 * 
TCP_MSS
)

223 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_SND_BUF must beátÜeastás muchás (2 * TCP_MSS) forÅhingsÅo work smoothly\n"));

224 i‡(
TCP_SND_QUEUELEN
 < (2 * (
TCP_SND_BUF
/
TCP_MSS
)))

225 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_SND_QUEUELEN must beátÜeastás muchás (2 * TCP_SND_BUF/TCP_MSS) forÅhingsÅo work\n"));

226 i‡(
TCP_SNDLOWAT
 >
TCP_SND_BUF
)

227 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_SNDLOWAT must beÜessÅhan TCP_SND_BUF.\n"));

228 i‡(
TCP_SNDQUEUELOWAT
 >
TCP_SND_QUEUELEN
)

229 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_SNDQUEUELOWAT must beÜessÅhan TCP_SND_QUEUELEN.\n"));

230 i‡(
TCP_WND
 > (
PBUF_POOL_SIZE
*
PBUF_POOL_BUFSIZE
))

231 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_WND isÜargerÅhan spaceÖrovided by PBUF_POOL_SIZE*PBUF_POOL_BUFSIZE\n"));

232 i‡(
TCP_WND
 < 
TCP_MSS
)

233 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_WND is smallerÅhan MSS\n"));

235 #i‡
LWIP_SOCKET


237 i‡(
SO_ACCEPTCONN
 !
SOF_ACCEPTCONN
)

238 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: SO_ACCEPTCONN != SOF_ACCEPTCONN\n"));

239 i‡(
SO_REUSEADDR
 !
SOF_REUSEADDR
)

240 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: SO_REUSEADDR != SOF_REUSEADDR\n"));

241 i‡(
SO_KEEPALIVE
 !
SOF_KEEPALIVE
)

242 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: SO_KEEPALIVE != SOF_KEEPALIVE\n"));

243 i‡(
SO_BROADCAST
 !
SOF_BROADCAST
)

244 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: SO_BROADCAST != SOF_BROADCAST\n"));

245 i‡(
SO_LINGER
 !
SOF_LINGER
)

246 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: SO_LINGER != SOF_LINGER\n"));

248 
	}
}

250 
	#lwù_ßnôy_check
()

	)

257 
	$lwù_öô
()

260 
	`lwù_ßnôy_check
();

261 
	`memp_öô
();

262 
	`pbuf_öô
();

264 
	`lwù_sockë_öô
();

265 
	`ù_öô
();

267 
	`t˝_öô
();

268 
	`sys_timeouts_öô
();

269 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/ipv4/autoip.c

65 
	~"lwù/›t.h
"

67 #i‡
LWIP_AUTOIP


69 
	~"lwù/mem.h
"

70 
	~"lwù/udp.h
"

71 
	~"lwù/ù_addr.h
"

72 
	~"lwù/√tif.h
"

73 
	~"lwù/autoù.h
"

74 
	~"√tif/ëh¨p.h
"

76 
	~<°dlib.h
>

77 
	~<°rög.h
>

80 
	#AUTOIP_NET
 0xA9FE0000

	)

82 
	#AUTOIP_RANGE_START
 (
AUTOIP_NET
 | 0x0100)

	)

84 
	#AUTOIP_RANGE_END
 (
AUTOIP_NET
 | 0xFEFF)

	)

89 #i‚de‡
LWIP_AUTOIP_RAND


90 
	#LWIP_AUTOIP_RAND
(
√tif
Ë–(((
u32_t
)(“ëif->
hwaddr
[5]) & 0xff) << 24) | \

91 ((
u32_t
)((
√tif
->
hwaddr
[3]) & 0xff) << 16) | \

92 ((
u32_t
)((
√tif
->
hwaddr
[2]) & 0xff) << 8) | \

93 ((
u32_t
)((
√tif
->
hwaddr
[4]) & 0xff))) + \

94 (
√tif
->
autoù
?√tif->autoù->
åõd_Œùaddr
:0))

	)

101 #i‚de‡
LWIP_AUTOIP_CREATE_SEED_ADDR


102 
	#LWIP_AUTOIP_CREATE_SEED_ADDR
(
√tif
) \

103 
	`ht⁄l
(
AUTOIP_RANGE_START
 + ((
u32_t
)(((
u8_t
)(
√tif
->
hwaddr
[4])) | \

104 ((
u32_t
)((
u8_t
)(
√tif
->
hwaddr
[5]))Ë<< 8)))

	)

108 
autoù_h™dÀ_¨p_c⁄Êi˘
(
√tif
 *netif);

111 
autoù_¸óã_addr
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
);

114 
îr_t
 
autoù_¨p_¥obe
(
√tif
 *netif);

117 
îr_t
 
autoù_¨p_™noun˚
(
√tif
 *netif);

120 
îr_t
 
autoù_böd
(
√tif
 *netif);

123 
autoù_°¨t_¥obög
(
√tif
 *netif);

129 
	$autoù_öô
()

131 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
, ("autoip_init()\n"));

132 
	}
}

141 
	$autoù_£t_°ru˘
(
√tif
 *√tif, 
autoù
 *autoip)

143 
	`LWIP_ASSERT
("√ti‡!NULL", 
√tif
 !
NULL
);

144 
	`LWIP_ASSERT
("autoù !NULL", 
autoù
 !
NULL
);

145 
	`LWIP_ASSERT
("√ti‡Æªady ha†®°ru˘áutoù së", 
√tif
->
autoù
 =
NULL
);

148 
	`mem£t
(
autoù
, 0, (autoip));

150 
√tif
->
autoù
 =áutoip;

151 
	}
}

158 
	$autoù_ª°¨t
(
√tif
 *netif)

160 
√tif
->
autoù
->
åõd_Œùaddr
++;

161 
	`autoù_°¨t
(
√tif
);

162 
	}
}

168 
	$autoù_h™dÀ_¨p_c⁄Êi˘
(
√tif
 *netif)

171 
de„nd
 = 1;

173 if(
de„nd
) {

174 if(
√tif
->
autoù
->
œ°c⁄Êi˘
 > 0) {

178 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

182 
	`autoù_ª°¨t
(
√tif
);

184 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

186 
	`autoù_¨p_™noun˚
(
√tif
);

187 
√tif
->
autoù
->
œ°c⁄Êi˘
 = 
DEFEND_INTERVAL
 * 
AUTOIP_TICKS_PER_SECOND
;

190 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

193 
	`autoù_ª°¨t
(
√tif
);

195 
	}
}

204 
	$autoù_¸óã_addr
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
)

210 
u32_t
 
addr
 = 
	`¡ohl
(
	`LWIP_AUTOIP_CREATE_SEED_ADDR
(
√tif
));

211 
addr
 +
√tif
->
autoù
->
åõd_Œùaddr
;

212 
addr
 = 
AUTOIP_NET
 | (addr & 0xffff);

215 i‡(
addr
 < 
AUTOIP_RANGE_START
) {

216 
addr
 +
AUTOIP_RANGE_END
 - 
AUTOIP_RANGE_START
 + 1;

218 i‡(
addr
 > 
AUTOIP_RANGE_END
) {

219 
addr
 -
AUTOIP_RANGE_END
 - 
AUTOIP_RANGE_START
 + 1;

221 
	`LWIP_ASSERT
("AUTOIPáddªs†nŸ i¿ønge", (
addr
 >
AUTOIP_RANGE_START
) &&

222 (
addr
 <
AUTOIP_RANGE_END
));

223 
	`ù4_addr_£t_u32
(
ùaddr
, 
	`ht⁄l
(
addr
));

225 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

226 ("autoù_¸óã_addr():Årõd_Œùaddr=%"
U16_F
", %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",

227 (
u16_t
)(
√tif
->
autoù
->
åõd_Œùaddr
), 
	`ù4_addr1_16
(
ùaddr
), 
	`ù4_addr2_16
(ipaddr),

228 
	`ù4_addr3_16
(
ùaddr
), 
	`ù4_addr4_16
(ipaddr)));

229 
	}
}

236 
îr_t


237 
	$autoù_¨p_¥obe
(
√tif
 *netif)

239  
	`ëh¨p_øw
(
√tif
, (
ëh_addr
 *Íëif->
hwaddr
, &
ëhbrﬂdˇ°
,

240 (
ëh_addr
 *)
√tif
->
hwaddr
, 
IP_ADDR_ANY
, &
ëhzîo
,

241 &
√tif
->
autoù
->
Œùaddr
, 
ARP_REQUEST
);

242 
	}
}

249 
îr_t


250 
	$autoù_¨p_™noun˚
(
√tif
 *netif)

252  
	`ëh¨p_øw
(
√tif
, (
ëh_addr
 *Íëif->
hwaddr
, &
ëhbrﬂdˇ°
,

253 (
ëh_addr
 *)
√tif
->
hwaddr
, &√tif->
autoù
->
Œùaddr
, &
ëhzîo
,

254 &
√tif
->
autoù
->
Œùaddr
, 
ARP_REQUEST
);

255 
	}
}

262 
îr_t


263 
	$autoù_böd
(
√tif
 *netif)

265 
autoù
 *autoù = 
√tif
->autoip;

266 
ù_addr_t
 
¢_mask
, 
gw_addr
;

268 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

269 ("autoù_böd“ëif=%pË%c%c%"
U16_F
" %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",

270 (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
,

271 
	`ù4_addr1_16
(&
autoù
->
Œùaddr
), 
	`ù4_addr2_16
(&autoip->llipaddr),

272 
	`ù4_addr3_16
(&
autoù
->
Œùaddr
), 
	`ù4_addr4_16
(&autoip->llipaddr)));

274 
	`IP4_ADDR
(&
¢_mask
, 255, 255, 0, 0);

275 
	`IP4_ADDR
(&
gw_addr
, 0, 0, 0, 0);

277 
	`√tif_£t_ùaddr
(
√tif
, &
autoù
->
Œùaddr
);

278 
	`√tif_£t_√tmask
(
√tif
, &
¢_mask
);

279 
	`√tif_£t_gw
(
√tif
, &
gw_addr
);

282 
	`√tif_£t_up
(
√tif
);

284  
ERR_OK
;

285 
	}
}

292 
îr_t


293 
	$autoù_°¨t
(
√tif
 *netif)

295 
autoù
 *autoù = 
√tif
->autoip;

296 
îr_t
 
ªsu…
 = 
ERR_OK
;

298 if(
	`√tif_is_up
(
√tif
)) {

299 
	`√tif_£t_down
(
√tif
);

305 
	`ù_addr_£t_zîo
(&
√tif
->
ù_addr
);

306 
	`ù_addr_£t_zîo
(&
√tif
->
√tmask
);

307 
	`ù_addr_£t_zîo
(&
√tif
->
gw
);

309 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

310 ("autoù_°¨t“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],

311 
√tif
->
«me
[1], (
u16_t
Íëif->
num
));

312 if(
autoù
 =
NULL
) {

314 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

316 
autoù
 = (autoù *)
	`mem_mÆloc
((autoip));

317 if(
autoù
 =
NULL
) {

318 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

320  
ERR_MEM
;

322 
	`mem£t
(
autoù
, 0, (autoip));

324 
√tif
->
autoù
 =áutoip;

325 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
, ("autoip_start():állocatedáutoip"));

327 
autoù
->
°©e
 = 
AUTOIP_STATE_OFF
;

328 
autoù
->
âw
 = 0;

329 
autoù
->
£¡_num
 = 0;

330 
	`ù_addr_£t_zîo
(&
autoù
->
Œùaddr
);

331 
autoù
->
œ°c⁄Êi˘
 = 0;

334 
	`autoù_¸óã_addr
(
√tif
, &(
autoù
->
Œùaddr
));

335 
	`autoù_°¨t_¥obög
(
√tif
);

337  
ªsu…
;

338 
	}
}

341 
	$autoù_°¨t_¥obög
(
√tif
 *netif)

343 
autoù
 *autoù = 
√tif
->autoip;

345 
autoù
->
°©e
 = 
AUTOIP_STATE_PROBING
;

346 
autoù
->
£¡_num
 = 0;

347 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

348 ("autoù_°¨t_¥obög(): ch™gög sèãÅÿPROBING: %"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

349 
	`ù4_addr1_16
(&
√tif
->
autoù
->
Œùaddr
), 
	`ù4_addr2_16
(&netif->autoip->llipaddr),

350 
	`ù4_addr3_16
(&
√tif
->
autoù
->
Œùaddr
), 
	`ù4_addr4_16
(&netif->autoip->llipaddr)));

356 
autoù
->
âw
 = (
u16_t
)(
	`LWIP_AUTOIP_RAND
(
√tif
Ë% (
PROBE_WAIT
 * 
AUTOIP_TICKS_PER_SECOND
));

363 if(
autoù
->
åõd_Œùaddr
 > 
MAX_CONFLICTS
) {

364 
autoù
->
âw
 = 
RATE_LIMIT_INTERVAL
 * 
AUTOIP_TICKS_PER_SECOND
;

366 
	}
}

375 
	$autoù_√tw‹k_ch™ged
(
√tif
 *netif)

377 i‡(
√tif
->
autoù
 &&Çëif->autoù->
°©e
 !
AUTOIP_STATE_OFF
) {

378 
	`√tif_£t_down
(
√tif
);

379 
	`autoù_°¨t_¥obög
(
√tif
);

381 
	}
}

388 
îr_t


389 
	$autoù_°›
(
√tif
 *netif)

391 
√tif
->
autoù
->
°©e
 = 
AUTOIP_STATE_OFF
;

392 
	`√tif_£t_down
(
√tif
);

393  
ERR_OK
;

394 
	}
}

400 
	$autoù_tmr
()

402 
√tif
 *√ti‡
lwù_t˝ù_thªad
[
	`sched_gë˝u
()]->
√tif_li°
;

404 
√tif
 !
NULL
) {

406 i‡(
√tif
->
autoù
 !
NULL
) {

407 if(
√tif
->
autoù
->
œ°c⁄Êi˘
 > 0) {

408 
√tif
->
autoù
->
œ°c⁄Êi˘
--;

411 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

412 ("autoù_tmr(ËAutoIP-Sèã: %"
U16_F
",Åtw=%"U16_F"\n",

413 (
u16_t
)(
√tif
->
autoù
->
°©e
),Çëif->autoù->
âw
));

415 
√tif
->
autoù
->
°©e
) {

416 
AUTOIP_STATE_PROBING
:

417 if(
√tif
->
autoù
->
âw
 > 0) {

418 
√tif
->
autoù
->
âw
--;

420 if(
√tif
->
autoù
->
£¡_num
 >
PROBE_NUM
) {

421 
√tif
->
autoù
->
°©e
 = 
AUTOIP_STATE_ANNOUNCING
;

422 
√tif
->
autoù
->
£¡_num
 = 0;

423 
√tif
->
autoù
->
âw
 = 
ANNOUNCE_WAIT
 * 
AUTOIP_TICKS_PER_SECOND
;

424 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

425 ("autoù_tmr(): ch™gög sèãÅÿANNOUNCING: %"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

426 
	`ù4_addr1_16
(&
√tif
->
autoù
->
Œùaddr
), 
	`ù4_addr2_16
(&netif->autoip->llipaddr),

427 
	`ù4_addr3_16
(&
√tif
->
autoù
->
Œùaddr
), 
	`ù4_addr4_16
(&netif->autoip->llipaddr)));

429 
	`autoù_¨p_¥obe
(
√tif
);

430 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

432 
√tif
->
autoù
->
£¡_num
++;

434 
√tif
->
autoù
->
âw
 = (
u16_t
)((
	`LWIP_AUTOIP_RAND
(netif) %

435 ((
PROBE_MAX
 - 
PROBE_MIN
Ë* 
AUTOIP_TICKS_PER_SECOND
) ) +

436 
PROBE_MIN
 * 
AUTOIP_TICKS_PER_SECOND
);

441 
AUTOIP_STATE_ANNOUNCING
:

442 if(
√tif
->
autoù
->
âw
 > 0) {

443 
√tif
->
autoù
->
âw
--;

445 if(
√tif
->
autoù
->
£¡_num
 == 0) {

452 
	`autoù_böd
(
√tif
);

454 
	`autoù_¨p_™noun˚
(
√tif
);

455 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

458 
√tif
->
autoù
->
âw
 = 
ANNOUNCE_INTERVAL
 * 
AUTOIP_TICKS_PER_SECOND
;

459 
√tif
->
autoù
->
£¡_num
++;

461 if(
√tif
->
autoù
->
£¡_num
 >
ANNOUNCE_NUM
) {

462 
√tif
->
autoù
->
°©e
 = 
AUTOIP_STATE_BOUND
;

463 
√tif
->
autoù
->
£¡_num
 = 0;

464 
√tif
->
autoù
->
âw
 = 0;

465 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

466 ("autoù_tmr(): ch™gög sèãÅÿBOUND: %"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

467 
	`ù4_addr1_16
(&
√tif
->
autoù
->
Œùaddr
), 
	`ù4_addr2_16
(&netif->autoip->llipaddr),

468 
	`ù4_addr3_16
(&
√tif
->
autoù
->
Œùaddr
), 
	`ù4_addr4_16
(&netif->autoip->llipaddr)));

475 
√tif
 =Çëif->
√xt
;

477 
	}
}

486 
	$autoù_¨p_ª∂y
(
√tif
 *√tif, 
ëh¨p_hdr
 *
hdr
)

488 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
, ("autoip_arp_reply()\n"));

489 i‡((
√tif
->
autoù
 !
NULL
Ë&& (√tif->autoù->
°©e
 !
AUTOIP_STATE_OFF
)) {

495 
ù_addr_t
 
sùaddr
, 
dùaddr
;

496 
ëh_addr
 
√tiÁddr
;

497 
	`ETHADDR16_COPY
(
√tiÁddr
.
addr
, 
√tif
->
hwaddr
);

502 
	`IPADDR2_COPY
(&
sùaddr
, &
hdr
->sipaddr);

503 
	`IPADDR2_COPY
(&
dùaddr
, &
hdr
->dipaddr);

505 i‡((
√tif
->
autoù
->
°©e
 =
AUTOIP_STATE_PROBING
) ||

506 ((
√tif
->
autoù
->
°©e
 =
AUTOIP_STATE_ANNOUNCING
) &&

507 (
√tif
->
autoù
->
£¡_num
 == 0))) {

514 i‡((
	`ù_addr_cmp
(&
sùaddr
, &
√tif
->
autoù
->
Œùaddr
)) ||

515 (
	`ù_addr_cmp
(&
dùaddr
, &
√tif
->
autoù
->
Œùaddr
) &&

516 !
	`ëh_addr_cmp
(&
√tiÁddr
, &
hdr
->
shwaddr
))) {

517 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 
LWIP_DBG_LEVEL_WARNING
,

519 
	`autoù_ª°¨t
(
√tif
);

526 i‡(
	`ù_addr_cmp
(&
sùaddr
, &
√tif
->
autoù
->
Œùaddr
) &&

527 !
	`ëh_addr_cmp
(&
√tiÁddr
, &
hdr
->
shwaddr
)) {

528 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 
LWIP_DBG_LEVEL_WARNING
,

530 
	`autoù_h™dÀ_¨p_c⁄Êi˘
(
√tif
);

534 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/ipv4/icmp.c

42 
	~"lwù/›t.h
"

44 #i‡
LWIP_ICMP


46 
	~"lwù/icmp.h
"

47 
	~"lwù/öë_chksum.h
"

48 
	~"lwù/ù.h
"

49 
	~"lwù/def.h
"

50 
	~"lwù/°©s.h
"

51 
	~"lwù/¢mp.h
"

53 
	~<°rög.h
>

58 #i‚de‡
LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN


59 
	#LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
 1

	)

63 
	#ICMP_DEST_UNREACH_DATASIZE
 8

	)

65 
icmp_£nd_ª•⁄£
(
pbuf
 *
p
, 
u8_t
 
ty≥
, u8_à
code
);

77 
	$icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

79 
u8_t
 
ty≥
;

80 #ifde‡
LWIP_DEBUG


81 
u8_t
 
code
;

83 
icmp_echo_hdr
 *
õcho
;

84 
ù_hdr
 *
ùhdr
;

85 
s16_t
 
hÀn
;

87 
	`ICMP_STATS_INC
(
icmp
.
ªcv
);

88 
	`¢mp_öc_icmpömsgs
();

91 
ùhdr
 = (
ù_hdr
 *)
p
->
∑ylﬂd
;

92 
hÀn
 = 
	`IPH_HL
(
ùhdr
) * 4;

93 i‡(
	`pbuf_hódî
(
p
, -
hÀn
Ë|| (p->
tŸ_Àn
 < (
u16_t
)*2)) {

94 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: sh‹àICMP (%"
U16_F
" byãsËª˚ived\n", 
p
->
tŸ_Àn
));

95 
À√º
;

98 
ty≥
 = *((
u8_t
 *)
p
->
∑ylﬂd
);

99 #ifde‡
LWIP_DEBUG


100 
code
 = *(((
u8_t
 *)
p
->
∑ylﬂd
)+1);

102 
ty≥
) {

103 
ICMP_ER
:

107 
ICMP_ECHO
:

108 #i‡!
LWIP_MULTICAST_PING
 || !
LWIP_BROADCAST_PING


110 
ac˚±ed
 = 1;

111 #i‡!
LWIP_MULTICAST_PING


113 i‡(
	`ù_addr_ismu…iˇ°
(&
√tù
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
)) {

114 
ac˚±ed
 = 0;

117 #i‡!
LWIP_BROADCAST_PING


119 i‡(
	`ù_addr_isbrﬂdˇ°
(&
√tif
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
, 
öp
)) {

120 
ac˚±ed
 = 0;

124 i‡(!
ac˚±ed
) {

125 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: NotÉchoingÅo multicast or broadcastÖings\n"));

126 
	`ICMP_STATS_INC
(
icmp
.
îr
);

127 
	`pbuf_‰ì
(
p
, 
NULL
);

132 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input:Öing\n"));

133 i‡(
p
->
tŸ_Àn
 < (
icmp_echo_hdr
)) {

134 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: bad ICMPÉchoÑeceived\n"));

135 
À√º
;

137 i‡(
	`öë_chksum_pbuf
(
p
) != 0) {

138 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: checksum failed forÑeceived ICMPÉcho\n"));

139 
	`pbuf_‰ì
(
p
, 
NULL
);

140 
	`ICMP_STATS_INC
(
icmp
.
chkîr
);

141 
	`¢mp_öc_icmpöîr‹s
();

144 #i‡
LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN


145 i‡(
	`pbuf_hódî
(
p
, (
PBUF_IP_HLEN
 + 
PBUF_LINK_HLEN
))) {

149 
pbuf
 *
r
;

151 i‡(
	`pbuf_hódî
(
p
, 
hÀn
)) {

152 
	`LWIP_ASSERT
("icmp_input: movingÖ->payloadÅo ip header failed\n", 0);

153 
memîr
;

156 
r
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
p
->
tŸ_Àn
, 
PBUF_RAM
, 
NULL
);

157 i‡(
r
 =
NULL
) {

158 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input:állocatingÇewÖbuf failed\n"));

159 
memîr
;

161 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅhe ICMP header",

162 (
r
->
Àn
 >
hÀn
 + (
icmp_echo_hdr
)));

164 i‡(
	`pbuf_c›y
(
r
, 
p
Ë!
ERR_OK
) {

165 
	`LWIP_ASSERT
("icmp_input: copyingÅoÇewÖbuf failed\n", 0);

166 
memîr
;

168 
ùhdr
 = (
ù_hdr
 *)
r
->
∑ylﬂd
;

170 i‡(
	`pbuf_hódî
(
r
, -
hÀn
)) {

171 
	`LWIP_ASSERT
("icmp_input:Ñestoring originalÖ->payload failed\n", 0);

172 
memîr
;

175 
	`pbuf_‰ì
(
p
, 
NULL
);

177 
p
 = 
r
;

180 i‡(
	`pbuf_hódî
(
p
, -(
s16_t
)(
PBUF_IP_HLEN
 + 
PBUF_LINK_HLEN
))) {

181 
	`LWIP_ASSERT
("icmp_input:Ñestoring originalÖ->payload failed\n", 0);

182 
memîr
;

189 
õcho
 = (
icmp_echo_hdr
 *)
p
->
∑ylﬂd
;

190 
	`ù_addr_c›y
(
ùhdr
->
§c
, *
	`ù_cuºít_de°_addr
());

191 
	`ù_addr_c›y
(
ùhdr
->
de°
, *
	`ù_cuºít_§c_addr
());

192 
	`ICMPH_TYPE_SET
(
õcho
, 
ICMP_ER
);

194 i‡(
õcho
->
chksum
 >
	`PP_HTONS
(0xffffU - (
ICMP_ECHO
 << 8))) {

195 
õcho
->
chksum
 +
	`PP_HTONS
(
ICMP_ECHO
 << 8) + 1;

197 
õcho
->
chksum
 +
	`PP_HTONS
(
ICMP_ECHO
 << 8);

201 
	`IPH_TTL_SET
(
ùhdr
, 
ICMP_TTL
);

202 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

203 #i‡
CHECKSUM_GEN_IP


204 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
IP_HLEN
));

207 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

209 
	`¢mp_öc_icmpoutmsgs
();

211 
	`¢mp_öc_icmpouãch‹ïs
();

213 if(
	`pbuf_hódî
(
p
, 
hÀn
)) {

214 
	`LWIP_ASSERT
("Can't move over header inÖacket", 0);

216 
îr_t
 
ªt
;

218 
ªt
 = 
	`ù_ouçut_if
(
p
, 
	`ù_cuºít_de°_addr
(), 
IP_HDRINCL
,

219 
ICMP_TTL
, 0, 
IP_PROTO_ICMP
, 
öp
);

220 i‡(
ªt
 !
ERR_OK
) {

221 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: ip_ouçut_i‡ªtu∫edá¿îr‹: %c.\n", 
ªt
));

226 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: ICMPÅy≥ %"
S16_F
" code %"S16_F"Çot supported.\n",

227 (
s16_t
)
ty≥
, (s16_t)
code
));

228 
	`ICMP_STATS_INC
(
icmp
.
¥Ÿîr
);

229 
	`ICMP_STATS_INC
(
icmp
.
dr›
);

231 
	`pbuf_‰ì
(
p
, 
NULL
);

233 
À√º
:

234 
	`pbuf_‰ì
(
p
, 
NULL
);

235 
	`ICMP_STATS_INC
(
icmp
.
À√º
);

236 
	`¢mp_öc_icmpöîr‹s
();

238 #i‡
LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN


239 
memîr
:

240 
	`pbuf_‰ì
(
p
, 
NULL
);

241 
	`ICMP_STATS_INC
(
icmp
.
îr
);

242 
	`¢mp_öc_icmpöîr‹s
();

245 
	}
}

257 
	$icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
)

259 
	`icmp_£nd_ª•⁄£
(
p
, 
ICMP_DUR
, 
t
);

260 
	}
}

262 #i‡
IP_FORWARD
 || 
IP_REASSEMBLY


271 
	$icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
)

273 
	`icmp_£nd_ª•⁄£
(
p
, 
ICMP_TE
, 
t
);

274 
	}
}

287 
	$icmp_£nd_ª•⁄£
(
pbuf
 *
p
, 
u8_t
 
ty≥
, u8_à
code
)

289 
pbuf
 *
q
;

290 
ù_hdr
 *
ùhdr
;

292 
icmp_echo_hdr
 *
icmphdr
;

293 
ù_addr_t
 
ùhdr_§c
;

296 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, (
icmp_echo_hdr
Ë+ 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
,

297 
PBUF_RAM
, 
NULL
);

298 i‡(
q
 =
NULL
) {

299 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_time_exceeded: failedÅoállocateÖbuf for ICMPÖacket.\n"));

302 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold icmp message",

303 (
q
->
Àn
 >((
icmp_echo_hdr
Ë+ 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
)));

305 
ùhdr
 = (
ù_hdr
 *)
p
->
∑ylﬂd
;

306 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_time_exceeded from "));

307 
	`ù_addr_debug_¥öt
(
ICMP_DEBUG
, &(
ùhdr
->
§c
));

308 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("Åo "));

309 
	`ù_addr_debug_¥öt
(
ICMP_DEBUG
, &(
ùhdr
->
de°
));

310 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("\n"));

312 
icmphdr
 = (
icmp_echo_hdr
 *)
q
->
∑ylﬂd
;

313 
icmphdr
->
ty≥
 =Åype;

314 
icmphdr
->
code
 = code;

315 
icmphdr
->
id
 = 0;

316 
icmphdr
->
£qno
 = 0;

319 
	`SMEMCPY
((
u8_t
 *)
q
->
∑ylﬂd
 + (
icmp_echo_hdr
), (u8_à*)
p
->payload,

320 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
);

323 
icmphdr
->
chksum
 = 0;

324 
icmphdr
->
chksum
 = 
	`öë_chksum
(icmphdr, 
q
->
Àn
);

325 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

327 
	`¢mp_öc_icmpoutmsgs
();

329 
	`¢mp_öc_icmpouâimìxcds
();

330 
	`ù_addr_c›y
(
ùhdr_§c
, 
ùhdr
->
§c
);

331 
	`ù_ouçut
(
q
, 
NULL
, &
ùhdr_§c
, 
ICMP_TTL
, 0, 
IP_PROTO_ICMP
);

332 
	`pbuf_‰ì
(
q
, 
NULL
);

333 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/ipv4/igmp.c

80 
	~"lwù/›t.h
"

82 #i‡
LWIP_IGMP


84 
	~"lwù/igmp.h
"

85 
	~"lwù/debug.h
"

86 
	~"lwù/def.h
"

87 
	~"lwù/mem.h
"

88 
	~"lwù/ù.h
"

89 
	~"lwù/öë_chksum.h
"

90 
	~"lwù/√tif.h
"

91 
	~"lwù/icmp.h
"

92 
	~"lwù/udp.h
"

93 
	~"lwù/t˝.h
"

94 
	~"lwù/°©s.h
"

96 
	~"°rög.h
"

101 
	#IGMP_TTL
 1

	)

102 
	#IGMP_MINLEN
 8

	)

103 
	#ROUTER_ALERT
 0x9404U

	)

104 
	#ROUTER_ALERTLEN
 4

	)

109 
	#IGMP_MEMB_QUERY
 0x11

	)

110 
	#IGMP_V1_MEMB_REPORT
 0x12

	)

111 
	#IGMP_V2_MEMB_REPORT
 0x16

	)

112 
	#IGMP_LEAVE_GROUP
 0x17

	)

115 
	#IGMP_GROUP_NON_MEMBER
 0

	)

116 
	#IGMP_GROUP_DELAYING_MEMBER
 1

	)

117 
	#IGMP_GROUP_IDLE_MEMBER
 2

	)

122 #ifde‡
PACK_STRUCT_USE_INCLUDES


123 
	~"¨ch/bp°ru˘.h
"

125 
PACK_STRUCT_BEGIN


126 
	sigmp_msg
 {

127 
PACK_STRUCT_FIELD
(
u8_t
 
igmp_msgty≥
);

128 
PACK_STRUCT_FIELD
(
u8_t
 
igmp_maxª•
);

129 
PACK_STRUCT_FIELD
(
u16_t
 
igmp_checksum
);

130 
PACK_STRUCT_FIELD
(
ù_addr_p_t
 
igmp_group_addªss
);

131 } 
	gPACK_STRUCT_STRUCT
;

132 
	gPACK_STRUCT_END


133 #ifde‡
PACK_STRUCT_USE_INCLUDES


134 
	~"¨ch/ï°ru˘.h
"

138 
igmp_group
 *
igmp_lookup_group
(
√tif
 *
iÂ
, 
ù_addr_t
 *
addr
);

139 
îr_t
 
igmp_ªmove_group
(
igmp_group
 *
group
);

140 
igmp_timeout
–
igmp_group
 *
group
);

141 
igmp_°¨t_timî
(
igmp_group
 *
group
, 
u8_t
 
max_time
);

142 
igmp_°›_timî
(
igmp_group
 *
group
);

143 
igmp_dñayög_membî
(
igmp_group
 *
group
, 
u8_t
 
maxª•
);

144 
îr_t
 
igmp_ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
, 
√tif
 *netif);

145 
igmp_£nd
(
igmp_group
 *
group
, 
u8_t
 
ty≥
);

148 
igmp_group
* 
	gigmp_group_li°
;

149 
ù_addr_t
 
	gÆlsy°ems
;

150 
ù_addr_t
 
	gÆÃouãrs
;

157 
	$igmp_öô
()

159 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_init: initializing\n"));

161 
	`IP4_ADDR
(&
Ælsy°ems
, 224, 0, 0, 1);

162 
	`IP4_ADDR
(&
ÆÃouãrs
, 224, 0, 0, 2);

163 
	}
}

165 #ifde‡
LWIP_DEBUG


170 
	$igmp_dump_group_li°
()

172 
igmp_group
 *
group
 = 
igmp_group_li°
;

174 
group
 !
NULL
) {

175 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_dump_group_li°: [%"
U32_F
"] ", (
u32_t
)(
group
->
group_°©e
)));

176 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
group
->
group_addªss
);

177 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%p\n", 
group
->
√tif
));

178 
group
 = group->
√xt
;

180 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

181 
	}
}

183 
	#igmp_dump_group_li°
()

	)

191 
îr_t


192 
	$igmp_°¨t
(
√tif
 *netif)

194 
igmp_group
* 
group
;

196 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_°¨t: sèπög IGMPÖro˚ssög o¿i‡%p\n", 
√tif
));

198 
group
 = 
	`igmp_lookup_group
(
√tif
, &
Ælsy°ems
);

200 i‡(
group
 !
NULL
) {

201 
group
->
group_°©e
 = 
IGMP_GROUP_IDLE_MEMBER
;

202 
group
->
u£
++;

205 i‡(
√tif
->
igmp_mac_fûãr
 !
NULL
) {

206 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_start: igmp_mac_filter(ADD "));

207 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
Ælsy°ems
);

208 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%p\n", 
√tif
));

209 
√tif
->
	`igmp_mac_fûãr
“ëif, &
Ælsy°ems
, 
IGMP_ADD_MAC_FILTER
);

212  
ERR_OK
;

215  
ERR_MEM
;

216 
	}
}

223 
îr_t


224 
	$igmp_°›
(
√tif
 *netif)

226 
igmp_group
 *
group
 = 
igmp_group_li°
;

227 
igmp_group
 *
¥ev
 = 
NULL
;

228 
igmp_group
 *
√xt
;

231 
group
 !
NULL
) {

232 
√xt
 = 
group
->next;

234 i‡(
group
->
√tif
 ==Çetif) {

236 i‡(
group
 =
igmp_group_li°
) {

237 
igmp_group_li°
 = 
√xt
;

240 i‡(
¥ev
 !
NULL
) {

241 
¥ev
->
√xt
 =Çext;

244 i‡(
√tif
->
igmp_mac_fûãr
 !
NULL
) {

245 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_stop: igmp_mac_filter(DEL "));

246 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
group
->
group_addªss
);

247 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%p\n", 
√tif
));

248 
√tif
->
	`igmp_mac_fûãr
“ëif, &(
group
->
group_addªss
), 
IGMP_DEL_MAC_FILTER
);

251 
	`memp_‰ì
(
MEMP_IGMP_GROUP
, 
group
, 
NULL
);

254 
¥ev
 = 
group
;

257 
group
 = 
√xt
;

259  
ERR_OK
;

260 
	}
}

268 
	$igmp_ªp‹t_groups
(
√tif
 *netif)

270 
igmp_group
 *
group
 = 
igmp_group_li°
;

272 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_ªp‹t_groups: sídög IGMPÑï‹t†⁄ i‡%p\n", 
√tif
));

274 
group
 !
NULL
) {

275 i‡(
group
->
√tif
 ==Çetif) {

276 
	`igmp_dñayög_membî
(
group
, 
IGMP_JOIN_DELAYING_MEMBER_TMR
);

278 
group
 = group->
√xt
;

280 
	}
}

290 
igmp_group
 *

291 
	$igmp_lookf‹_group
(
√tif
 *
iÂ
, 
ù_addr_t
 *
addr
)

293 
igmp_group
 *
group
 = 
igmp_group_li°
;

295 
group
 !
NULL
) {

296 i‡((
group
->
√tif
 =
iÂ
Ë&& (
	`ù_addr_cmp
(&(group->
group_addªss
), 
addr
))) {

297  
group
;

299 
group
 = group->
√xt
;

305  
NULL
;

306 
	}
}

316 
igmp_group
 *

317 
	$igmp_lookup_group
(
√tif
 *
iÂ
, 
ù_addr_t
 *
addr
)

319 
igmp_group
 *
group
 = 
igmp_group_li°
;

322 
group
 = 
	`igmp_lookf‹_group
(
iÂ
, 
addr
);

323 i‡(
group
 !
NULL
) {

325  
group
;

329 
group
 = (
igmp_group
 *)
	`memp_mÆloc
(
MEMP_IGMP_GROUP
, 
NULL
);

330 i‡(
group
 !
NULL
) {

331 
group
->
√tif
 = 
iÂ
;

332 
	`ù_addr_£t
(&(
group
->
group_addªss
), 
addr
);

333 
group
->
timî
 = 0;

334 
group
->
group_°©e
 = 
IGMP_GROUP_NON_MEMBER
;

335 
group
->
œ°_ªp‹ãr_Êag
 = 0;

336 
group
->
u£
 = 0;

337 
group
->
√xt
 = 
igmp_group_li°
;

339 
igmp_group_li°
 = 
group
;

342 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_lookup_group: %ßŒoˇãdáÇew grou∞wôháddªs†", (
group
?"":"impossibleÅo ")));

343 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
addr
);

344 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%p\n", 
iÂ
));

346  
group
;

347 
	}
}

355 
îr_t


356 
	$igmp_ªmove_group
(
igmp_group
 *
group
)

358 
îr_t
 
îr
 = 
ERR_OK
;

361 i‡(
igmp_group_li°
 =
group
) {

362 
igmp_group_li°
 = 
group
->
√xt
;

365 
igmp_group
 *
tmpGroup
;

366 
tmpGroup
 = 
igmp_group_li°
;ÅmpGrou∞!
NULL
;ÅmpGrou∞tmpGroup->
√xt
) {

367 i‡(
tmpGroup
->
√xt
 =
group
) {

368 
tmpGroup
->
√xt
 = 
group
->next;

373 i‡(
tmpGroup
 =
NULL
)

374 
îr
 = 
ERR_ARG
;

377 
	`memp_‰ì
(
MEMP_IGMP_GROUP
, 
group
, 
NULL
);

379  
îr
;

380 
	}
}

390 
	$igmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
, 
ù_addr_t
 *
de°
)

392 
ù_hdr
 * 
ùhdr
;

393 
igmp_msg
* 
igmp
;

394 
igmp_group
* 
group
;

395 
igmp_group
* 
grou¥ef
;

397 
	`IGMP_STATS_INC
(
igmp
.
ªcv
);

400 
ùhdr
 = (
ù_hdr
 *)
p
->
∑ylﬂd
;

401 i‡(
	`pbuf_hódî
(
p
, -(
s16_t
)(
	`IPH_HL
(
ùhdr
Ë* 4)Ë|| (p->
Àn
 < 
IGMP_MINLEN
)) {

402 
	`pbuf_‰ì
(
p
, 
NULL
);

403 
	`IGMP_STATS_INC
(
igmp
.
À√º
);

404 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input:ÜengthÉrror\n"));

408 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: message from "));

409 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &(
ùhdr
->
§c
));

410 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Åoáddress "));

411 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &(
ùhdr
->
de°
));

412 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%p\n", 
öp
));

415 
igmp
 = (
igmp_msg
 *)
p
->
∑ylﬂd
;

416 i‡(
	`öë_chksum
(
igmp
, 
p
->
Àn
)) {

417 
	`pbuf_‰ì
(
p
, 
NULL
);

418 
	`IGMP_STATS_INC
(
igmp
.
chkîr
);

419 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: checksumÉrror\n"));

424 
group
 = 
	`igmp_lookf‹_group
(
öp
, 
de°
);

427 i‡(!
group
) {

428 
	`pbuf_‰ì
(
p
, 
NULL
);

429 
	`IGMP_STATS_INC
(
igmp
.
dr›
);

430 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: IGMP frameÇot for us\n"));

435 
igmp
->
igmp_msgty≥
) {

436 
IGMP_MEMB_QUERY
: {

438 i‡((
	`ù_addr_cmp
(
de°
, &
Ælsy°ems
)Ë&& 
	`ù_addr_ißny
(&
igmp
->
igmp_group_addªss
)) {

440 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_öput: GíîÆ IGMP_MEMB_QUERY o¿\"ALL SYSTEMS\"áddªs†(224.0.0.1Ë[igmp_maxª•=%i]\n", ()(
igmp
->
igmp_maxª•
)));

442 i‡(
igmp
->
igmp_maxª•
 == 0) {

443 
	`IGMP_STATS_INC
(
igmp
.
rx_v1
);

444 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: gotánáll hosts query withÅime== 0 -Åhis is V1ándÇot implemented -Åreatás v2\n"));

445 
igmp
->
igmp_maxª•
 = 
IGMP_V1_DELAYING_MEMBER_TMR
;

447 
	`IGMP_STATS_INC
(
igmp
.
rx_gíîÆ
);

450 
grou¥ef
 = 
igmp_group_li°
;

451 
grou¥ef
) {

453 i‡((
grou¥ef
->
√tif
 =
öp
Ë&& (!(
	`ù_addr_cmp
(&(grou¥ef->
group_addªss
), &
Ælsy°ems
)))) {

454 
	`igmp_dñayög_membî
(
grou¥ef
, 
igmp
->
igmp_maxª•
);

456 
grou¥ef
 = grou¥ef->
√xt
;

460 i‡(!
	`ù_addr_ißny
(&
igmp
->
igmp_group_addªss
)) {

461 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: IGMP_MEMB_QUERYÅoá specific group "));

462 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
igmp
->
igmp_group_addªss
);

463 i‡(
	`ù_addr_cmp
(
de°
, &
Ælsy°ems
)) {

464 
ù_addr_t
 
grou∑ddr
;

465 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" usög \"ALL SYSTEMS\"áddªs†(224.0.0.1Ë[igmp_maxª•=%i]\n", ()(
igmp
->
igmp_maxª•
)));

467 
	`ù_addr_c›y
(
grou∑ddr
, 
igmp
->
igmp_group_addªss
);

468 
group
 = 
	`igmp_lookf‹_group
(
öp
, &
grou∑ddr
);

470 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" wôhÅhêgrou∞addªs†a†de°ö©i⁄ [igmp_maxª•=%i]\n", ()(
igmp
->
igmp_maxª•
)));

473 i‡(
group
 !
NULL
) {

474 
	`IGMP_STATS_INC
(
igmp
.
rx_group
);

475 
	`igmp_dñayög_membî
(
group
, 
igmp
->
igmp_maxª•
);

477 
	`IGMP_STATS_INC
(
igmp
.
dr›
);

480 
	`IGMP_STATS_INC
(
igmp
.
¥Ÿîr
);

485 
IGMP_V2_MEMB_REPORT
: {

486 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));

487 
	`IGMP_STATS_INC
(
igmp
.
rx_ªp‹t
);

488 i‡(
group
->
group_°©e
 =
IGMP_GROUP_DELAYING_MEMBER
) {

490 
group
->
timî
 = 0;

491 
group
->
group_°©e
 = 
IGMP_GROUP_IDLE_MEMBER
;

492 
group
->
œ°_ªp‹ãr_Êag
 = 0;

497 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",

498 
igmp
->
igmp_msgty≥
, 
group
->
group_°©e
, &group, group->
√tif
));

499 
	`IGMP_STATS_INC
(
igmp
.
¥Ÿîr
);

504 
	`pbuf_‰ì
(
p
, 
NULL
);

506 
	}
}

515 
îr_t


516 
	$igmp_joögroup
(
ù_addr_t
 *
iÁddr
, ip_addr_à*
grou∑ddr
)

518 
îr_t
 
îr
 = 
ERR_VAL
;

519 
igmp_group
 *
group
;

520 
√tif
 *netif;

523 
	`LWIP_ERROR
("igmp_joögroup:áâem±ÅÿjoöÇ⁄-mu…iˇ°áddªss", 
	`ù_addr_ismu…iˇ°
(
grou∑ddr
),  
ERR_VAL
;);

524 
	`LWIP_ERROR
("igmp_joögroup:áâem±ÅÿjoöáŒsy°em†addªss", (!
	`ù_addr_cmp
(
grou∑ddr
, &
Ælsy°ems
)),  
ERR_VAL
;);

527 
√tif
 = 
lwù_t˝ù_thªad
[
	`sched_gë˝u
()]->
√tif_li°
;

528 
√tif
 !
NULL
) {

530 i‡((
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
Ë&& ((
	`ù_addr_ißny
(
iÁddr
Ë|| 
	`ù_addr_cmp
(&“ëif->
ù_addr
), ifaddr)))) {

532 
group
 = 
	`igmp_lookup_group
(
√tif
, 
grou∑ddr
);

534 i‡(
group
 !
NULL
) {

536 i‡(
group
->
group_°©e
 !
IGMP_GROUP_NON_MEMBER
) {

537 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: joinÅo groupÇot in state IGMP_GROUP_NON_MEMBER\n"));

540 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: joinÅoÇew group: "));

541 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

542 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

545 i‡((
group
->
u£
==0Ë&& (
√tif
->
igmp_mac_fûãr
 !
NULL
)) {

546 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: igmp_mac_filter(ADD "));

547 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

548 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%p\n", 
√tif
));

549 
√tif
->
	`igmp_mac_fûãr
“ëif, 
grou∑ddr
, 
IGMP_ADD_MAC_FILTER
);

552 
	`IGMP_STATS_INC
(
igmp
.
tx_joö
);

553 
	`igmp_£nd
(
group
, 
IGMP_V2_MEMB_REPORT
);

555 
	`igmp_°¨t_timî
(
group
, 
IGMP_JOIN_DELAYING_MEMBER_TMR
);

558 
group
->
group_°©e
 = 
IGMP_GROUP_DELAYING_MEMBER
;

561 
group
->
u£
++;

563 
îr
 = 
ERR_OK
;

567 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: NotÉnought memoryÅo joinÅo group\n"));

568  
ERR_MEM
;

572 
√tif
 =Çëif->
√xt
;

575  
îr
;

576 
	}
}

585 
îr_t


586 
	$igmp_Àavegroup
(
ù_addr_t
 *
iÁddr
, ip_addr_à*
grou∑ddr
)

588 
îr_t
 
îr
 = 
ERR_VAL
;

589 
igmp_group
 *
group
;

590 
√tif
 *netif;

593 
	`LWIP_ERROR
("igmp_Àavegroup:áâem±ÅÿÀavên⁄-mu…iˇ°áddªss", 
	`ù_addr_ismu…iˇ°
(
grou∑ddr
),  
ERR_VAL
;);

594 
	`LWIP_ERROR
("igmp_Àavegroup:áâem±ÅÿÀavêÆlsy°em†addªss", (!
	`ù_addr_cmp
(
grou∑ddr
, &
Ælsy°ems
)),  
ERR_VAL
;);

597 
√tif
 = 
lwù_t˝ù_thªad
[
	`sched_gë˝u
()]->
√tif_li°
;

598 
√tif
 !
NULL
) {

600 i‡((
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
Ë&& ((
	`ù_addr_ißny
(
iÁddr
Ë|| 
	`ù_addr_cmp
(&“ëif->
ù_addr
), ifaddr)))) {

602 
group
 = 
	`igmp_lookf‹_group
(
√tif
, 
grou∑ddr
);

604 i‡(
group
 !
NULL
) {

606 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup: Leaving group: "));

607 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

608 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

611 i‡(
group
->
u£
 <= 1) {

613 i‡(
group
->
œ°_ªp‹ãr_Êag
) {

614 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup: sendingÜeaving group\n"));

615 
	`IGMP_STATS_INC
(
igmp
.
tx_Àave
);

616 
	`igmp_£nd
(
group
, 
IGMP_LEAVE_GROUP
);

620 i‡(
√tif
->
igmp_mac_fûãr
 !
NULL
) {

621 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup: igmp_mac_filter(DEL "));

622 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

623 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%p\n", 
√tif
));

624 
√tif
->
	`igmp_mac_fûãr
“ëif, 
grou∑ddr
, 
IGMP_DEL_MAC_FILTER
);

627 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup:Ñemove group: "));

628 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

629 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

632 
	`igmp_ªmove_group
(
group
);

635 
group
->
u£
--;

638 
îr
 = 
ERR_OK
;

641 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup:Çot member of group\n"));

645 
√tif
 =Çëif->
√xt
;

648  
îr
;

649 
	}
}

656 
	$igmp_tmr
()

658 
igmp_group
 *
group
 = 
igmp_group_li°
;

660 
group
 !
NULL
) {

661 i‡(
group
->
timî
 > 0) {

662 
group
->
timî
--;

663 i‡(
group
->
timî
 == 0) {

664 
	`igmp_timeout
(
group
);

667 
group
 = group->
√xt
;

669 
	}
}

678 
	$igmp_timeout
(
igmp_group
 *
group
)

681 i‡(
group
->
group_°©e
 =
IGMP_GROUP_DELAYING_MEMBER
) {

682 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_timeout:Ñeport membership for group witháddress "));

683 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &(
group
->
group_addªss
));

684 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%p\n", 
group
->
√tif
));

686 
	`IGMP_STATS_INC
(
igmp
.
tx_ªp‹t
);

687 
	`igmp_£nd
(
group
, 
IGMP_V2_MEMB_REPORT
);

689 
	}
}

699 
	$igmp_°¨t_timî
(
igmp_group
 *
group
, 
u8_t
 
max_time
)

702 i‡(
max_time
 == 0) {

703 
max_time
 = 1;

706 
group
->
timî
 = (
	`LWIP_RAND
(Ë% (
max_time
 - 1)) + 1;

707 
	}
}

715 
	$igmp_°›_timî
(
igmp_group
 *
group
)

717 
group
->
timî
 = 0;

718 
	}
}

727 
	$igmp_dñayög_membî
(
igmp_group
 *
group
, 
u8_t
 
maxª•
)

729 i‡((
group
->
group_°©e
 =
IGMP_GROUP_IDLE_MEMBER
) ||

730 ((
group
->
group_°©e
 =
IGMP_GROUP_DELAYING_MEMBER
) &&

731 ((
group
->
timî
 =0Ë|| (
maxª•
 < group->timer)))) {

732 
	`igmp_°¨t_timî
(
group
, 
maxª•
);

733 
group
->
group_°©e
 = 
IGMP_GROUP_DELAYING_MEMBER
;

735 
	}
}

756 
îr_t


757 
	$igmp_ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
, 
√tif
 *netif)

760 
u16_t
 
ø
[2];

761 
ø
[0] = 
	`PP_HTONS
(
ROUTER_ALERT
);

762 
ø
[1] = 0x0000;

763 
	`IGMP_STATS_INC
(
igmp
.
xmô
);

764  
	`ù_ouçut_if_›t
(
p
, 
§c
, 
de°
, 
IGMP_TTL
, 0, 
IP_PROTO_IGMP
, 
√tif
, 
ø
, 
ROUTER_ALERTLEN
);

765 
	}
}

774 
	$igmp_£nd
(
igmp_group
 *
group
, 
u8_t
 
ty≥
)

776 
pbuf
* 
p
 = 
NULL
;

777 
igmp_msg
* 
igmp
 = 
NULL
;

778 
ù_addr_t
 
§c
 = *
IP_ADDR_ANY
;

779 
ù_addr_t
* 
de°
 = 
NULL
;

782 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
IGMP_MINLEN
, 
PBUF_RAM
, 
NULL
);

784 i‡(
p
) {

785 
igmp
 = (
igmp_msg
 *)
p
->
∑ylﬂd
;

786 
	`LWIP_ASSERT
("igmp_send: checkÅhat firstÖbuf can hold struct igmp_msg",

787 (
p
->
Àn
 >(
igmp_msg
)));

788 
	`ù_addr_c›y
(
§c
, 
group
->
√tif
->
ù_addr
);

790 i‡(
ty≥
 =
IGMP_V2_MEMB_REPORT
) {

791 
de°
 = &(
group
->
group_addªss
);

792 
	`ù_addr_c›y
(
igmp
->
igmp_group_addªss
, 
group
->
group_addªss
);

793 
group
->
œ°_ªp‹ãr_Êag
 = 1;

795 i‡(
ty≥
 =
IGMP_LEAVE_GROUP
) {

796 
de°
 = &
ÆÃouãrs
;

797 
	`ù_addr_c›y
(
igmp
->
igmp_group_addªss
, 
group
->
group_addªss
);

801 i‡((
ty≥
 =
IGMP_V2_MEMB_REPORT
Ë|| (ty≥ =
IGMP_LEAVE_GROUP
)) {

802 
igmp
->
igmp_msgty≥
 = 
ty≥
;

803 
igmp
->
igmp_maxª•
 = 0;

804 
igmp
->
igmp_checksum
 = 0;

805 
igmp
->
igmp_checksum
 = 
	`öë_chksum
(igmp, 
IGMP_MINLEN
);

807 
	`igmp_ù_ouçut_if
(
p
, &
§c
, 
de°
, 
group
->
√tif
);

810 
	`pbuf_‰ì
(
p
, 
NULL
);

812 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_send:ÇotÉnough memory for igmp_send\n"));

813 
	`IGMP_STATS_INC
(
igmp
.
memîr
);

815 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/ipv4/inet.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/öë.h
"

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/ipv4/inet_chksum.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/öë_chksum.h
"

42 
	~"lwù/def.h
"

44 
	~<°ddef.h
>

45 
	~<°rög.h
>

58 #i‚de‡
LWIP_CHKSUM


59 
	#LWIP_CHKSUM
 
lwù_°™d¨d_chksum


	)

60 #i‚de‡
LWIP_CHKSUM_ALGORITHM


61 
	#LWIP_CHKSUM_ALGORITHM
 2

	)

65 #i‚de‡
LWIP_CHKSUM_ALGORITHM


66 
	#LWIP_CHKSUM_ALGORITHM
 0

	)

69 #i‡(
LWIP_CHKSUM_ALGORITHM
 == 1)

80 
u16_t


81 
	$lwù_°™d¨d_chksum
(*
d©≠å
, 
u16_t
 
Àn
)

83 
u32_t
 
acc
;

84 
u16_t
 
§c
;

85 
u8_t
 *
o˘ë±r
;

87 
acc
 = 0;

89 
o˘ë±r
 = (
u8_t
*)
d©≠å
;

90 
Àn
 > 1) {

93 
§c
 = (*
o˘ë±r
) << 8;

94 
o˘ë±r
++;

96 
§c
 |(*
o˘ë±r
);

97 
o˘ë±r
++;

98 
acc
 +
§c
;

99 
Àn
 -= 2;

101 i‡(
Àn
 > 0) {

103 
§c
 = (*
o˘ë±r
) << 8;

104 
acc
 +
§c
;

107 
acc
 = (acc >> 16) + (acc & 0x0000ffffUL);

108 i‡((
acc
 & 0xffff0000UL) != 0) {

109 
acc
 = (acc >> 16) + (acc & 0x0000ffffUL);

114  
	`ht⁄s
((
u16_t
)
acc
);

115 
	}
}

118 #i‡(
LWIP_CHKSUM_ALGORITHM
 == 2)

134 
u16_t


135 
	$lwù_°™d¨d_chksum
(*
d©≠å
, 
Àn
)

137 
u8_t
 *
pb
 = (u8_à*)
d©≠å
;

138 
u16_t
 *
ps
, 
t
 = 0;

139 
u32_t
 
sum
 = 0;

140 
odd
 = ((
mem_±r_t
)
pb
 & 1);

143 i‡(
odd
 && 
Àn
 > 0) {

144 ((
u8_t
 *)&
t
)[1] = *
pb
++;

145 
Àn
--;

149 
ps
 = (
u16_t
 *)(*)
pb
;

150 
Àn
 > 1) {

151 
sum
 +*
ps
++;

152 
Àn
 -= 2;

156 i‡(
Àn
 > 0) {

157 ((
u8_t
 *)&
t
)[0] = *(u8_à*)
ps
;

161 
sum
 +
t
;

165 
sum
 = 
	`FOLD_U32T
(sum);

166 
sum
 = 
	`FOLD_U32T
(sum);

169 i‡(
odd
) {

170 
sum
 = 
	`SWAP_BYTES_IN_WORD
(sum);

173  (
u16_t
)
sum
;

174 
	}
}

177 #i‡(
LWIP_CHKSUM_ALGORITHM
 == 3)

190 
u16_t


191 
	$lwù_°™d¨d_chksum
(*
d©≠å
, 
Àn
)

193 
u8_t
 *
pb
 = (u8_à*)
d©≠å
;

194 
u16_t
 *
ps
, 
t
 = 0;

195 
u32_t
 *
∂
;

196 
u32_t
 
sum
 = 0, 
tmp
;

198 
odd
 = ((
mem_±r_t
)
pb
 & 1);

200 i‡(
odd
 && 
Àn
 > 0) {

201 ((
u8_t
 *)&
t
)[1] = *
pb
++;

202 
Àn
--;

205 
ps
 = (
u16_t
 *)
pb
;

207 i‡(((
mem_±r_t
)
ps
 & 3Ë&& 
Àn
 > 1) {

208 
sum
 +*
ps
++;

209 
Àn
 -= 2;

212 
∂
 = (
u32_t
 *)
ps
;

214 
Àn
 > 7) {

215 
tmp
 = 
sum
 + *
∂
++;

216 i‡(
tmp
 < 
sum
) {

217 
tmp
++;

220 
sum
 = 
tmp
 + *
∂
++;

221 i‡(
sum
 < 
tmp
) {

222 
sum
++;

225 
Àn
 -= 8;

229 
sum
 = 
	`FOLD_U32T
(sum);

231 
ps
 = (
u16_t
 *)
∂
;

234 
Àn
 > 1) {

235 
sum
 +*
ps
++;

236 
Àn
 -= 2;

240 i‡(
Àn
 > 0) {

241 ((
u8_t
 *)&
t
)[0] = *(u8_à*)
ps
;

244 
sum
 +
t
;

248 
sum
 = 
	`FOLD_U32T
(sum);

249 
sum
 = 
	`FOLD_U32T
(sum);

251 i‡(
odd
) {

252 
sum
 = 
	`SWAP_BYTES_IN_WORD
(sum);

255  (
u16_t
)
sum
;

256 
	}
}

271 
u16_t


272 
	$öë_chksum_p£udo
(
pbuf
 *
p
,

273 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

274 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
)

276 
u32_t
 
acc
;

277 
u32_t
 
addr
;

278 
pbuf
 *
q
;

279 
u8_t
 
sw≠≥d
;

281 
acc
 = 0;

282 
sw≠≥d
 = 0;

284 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

285 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("inet_chksum_pseudo(): checksummingÖbuf %p (hasÇext %p) \n",

286 (*)
q
, (*)q->
√xt
));

287 
acc
 +
	`LWIP_CHKSUM
(
q
->
∑ylﬂd
, q->
Àn
);

291 
acc
 = 
	`FOLD_U32T
(acc);

292 i‡(
q
->
Àn
 % 2 != 0) {

293 
sw≠≥d
 = 1 - swapped;

294 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

299 i‡(
sw≠≥d
) {

300 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

302 
addr
 = 
	`ù4_addr_gë_u32
(
§c
);

303 
acc
 +(
addr
 & 0xffffUL);

304 
acc
 +((
addr
 >> 16) & 0xffffUL);

305 
addr
 = 
	`ù4_addr_gë_u32
(
de°
);

306 
acc
 +(
addr
 & 0xffffUL);

307 
acc
 +((
addr
 >> 16) & 0xffffUL);

308 
acc
 +(
u32_t
)
	`ht⁄s
((
u16_t
)
¥Ÿo
);

309 
acc
 +(
u32_t
)
	`ht⁄s
(
¥Ÿo_Àn
);

313 
acc
 = 
	`FOLD_U32T
(acc);

314 
acc
 = 
	`FOLD_U32T
(acc);

315 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("öë_chksum_p£udo():Öbu‡chaöÜwù_chksum()=%"
X32_F
"\n", 
acc
));

316  (
u16_t
)~(
acc
 & 0xffffUL);

317 
	}
}

331 
u16_t


332 
	$öë_chksum_p£udo_∑πül
(
pbuf
 *
p
,

333 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

334 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
, u16_à
chksum_Àn
)

336 
u32_t
 
acc
;

337 
u32_t
 
addr
;

338 
pbuf
 *
q
;

339 
u8_t
 
sw≠≥d
;

340 
u16_t
 
chkÀn
;

342 
acc
 = 0;

343 
sw≠≥d
 = 0;

345 
q
 = 
p
; (q !
NULL
Ë&& (
chksum_Àn
 > 0); q = q->
√xt
) {

346 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("inet_chksum_pseudo(): checksummingÖbuf %p (hasÇext %p) \n",

347 (*)
q
, (*)q->
√xt
));

348 
chkÀn
 = 
q
->
Àn
;

349 i‡(
chkÀn
 > 
chksum_Àn
) {

350 
chkÀn
 = 
chksum_Àn
;

352 
acc
 +
	`LWIP_CHKSUM
(
q
->
∑ylﬂd
, 
chkÀn
);

353 
chksum_Àn
 -
chkÀn
;

354 
	`LWIP_ASSERT
("dñëême", 
chksum_Àn
 < 0x7fff);

357 
acc
 = 
	`FOLD_U32T
(acc);

358 i‡(
q
->
Àn
 % 2 != 0) {

359 
sw≠≥d
 = 1 - swapped;

360 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

365 i‡(
sw≠≥d
) {

366 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

368 
addr
 = 
	`ù4_addr_gë_u32
(
§c
);

369 
acc
 +(
addr
 & 0xffffUL);

370 
acc
 +((
addr
 >> 16) & 0xffffUL);

371 
addr
 = 
	`ù4_addr_gë_u32
(
de°
);

372 
acc
 +(
addr
 & 0xffffUL);

373 
acc
 +((
addr
 >> 16) & 0xffffUL);

374 
acc
 +(
u32_t
)
	`ht⁄s
((
u16_t
)
¥Ÿo
);

375 
acc
 +(
u32_t
)
	`ht⁄s
(
¥Ÿo_Àn
);

379 
acc
 = 
	`FOLD_U32T
(acc);

380 
acc
 = 
	`FOLD_U32T
(acc);

381 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("öë_chksum_p£udo():Öbu‡chaöÜwù_chksum()=%"
X32_F
"\n", 
acc
));

382  (
u16_t
)~(
acc
 & 0xffffUL);

383 
	}
}

395 
u16_t


396 
	$öë_chksum
(*
d©≠å
, 
u16_t
 
Àn
)

398  ~
	`LWIP_CHKSUM
(
d©≠å
, 
Àn
);

399 
	}
}

408 
u16_t


409 
	$öë_chksum_pbuf
(
pbuf
 *
p
)

411 
u32_t
 
acc
;

412 
pbuf
 *
q
;

413 
u8_t
 
sw≠≥d
;

415 
acc
 = 0;

416 
sw≠≥d
 = 0;

417 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

418 
acc
 +
	`LWIP_CHKSUM
(
q
->
∑ylﬂd
, q->
Àn
);

419 
acc
 = 
	`FOLD_U32T
(acc);

420 i‡(
q
->
Àn
 % 2 != 0) {

421 
sw≠≥d
 = 1 - swapped;

422 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

426 i‡(
sw≠≥d
) {

427 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

429  (
u16_t
)~(
acc
 & 0xffffUL);

430 
	}
}

439 #i‡(
LWIP_CHKSUM_COPY_ALGORITHM
 == 1)

444 
u16_t


445 
	$lwù_chksum_c›y
(*
d°
, c⁄° *
§c
, 
u16_t
 
Àn
)

447 
	`MEMCPY
(
d°
, 
§c
, 
Àn
);

448  
	`LWIP_CHKSUM
(
d°
, 
Àn
);

449 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/ipv4/ip.c

41 
	~"lwù/›t.h
"

42 
	~"lwù/ù.h
"

43 
	~"lwù/def.h
"

44 
	~"lwù/mem.h
"

45 
	~"lwù/ù_‰ag.h
"

46 
	~"lwù/öë_chksum.h
"

47 
	~"lwù/√tif.h
"

48 
	~"lwù/icmp.h
"

49 
	~"lwù/igmp.h
"

50 
	~"lwù/t˝_im∂.h
"

51 
	~"lwù/¢mp.h
"

52 
	~"lwù/autoù.h
"

53 
	~"lwù/°©s.h
"

54 
	~"¨ch/≥rf.h
"

55 
	~"lwù/t˝ù.h
"

57 
	~<°rög.h
>

61 #i‚de‡
LWIP_INLINE_IP_CHKSUM


62 
	#LWIP_INLINE_IP_CHKSUM
 1

	)

64 #i‡
LWIP_INLINE_IP_CHKSUM
 && 
CHECKSUM_GEN_IP


65 
	#CHECKSUM_GEN_IP_INLINE
 1

	)

67 
	#CHECKSUM_GEN_IP_INLINE
 0

	)

70 #i‡
LWIP_DHCP
 || 
deföed
(
LWIP_IP_ACCEPT_UDP_PORT
)

71 
	#IP_ACCEPT_LINK_LAYER_ADDRESSING
 1

	)

78 #i‡
LWIP_DHCP
 && 
deföed
(
LWIP_IP_ACCEPT_UDP_PORT
)

80 
	#IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT
(
p‹t
Ë((’‹tË=
	`PP_NTOHS
(
DHCP_CLIENT_PORT
)) \

81 || (
	`LWIP_IP_ACCEPT_UDP_PORT
(
p‹t
)))

	)

82 #ñi‡
deföed
(
LWIP_IP_ACCEPT_UDP_PORT
)

84 
	#IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT
(
p‹t
Ë(
	`LWIP_IP_ACCEPT_UDP_PORT
(
d°_p‹t
))

	)

87 
	#IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT
(
p‹t
Ë(’‹tË=
	`PP_NTOHS
(
DHCP_CLIENT_PORT
))

	)

91 
	#IP_ACCEPT_LINK_LAYER_ADDRESSING
 0

	)

103 
√tif
 *

104 
	$ù_rouã
(
ù_addr_t
 *
de°
, 
˝u
)

106 
√tif
 *netif;

109 
√tif
 = 
lwù_t˝ù_thªad
[
˝u
]->
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

111 i‡(
	`√tif_is_up
(
√tif
)) {

112 i‡(
	`ù_addr_√tcmp
(
de°
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

114  
√tif
;

118 i‡((
lwù_t˝ù_thªad
[
˝u
]->
√tif_deÁu…
 =
NULL
Ë|| (!
	`√tif_is_up
(lwip_tcpip_thread[cpu]->netif_default))) {

119 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("ù_rouã: NÿrouãÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

120 
	`ù4_addr1_16
(
de°
), 
	`ù4_addr2_16
(de°), 
	`ù4_addr3_16
(de°), 
	`ù4_addr4_16
(dest)));

121 
	`IP_STATS_INC
(
ù
.
πîr
);

122 
	`¢mp_öc_ùouä‹ouãs
();

123  
NULL
;

126  
lwù_t˝ù_thªad
[
˝u
]->
√tif_deÁu…
;

127 
	}
}

129 #i‡
IP_FORWARD


140 
	$ù_f‹w¨d
(
pbuf
 *
p
, 
ù_hdr
 *
ùhdr
, 
√tif
 *
öp
)

142 
√tif
 *netif;

144 
PERF_START
;

147 i‡(
	`ù_addr_i¶ökloˇl
(&
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
)) {

148 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_f‹w¨d:ÇŸ f‹w¨dög LLA %"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

149 
	`ù4_addr1_16
(&
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
), 
	`ù4_addr2_16
(&inp->prot_thread->current_iphdr_dest),

150 
	`ù4_addr3_16
(&
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
), 
	`ù4_addr4_16
(&inp->prot_thread->current_iphdr_dest)));

151 
ªtu∫_n‹ouã
;

155 
√tif
 = 
	`ù_rouã
(&
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
,Çëif, 
	`sched_gë˝u
());

156 i‡(
√tif
 =
NULL
) {

157 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_f‹w¨d:Çÿf‹w¨dögÑouã f‹ %"
U16_F
".%"U16_F".%"U16_F".%"U16_F" found\n",

158 
	`ù4_addr1_16
(&
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
), 
	`ù4_addr2_16
(&inp->prot_thread->current_iphdr_dest),

159 
	`ù4_addr3_16
(&
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
), 
	`ù4_addr4_16
(&inp->prot_thread->current_iphdr_dest)));

160 
ªtu∫_n‹ouã
;

164 i‡(
√tif
 =
öp
) {

165 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_forward:Çot bouncingÖackets back on incoming interface.\n"));

166 
ªtu∫_n‹ouã
;

170 
	`IPH_TTL_SET
(
ùhdr
, 
	`IPH_TTL
(iphdr) - 1);

172 i‡(
	`IPH_TTL
(
ùhdr
) == 0) {

173 
	`¢mp_öc_ùöhdªº‹s
();

174 #i‡
LWIP_ICMP


176 i‡(
	`IPH_PROTO
(
ùhdr
Ë!
IP_PROTO_ICMP
) {

177 
	`icmp_time_ex˚eded
(
p
, 
ICMP_TE_TTL
);

184 i‡(
	`IPH_CHKSUM
(
ùhdr
Ë>
	`PP_HTONS
(0xffffU - 0x100)) {

185 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`IPH_CHKSUM
(ùhdrË+ 
	`PP_HTONS
(0x100) + 1);

187 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`IPH_CHKSUM
(ùhdrË+ 
	`PP_HTONS
(0x100));

190 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_f‹w¨d: f‹w¨dögÖackëÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

191 
	`ù4_addr1_16
(&
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
), 
	`ù4_addr2_16
(&inp->prot_thread->current_iphdr_dest),

192 
	`ù4_addr3_16
(&
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
), 
	`ù4_addr4_16
(&inp->prot_thread->current_iphdr_dest)));

194 
	`IP_STATS_INC
(
ù
.
fw
);

195 
	`IP_STATS_INC
(
ù
.
xmô
);

196 
	`¢mp_öc_ùf‹wd©agøms
();

198 
	`PERF_STOP
("ip_forward");

200 
√tif
->
	`ouçut
“ëif, 
p
, &
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
);

202 
ªtu∫_n‹ouã
:

203 
	`¢mp_öc_ùouä‹ouãs
();

204 
	}
}

221 
îr_t


222 
	$ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

224 
ù_hdr
 *
ùhdr
;

225 
√tif
 *netif;

226 
u16_t
 
ùhdr_hÀn
;

227 
u16_t
 
ùhdr_Àn
;

228 #i‡
IP_ACCEPT_LINK_LAYER_ADDRESSING


229 
check_ù_§c
=1;

232 
	`IP_STATS_INC
(
ù
.
ªcv
);

233 
	`¢mp_öc_ùöª˚ives
();

236 
ùhdr
 = (
ù_hdr
 *)
p
->
∑ylﬂd
;

237 i‡(
	`IPH_V
(
ùhdr
) != 4) {

238 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_LEVEL_WARNING
, ("IPÖackë dr›≥d duêtÿbad vîsi⁄Çumbî %"
U16_F
"\n", 
	`IPH_V
(
ùhdr
)));

239 
	`ù_debug_¥öt
(
p
);

240 
	`pbuf_‰ì
(
p
, 
öp
->
¥Ÿ_thªad
);

241 
	`IP_STATS_INC
(
ù
.
îr
);

242 
	`IP_STATS_INC
(
ù
.
dr›
);

243 
	`¢mp_öc_ùöhdªº‹s
();

244  
ERR_OK
;

248 
ùhdr_hÀn
 = 
	`IPH_HL
(
ùhdr
);

250 
ùhdr_hÀn
 *= 4;

252 
ùhdr_Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
ùhdr
));

255 i‡((
ùhdr_hÀn
 > 
p
->
Àn
Ë|| (
ùhdr_Àn
 >Ö->
tŸ_Àn
)) {

256 i‡(
ùhdr_hÀn
 > 
p
->
Àn
) {

257 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
,

258 ("IP hódî (À¿%"
U16_F
") doesÇot fit in firstÖbuf (len %"U16_F"), IPÖacket dropped.\n",

259 
ùhdr_hÀn
, 
p
->
Àn
));

261 i‡(
ùhdr_Àn
 > 
p
->
tŸ_Àn
) {

262 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
,

263 ("IP (À¿%"
U16_F
") isÜongerÅhanÖbuf (len %"U16_F"), IPÖacket dropped.\n",

264 
ùhdr_Àn
, 
p
->
tŸ_Àn
));

267 
	`pbuf_‰ì
(
p
, 
öp
->
¥Ÿ_thªad
);

268 
	`IP_STATS_INC
(
ù
.
À√º
);

269 
	`IP_STATS_INC
(
ù
.
dr›
);

270 
	`¢mp_öc_ùödisˇrds
();

271  
ERR_OK
;

275 #i‡
CHECKSUM_CHECK_IP


276 i‡(
	`öë_chksum
(
ùhdr
, 
ùhdr_hÀn
) != 0) {

278 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
,

279 ("Checksum (0x%"
X16_F
"ËÁûed, IPÖackë dr›≥d.\n", 
	`öë_chksum
(
ùhdr
, 
ùhdr_hÀn
)));

280 
	`ù_debug_¥öt
(
p
);

281 
	`pbuf_‰ì
(
p
, 
öp
->
¥Ÿ_thªad
);

282 
	`IP_STATS_INC
(
ù
.
chkîr
);

283 
	`IP_STATS_INC
(
ù
.
dr›
);

284 
	`¢mp_öc_ùöhdªº‹s
();

285  
ERR_OK
;

291 
	`pbuf_ªÆloc
(
p
, 
ùhdr_Àn
);

294 
	`ù_addr_c›y
(
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
, 
ùhdr
->
de°
);

295 
	`ù_addr_c›y
(
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_§c
, 
ùhdr
->
§c
);

298 #i‡
LWIP_IGMP


299 i‡(
	`ù_addr_ismu…iˇ°
(&
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
)) {

300 i‡((
öp
->
Êags
 & 
NETIF_FLAG_IGMP
Ë&& (
	`igmp_lookf‹_group
(öp, &öp->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
))) {

301 
√tif
 = 
öp
;

303 
√tif
 = 
NULL
;

311 
fú°
 = 1;

312 
√tif
 = 
öp
;

314 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_öput: iphdr->de° 0x%"
X32_F
"Çetif->ip_addr 0x%"X32_F" (0x%"X32_F", 0x%"X32_F", 0x%"X32_F")\n",

315 
	`ù4_addr_gë_u32
(&
ùhdr
->
de°
), ip4_addr_gë_u32(&
√tif
->
ù_addr
),

316 
	`ù4_addr_gë_u32
(&
ùhdr
->
de°
Ë& ip4_addr_gë_u32(&
√tif
->
√tmask
),

317 
	`ù4_addr_gë_u32
(&
√tif
->
ù_addr
Ë& ip4_addr_gë_u32(&√tif->
√tmask
),

318 
	`ù4_addr_gë_u32
(&
ùhdr
->
de°
Ë& ~ù4_addr_gë_u32(&
√tif
->
√tmask
)));

321 i‡((
	`√tif_is_up
(
√tif
)Ë&& (!
	`ù_addr_ißny
(&“ëif->
ù_addr
)))) {

323 i‡(
	`ù_addr_cmp
(&
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
, &(
√tif
->
ù_addr
)) ||

325 
	`ù_addr_isbrﬂdˇ°
(&
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
, 
√tif
)) {

326 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input:Öacketáccepted on interface %c%c\n",

327 
√tif
->
«me
[0],Çetif->name[1]));

331 #i‡
LWIP_AUTOIP


334 i‡((
√tif
->
autoù
 !
NULL
) &&

335 
	`ù_addr_cmp
(&
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
, &(
√tif
->
autoù
->
Œùaddr
))) {

336 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input: LLAÖacketáccepted on interface %c%c\n",

337 
√tif
->
«me
[0],Çetif->name[1]));

343 i‡(
fú°
) {

344 
fú°
 = 0;

345 
√tif
 =Çëif->
¥Ÿ_thªad
->
√tif_li°
;

347 
√tif
 =Çëif->
√xt
;

349 i‡(
√tif
 =
öp
) {

350 
√tif
 =Çëif->
√xt
;

352 } 
√tif
 !
NULL
);

355 #i‡
IP_ACCEPT_LINK_LAYER_ADDRESSING


365 i‡(
√tif
 =
NULL
) {

367 i‡(
	`IPH_PROTO
(
ùhdr
Ë=
IP_PROTO_UDP
) {

368 
udp_hdr
 *
udphdr
 = (udp_hd∏*)((
u8_t
 *)
ùhdr
 + 
ùhdr_hÀn
);

369 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ù_öput: UDPÖackëÅÿDHCP clõ¡Ö‹à%"
U16_F
"\n",

370 
	`¡ohs
(
udphdr
->
de°
)));

371 i‡(
	`IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT
(
udphdr
->
de°
)) {

372 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ip_input: DHCPÖacketáccepted.\n"));

373 
√tif
 = 
öp
;

374 
check_ù_§c
 = 0;

381 #i‡
IP_ACCEPT_LINK_LAYER_ADDRESSING


383 i‡(
check_ù_§c
 && !
	`ù_addr_ißny
(&
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_§c
))

385 { i‡((
	`ù_addr_isbrﬂdˇ°
(&
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_§c
, inp)) ||

386 (
	`ù_addr_ismu…iˇ°
(&
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_§c
))) {

388 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_WARNING
, ("ip_input:Öacket source isÇot valid.\n"));

390 
	`pbuf_‰ì
(
p
, 
öp
->
¥Ÿ_thªad
);

391 
	`IP_STATS_INC
(
ù
.
dr›
);

392 
	`¢mp_öc_ùöaddªº‹s
();

393 
	`¢mp_öc_ùödisˇrds
();

394  
ERR_OK
;

399 i‡(
√tif
 =
NULL
) {

401 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ip_input:ÖacketÇot for us.\n"));

402 #i‡
IP_FORWARD


404 i‡(!
	`ù_addr_isbrﬂdˇ°
(&
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
, inp)) {

406 
	`ù_f‹w¨d
(
p
, 
ùhdr
, 
öp
);

410 
	`¢mp_öc_ùöaddªº‹s
();

411 
	`¢mp_öc_ùödisˇrds
();

413 
	`pbuf_‰ì
(
p
, 
öp
->
¥Ÿ_thªad
);

414  
ERR_OK
;

417 i‡((
	`IPH_OFFSET
(
ùhdr
Ë& 
	`PP_HTONS
(
IP_OFFMASK
 | 
IP_MF
)) != 0) {

418 #i‡
IP_REASSEMBLY


419 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IPÖackë i†®‰agmíà(id=0x%04"
X16_F
"ÅŸ_Àn=%"
U16_F
"Üen=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",

420 
	`¡ohs
(
	`IPH_ID
(
ùhdr
)), 
p
->
tŸ_Àn
,Çtohs(
	`IPH_LEN
(ùhdr)), !!(
	`IPH_OFFSET
(ùhdrË& 
	`PP_HTONS
(
IP_MF
)), (¡ohs(IPH_OFFSET(ùhdr)Ë& 
IP_OFFMASK
)*8));

422 
p
 = 
	`ù_ªass
(p);

424 i‡(
p
 =
NULL
) {

425  
ERR_OK
;

427 
ùhdr
 = (
ù_hdr
 *)
p
->
∑ylﬂd
;

429 
	`pbuf_‰ì
(
p
, 
öp
->
¥Ÿ_thªad
);

430 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("IPÖackë dr›≥d sö˚ iàwa†‰agmíãd (0x%"
X16_F
") (while IP_REASSEMBLY == 0).\n",

431 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
))));

432 
	`IP_STATS_INC
(
ù
.
›ãº
);

433 
	`IP_STATS_INC
(
ù
.
dr›
);

435 
	`¢mp_öc_ùöunknow≈rŸos
();

436  
ERR_OK
;

440 #i‡
IP_OPTIONS_ALLOWED
 == 0

442 #i‡
LWIP_IGMP


444 if((
ùhdr_hÀn
 > 
IP_HLEN
Ë&& (
	`IPH_PROTO
(
ùhdr
Ë!
IP_PROTO_IGMP
)) {

446 i‡(
ùhdr_hÀn
 > 
IP_HLEN
) {

448 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("IPÖacket dropped sinceÅhere were IP options (while IP_OPTIONS_ALLOWED == 0).\n"));

449 
	`pbuf_‰ì
(
p
, 
öp
->
¥Ÿ_thªad
);

450 
	`IP_STATS_INC
(
ù
.
›ãº
);

451 
	`IP_STATS_INC
(
ù
.
dr›
);

453 
	`¢mp_öc_ùöunknow≈rŸos
();

454  
ERR_OK
;

459 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input: \n"));

460 
	`ù_debug_¥öt
(
p
);

461 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_öput:Ö->À¿%"
U16_F
"Ö->tŸ_À¿%"U16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

463 #i‡
LWIP_RAW


465 i‡(
	`øw_öput
(
p
, 
öp
) == 0)

469 
	`IPH_PROTO
(
ùhdr
)) {

470 #i‡
LWIP_UDP


471 
IP_PROTO_UDP
:

472 #i‡
LWIP_UDPLITE


473 
IP_PROTO_UDPLITE
:

475 
	`¢mp_öc_ùödñivîs
();

476 
	`udp_öput
(
p
, 
öp
);

479 #i‡
LWIP_TCP


480 
IP_PROTO_TCP
:

481 
	`¢mp_öc_ùödñivîs
();

482 
	`t˝_öput
(
p
, 
öp
);

485 #i‡
LWIP_ICMP


486 
IP_PROTO_ICMP
:

487 
	`¢mp_öc_ùödñivîs
();

488 
	`icmp_öput
(
p
, 
öp
);

491 #i‡
LWIP_IGMP


492 
IP_PROTO_IGMP
:

493 
	`igmp_öput
(
p
, 
öp
, &
cuºít_ùhdr_de°
);

497 #i‡
LWIP_ICMP


499 i‡(!
	`ù_addr_isbrﬂdˇ°
(&
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
, inp) &&

500 !
	`ù_addr_ismu…iˇ°
(&
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
)) {

501 
p
->
∑ylﬂd
 = 
ùhdr
;

502 
	`icmp_de°_uƒóch
(
p
, 
ICMP_DUR_PROTO
);

505 
	`pbuf_‰ì
(
p
, 
öp
->
¥Ÿ_thªad
);

507 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("Unsuµ‹ãdÅøn•‹à¥Ÿocﬁ %"
U16_F
"\n", 
	`IPH_PROTO
(
ùhdr
)));

509 
	`IP_STATS_INC
(
ù
.
¥Ÿîr
);

510 
	`IP_STATS_INC
(
ù
.
dr›
);

511 
	`¢mp_öc_ùöunknow≈rŸos
();

515 
	`ù_addr_£t_™y
(&
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_§c
);

516 
	`ù_addr_£t_™y
(&
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
);

518  
ERR_OK
;

519 
	}
}

546 
îr_t


547 
	$ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

548 
u8_t
 
âl
, u8_à
tos
,

549 
u8_t
 
¥Ÿo
, 
√tif
 *netif)

551 #i‡
IP_OPTIONS_SEND


552  
	`ù_ouçut_if_›t
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
, 
NULL
, 0);

553 
	}
}

561 
îr_t
 
	$ù_ouçut_if_›t
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

562 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, 
√tif
 *√tif, *
ù_›ti⁄s
,

563 
u16_t
 
›éí
)

566 
ù_hdr
 *
ùhdr
;

567 
ù_addr_t
 
de°_addr
;

568 #i‡
CHECKSUM_GEN_IP_INLINE


569 
u32_t
 
chk_sum
 = 0;

574 
	`LWIP_ASSERT
("p->ª‡=1", 
p
->
ªf
 == 1);

576 
	`¢mp_öc_ùouåeque°s
();

579 i‡(
de°
 !
IP_HDRINCL
) {

580 
u16_t
 
ù_hÀn
 = 
IP_HLEN
;

581 #i‡
IP_OPTIONS_SEND


582 
u16_t
 
›éí_Æig√d
 = 0;

583 i‡(
›éí
 != 0) {

584 #i‡
CHECKSUM_GEN_IP_INLINE


585 
i
;

588 
›éí_Æig√d
 = ((
›éí
 + 3) & ~3);

589 
ù_hÀn
 +
›éí_Æig√d
;

591 i‡(
	`pbuf_hódî
(
p
, 
›éí_Æig√d
)) {

592 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("ip_output_if_opt:ÇotÉnoughÑoom for IP options inÖbuf\n"));

593 
	`IP_STATS_INC
(
ù
.
îr
);

594 
	`¢mp_öc_ùoutdisˇrds
();

595  
ERR_BUF
;

597 
	`MEMCPY
(
p
->
∑ylﬂd
, 
ù_›ti⁄s
, 
›éí
);

598 i‡(
›éí
 < 
›éí_Æig√d
) {

600 
	`mem£t
(((*)
p
->
∑ylﬂd
Ë+ 
›éí
, 0, 
›éí_Æig√d
 - optlen);

602 #i‡
CHECKSUM_GEN_IP_INLINE


603 
i
 = 0; i < 
›éí_Æig√d
/2; i++) {

604 
chk_sum
 +((
u16_t
*)
p
->
∑ylﬂd
)[
i
];

610 i‡(
	`pbuf_hódî
(
p
, 
IP_HLEN
)) {

611 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("ip_output:ÇotÉnoughÑoom for IP header inÖbuf\n"));

613 
	`IP_STATS_INC
(
ù
.
îr
);

614 
	`¢mp_öc_ùoutdisˇrds
();

615  
ERR_BUF
;

618 
ùhdr
 = (
ù_hdr
 *)
p
->
∑ylﬂd
;

619 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold struct ip_hdr",

620 (
p
->
Àn
 >(
ù_hdr
)));

622 
	`IPH_TTL_SET
(
ùhdr
, 
âl
);

623 
	`IPH_PROTO_SET
(
ùhdr
, 
¥Ÿo
);

624 #i‡
CHECKSUM_GEN_IP_INLINE


625 
chk_sum
 +
	`LWIP_MAKE_U16
(
¥Ÿo
, 
âl
);

629 
	`ù_addr_c›y
(
ùhdr
->
de°
, *dest);

630 #i‡
CHECKSUM_GEN_IP_INLINE


631 
chk_sum
 +
	`ù4_addr_gë_u32
(&
ùhdr
->
de°
) & 0xFFFF;

632 
chk_sum
 +
	`ù4_addr_gë_u32
(&
ùhdr
->
de°
) >> 16;

635 
	`IPH_VHLTOS_SET
(
ùhdr
, 4, 
ù_hÀn
 / 4, 
tos
);

636 #i‡
CHECKSUM_GEN_IP_INLINE


637 
chk_sum
 +
ùhdr
->
_v_hl_tos
;

639 
	`IPH_LEN_SET
(
ùhdr
, 
	`ht⁄s
(
p
->
tŸ_Àn
));

640 #i‡
CHECKSUM_GEN_IP_INLINE


641 
chk_sum
 +
ùhdr
->
_Àn
;

643 
	`IPH_OFFSET_SET
(
ùhdr
, 0);

644 
	`IPH_ID_SET
(
ùhdr
, 
	`ht⁄s
(
√tif
->
¥Ÿ_thªad
->
ù_id
));

645 #i‡
CHECKSUM_GEN_IP_INLINE


646 
chk_sum
 +
ùhdr
->
_id
;

648 ++
√tif
->
¥Ÿ_thªad
->
ù_id
;

650 i‡(
	`ù_addr_ißny
(
§c
)) {

651 
	`ù_addr_c›y
(
ùhdr
->
§c
, 
√tif
->
ù_addr
);

654 
	`ù_addr_c›y
(
ùhdr
->
§c
, *src);

657 #i‡
CHECKSUM_GEN_IP_INLINE


658 
chk_sum
 +
	`ù4_addr_gë_u32
(&
ùhdr
->
§c
) & 0xFFFF;

659 
chk_sum
 +
	`ù4_addr_gë_u32
(&
ùhdr
->
§c
) >> 16;

660 
chk_sum
 = (chk_sum >> 16) + (chk_sum & 0xFFFF);

661 
chk_sum
 = (chk_sum >> 16) + chk_sum;

662 
chk_sum
 = ~chk_sum;

663 
ùhdr
->
_chksum
 = 
chk_sum
;

665 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

666 #i‡
CHECKSUM_GEN_IP


667 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
ù_hÀn
));

672 
ùhdr
 = (
ù_hdr
 *)
p
->
∑ylﬂd
;

673 
	`ù_addr_c›y
(
de°_addr
, 
ùhdr
->
de°
);

674 
de°
 = &
de°_addr
;

677 
	`IP_STATS_INC
(
ù
.
xmô
);

679 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut_if: %c%c%"
U16_F
"\n", 
√tif
->
«me
[0],Çëif->«me[1],Çëif->
num
));

680 
	`ù_debug_¥öt
(
p
);

682 #i‡
ENABLE_LOOPBACK


683 i‡(
	`ù_addr_cmp
(
de°
, &
√tif
->
ù_addr
)) {

685 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("netif_loop_output()"));

686  
	`√tif_lo›_ouçut
(
√tif
, 
p
, 
de°
);

688 #i‡
LWIP_IGMP


689 i‡((
p
->
Êags
 & 
PBUF_FLAG_MCASTLOOP
) != 0) {

690 
	`√tif_lo›_ouçut
(
√tif
, 
p
, 
de°
);

694 #i‡
IP_FRAG


696 i‡(
√tif
->
mtu
 && (
p
->
tŸ_Àn
 >Çetif->mtu)) {

697  
	`ù_‰ag
(
p
, 
√tif
, 
de°
);

701 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("netif->output()"));

702  
√tif
->
	`ouçut
“ëif, 
p
, 
de°
);

703 
	}
}

722 
îr_t


723 
	$ù_ouçut
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

724 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
)

726 
√tif
 *netif;

730 
	`LWIP_ASSERT
("p->ª‡=1", 
p
->
ªf
 == 1);

732 i‡((
√tif
 = 
	`ù_rouã
(
de°
, 
	`sched_gë˝u
())Ë=
NULL
) {

733 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut: NÿrouãÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

734 
	`ù4_addr1_16
(
de°
), 
	`ù4_addr2_16
(de°), 
	`ù4_addr3_16
(de°), 
	`ù4_addr4_16
(dest)));

735 
	`IP_STATS_INC
(
ù
.
πîr
);

736  
ERR_RTE
;

739  
	`ù_ouçut_if
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
);

740 
	}
}

742 #i‡
LWIP_NETIF_HWADDRHINT


761 
îr_t


762 
	$ù_ouçut_höãd
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

763 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, u8_à*
addr_höt
)

765 
√tif
 *netif;

766 
îr_t
 
îr
;

770 
	`LWIP_ASSERT
("p->ª‡=1", 
p
->
ªf
 == 1);

772 i‡((
√tif
 = 
	`ù_rouã
(
de°
, 
	`sched_gë˝u
())Ë=
NULL
) {

773 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut: NÿrouãÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

774 
	`ù4_addr1_16
(
de°
), 
	`ù4_addr2_16
(de°), 
	`ù4_addr3_16
(de°), 
	`ù4_addr4_16
(dest)));

775 
	`IP_STATS_INC
(
ù
.
πîr
);

776  
ERR_RTE
;

779 
√tif
->
addr_höt
 =áddr_hint;

780 
îr
 = 
	`ù_ouçut_if
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
);

781 
√tif
->
addr_höt
 = 
NULL
;

783  
îr
;

784 
	}
}

787 #i‡
IP_DEBUG


792 
	$ù_debug_¥öt
(
pbuf
 *
p
)

794 
ù_hdr
 *
ùhdr
 = (ù_hd∏*)
p
->
∑ylﬂd
;

795 
u8_t
 *
∑ylﬂd
;

797 
∑ylﬂd
 = (
u8_t
 *)
ùhdr
 + 
IP_HLEN
;

799 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IP header:\n"));

800 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

801 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("|%2"
S16_F
" |%2"S16_F" | 0x%02"
X16_F
" | %5"
U16_F
" | (v, hl,Åos,Üen)\n",

802 
	`IPH_V
(
ùhdr
),

803 
	`IPH_HL
(
ùhdr
),

804 
	`IPH_TOS
(
ùhdr
),

805 
	`¡ohs
(
	`IPH_LEN
(
ùhdr
))));

806 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

807 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %5"
U16_F
" |%"U16_F"%"U16_F"%"U16_F"| %4"U16_F" | (id, flags, offset)\n",

808 
	`¡ohs
(
	`IPH_ID
(
ùhdr
)),

809 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)) >> 15 & 1,

810 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)) >> 14 & 1,

811 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)) >> 13 & 1,

812 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)Ë& 
IP_OFFMASK
));

813 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

814 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %3"
U16_F
" | %3"U16_F" | 0x%04"
X16_F
" | (ttl,Öroto, chksum)\n",

815 
	`IPH_TTL
(
ùhdr
),

816 
	`IPH_PROTO
(
ùhdr
),

817 
	`¡ohs
(
	`IPH_CHKSUM
(
ùhdr
))));

818 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

819 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %3"
U16_F
" | %3"U16_F" | %3"U16_F" | %3"U16_F" | (src)\n",

820 
	`ù4_addr1_16
(&
ùhdr
->
§c
),

821 
	`ù4_addr2_16
(&
ùhdr
->
§c
),

822 
	`ù4_addr3_16
(&
ùhdr
->
§c
),

823 
	`ù4_addr4_16
(&
ùhdr
->
§c
)));

824 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

825 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %3"
U16_F
" | %3"U16_F" | %3"U16_F" | %3"U16_F" | (dest)\n",

826 
	`ù4_addr1_16
(&
ùhdr
->
de°
),

827 
	`ù4_addr2_16
(&
ùhdr
->
de°
),

828 
	`ù4_addr3_16
(&
ùhdr
->
de°
),

829 
	`ù4_addr4_16
(&
ùhdr
->
de°
)));

830 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

831 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/ipv4/ip_addr.c

39 
	~"lwù/›t.h
"

40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/√tif.h
"

44 c⁄° 
ù_addr_t
 
	gù_addr_™y
 = { 
IPADDR_ANY
 };

45 c⁄° 
ù_addr_t
 
	gù_addr_brﬂdˇ°
 = { 
IPADDR_BROADCAST
 };

54 
u8_t


55 
	$ù4_addr_isbrﬂdˇ°
(
u32_t
 
addr
, c⁄° 
√tif
 *netif)

57 
ù_addr_t
 
ùaddr
;

58 
	`ù4_addr_£t_u32
(&
ùaddr
, 
addr
);

61 i‡((~
addr
 =
IPADDR_ANY
) ||

62 (
addr
 =
IPADDR_ANY
)) {

65 } i‡((
√tif
->
Êags
 & 
NETIF_FLAG_BROADCAST
) == 0) {

70 } i‡(
addr
 =
	`ù4_addr_gë_u32
(&
√tif
->
ù_addr
)) {

73 } i‡(
	`ù_addr_√tcmp
(&
ùaddr
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))

75 && ((
addr
 & ~
	`ù4_addr_gë_u32
(&
√tif
->
√tmask
)) ==

76 (
IPADDR_BROADCAST
 & ~
	`ù4_addr_gë_u32
(&
√tif
->
√tmask
)))) {

82 
	}
}

89 
u8_t


90 
	$ù4_addr_√tmask_vÆid
(
u32_t
 
√tmask
)

92 
u32_t
 
mask
;

93 
u32_t
 
nm_ho°‹dî
 = 
	`lwù_ht⁄l
(
√tmask
);

96 
mask
 = 1UL << 31 ; mask != 0; mask >>= 1) {

97 i‡((
nm_ho°‹dî
 & 
mask
) == 0) {

102 ; 
mask
 != 0; mask >>= 1) {

103 i‡((
nm_ho°‹dî
 & 
mask
) != 0) {

110 
	}
}

113 #i‚de‡
i•röt


114 
	#ö_ønge
(
c
, 
lo
, 
up
Ë((
u8_t
)¯>lÿ&& (u8_t)¯<up)

	)

115 
	#i•röt
(
c
Ë
	`ö_ønge
(c, 0x20, 0x7f)

	)

116 
	#isdigô
(
c
Ë
	`ö_ønge
(c, '0', '9')

	)

117 
	#isxdigô
(
c
Ë(
	`isdigô
(cË|| 
	`ö_ønge
(c, 'a', 'f'Ë|| in_ønge(c, 'A', 'F'))

	)

118 
	#i¶owî
(
c
Ë
	`ö_ønge
(c, 'a', 'z')

	)

119 
	#is•a˚
(
c
Ë(¯=' ' || c ='\f' || c ='\n' || c ='\r' || c ='\t' || c ='\v')

	)

129 
u32_t


130 
	$ùaddr_addr
(c⁄° *
˝
)

132 
ù_addr_t
 
vÆ
;

134 i‡(
	`ùaddr_©⁄
(
˝
, &
vÆ
)) {

135  
	`ù4_addr_gë_u32
(&
vÆ
);

137  (
IPADDR_NONE
);

138 
	}
}

152 
	$ùaddr_©⁄
(c⁄° *
˝
, 
ù_addr_t
 *
addr
)

154 
u32_t
 
vÆ
;

155 
u8_t
 
ba£
;

156 
c
;

157 
u32_t
 
∑πs
[4];

158 
u32_t
 *
µ
 = 
∑πs
;

160 
c
 = *
˝
;

167 i‡(!
	`isdigô
(
c
))

169 
vÆ
 = 0;

170 
ba£
 = 10;

171 i‡(
c
 == '0') {

172 
c
 = *++
˝
;

173 i‡(
c
 == 'x' || c == 'X') {

174 
ba£
 = 16;

175 
c
 = *++
˝
;

177 
ba£
 = 8;

180 i‡(
	`isdigô
(
c
)) {

181 
vÆ
 = (vÆ * 
ba£
Ë+ ()(
c
 - '0');

182 
c
 = *++
˝
;

183 } i‡(
ba£
 =16 && 
	`isxdigô
(
c
)) {

184 
vÆ
 = (vÆ << 4Ë| ()(
c
 + 10 - (
	`i¶owî
(c) ? 'a' : 'A'));

185 
c
 = *++
˝
;

189 i‡(
c
 == '.') {

196 i‡(
µ
 >
∑πs
 + 3) {

199 *
µ
++ = 
vÆ
;

200 
c
 = *++
˝
;

207 i‡(
c
 !'\0' && !
	`is•a˚
(c)) {

214 
µ
 - 
∑πs
 + 1) {

223 i‡(
vÆ
 > 0xffffffUL) {

226 
vÆ
 |
∑πs
[0] << 24;

230 i‡(
vÆ
 > 0xffff) {

233 
vÆ
 |(
∑πs
[0] << 24) | (parts[1] << 16);

237 i‡(
vÆ
 > 0xff) {

240 
vÆ
 |(
∑πs
[0] << 24) | (parts[1] << 16) | (parts[2] << 8);

243 
	`LWIP_ASSERT
("unhandled", 0);

246 i‡(
addr
) {

247 
	`ù4_addr_£t_u32
(
addr
, 
	`ht⁄l
(
vÆ
));

250 
	}
}

261 
	$ùaddr_¡ﬂ
(c⁄° 
ù_addr_t
 *
addr
)

263 
°r
[16];

264  
	`ùaddr_¡ﬂ_r
(
addr
, 
°r
, 16);

265 
	}
}

276 *
	$ùaddr_¡ﬂ_r
(c⁄° 
ù_addr_t
 *
addr
, *
buf
, 
buÊí
)

278 
u32_t
 
s_addr
;

279 
öv
[3];

280 *
Ω
;

281 
u8_t
 *
≠
;

282 
u8_t
 
ªm
;

283 
u8_t
 
n
;

284 
u8_t
 
i
;

285 
Àn
 = 0;

287 
s_addr
 = 
	`ù4_addr_gë_u32
(
addr
);

289 
Ω
 = 
buf
;

290 
≠
 = (
u8_t
 *)&
s_addr
;

291 
n
 = 0;Ç < 4;Ç++) {

292 
i
 = 0;

294 
ªm
 = *
≠
 % (
u8_t
)10;

295 *
≠
 /(
u8_t
)10;

296 
öv
[
i
++] = '0' + 
ªm
;

297 } *
≠
);

298 
i
--) {

299 i‡(
Àn
++ >
buÊí
) {

300  
NULL
;

302 *
Ω
++ = 
öv
[
i
];

304 i‡(
Àn
++ >
buÊí
) {

305  
NULL
;

307 *
Ω
++ = '.';

308 
≠
++;

310 *--
Ω
 = 0;

311  
buf
;

312 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/ipv4/ip_frag.c

41 
	~"lwù/›t.h
"

42 
	~"lwù/ù_‰ag.h
"

43 
	~"lwù/def.h
"

44 
	~"lwù/öë_chksum.h
"

45 
	~"lwù/√tif.h
"

46 
	~"lwù/¢mp.h
"

47 
	~"lwù/°©s.h
"

48 
	~"lwù/icmp.h
"

50 
	~<°rög.h
>

52 #i‡
IP_REASSEMBLY


66 #i‚de‡
IP_REASS_CHECK_OVERLAP


67 
	#IP_REASS_CHECK_OVERLAP
 1

	)

74 #i‚de‡
IP_REASS_FREE_OLDEST


75 
	#IP_REASS_FREE_OLDEST
 1

	)

78 
	#IP_REASS_FLAG_LASTFRAG
 0x01

	)

88 #ifde‡
PACK_STRUCT_USE_INCLUDES


89 
	~"¨ch/bp°ru˘.h
"

91 
PACK_STRUCT_BEGIN


92 
	sù_ªass_hñ≥r
 {

93 
PACK_STRUCT_FIELD
(
pbuf
 *
√xt_pbuf
);

94 
PACK_STRUCT_FIELD
(
u16_t
 
°¨t
);

95 
PACK_STRUCT_FIELD
(
u16_t
 
íd
);

96 } 
	gPACK_STRUCT_STRUCT
;

97 
	gPACK_STRUCT_END


98 #ifde‡
PACK_STRUCT_USE_INCLUDES


99 
	~"¨ch/ï°ru˘.h
"

102 
	#IP_ADDRESSES_AND_ID_MATCH
(
ùhdrA
, 
ùhdrB
) \

103 (
	`ù_addr_cmp
(&(
ùhdrA
)->
§c
, &(
ùhdrB
)->src) && \

104 
	`ù_addr_cmp
(&(
ùhdrA
)->
de°
, &(
ùhdrB
)->dest) && \

105 
	`IPH_ID
(
ùhdrA
Ë=IPH_ID(
ùhdrB
)Ë? 1 : 0

	)

108 
ù_ªassd©a
 *
	gªassd©agøms
;

109 
u16_t
 
	gù_ªass_pbufcou¡
;

112 
ù_ªass_dequeue_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
);

113 
ù_ªass_‰ì_com∂ëe_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
);

122 
	$ù_ªass_tmr
()

124 
ù_ªassd©a
 *
r
, *
¥ev
 = 
NULL
;

126 
r
 = 
ªassd©agøms
;

127 
r
 !
NULL
) {

130 i‡(
r
->
timî
 > 0) {

131 
r
->
timî
--;

132 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ù_ªass_tmr:Åimî de¯%"
U16_F
"\n",(
u16_t
)
r
->
timî
));

133 
¥ev
 = 
r
;

134 
r
 =Ñ->
√xt
;

137 
ù_ªassd©a
 *
tmp
;

138 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ip_reass_tmr:ÅimerÅimed out\n"));

139 
tmp
 = 
r
;

141 
r
 =Ñ->
√xt
;

143 
	`ù_ªass_‰ì_com∂ëe_d©agøm
(
tmp
, 
¥ev
);

146 
	}
}

158 
	$ù_ªass_‰ì_com∂ëe_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
)

160 
u16_t
 
pbufs_‰ìd
 = 0;

161 
u8_t
 
˛í
;

162 
pbuf
 *
p
;

163 
ù_ªass_hñ≥r
 *
ùrh
;

165 
	`LWIP_ASSERT
("¥ev !ùr", 
¥ev
 !
ùr
);

166 i‡(
¥ev
 !
NULL
) {

167 
	`LWIP_ASSERT
("¥ev->√xà=ùr", 
¥ev
->
√xt
 =
ùr
);

170 
	`¢mp_öc_ùªasmÁûs
();

171 #i‡
LWIP_ICMP


172 
ùrh
 = (
ù_ªass_hñ≥r
 *)
ùr
->
p
->
∑ylﬂd
;

173 i‡(
ùrh
->
°¨t
 == 0) {

176 
p
 = 
ùr
->p;

177 
ùr
->
p
 = 
ùrh
->
√xt_pbuf
;

179 
	`SMEMCPY
(
p
->
∑ylﬂd
, &
ùr
->
ùhdr
, 
IP_HLEN
);

180 
	`icmp_time_ex˚eded
(
p
, 
ICMP_TE_FRAG
);

181 
˛í
 = 
	`pbuf_˛í
(
p
);

182 
	`LWIP_ASSERT
("pbufs_‰ìd + cÀ¿<0xffff", 
pbufs_‰ìd
 + 
˛í
 <= 0xffff);

183 
pbufs_‰ìd
 +
˛í
;

184 
	`pbuf_‰ì
(
p
, 
NULL
);

190 
p
 = 
ùr
->p;

191 
p
 !
NULL
) {

192 
pbuf
 *
pcur
;

193 
ùrh
 = (
ù_ªass_hñ≥r
 *)
p
->
∑ylﬂd
;

194 
pcur
 = 
p
;

196 
p
 = 
ùrh
->
√xt_pbuf
;

197 
˛í
 = 
	`pbuf_˛í
(
pcur
);

198 
	`LWIP_ASSERT
("pbufs_‰ìd + cÀ¿<0xffff", 
pbufs_‰ìd
 + 
˛í
 <= 0xffff);

199 
pbufs_‰ìd
 +
˛í
;

200 
	`pbuf_‰ì
(
pcur
, 
NULL
);

203 
	`ù_ªass_dequeue_d©agøm
(
ùr
, 
¥ev
);

204 
	`LWIP_ASSERT
("ù_ªass_pbufcou¡ >˛í", 
ù_ªass_pbufcou¡
 >
pbufs_‰ìd
);

205 
ù_ªass_pbufcou¡
 -
pbufs_‰ìd
;

207  
pbufs_‰ìd
;

208 
	}
}

210 #i‡
IP_REASS_FREE_OLDEST


221 
	$ù_ªass_ªmove_ﬁde°_d©agøm
(
ù_hdr
 *
‰aghdr
, 
pbufs_√eded
)

226 
ù_ªassd©a
 *
r
, *
ﬁde°
, *
¥ev
;

227 
pbufs_‰ìd
 = 0, 
pbufs_‰ìd_cuºít
;

228 
Ÿhî_d©agøms
;

233 
ﬁde°
 = 
NULL
;

234 
¥ev
 = 
NULL
;

235 
Ÿhî_d©agøms
 = 0;

236 
r
 = 
ªassd©agøms
;

237 
r
 !
NULL
) {

238 i‡(!
	`IP_ADDRESSES_AND_ID_MATCH
(&
r
->
ùhdr
, 
‰aghdr
)) {

240 
Ÿhî_d©agøms
++;

241 i‡(
ﬁde°
 =
NULL
) {

242 
ﬁde°
 = 
r
;

243 } i‡(
r
->
timî
 <
ﬁde°
->timer) {

245 
ﬁde°
 = 
r
;

248 i‡(
r
->
√xt
 !
NULL
) {

249 
¥ev
 = 
r
;

251 
r
 =Ñ->
√xt
;

253 i‡(
ﬁde°
 !
NULL
) {

254 
pbufs_‰ìd_cuºít
 = 
	`ù_ªass_‰ì_com∂ëe_d©agøm
(
ﬁde°
, 
¥ev
);

255 
pbufs_‰ìd
 +
pbufs_‰ìd_cuºít
;

257 } (
pbufs_‰ìd
 < 
pbufs_√eded
Ë&& (
Ÿhî_d©agøms
 > 1));

258  
pbufs_‰ìd
;

259 
	}
}

268 
ù_ªassd©a
*

269 
	$ù_ªass_íqueue_√w_d©agøm
(
ù_hdr
 *
‰aghdr
, 
˛í
)

271 
ù_ªassd©a
* 
ùr
;

273 
ùr
 = (
ù_ªassd©a
 *)
	`memp_mÆloc
(
MEMP_REASSDATA
, 
NULL
);

274 i‡(
ùr
 =
NULL
) {

275 #i‡
IP_REASS_FREE_OLDEST


276 i‡(
	`ù_ªass_ªmove_ﬁde°_d©agøm
(
‰aghdr
, 
˛í
) >= clen) {

277 
ùr
 = (
ù_ªassd©a
 *)
	`memp_mÆloc
(
MEMP_REASSDATA
, 
NULL
);

279 i‡(
ùr
 =
NULL
)

282 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
memîr
);

283 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("FailedÅoállocÑeassdata struct\n"));

284  
NULL
;

287 
	`mem£t
(
ùr
, 0, (
ù_ªassd©a
));

288 
ùr
->
timî
 = 
IP_REASS_MAXAGE
;

291 
ùr
->
√xt
 = 
ªassd©agøms
;

292 
ªassd©agøms
 = 
ùr
;

295 
	`SMEMCPY
(&(
ùr
->
ùhdr
), 
‰aghdr
, 
IP_HLEN
);

296  
ùr
;

297 
	}
}

304 
	$ù_ªass_dequeue_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
)

308 i‡(
ªassd©agøms
 =
ùr
) {

310 
ªassd©agøms
 = 
ùr
->
√xt
;

313 
	`LWIP_ASSERT
("ßnôy checkÜökedÜi°", 
¥ev
 !
NULL
);

314 
¥ev
->
√xt
 = 
ùr
->next;

318 
	`memp_‰ì
(
MEMP_REASSDATA
, 
ùr
, 
NULL
);

319 
	}
}

331 
	$ù_ªass_chaö_‰ag_öto_d©agøm_™d_vÆid©e
(
ù_ªassd©a
 *
ùr
, 
pbuf
 *
√w_p
)

333 
ù_ªass_hñ≥r
 *
ùrh
, *
ùrh_tmp
, *
ùrh_¥ev
=
NULL
;

334 
pbuf
 *
q
;

335 
u16_t
 
off£t
,
Àn
;

336 
ù_hdr
 *
‰aghdr
;

337 
vÆid
 = 1;

340 
‰aghdr
 = (
ù_hdr
*)
√w_p
->
∑ylﬂd
;

341 
Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
‰aghdr
)Ë- 
	`IPH_HL
(fraghdr) * 4;

342 
off£t
 = (
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_OFFMASK
) * 8;

347 
	`LWIP_ASSERT
("sizeof(struct ip_reass_helper) <= IP_HLEN",

348 (
ù_ªass_hñ≥r
Ë<
IP_HLEN
);

349 
ùrh
 = (
ù_ªass_hñ≥r
*)
√w_p
->
∑ylﬂd
;

350 
ùrh
->
√xt_pbuf
 = 
NULL
;

351 
ùrh
->
°¨t
 = 
off£t
;

352 
ùrh
->
íd
 = 
off£t
 + 
Àn
;

356 
q
 = 
ùr
->
p
; q !
NULL
;) {

357 
ùrh_tmp
 = (
ù_ªass_hñ≥r
*)
q
->
∑ylﬂd
;

358 i‡(
ùrh
->
°¨t
 < 
ùrh_tmp
->start) {

360 
ùrh
->
√xt_pbuf
 = 
q
;

361 i‡(
ùrh_¥ev
 !
NULL
) {

363 #i‡
IP_REASS_CHECK_OVERLAP


364 i‡((
ùrh
->
°¨t
 < 
ùrh_¥ev
->
íd
Ë|| (ùrh->íd > 
ùrh_tmp
->start)) {

366 
‰ìpbuf
;

369 
ùrh_¥ev
->
√xt_pbuf
 = 
√w_p
;

372 
ùr
->
p
 = 
√w_p
;

375 } if(
ùrh
->
°¨t
 =
ùrh_tmp
->start) {

377 
‰ìpbuf
;

378 #i‡
IP_REASS_CHECK_OVERLAP


379 } if(
ùrh
->
°¨t
 < 
ùrh_tmp
->
íd
) {

381 
‰ìpbuf
;

385 i‡(
ùrh_¥ev
 !
NULL
) {

386 i‡(
ùrh_¥ev
->
íd
 !
ùrh_tmp
->
°¨t
) {

389 
vÆid
 = 0;

393 
q
 = 
ùrh_tmp
->
√xt_pbuf
;

394 
ùrh_¥ev
 = 
ùrh_tmp
;

398 i‡(
q
 =
NULL
) {

399 i‡(
ùrh_¥ev
 !
NULL
) {

402 #i‡
IP_REASS_CHECK_OVERLAP


403 
	`LWIP_ASSERT
("check føgmít†d⁄'àovîœp", 
ùrh_¥ev
->
íd
 <
ùrh
->
°¨t
);

405 
ùrh_¥ev
->
√xt_pbuf
 = 
√w_p
;

406 i‡(
ùrh_¥ev
->
íd
 !
ùrh
->
°¨t
) {

407 
vÆid
 = 0;

410 #i‡
IP_REASS_CHECK_OVERLAP


411 
	`LWIP_ASSERT
("noÖrevious fragment,Åhis must beÅhe first fragment!",

412 
ùr
->
p
 =
NULL
);

415 
ùr
->
p
 = 
√w_p
;

421 i‡((
ùr
->
Êags
 & 
IP_REASS_FLAG_LASTFRAG
) != 0) {

423 i‡(
vÆid
) {

426 i‡(((
ù_ªass_hñ≥r
*)
ùr
->
p
->
∑ylﬂd
)->
°¨t
 != 0) {

427 
vÆid
 = 0;

430 
ùrh_¥ev
 = 
ùrh
;

431 
q
 = 
ùrh
->
√xt_pbuf
;

432 
q
 !
NULL
) {

433 
ùrh
 = (
ù_ªass_hñ≥r
*)
q
->
∑ylﬂd
;

434 i‡(
ùrh_¥ev
->
íd
 !
ùrh
->
°¨t
) {

435 
vÆid
 = 0;

438 
ùrh_¥ev
 = 
ùrh
;

439 
q
 = 
ùrh
->
√xt_pbuf
;

443 i‡(
vÆid
) {

444 
	`LWIP_ASSERT
("ßnôy check", 
ùr
->
p
 !
NULL
);

445 
	`LWIP_ASSERT
("sanity check",

446 ((
ù_ªass_hñ≥r
*)
ùr
->
p
->
∑ylﬂd
Ë!
ùrh
);

447 
	`LWIP_ASSERT
("validate_datagram:next_pbuf!=NULL",

448 
ùrh
->
√xt_pbuf
 =
NULL
);

449 
	`LWIP_ASSERT
("validate_datagram:datagramÉnd!=datagramÜen",

450 
ùrh
->
íd
 =
ùr
->
d©agøm_Àn
);

457  
vÆid
;

461 #i‡
IP_REASS_CHECK_OVERLAP


462 
‰ìpbuf
:

463 
ù_ªass_pbufcou¡
 -
	`pbuf_˛í
(
√w_p
);

464 
	`pbuf_‰ì
(
√w_p
, 
NULL
);

467 
	}
}

475 
pbuf
 *

476 
	$ù_ªass
(
pbuf
 *
p
)

478 
pbuf
 *
r
;

479 
ù_hdr
 *
‰aghdr
;

480 
ù_ªassd©a
 *
ùr
;

481 
ù_ªass_hñ≥r
 *
ùrh
;

482 
u16_t
 
off£t
, 
Àn
;

483 
u8_t
 
˛í
;

484 
ù_ªassd©a
 *
ùr_¥ev
 = 
NULL
;

486 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
ªcv
);

487 
	`¢mp_öc_ùªasmªqds
();

489 
‰aghdr
 = (
ù_hdr
*)
p
->
∑ylﬂd
;

491 i‡((
	`IPH_HL
(
‰aghdr
Ë* 4Ë!
IP_HLEN
) {

492 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ip_reass: IP options currentlyÇot supported!\n"));

493 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
îr
);

494 
nuŒªtu∫
;

497 
off£t
 = (
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_OFFMASK
) * 8;

498 
Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
‰aghdr
)Ë- 
	`IPH_HL
(fraghdr) * 4;

501 
˛í
 = 
	`pbuf_˛í
(
p
);

502 i‡((
ù_ªass_pbufcou¡
 + 
˛í
Ë> 
IP_REASS_MAX_PBUFS
) {

503 #i‡
IP_REASS_FREE_OLDEST


504 i‡(!
	`ù_ªass_ªmove_ﬁde°_d©agøm
(
‰aghdr
, 
˛í
) ||

505 ((
ù_ªass_pbufcou¡
 + 
˛í
Ë> 
IP_REASS_MAX_PBUFS
))

509 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ip_reass: Overflow condition:Öbufct=%d, clen=%d, MAX=%d\n",

510 
ù_ªass_pbufcou¡
, 
˛í
, 
IP_REASS_MAX_PBUFS
));

511 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
memîr
);

514 
nuŒªtu∫
;

520 
ùr
 = 
ªassd©agøms
; i¥ !
NULL
; i¥ = i¥->
√xt
) {

524 i‡(
	`IP_ADDRESSES_AND_ID_MATCH
(&
ùr
->
ùhdr
, 
‰aghdr
)) {

525 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ù_ªass: m©chögÖªviou†‰agmíàID=%"
X16_F
"\n",

526 
	`¡ohs
(
	`IPH_ID
(
‰aghdr
))));

527 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
ˇchehô
);

530 
ùr_¥ev
 = 
ùr
;

533 i‡(
ùr
 =
NULL
) {

535 
ùr
 = 
	`ù_ªass_íqueue_√w_d©agøm
(
‰aghdr
, 
˛í
);

537 if(
ùr
 =
NULL
) {

538 
nuŒªtu∫
;

541 i‡(((
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_OFFMASK
) == 0) &&

542 ((
	`¡ohs
(
	`IPH_OFFSET
(&
ùr
->
ùhdr
)Ë& 
IP_OFFMASK
) != 0)) {

547 
	`SMEMCPY
(&
ùr
->
ùhdr
, 
‰aghdr
, 
IP_HLEN
);

552 
ù_ªass_pbufcou¡
 +
˛í
;

558 i‡((
	`IPH_OFFSET
(
‰aghdr
Ë& 
	`PP_NTOHS
(
IP_MF
)) == 0) {

559 
ùr
->
Êags
 |
IP_REASS_FLAG_LASTFRAG
;

560 
ùr
->
d©agøm_Àn
 = 
off£t
 + 
Àn
;

561 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,

562 ("ù_ªass:Üa° føgmíà£í,ÅŸÆÜí %"
S16_F
"\n",

563 
ùr
->
d©agøm_Àn
));

567 i‡(
	`ù_ªass_chaö_‰ag_öto_d©agøm_™d_vÆid©e
(
ùr
, 
p
)) {

570 
ùr
->
d©agøm_Àn
 +
IP_HLEN
;

573 
r
 = ((
ù_ªass_hñ≥r
*)
ùr
->
p
->
∑ylﬂd
)->
√xt_pbuf
;

576 
‰aghdr
 = (
ù_hdr
*)(
ùr
->
p
->
∑ylﬂd
);

577 
	`SMEMCPY
(
‰aghdr
, &
ùr
->
ùhdr
, 
IP_HLEN
);

578 
	`IPH_LEN_SET
(
‰aghdr
, 
	`ht⁄s
(
ùr
->
d©agøm_Àn
));

579 
	`IPH_OFFSET_SET
(
‰aghdr
, 0);

580 
	`IPH_CHKSUM_SET
(
‰aghdr
, 0);

582 
	`IPH_CHKSUM_SET
(
‰aghdr
, 
	`öë_chksum
(‰aghdr, 
IP_HLEN
));

584 
p
 = 
ùr
->p;

587 
r
 !
NULL
) {

588 
ùrh
 = (
ù_ªass_hñ≥r
*)
r
->
∑ylﬂd
;

591 
	`pbuf_hódî
(
r
, -
IP_HLEN
);

592 
	`pbuf_ˇt
(
p
, 
r
);

593 
r
 = 
ùrh
->
√xt_pbuf
;

596 
	`ù_ªass_dequeue_d©agøm
(
ùr
, 
ùr_¥ev
);

599 
ù_ªass_pbufcou¡
 -
	`pbuf_˛í
(
p
);

602  
p
;

605 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ù_ªass_pbufcou¡: %d out\n", 
ù_ªass_pbufcou¡
));

606  
NULL
;

608 
nuŒªtu∫
:

609 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ip_reass:Çullreturn\n"));

610 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
dr›
);

611 
	`pbuf_‰ì
(
p
, 
NULL
);

612  
NULL
;

613 
	}
}

616 #i‡
IP_FRAG


617 #i‡
IP_FRAG_USES_STATIC_BUF


618 
u8_t
 
	gbuf
[
LWIP_MEM_ALIGN_SIZE
(
IP_FRAG_MAX_MTU
 + 
MEM_ALIGNMENT
 - 1)];

621 #i‡!
LWIP_NETIF_TX_SINGLE_PBUF


623 
pbuf_cu°om_ªf
*

624 
	$ù_‰ag_Æloc_pbuf_cu°om_ªf
()

626  (
pbuf_cu°om_ªf
*)
	`memp_mÆloc
(
MEMP_FRAG_PBUF
, 
NULL
);

627 
	}
}

631 
	$ù_‰ag_‰ì_pbuf_cu°om_ªf
(
pbuf_cu°om_ªf
* 
p
)

633 
	`LWIP_ASSERT
("∞!NULL", 
p
 !
NULL
);

634 
	`memp_‰ì
(
MEMP_FRAG_PBUF
, 
p
, 
NULL
);

635 
	}
}

640 
	$ù‰ag_‰ì_pbuf_cu°om
(
pbuf
 *
p
)

642 
pbuf_cu°om_ªf
 *
p¸
 = (pbuf_cu°om_ªf*)
p
;

643 
	`LWIP_ASSERT
("p¸ !NULL", 
p¸
 !
NULL
);

644 
	`LWIP_ASSERT
("p¸ =p", (*)
p¸
 =(*)
p
);

645 i‡(
p¸
->
‹igöÆ
 !
NULL
) {

646 
	`pbuf_‰ì
(
p¸
->
‹igöÆ
, 
NULL
);

648 
	`ù_‰ag_‰ì_pbuf_cu°om_ªf
(
p¸
);

649 
	}
}

666 
îr_t


667 
	$ù_‰ag
(
pbuf
 *
p
, 
√tif
 *√tif, 
ù_addr_t
 *
de°
)

669 
pbuf
 *
ømbuf
;

670 #i‡
IP_FRAG_USES_STATIC_BUF


671 
pbuf
 *
hódî
;

673 #i‡!
LWIP_NETIF_TX_SINGLE_PBUF


674 
pbuf
 *
√wpbuf
;

676 
ù_hdr
 *
‹igöÆ_ùhdr
;

678 
ù_hdr
 *
ùhdr
;

679 
u16_t
 
nfb
;

680 
u16_t
 
À·
, 
c›
;

681 
u16_t
 
mtu
 = 
√tif
->mtu;

682 
u16_t
 
ofo
, 
omf
;

683 
u16_t
 
œ°
;

684 
u16_t
 
poff
 = 
IP_HLEN
;

685 
u16_t
 
tmp
;

686 #i‡!
IP_FRAG_USES_STATIC_BUF
 && !
LWIP_NETIF_TX_SINGLE_PBUF


687 
u16_t
 
√wpbuÊí
 = 0;

688 
u16_t
 
À·_to_c›y
;

692 #i‡
IP_FRAG_USES_STATIC_BUF


697 
ømbuf
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 0, 
PBUF_REF
, 
NULL
);

698 i‡(
ømbuf
 =
NULL
) {

699 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ip_frag:Öbuf_alloc(PBUF_LINK, 0, PBUF_REF) failed\n"));

700  
ERR_MEM
;

702 
ømbuf
->
tŸ_Àn
 =Ñambuf->
Àn
 = 
mtu
;

703 
ømbuf
->
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)
buf
);

706 
ùhdr
 = (
ù_hdr
 *)
ømbuf
->
∑ylﬂd
;

707 
	`SMEMCPY
(
ùhdr
, 
p
->
∑ylﬂd
, 
IP_HLEN
);

709 
‹igöÆ_ùhdr
 = (
ù_hdr
 *)
p
->
∑ylﬂd
;

710 
ùhdr
 = 
‹igöÆ_ùhdr
;

714 
tmp
 = 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
));

715 
ofo
 = 
tmp
 & 
IP_OFFMASK
;

716 
omf
 = 
tmp
 & 
IP_MF
;

718 
À·
 = 
p
->
tŸ_Àn
 - 
IP_HLEN
;

720 
nfb
 = (
mtu
 - 
IP_HLEN
) / 8;

722 
À·
) {

723 
œ°
 = (
À·
 <
mtu
 - 
IP_HLEN
);

726 
tmp
 = 
omf
 | (
IP_OFFMASK
 & (
ofo
));

727 i‡(!
œ°
) {

728 
tmp
 =Åm∞| 
IP_MF
;

732 
c›
 = 
œ°
 ? 
À·
 : 
nfb
 * 8;

734 #i‡
IP_FRAG_USES_STATIC_BUF


735 
poff
 +
	`pbuf_c›y_∑πül
(
p
, (
u8_t
*)
ùhdr
 + 
IP_HLEN
, 
c›
,Öoff);

737 #i‡
LWIP_NETIF_TX_SINGLE_PBUF


738 
ømbuf
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
c›
, 
PBUF_RAM
, 
NULL
);

739 i‡(
ømbuf
 =
NULL
) {

740  
ERR_MEM
;

742 
	`LWIP_ASSERT
("thisÇeedsáÖbuf in oneÖiece!",

743 (
ømbuf
->
Àn
 =ømbuf->
tŸ_Àn
Ë&& (ømbuf->
√xt
 =
NULL
));

744 
poff
 +
	`pbuf_c›y_∑πül
(
p
, 
ømbuf
->
∑ylﬂd
, 
c›
,Öoff);

746 if(
	`pbuf_hódî
(
ømbuf
, 
IP_HLEN
)) {

747 
	`pbuf_‰ì
(
ømbuf
, 
NULL
);

748  
ERR_MEM
;

751 
	`SMEMCPY
(
ømbuf
->
∑ylﬂd
, 
‹igöÆ_ùhdr
, 
IP_HLEN
);

752 
ùhdr
 = 
ømbuf
->
∑ylﬂd
;

759 
ømbuf
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
IP_HLEN
, 
PBUF_RAM
, 
NULL
);

760 i‡(
ømbuf
 =
NULL
) {

761  
ERR_MEM
;

763 
	`LWIP_ASSERT
("thisÇeedsáÖbuf in oneÖiece!",

764 (
p
->
Àn
 >(
IP_HLEN
)));

765 
	`SMEMCPY
(
ømbuf
->
∑ylﬂd
, 
‹igöÆ_ùhdr
, 
IP_HLEN
);

766 
ùhdr
 = (
ù_hdr
 *)
ømbuf
->
∑ylﬂd
;

769 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd + 
poff
;

770 
p
->
Àn
 -
poff
;

772 
À·_to_c›y
 = 
c›
;

773 
À·_to_c›y
) {

774 
pbuf_cu°om_ªf
 *
p¸
;

775 
√wpbuÊí
 = (
À·_to_c›y
 < 
p
->
Àn
) ?Üeft_to_copy :Ö->len;

777 i‡(!
√wpbuÊí
) {

778 
p
 =Ö->
√xt
;

781 
p¸
 = 
	`ù_‰ag_Æloc_pbuf_cu°om_ªf
();

782 i‡(
p¸
 =
NULL
) {

783 
	`pbuf_‰ì
(
ømbuf
, 
NULL
);

784  
ERR_MEM
;

787 
√wpbuf
 = 
	`pbuf_Ælo˚d_cu°om
(
PBUF_RAW
, 
√wpbuÊí
, 
PBUF_REF
, &
p¸
->
pc
, 
p
->
∑ylﬂd
,Çewpbuflen);

788 i‡(
√wpbuf
 =
NULL
) {

789 
	`ù_‰ag_‰ì_pbuf_cu°om_ªf
(
p¸
);

790 
	`pbuf_‰ì
(
ømbuf
, 
NULL
);

791  
ERR_MEM
;

793 
	`pbuf_ªf
(
p
);

794 
p¸
->
‹igöÆ
 = 
p
;

795 
p¸
->
pc
.
cu°om_‰ì_fun˘i⁄
 = 
ù‰ag_‰ì_pbuf_cu°om
;

800 
	`pbuf_ˇt
(
ømbuf
, 
√wpbuf
);

801 
À·_to_c›y
 -
√wpbuÊí
;

802 i‡(
À·_to_c›y
) {

803 
p
 =Ö->
√xt
;

806 
poff
 = 
√wpbuÊí
;

811 
	`IPH_OFFSET_SET
(
ùhdr
, 
	`ht⁄s
(
tmp
));

812 
	`IPH_LEN_SET
(
ùhdr
, 
	`ht⁄s
(
c›
 + 
IP_HLEN
));

813 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

814 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
IP_HLEN
));

816 #i‡
IP_FRAG_USES_STATIC_BUF


817 i‡(
œ°
) {

818 
	`pbuf_ªÆloc
(
ømbuf
, 
À·
 + 
IP_HLEN
);

826 
hódî
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 0, 
PBUF_RAM
, 
NULL
);

827 i‡(
hódî
 !
NULL
) {

828 
	`pbuf_chaö
(
hódî
, 
ømbuf
);

829 
√tif
->
	`ouçut
“ëif, 
hódî
, 
de°
);

830 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
xmô
);

831 
	`¢mp_öc_ù‰ag¸óãs
();

832 
	`pbuf_‰ì
(
hódî
, 
NULL
);

834 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ip_frag:Öbuf_alloc() for header failed\n"));

835 
	`pbuf_‰ì
(
ømbuf
, 
NULL
);

836  
ERR_MEM
;

842 
√tif
->
	`ouçut
“ëif, 
ømbuf
, 
de°
);

843 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
xmô
);

852 
	`pbuf_‰ì
(
ømbuf
, 
NULL
);

854 
À·
 -
c›
;

855 
ofo
 +
nfb
;

857 #i‡
IP_FRAG_USES_STATIC_BUF


858 
	`pbuf_‰ì
(
ømbuf
, 
NULL
);

860 
	`¢mp_öc_ù‰agoks
();

861  
ERR_OK
;

862 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/mem.c

56 
	~"lwù/›t.h
"

58 #i‡!
MEM_LIBC_MALLOC


60 
	~"lwù/def.h
"

61 
	~"lwù/mem.h
"

62 
	~"lwù/sys.h
"

63 
	~"lwù/°©s.h
"

64 
	~"lwù/îr.h
"

66 
	~<°rög.h
>

68 #i‡
MEM_USE_POOLS


79 
	$mem_mÆloc
(
mem_size_t
 
size
)

81 
memp_mÆloc_hñ≥r
 *
ñemít
;

82 
memp_t
 
poﬁƒ
;

83 
mem_size_t
 
ªquúed_size
 = 
size
 + (
memp_mÆloc_hñ≥r
);

85 
poﬁƒ
 = 
MEMP_POOL_FIRST
;Öoﬁƒ <
MEMP_POOL_LAST
;Öoﬁƒ = (
memp_t
)(poolnr + 1)) {

86 #i‡
MEM_USE_POOLS_TRY_BIGGER_POOL


87 
agaö
:

91 i‡(
ªquúed_size
 <
memp_sizes
[
poﬁƒ
]) {

95 i‡(
poﬁƒ
 > 
MEMP_POOL_LAST
) {

96 
	`LWIP_ASSERT
("mem_malloc():ÇoÖool isÅhat big!", 0);

97  
NULL
;

99 
ñemít
 = (
memp_mÆloc_hñ≥r
*)
	`memp_mÆloc
(
poﬁƒ
, 
NULL
);

100 i‡(
ñemít
 =
NULL
) {

103 #i‡
MEM_USE_POOLS_TRY_BIGGER_POOL


105 i‡(
poﬁƒ
 < 
MEMP_POOL_LAST
) {

106 
poﬁƒ
++;

107 
agaö
;

110  
NULL
;

114 
ñemít
->
poﬁƒ
 =Öoolnr;

116 
ñemít
++;

118  
ñemít
;

119 
	}
}

129 
	$mem_‰ì
(*
rmem
)

131 
memp_mÆloc_hñ≥r
 *
hmem
 = (memp_mÆloc_hñ≥r*)
rmem
;

133 
	`LWIP_ASSERT
("rmem !NULL", (
rmem
 !
NULL
));

134 
	`LWIP_ASSERT
("rmem =MEM_ALIGN‘mem)", (
rmem
 =
	`LWIP_MEM_ALIGN
(rmem)));

137 
hmem
--;

139 
	`LWIP_ASSERT
("hmem !NULL", (
hmem
 !
NULL
));

140 
	`LWIP_ASSERT
("hmem =MEM_ALIGN(hmem)", (
hmem
 =
	`LWIP_MEM_ALIGN
(hmem)));

141 
	`LWIP_ASSERT
("hmem->poﬁƒ < MEMP_MAX", (
hmem
->
poﬁƒ
 < 
MEMP_MAX
));

144 
	`memp_‰ì
(
hmem
->
poﬁƒ
, hmem, 
NULL
);

145 
	}
}

155 
	smem
 {

157 
mem_size_t
 
	m√xt
;

159 
mem_size_t
 
	m¥ev
;

161 
u8_t
 
	mu£d
;

167 #i‚de‡
MIN_SIZE


168 
	#MIN_SIZE
 12

	)

171 
	#MIN_SIZE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MIN_SIZE
)

	)

172 
	#SIZEOF_STRUCT_MEM
 
	`LWIP_MEM_ALIGN_SIZE
((
mem
))

	)

173 
	#MEM_SIZE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEM_SIZE
)

	)

179 #i‚de‡
LWIP_RAM_HEAP_POINTER


181 
u8_t
 
	gøm_hóp
[
MEM_SIZE_ALIGNED
 + (2*
SIZEOF_STRUCT_MEM
Ë+ 
MEM_ALIGNMENT
];

182 
	#LWIP_RAM_HEAP_POINTER
 
øm_hóp


	)

186 
u8_t
 *
	gøm
;

188 
mem
 *
	gøm_íd
;

190 
mem
 *
	gl‰ì
;

193 
sys_muãx_t
 
	gmem_muãx
;

195 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


197 vﬁ©ûê
u8_t
 
	gmem_‰ì_cou¡
;

200 
	#LWIP_MEM_FREE_DECL_PROTECT
(Ë
	`SYS_ARCH_DECL_PROTECT
(
Àv_‰ì
)

	)

201 
	#LWIP_MEM_FREE_PROTECT
(Ë
	`SYS_ARCH_PROTECT
(
Àv_‰ì
)

	)

202 
	#LWIP_MEM_FREE_UNPROTECT
(Ë
	`SYS_ARCH_UNPROTECT
(
Àv_‰ì
)

	)

203 
	#LWIP_MEM_ALLOC_DECL_PROTECT
(Ë
	`SYS_ARCH_DECL_PROTECT
(
Àv_Æloc
)

	)

204 
	#LWIP_MEM_ALLOC_PROTECT
(Ë
	`SYS_ARCH_PROTECT
(
Àv_Æloc
)

	)

205 
	#LWIP_MEM_ALLOC_UNPROTECT
(Ë
	`SYS_ARCH_UNPROTECT
(
Àv_Æloc
)

	)

210 
	#LWIP_MEM_FREE_DECL_PROTECT
()

	)

211 
	#LWIP_MEM_FREE_PROTECT
(Ë
	`sys_muãx_lock
(&
mem_muãx
)

	)

212 
	#LWIP_MEM_FREE_UNPROTECT
(Ë
	`sys_muãx_u∆ock
(&
mem_muãx
)

	)

214 
	#LWIP_MEM_ALLOC_DECL_PROTECT
()

	)

215 
	#LWIP_MEM_ALLOC_PROTECT
()

	)

216 
	#LWIP_MEM_ALLOC_UNPROTECT
()

	)

233 
	$∂ug_hﬁes
(
mem
 *mem)

235 
mem
 *
nmem
;

236 
mem
 *
pmem
;

238 
	`LWIP_ASSERT
("∂ug_hﬁes: mem >øm", (
u8_t
 *)
mem
 >
øm
);

239 
	`LWIP_ASSERT
("∂ug_hﬁes: mem <Ñam_íd", (
u8_t
 *)
mem
 < (u8_à*)
øm_íd
);

240 
	`LWIP_ASSERT
("∂ug_hﬁes: mem->u£d =0", 
mem
->
u£d
 == 0);

243 
	`LWIP_ASSERT
("∂ug_hﬁes: mem->√xà<MEM_SIZE_ALIGNED", 
mem
->
√xt
 <
MEM_SIZE_ALIGNED
);

245 
nmem
 = (
mem
 *)(*)&
øm
[mem->
√xt
];

246 i‡(
mem
 !
nmem
 &&Çmem->
u£d
 =0 && (
u8_t
 *Ímem !(u8_à*)
øm_íd
) {

248 i‡(
l‰ì
 =
nmem
) {

249 
l‰ì
 = 
mem
;

251 
mem
->
√xt
 = 
nmem
->next;

252 ((
mem
 *)(*)&
øm
[
nmem
->
√xt
])->
¥ev
 = (
mem_size_t
)((
u8_t
 *)mem -Ñam);

256 
pmem
 = (
mem
 *)(*)&
øm
[mem->
¥ev
];

257 i‡(
pmem
 !
mem
 &&Ömem->
u£d
 == 0) {

259 i‡(
l‰ì
 =
mem
) {

260 
l‰ì
 = 
pmem
;

262 
pmem
->
√xt
 = 
mem
->next;

263 ((
mem
 *)(*)&
øm
[mem->
√xt
])->
¥ev
 = (
mem_size_t
)((
u8_t
 *)
pmem
 -Ñam);

265 
	}
}

274 
	$mem_‰ì
(*
rmem
)

276 
mem
 *mem;

277 
	`LWIP_MEM_FREE_DECL_PROTECT
();

279 i‡(
rmem
 =
NULL
) {

280 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("mem_free(p == NULL) was called.\n"));

283 
	`LWIP_ASSERT
("mem_‰ì: s™ôy checkálignmít", (((
mem_±r_t
)
rmem
Ë& (
MEM_ALIGNMENT
-1)) == 0);

285 
	`LWIP_ASSERT
("mem_‰ì:ÜegÆ mem‹y", (
u8_t
 *)
rmem
 >(u8_à*)
øm
 &&

286 (
u8_t
 *)
rmem
 < (u8_à*)
øm_íd
);

288 i‡((
u8_t
 *)
rmem
 < (u8_à*)
øm
 || (u8_à*Ïmem >(u8_à*)
øm_íd
) {

289 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

290 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 
LWIP_DBG_LEVEL_SEVERE
, ("mem_free: illegal memory\n"));

292 
	`SYS_ARCH_PROTECT
(
Àv
);

293 
	`MEM_STATS_INC
(
ûÀgÆ
);

294 
	`SYS_ARCH_UNPROTECT
(
Àv
);

298 
	`LWIP_MEM_FREE_PROTECT
();

300 
mem
 = (mem *)(*)((
u8_t
 *)
rmem
 - 
SIZEOF_STRUCT_MEM
);

302 
	`LWIP_ASSERT
("mem_‰ì: mem->u£d", 
mem
->
u£d
);

304 
mem
->
u£d
 = 0;

306 i‡(
mem
 < 
l‰ì
) {

308 
l‰ì
 = 
mem
;

311 
	`MEM_STATS_DEC_USED
(
u£d
, 
mem
->
√xt
 - (
mem_size_t
)(((
u8_t
 *)mem - 
øm
)));

314 
	`∂ug_hﬁes
(
mem
);

315 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


316 
mem_‰ì_cou¡
 = 1;

318 
	`LWIP_MEM_FREE_UNPROTECT
();

319 
	}
}

332 
	$mem_åim
(*
rmem
, 
mem_size_t
 
√wsize
)

334 
mem_size_t
 
size
;

335 
mem_size_t
 
±r
, 
±r2
;

336 
mem
 *mem, *
mem2
;

338 
	`LWIP_MEM_FREE_DECL_PROTECT
();

342 
√wsize
 = 
	`LWIP_MEM_ALIGN_SIZE
(newsize);

344 if(
√wsize
 < 
MIN_SIZE_ALIGNED
) {

346 
√wsize
 = 
MIN_SIZE_ALIGNED
;

349 i‡(
√wsize
 > 
MEM_SIZE_ALIGNED
) {

350  
NULL
;

353 
	`LWIP_ASSERT
("mem_åim:ÜegÆ mem‹y", (
u8_t
 *)
rmem
 >(u8_à*)
øm
 &&

354 (
u8_t
 *)
rmem
 < (u8_à*)
øm_íd
);

356 i‡((
u8_t
 *)
rmem
 < (u8_à*)
øm
 || (u8_à*Ïmem >(u8_à*)
øm_íd
) {

357 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

358 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 
LWIP_DBG_LEVEL_SEVERE
, ("mem_trim: illegal memory\n"));

360 
	`SYS_ARCH_PROTECT
(
Àv
);

361 
	`MEM_STATS_INC
(
ûÀgÆ
);

362 
	`SYS_ARCH_UNPROTECT
(
Àv
);

363  
rmem
;

366 
mem
 = (mem *)(*)((
u8_t
 *)
rmem
 - 
SIZEOF_STRUCT_MEM
);

368 
±r
 = (
mem_size_t
)((
u8_t
 *)
mem
 - 
øm
);

370 
size
 = 
mem
->
√xt
 - 
±r
 - 
SIZEOF_STRUCT_MEM
;

371 
	`LWIP_ASSERT
("mem_åim c™ o∆y shrök mem‹y", 
√wsize
 <
size
);

372 i‡(
√wsize
 > 
size
) {

374  
NULL
;

376 i‡(
√wsize
 =
size
) {

378  
rmem
;

382 
	`LWIP_MEM_FREE_PROTECT
();

384 
mem2
 = (
mem
 *)(*)&
øm
[mem->
√xt
];

385 if(
mem2
->
u£d
 == 0) {

387 
mem_size_t
 
√xt
;

389 
√xt
 = 
mem2
->next;

391 
±r2
 = 
±r
 + 
SIZEOF_STRUCT_MEM
 + 
√wsize
;

392 i‡(
l‰ì
 =
mem2
) {

393 
l‰ì
 = (
mem
 *)(*)&
øm
[
±r2
];

395 
mem2
 = (
mem
 *)(*)&
øm
[
±r2
];

396 
mem2
->
u£d
 = 0;

398 
mem2
->
√xt
 =Çext;

400 
mem2
->
¥ev
 = 
±r
;

402 
mem
->
√xt
 = 
±r2
;

406 i‡(
mem2
->
√xt
 !
MEM_SIZE_ALIGNED
) {

407 ((
mem
 *)(*)&
øm
[
mem2
->
√xt
])->
¥ev
 = 
±r2
;

409 
	`MEM_STATS_DEC_USED
(
u£d
, (
size
 - 
√wsize
));

411 } i‡(
√wsize
 + 
SIZEOF_STRUCT_MEM
 + 
MIN_SIZE_ALIGNED
 <
size
) {

419 
±r2
 = 
±r
 + 
SIZEOF_STRUCT_MEM
 + 
√wsize
;

420 
mem2
 = (
mem
 *)(*)&
øm
[
±r2
];

421 i‡(
mem2
 < 
l‰ì
) {

422 
l‰ì
 = 
mem2
;

424 
mem2
->
u£d
 = 0;

425 
mem2
->
√xt
 = 
mem
->next;

426 
mem2
->
¥ev
 = 
±r
;

427 
mem
->
√xt
 = 
±r2
;

428 i‡(
mem2
->
√xt
 !
MEM_SIZE_ALIGNED
) {

429 ((
mem
 *)(*)&
øm
[
mem2
->
√xt
])->
¥ev
 = 
±r2
;

431 
	`MEM_STATS_DEC_USED
(
u£d
, (
size
 - 
√wsize
));

440 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


441 
mem_‰ì_cou¡
 = 1;

443 
	`LWIP_MEM_FREE_UNPROTECT
();

444  
rmem
;

445 
	}
}

457 
	$mem_mÆloc
(
mem_size_t
 
size
)

459 
mem_size_t
 
±r
, 
±r2
;

460 
mem
 *mem, *
mem2
;

461 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


462 
u8_t
 
loˇl_mem_‰ì_cou¡
 = 0;

464 
	`LWIP_MEM_ALLOC_DECL_PROTECT
();

466 i‡(
size
 == 0) {

467  
NULL
;

472 
size
 = 
	`LWIP_MEM_ALIGN_SIZE
(size);

474 if(
size
 < 
MIN_SIZE_ALIGNED
) {

476 
size
 = 
MIN_SIZE_ALIGNED
;

479 i‡(
size
 > 
MEM_SIZE_ALIGNED
) {

480  
NULL
;

484 
	`sys_muãx_lock
(&
mem_muãx
);

485 
	`LWIP_MEM_ALLOC_PROTECT
();

486 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


489 
loˇl_mem_‰ì_cou¡
 = 0;

495 
±r
 = (
mem_size_t
)((
u8_t
 *)
l‰ì
 - 
øm
);Öå < 
MEM_SIZE_ALIGNED
 - 
size
;

496 
±r
 = ((
mem
 *)(*)&
øm
[±r])->
√xt
) {

497 
mem
 = (mem *)(*)&
øm
[
±r
];

498 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


499 
mem_‰ì_cou¡
 = 0;

500 
	`LWIP_MEM_ALLOC_UNPROTECT
();

502 
	`LWIP_MEM_ALLOC_PROTECT
();

503 i‡(
mem_‰ì_cou¡
 != 0) {

504 
loˇl_mem_‰ì_cou¡
 = 
mem_‰ì_cou¡
;

506 
mem_‰ì_cou¡
 = 0;

509 i‡((!
mem
->
u£d
) &&

510 (
mem
->
√xt
 - (
±r
 + 
SIZEOF_STRUCT_MEM
)Ë>
size
) {

514 i‡(
mem
->
√xt
 - (
±r
 + 
SIZEOF_STRUCT_MEM
Ë>(
size
 + SIZEOF_STRUCT_MEM + 
MIN_SIZE_ALIGNED
)) {

525 
±r2
 = 
±r
 + 
SIZEOF_STRUCT_MEM
 + 
size
;

527 
mem2
 = (
mem
 *)(*)&
øm
[
±r2
];

528 
mem2
->
u£d
 = 0;

529 
mem2
->
√xt
 = 
mem
->next;

530 
mem2
->
¥ev
 = 
±r
;

532 
mem
->
√xt
 = 
±r2
;

533 
mem
->
u£d
 = 1;

535 i‡(
mem2
->
√xt
 !
MEM_SIZE_ALIGNED
) {

536 ((
mem
 *)(*)&
øm
[
mem2
->
√xt
])->
¥ev
 = 
±r2
;

538 
	`MEM_STATS_INC_USED
(
u£d
, (
size
 + 
SIZEOF_STRUCT_MEM
));

547 
mem
->
u£d
 = 1;

548 
	`MEM_STATS_INC_USED
(
u£d
, 
mem
->
√xt
 - (
mem_size_t
)((
u8_t
 *)mem - 
øm
));

551 i‡(
mem
 =
l‰ì
) {

553 
l‰ì
->
u£d
 &&Ü‰ì !
øm_íd
) {

554 
	`LWIP_MEM_ALLOC_UNPROTECT
();

556 
	`LWIP_MEM_ALLOC_PROTECT
();

557 
l‰ì
 = (
mem
 *)(*)&
øm
[l‰ì->
√xt
];

559 
	`LWIP_ASSERT
("mem_mÆloc: !l‰ì->u£d", ((
l‰ì
 =
øm_íd
Ë|| (!l‰ì->
u£d
)));

561 
	`LWIP_MEM_ALLOC_UNPROTECT
();

562 
	`sys_muãx_u∆ock
(&
mem_muãx
);

563 
	`LWIP_ASSERT
("mem_malloc:állocated memoryÇotáboveÑam_end.",

564 (
mem_±r_t
)
mem
 + 
SIZEOF_STRUCT_MEM
 + 
size
 <(mem_±r_t)
øm_íd
);

565 
	`LWIP_ASSERT
("mem_malloc:állocated memoryÖroperlyáligned.",

566 ((
mem_±r_t
)
mem
 + 
SIZEOF_STRUCT_MEM
Ë% 
MEM_ALIGNMENT
 == 0);

567 
	`LWIP_ASSERT
("mem_malloc: sanity checkálignment",

568 (((
mem_±r_t
)
mem
Ë& (
MEM_ALIGNMENT
-1)) == 0);

570  (
u8_t
 *)
mem
 + 
SIZEOF_STRUCT_MEM
;

573 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


575 } 
loˇl_mem_‰ì_cou¡
 != 0);

577 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("mem_mÆloc: couldÇŸáŒoˇã %"
S16_F
" byãs\n", (
s16_t
)
size
));

578 
	`MEM_STATS_INC
(
îr
);

579 
	`LWIP_MEM_ALLOC_UNPROTECT
();

580 
	`sys_muãx_u∆ock
(&
mem_muãx
);

581  
NULL
;

582 
	}
}

595 *
	$mem_ˇŒoc
(
mem_size_t
 
cou¡
, mem_size_à
size
)

597 *
p
;

600 
p
 = 
	`mem_mÆloc
(
cou¡
 * 
size
);

601 i‡(
p
) {

603 
	`mem£t
(
p
, 0, 
cou¡
 * 
size
);

605  
p
;

606 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/memp.c

41 
	~"lwù/›t.h
"

43 
	~"lwù/memp.h
"

44 
	~"lwù/pbuf.h
"

45 
	~"lwù/t˝_im∂.h
"

46 
	~"lwù/igmp.h
"

47 
	~"lwù/≠i.h
"

48 
	~"lwù/≠i_msg.h
"

49 
	~"lwù/t˝ù.h
"

50 
	~"lwù/sys.h
"

51 
	~"lwù/timîs.h
"

52 
	~"lwù/°©s.h
"

53 
	~"√tif/ëh¨p.h
"

54 
	~"lwù/ù_‰ag.h
"

55 
	~"lwù/¢mp_°ru˘s.h
"

56 
	~"lwù/¢mp_msg.h
"

58 
	~<°rög.h
>

59 
	~<±hªad.h
>

60 
	~<sys/mm™.h
>

62 #i‡!
MEMP_MEM_MALLOC


64 #i‡
MEMP_OVERFLOW_CHECK


73 #i‚de‡
MEMP_SANITY_REGION_BEFORE


74 
	#MEMP_SANITY_REGION_BEFORE
 16

	)

76 #i‡
MEMP_SANITY_REGION_BEFORE
 > 0

77 
	#MEMP_SANITY_REGION_BEFORE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEMP_SANITY_REGION_BEFORE
)

	)

79 
	#MEMP_SANITY_REGION_BEFORE_ALIGNED
 0

	)

81 #i‚de‡
MEMP_SANITY_REGION_AFTER


82 
	#MEMP_SANITY_REGION_AFTER
 16

	)

84 #i‡
MEMP_SANITY_REGION_AFTER
 > 0

85 
	#MEMP_SANITY_REGION_AFTER_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEMP_SANITY_REGION_AFTER
)

	)

87 
	#MEMP_SANITY_REGION_AFTER_ALIGNED
 0

	)

91 
	#MEMP_SIZE
 (
	`LWIP_MEM_ALIGN_SIZE
((
memp
)Ë+ 
MEMP_SANITY_REGION_BEFORE_ALIGNED
)

	)

92 
	#MEMP_ALIGN_SIZE
(
x
Ë(
	`LWIP_MEM_ALIGN_SIZE
(xË+ 
MEMP_SANITY_REGION_AFTER_ALIGNED
)

	)

100 
	#MEMP_SIZE
 0

	)

101 
	#MEMP_ALIGN_SIZE
(
x
Ë(
	`LWIP_MEM_ALIGN_SIZE
(x))

	)

107 
memp
 *
	gmemp_èb
[
MEMP_MAX
];

111 
	#MEMP_ALIGN_SIZE
(
x
Ë(
	`LWIP_MEM_ALIGN_SIZE
(x))

	)

116 #i‡!
MEM_USE_POOLS
 && !
MEMP_MEM_MALLOC


119 c⁄° 
u16_t
 
	gmemp_sizes
[
MEMP_MAX
] = {

120 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë
	`LWIP_MEM_ALIGN_SIZE
(size),

	)

121 
	~"lwù/memp_°d.h
"

124 #i‡!
MEMP_MEM_MALLOC


127 c⁄° 
u32_t
 
	gmemp_num
[
MEMP_MAX
] = {

128 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë“um),

	)

129 
	~"lwù/memp_°d.h
"

133 #ifde‡
LWIP_DEBUG


134 c⁄° *
	gmemp_desc
[
MEMP_MAX
] = {

135 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë(desc),

	)

136 
	~"lwù/memp_°d.h
"

140 #i‡
MEMP_SEPARATE_POOLS


147 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë
u8_t
 
memp_mem‹y_
 ##Çamê## 
_ba£
 \

148 [((
num
Ë* (
MEMP_SIZE
 + 
	`MEMP_ALIGN_SIZE
(
size
)))];

	)

149 
	~"lwù/memp_°d.h
"

152 
u8_t
 *c⁄° 
	gmemp_ba£s
[] = {

153 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë
memp_mem‹y_
 ##Çamê## 
_ba£
,

	)

154 
	~"lwù/memp_°d.h
"

160 
u8_t
 
	gmemp_mem‹y
[
MEM_ALIGNMENT
 - 1

161 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë+ ( (numË* (
MEMP_SIZE
 + 
	`MEMP_ALIGN_SIZE
(sizeËË)

	)

162 
	~"lwù/memp_°d.h
"

167 #i‡
MEMP_SANITY_CHECK


172 
	$memp_ßnôy
()

174 
s16_t
 
i
, 
c
;

175 
memp
 *
m
, *
n
;

177 
i
 = 0; i < 
MEMP_MAX
; i++) {

178 
m
 = 
memp_èb
[
i
]; m !
NULL
; m = m->
√xt
) {

179 
c
 = 1;

180 
n
 = 
memp_èb
[
i
];Ç !
NULL
;Ç =Ç->
√xt
) {

181 i‡(
n
 =
m
 && --
c
 < 0) {

188 
	}
}

190 #i‡
MEMP_OVERFLOW_CHECK


191 #i‡
deföed
(
LWIP_DEBUG
Ë&& 
MEMP_STATS


192 c⁄° * 
	gmemp_ovîÊow_«mes
[] = {

193 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë"/"desc,

	)

194 
	~"lwù/memp_°d.h
"

206 
	$memp_ovîÊow_check_ñemít_ovîÊow
(
memp
 *
p
, 
u16_t
 
memp_ty≥
)

208 
u16_t
 
k
;

209 
u8_t
 *
m
;

210 #i‡
MEMP_SANITY_REGION_AFTER_ALIGNED
 > 0

211 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 + 
memp_sizes
[
memp_ty≥
];

212 
k
 = 0; k < 
MEMP_SANITY_REGION_AFTER_ALIGNED
; k++) {

213 i‡(
m
[
k
] != 0xcd) {

214 
îr°r
[128] = "detected memp overflow inÖool ";

215 
digô
[] = "0";

216 if(
memp_ty≥
 >= 10) {

217 
digô
[0] = '0' + (
memp_ty≥
/10);

218 
	`°rˇt
(
îr°r
, 
digô
);

220 
digô
[0] = '0' + (
memp_ty≥
%10);

221 
	`°rˇt
(
îr°r
, 
digô
);

222 #i‡
	`deföed
(
LWIP_DEBUG
Ë&& 
MEMP_STATS


223 
	`°rˇt
(
îr°r
, 
memp_ovîÊow_«mes
[
memp_ty≥
]);

225 
	`LWIP_ASSERT
(
îr°r
, 0);

229 
	}
}

239 
	$memp_ovîÊow_check_ñemít_undîÊow
(
memp
 *
p
, 
u16_t
 
memp_ty≥
)

241 
u16_t
 
k
;

242 
u8_t
 *
m
;

243 #i‡
MEMP_SANITY_REGION_BEFORE_ALIGNED
 > 0

244 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 - 
MEMP_SANITY_REGION_BEFORE_ALIGNED
;

245 
k
 = 0; k < 
MEMP_SANITY_REGION_BEFORE_ALIGNED
; k++) {

246 i‡(
m
[
k
] != 0xcd) {

247 
îr°r
[128] = "detected memp underflow inÖool ";

248 
digô
[] = "0";

249 if(
memp_ty≥
 >= 10) {

250 
digô
[0] = '0' + (
memp_ty≥
/10);

251 
	`°rˇt
(
îr°r
, 
digô
);

253 
digô
[0] = '0' + (
memp_ty≥
%10);

254 
	`°rˇt
(
îr°r
, 
digô
);

255 #i‡
	`deföed
(
LWIP_DEBUG
Ë&& 
MEMP_STATS


256 
	`°rˇt
(
îr°r
, 
memp_ovîÊow_«mes
[
memp_ty≥
]);

258 
	`LWIP_ASSERT
(
îr°r
, 0);

262 
	}
}

270 
	$memp_ovîÊow_check_Æl
()

272 
u16_t
 
i
, 
j
;

273 
memp
 *
p
;

275 
p
 = (
memp
 *)
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

276 
i
 = 0; i < 
MEMP_MAX
; ++i) {

277 
p
 =Ö;

278 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

279 
	`memp_ovîÊow_check_ñemít_ovîÊow
(
p
, 
i
);

280 
p
 = (
memp
*)((
u8_t
*Ì + 
MEMP_SIZE
 + 
memp_sizes
[
i
] + 
MEMP_SANITY_REGION_AFTER_ALIGNED
);

283 
p
 = (
memp
 *)
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

284 
i
 = 0; i < 
MEMP_MAX
; ++i) {

285 
p
 =Ö;

286 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

287 
	`memp_ovîÊow_check_ñemít_undîÊow
(
p
, 
i
);

288 
p
 = (
memp
*)((
u8_t
*Ì + 
MEMP_SIZE
 + 
memp_sizes
[
i
] + 
MEMP_SANITY_REGION_AFTER_ALIGNED
);

291 
	}
}

297 
	$memp_ovîÊow_öô
()

299 
u16_t
 
i
, 
j
;

300 
memp
 *
p
;

301 
u8_t
 *
m
;

303 
p
 = (
memp
 *)
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

304 
i
 = 0; i < 
MEMP_MAX
; ++i) {

305 
p
 =Ö;

306 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

307 #i‡
MEMP_SANITY_REGION_BEFORE_ALIGNED
 > 0

308 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 - 
MEMP_SANITY_REGION_BEFORE_ALIGNED
;

309 
	`mem£t
(
m
, 0xcd, 
MEMP_SANITY_REGION_BEFORE_ALIGNED
);

311 #i‡
MEMP_SANITY_REGION_AFTER_ALIGNED
 > 0

312 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 + 
memp_sizes
[
i
];

313 
	`mem£t
(
m
, 0xcd, 
MEMP_SANITY_REGION_AFTER_ALIGNED
);

315 
p
 = (
memp
*)((
u8_t
*Ì + 
MEMP_SIZE
 + 
memp_sizes
[
i
] + 
MEMP_SANITY_REGION_AFTER_ALIGNED
);

318 
	}
}

321 
	#HUGE_PAGE_SIZE
 (2 * 1024 * 1024)

	)

322 
	#ALIGN_TO_PAGE_SIZE
(
x
) \

323 (((
x
Ë+ 
HUGE_PAGE_SIZE
 - 1Ë/ HUGE_PAGE_SIZE * HUGE_PAGE_SIZE)

	)

325 *
	$mÆloc_huge_∑ges
(
size_t
 
size
)

329 
size_t
 
ªÆ_size
 = 
	`ALIGN_TO_PAGE_SIZE
(
size
 + 
HUGE_PAGE_SIZE
);

330 *
±r
 = (*)
	`mm≠
(
NULL
, 
ªÆ_size
, 
PROT_READ
 | 
PROT_WRITE
,

331 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
 | 
MAP_POPULATE
 | 
MAP_HUGETLB
,

334 i‡(
±r
 =
MAP_FAILED
) {

336 
±r
 = (*)
	`mÆloc
(
ªÆ_size
);

337 i‡(
±r
 =
NULL
)  NULL;

338 
ªÆ_size
 = 0;

343 *((
size_t
 *)
±r
Ë
ªÆ_size
;

346  
±r
 + 
HUGE_PAGE_SIZE
;

347 
	}
}

350 
	$memp_Æloc_tx_pbuf
(
t˝ù_thªad
 *
thªad
)

352 
pbuf_h™dÀ
 *
c_buf
;

353 
size
;

355 
	`mem£t
(&
thªad
->
pbuf_tx_h™dÀ
, 0, (thread->pbuf_tx_handle));

356 
c_buf
 = &
thªad
->
pbuf_tx_h™dÀ
;

358 
size
 = (
pbuf
Ë* 
PBUF_POOL_SIZE
;

359 
c_buf
->
öfo
 = (
pbuf
 *)
	`mÆloc_huge_∑ges
(
size
);

361 i‡(!
c_buf
->
öfo
)

364 
size
 = 
TCP_MAX_PACKET_SIZE
 * 
PBUF_POOL_SIZE
;

365 
c_buf
->
buf
 = 
	`mÆloc_huge_∑ges
(
size
);

367 i‡(!
c_buf
->
buf
)

370 
c_buf
->
lock
 = (
±hªad_muãx_t
 *Ë
	`mÆloc
((pthread_mutex_t));

372 
c_buf
->
˙t
 = 0;

373 
c_buf
->
√xt_to_u£
 = 0;

374 
c_buf
->
√xt_to_£nd
 = 0;

375 
c_buf
->
√xt_off£t
 = 0;

377 i‡(
	`±hªad_muãx_öô
(
c_buf
->
lock
, 
NULL
)) {

382 
	}
}

385 
	$memp_Æloc_rx_pbuf
(
t˝ù_thªad
 *
thªad
)

387 
pbuf_h™dÀ
 *
c_buf
;

388 
size
;

390 
	`mem£t
(&
thªad
->
pbuf_rx_h™dÀ
, 0, (thread->pbuf_rx_handle));

391 
c_buf
 = &
thªad
->
pbuf_rx_h™dÀ
;

393 
size
 = (
pbuf
Ë* 
PBUF_POOL_SIZE
;

394 
c_buf
->
öfo
 = (
pbuf
 *)
	`mÆloc_huge_∑ges
(
size
);

396 i‡(!
c_buf
->
öfo
)

399 
size
 = 
TCP_MAX_PACKET_SIZE
 * 
PBUF_POOL_SIZE
;

400 
c_buf
->
buf
 = 
	`mÆloc_huge_∑ges
(
size
);

402 i‡(!
c_buf
->
buf
)

405 
c_buf
->
lock
 = (
±hªad_muãx_t
 *Ë
	`mÆloc
((pthread_mutex_t));

407 
c_buf
->
˙t
 = 0;

408 
c_buf
->
√xt_to_u£
 = 0;

409 
c_buf
->
√xt_to_£nd
 = 0;

410 
c_buf
->
√xt_off£t
 = 0;

412 i‡(
	`±hªad_muãx_öô
(
c_buf
->
lock
, 
NULL
)) {

417 
	}
}

420 
	$memp_Æloc_t˝ù_msg
(
t˝ù_thªad
 *
thªad
)

422 
t˝ù_msg_h™dÀ
 *
c_buf
;

423 
size
;

425 
	`mem£t
(&
thªad
->
msg_h™dÀ
, 0, (thread->msg_handle));

426 
c_buf
 = &
thªad
->
msg_h™dÀ
;

428 
size
 = (
t˝ù_msg
Ë* 
PBUF_POOL_SIZE
;

429 
c_buf
->
öfo
 = (
pbuf
 *)
	`mÆloc_huge_∑ges
(
size
);

431 i‡(!
c_buf
->
öfo
)

434 
c_buf
->
lock
 = (
±hªad_muãx_t
 *Ë
	`mÆloc
((pthread_mutex_t));

436 
c_buf
->
˙t
 = 0;

437 
c_buf
->
√xt_to_u£
 = 0;

438 
c_buf
->
√xt_to_£nd
 = 0;

439 
c_buf
->
√xt_off£t
 = 0;

441 i‡(
	`±hªad_muãx_öô
(
c_buf
->
lock
, 
NULL
)) {

446 
	}
}

454 
	$memp_öô
()

456 
memp
 *memp;

457 
u32_t
 
i
, 
j
;

458 
u64_t
 
tŸÆ_size
=0;

459 
˝u
 = 
	`sched_gë˝u
();

461 
i
 = 0; i < 
MEMP_MAX
; ++i) {

462 
tŸÆ_size
 +(
memp_num
[
i
] * (
MEMP_SIZE
 + 
memp_sizes
[i]));

464 
memp
 = 
	`mÆloc_huge_∑ges
(
tŸÆ_size
);

467 
i
 = 0; i < 
MEMP_MAX
; ++i) {

468 
lwù_t˝ù_thªad
[
˝u
]->
memp_èb
[
i
] = 
NULL
;

470 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

471 
memp
->
√xt
 = 
lwù_t˝ù_thªad
[
˝u
]->
memp_èb
[
i
];

472 
lwù_t˝ù_thªad
[
˝u
]->
memp_èb
[
i
] = 
memp
;

473 
memp
 = (mem∞*)(*)((
u8_t
 *)mem∞+ 
MEMP_SIZE
 + 
memp_sizes
[
i
]);

476 
	`memp_Æloc_rx_pbuf
(
lwù_t˝ù_thªad
[
˝u
]);

477 
	`memp_Æloc_tx_pbuf
(
lwù_t˝ù_thªad
[
˝u
]);

478 
	`memp_Æloc_t˝ù_msg
(
lwù_t˝ù_thªad
[
˝u
]);

479 
	}
}

482 
	$memp_mÆloc_t˝ù_msg
(
t˝ù_thªad
 *
thªad
) {

483 
t˝ù_msg_h™dÀ
 *
c_buf
;

484 
t˝ù_msg
 *
p
;

485 
w_idx
;

486 *
x
;

488 
c_buf
 = &
thªad
->
msg_h™dÀ
;

490 
	`±hªad_muãx_lock
(
c_buf
->
lock
);

491 
w_idx
 = 
c_buf
->
√xt_to_u£
;

492 
p
 = &
c_buf
->
öfo
[
w_idx
];

493 
c_buf
->
˙t
++;

494 
c_buf
->
√xt_to_u£
 = (
w_idx
 + 1Ë% 
PBUF_POOL_SIZE
;

496 
	`±hªad_muãx_u∆ock
(
c_buf
->
lock
);

497  ((*Ë
p
);

498 
	}
}

501 
	$memp_mÆloc_rx
(
t˝ù_thªad
 *
thªad
) {

502 
pbuf_h™dÀ
 *
c_buf
;

503 
pbuf
 *
p
;

504 
w_idx
;

505 *
x
;

507 
c_buf
 = &
thªad
->
pbuf_rx_h™dÀ
;

509 
	`±hªad_muãx_lock
(
c_buf
->
lock
);

510 
w_idx
 = 
c_buf
->
√xt_to_u£
;

511 
p
 = &
c_buf
->
öfo
[
w_idx
];

512 i‡(
p
->
ªf
)

513  
NULL
;

514 
c_buf
->
˙t
++;

515 
c_buf
->
√xt_to_u£
 = (
w_idx
 + 1Ë% 
PBUF_POOL_SIZE
;

517 
	`±hªad_muãx_u∆ock
(
c_buf
->
lock
);

518  ((*Ë
p
);

519 
	}
}

522 
	$memp_mÆloc_tx
(
t˝ù_thªad
 *
thªad
) {

523 
pbuf_h™dÀ
 *
c_buf
;

524 
pbuf
 *
p
;

525 
w_idx
;

526 *
x
;

528 
c_buf
 = &
thªad
->
pbuf_tx_h™dÀ
;

530 
	`±hªad_muãx_lock
(
c_buf
->
lock
);

531 
w_idx
 = 
c_buf
->
√xt_to_u£
;

532 
p
 = &
c_buf
->
öfo
[
w_idx
];

533 
p
->
∑ylﬂd
 = 
c_buf
->
buf
 + c_buf->
√xt_off£t
;

534 
c_buf
->
√xt_off£t
 +
TCP_MAX_PACKET_SIZE
;

535 i‡(
p
->
ªf
)

536  
NULL
;

537 
c_buf
->
˙t
++;

538 
c_buf
->
√xt_to_u£
 = (
w_idx
 + 1Ë% 
PBUF_POOL_SIZE
;

540 if(
c_buf
->
√xt_to_u£
 == 0)

541 
c_buf
->
√xt_off£t
 = 0;

543 
	`±hªad_muãx_u∆ock
(
c_buf
->
lock
);

544  ((*Ë
p
);

545 
	}
}

557 
	$memp_mÆloc
(
memp_t
 
ty≥
, 
t˝ù_thªad
 *
thªad
)

559 
memp
 *memp;

560 
˝u
;

562 i‡(!
thªad
) {

563 
˝u
 = 
	`sched_gë˝u
();

564 
thªad
 = 
lwù_t˝ù_thªad
[
˝u
];

567 
	`LWIP_ERROR
("memp_mÆloc:Åy≥ < MEMP_MAX", (
ty≥
 < 
MEMP_MAX
),  
NULL
;);

569 
	`±hªad_muãx_lock
(&
thªad
->
mem_muãx
[
ty≥
]);

571 
memp
 = 
thªad
->
memp_èb
[
ty≥
];

573 i‡(
memp
 !
NULL
) {

574 
thªad
->
memp_èb
[
ty≥
] = 
memp
->
√xt
;

575 
	`LWIP_ASSERT
("memp_malloc: mempÖroperlyáligned",

576 ((
mem_±r_t
)
memp
 % 
MEM_ALIGNMENT
) == 0);

577 
memp
 = (memp*)(*)((
u8_t
*)mem∞+ 
MEMP_SIZE
);

579 
memp
 = 
NULL
;

580 
	`LWIP_DEBUGF
(
MEMP_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
, ("memp_mÆloc: ouào‡mem‹y i¿poﬁ %s\n", 
memp_desc
[
ty≥
]));

583 
	`±hªad_muãx_u∆ock
(&
thªad
->
mem_muãx
[
ty≥
]);

584  
memp
;

585 
	}
}

594 
	$memp_‰ì
(
memp_t
 
ty≥
, *
mem
, 
t˝ù_thªad
 *
thªad
)

596 
memp
 *memp;

597 
˝u
;

599 i‡(!
thªad
) {

600 
˝u
 = 
	`sched_gë˝u
();

601 
thªad
 = 
lwù_t˝ù_thªad
[
˝u
];

604 i‡(
mem
 =
NULL
) {

607 
	`LWIP_ASSERT
("memp_free: memÖroperlyáligned",

608 ((
mem_±r_t
)
mem
 % 
MEM_ALIGNMENT
) == 0);

610 
memp
 = (mem∞*)(*)((
u8_t
*)
mem
 - 
MEMP_SIZE
);

612 
	`±hªad_muãx_lock
(&
thªad
->
mem_muãx
[
ty≥
]);

614 
memp
->
√xt
 = 
thªad
->
memp_èb
[
ty≥
];

615 
thªad
->
memp_èb
[
ty≥
] = 
memp
;

617 
	`±hªad_muãx_u∆ock
(&
thªad
->
mem_muãx
[
ty≥
]);

618 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/netif.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/def.h
"

42 
	~"lwù/ù_addr.h
"

43 
	~"lwù/√tif.h
"

44 
	~"lwù/t˝_im∂.h
"

45 
	~"lwù/¢mp.h
"

46 
	~"lwù/igmp.h
"

47 
	~"√tif/ëh¨p.h
"

48 
	~"lwù/°©s.h
"

49 
	~"lwù/t˝ù_thªad.h
"

50 
	~"√tif/ibvif.h
"

51 
	~"lwù/sys.h
"

52 
	~"lwù/t˝ù.h
"

54 #i‡
LWIP_NETIF_STATUS_CALLBACK


55 
	#NETIF_STATUS_CALLBACK
(
n
Ëdo{ i‡“->
°©us_ˇŒback
Ë{ (n->°©us_ˇŒback)“); }}0)

	)

57 
	#NETIF_STATUS_CALLBACK
(
n
)

	)

60 #i‡
LWIP_NETIF_LINK_CALLBACK


61 
	#NETIF_LINK_CALLBACK
(
n
Ëdo{ i‡“->
lök_ˇŒback
Ë{ (n->lök_ˇŒback)“); }}0)

	)

63 
	#NETIF_LINK_CALLBACK
(
n
)

	)

66 #i‡
LWIP_HAVE_LOOPIF


67 
√tif
 
	glo›_√tif
;

76 
îr_t


77 
	$√tif_lo›if_öô
(
√tif
 *netif)

82 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_so·w¨eLo›back
, 0);

84 
√tif
->
«me
[0] = 'l';

85 
√tif
->
«me
[1] = 'o';

86 
√tif
->
ouçut
 = 
√tif_lo›_ouçut
;

87  
ERR_OK
;

88 
	}
}

92 
	$√tif_öô
(
˝u
)

94 
ù_addr_t
 
ùaddr
, 
√tmask
, 
g©eway
;

96 
	`IP4_ADDR
(&
g©eway
, 10,0,0,1);

97 i‡(
˝u
 == 6) {

98 
	`IP4_ADDR
(&
ùaddr
, 10,0,0,3);

99 } i‡(
˝u
 == 7) {

100 
	`IP4_ADDR
(&
ùaddr
, 10,0,0,5);

101 } i‡(
˝u
 == 8) {

102 
	`IP4_ADDR
(&
ùaddr
, 10,0,0,6);

103 } i‡(
˝u
 == 9) {

104 
	`IP4_ADDR
(&
ùaddr
, 10,0,0,7);

105 } i‡(
˝u
 == 10) {

106 
	`IP4_ADDR
(&
ùaddr
, 10,0,0,8);

107 } i‡(
˝u
 == 11) {

108 
	`IP4_ADDR
(&
ùaddr
, 10,0,0,9);

111 
	`IP4_ADDR
(&
√tmask
, 255,255,0,0);

113 
	`√tif_add
(&
lwù_t˝ù_thªad
[
˝u
]->
√tif
, &
ùaddr
, &
√tmask
, &
g©eway
,Üwip_tcpip_thread[cpu],

114 
ibvif_öô
, 
t˝ù_öput
);

116 
	`√tif_£t_deÁu…
(&
lwù_t˝ù_thªad
[
˝u
]->
√tif
);

117 
	}
}

133 
√tif
 *

134 
	$√tif_add
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
, ip_addr_à*
√tmask
,

135 
ù_addr_t
 *
gw
, *
°©e
, 
√tif_öô_‚
 
öô
, 
√tif_öput_‚
 
öput
)

137 
u8_t
 
√ti‚um
 = 0;

138 
t˝ù_thªad
 *
thªad
 = (t˝ù_thªad*Ë
°©e
;

140 
	`LWIP_ASSERT
("Nÿöô fun˘i⁄ giví", 
öô
 !
NULL
);

143 
	`ù_addr_£t_zîo
(&
√tif
->
ù_addr
);

144 
	`ù_addr_£t_zîo
(&
√tif
->
√tmask
);

145 
	`ù_addr_£t_zîo
(&
√tif
->
gw
);

146 
√tif
->
Êags
 = 0;

147 #i‡
LWIP_DHCP


149 
√tif
->
dh˝
 = 
NULL
;

151 #i‡
LWIP_AUTOIP


153 
√tif
->
autoù
 = 
NULL
;

155 #i‡
LWIP_NETIF_STATUS_CALLBACK


156 
√tif
->
°©us_ˇŒback
 = 
NULL
;

158 #i‡
LWIP_NETIF_LINK_CALLBACK


159 
√tif
->
lök_ˇŒback
 = 
NULL
;

161 #i‡
LWIP_IGMP


162 
√tif
->
igmp_mac_fûãr
 = 
NULL
;

164 #i‡
ENABLE_LOOPBACK


165 
√tif
->
lo›_fú°
 = 
NULL
;

166 
√tif
->
lo›_œ°
 = 
NULL
;

170 
√tif
->
¥Ÿ_thªad
 = (
t˝ù_thªad
*Ë
°©e
;

171 
√tif
->
°©e
 = state;

172 
√tif
->
num
 = 
√ti‚um
++;

173 
√tif
->
öput
 = input;

174 #i‡
LWIP_NETIF_HWADDRHINT


175 
√tif
->
addr_höt
 = 
NULL
;

177 #i‡
ENABLE_LOOPBACK
 && 
LWIP_LOOPBACK_MAX_PBUFS


178 
√tif
->
lo›_˙t_cuºít
 = 0;

181 
	`√tif_£t_addr
(
√tif
, 
ùaddr
, 
√tmask
, 
gw
);

184 i‡(
	`öô
(
√tif
Ë!
ERR_OK
) {

185  
NULL
;

189 
√tif
->
√xt
 = 
thªad
->
√tif_li°
;

190 
thªad
->
√tif_li°
 = 
√tif
;

191 
	`¢mp_öc_iÊi°
();

193 #i‡
LWIP_IGMP


195 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

196 
	`igmp_°¨t
(
√tif
);

200 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("netif:ádded interface %c%c IPáddr ",

201 
√tif
->
«me
[0],Çetif->name[1]));

202 
	`ù_addr_debug_¥öt
(
NETIF_DEBUG
, 
ùaddr
);

203 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("Çetmask "));

204 
	`ù_addr_debug_¥öt
(
NETIF_DEBUG
, 
√tmask
);

205 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, (" gw "));

206 
	`ù_addr_debug_¥öt
(
NETIF_DEBUG
, 
gw
);

207 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("\n"));

208  
√tif
;

209 
	}
}

221 
	$√tif_£t_addr
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
, ip_addr_à*
√tmask
,

222 
ù_addr_t
 *
gw
)

224 
	`√tif_£t_ùaddr
(
√tif
, 
ùaddr
);

225 
	`√tif_£t_√tmask
(
√tif
, 
√tmask
);

226 
	`√tif_£t_gw
(
√tif
, 
gw
);

227 
	}
}

235 
	$√tif_ªmove
(
√tif
 *netif)

237 i‡(
√tif
 =
NULL
) {

241 #i‡
LWIP_IGMP


243 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

244 
	`igmp_°›
(
√tif
);

247 i‡(
	`√tif_is_up
(
√tif
)) {

249 
	`√tif_£t_down
(
√tif
);

252 
	`¢mp_dñëe_ùaddridx_åì
(
√tif
);

255 i‡(
√tif
->
¥Ÿ_thªad
->
√tif_li°
 ==Çetif) {

256 
√tif
->
¥Ÿ_thªad
->
√tif_li°
 =Çëif->
√xt
;

259 
√tif
 * 
tmpNëif
;

260 
tmpNëif
 = 
√tif
->
¥Ÿ_thªad
->
√tif_li°
;ÅmpNëi‡!
NULL
;ÅmpNëi‡tmpNëif->
√xt
) {

261 i‡(
tmpNëif
->
√xt
 =
√tif
) {

262 
tmpNëif
->
√xt
 = 
√tif
->next;

266 i‡(
tmpNëif
 =
NULL
)

269 
	`¢mp_dec_iÊi°
();

271 i‡(
√tif
->
¥Ÿ_thªad
->
√tif_deÁu…
 ==Çetif) {

273 
	`√tif_£t_deÁu…
(
NULL
);

275 
	`LWIP_DEBUGF
–
NETIF_DEBUG
, ("netif_remove:ÑemovedÇetif\n") );

276 
	}
}

284 
√tif
 *

285 
	$√tif_föd
(*
«me
)

287 
√tif
 *netif;

288 
u8_t
 
num
;

290 i‡(
«me
 =
NULL
) {

291  
NULL
;

294 
num
 = 
«me
[2] - '0';

296 
√tif
 = 
lwù_t˝ù_thªad
[
	`sched_gë˝u
()]->
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

297 i‡(
num
 =
√tif
->num &&

298 
«me
[0] =
√tif
->name[0] &&

299 
«me
[1] =
√tif
->name[1]) {

300 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("√tif_föd: found %c%c\n", 
«me
[0],Çame[1]));

301  
√tif
;

304 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("√tif_föd: didn'àföd %c%c\n", 
«me
[0],Çame[1]));

305  
NULL
;

306 
	}
}

318 
	$√tif_£t_ùaddr
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
)

322 #i‡
LWIP_TCP


323 
t˝_pcb
 *
pcb
;

324 
t˝_pcb_li°í
 *
Õcb
;

327 i‡((
	`ù_addr_cmp
(
ùaddr
, &(
√tif
->
ù_addr
))) == 0) {

329 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_STATE
, ("netif_set_ipaddr:Çetifáddress being changed\n"));

330 
pcb
 = 
√tif
->
¥Ÿ_thªad
->
t˝ù_d©a
.
t˝_a˘ive_pcbs
;

331 
pcb
 !
NULL
) {

333 i‡(
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
√tif
->
ù_addr
))

334 #i‡
LWIP_AUTOIP


336 && !
	`ù_addr_i¶ökloˇl
(&(
pcb
->
loˇl_ù
))

340 
t˝_pcb
 *
√xt
 = 
pcb
->next;

341 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_STATE
, ("√tif_£t_ùaddr:áb‹tög TCPÖcb %p\n", (*)
pcb
));

342 
	`t˝_ab‹t
(
pcb
);

343 
pcb
 = 
√xt
;

345 
pcb
 =Öcb->
√xt
;

348 
Õcb
 = 
√tif
->
¥Ÿ_thªad
->
t˝ù_d©a
.
t˝_li°í_pcbs
.
li°í_pcbs
;Üpcb !
NULL
;Üpcb =Üpcb->
√xt
) {

350 i‡((!(
	`ù_addr_ißny
(&(
Õcb
->
loˇl_ù
)))) &&

351 (
	`ù_addr_cmp
(&(
Õcb
->
loˇl_ù
), &(
√tif
->
ù_addr
)))) {

354 
	`ù_addr_£t
(&(
Õcb
->
loˇl_ù
), 
ùaddr
);

359 
	`¢mp_dñëe_ùaddridx_åì
(
√tif
);

360 
	`¢mp_dñëe_ùπeidx_åì
(0,
√tif
);

362 
	`ù_addr_£t
(&(
√tif
->
ù_addr
), 
ùaddr
);

363 
	`¢mp_ö£π_ùaddridx_åì
(
√tif
);

364 
	`¢mp_ö£π_ùπeidx_åì
(0,
√tif
);

366 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("√tif: IPáddªs†o‡öãrÁ˚ %c%¯£àtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

367 
√tif
->
«me
[0],Çetif->name[1],

368 
	`ù4_addr1_16
(&
√tif
->
ù_addr
),

369 
	`ù4_addr2_16
(&
√tif
->
ù_addr
),

370 
	`ù4_addr3_16
(&
√tif
->
ù_addr
),

371 
	`ù4_addr4_16
(&
√tif
->
ù_addr
)));

372 
	}
}

383 
	$√tif_£t_gw
(
√tif
 *√tif, 
ù_addr_t
 *
gw
)

385 
	`ù_addr_£t
(&(
√tif
->
gw
), gw);

386 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("√tif: GWáddªs†o‡öãrÁ˚ %c%¯£àtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

387 
√tif
->
«me
[0],Çetif->name[1],

388 
	`ù4_addr1_16
(&
√tif
->
gw
),

389 
	`ù4_addr2_16
(&
√tif
->
gw
),

390 
	`ù4_addr3_16
(&
√tif
->
gw
),

391 
	`ù4_addr4_16
(&
√tif
->
gw
)));

392 
	}
}

404 
	$√tif_£t_√tmask
(
√tif
 *√tif, 
ù_addr_t
 *
√tmask
)

406 
	`¢mp_dñëe_ùπeidx_åì
(0, 
√tif
);

408 
	`ù_addr_£t
(&(
√tif
->
√tmask
),Çetmask);

409 
	`¢mp_ö£π_ùπeidx_åì
(0, 
√tif
);

410 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("√tif:Çëmask o‡öãrÁ˚ %c%¯£àtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

411 
√tif
->
«me
[0],Çetif->name[1],

412 
	`ù4_addr1_16
(&
√tif
->
√tmask
),

413 
	`ù4_addr2_16
(&
√tif
->
√tmask
),

414 
	`ù4_addr3_16
(&
√tif
->
√tmask
),

415 
	`ù4_addr4_16
(&
√tif
->
√tmask
)));

416 
	}
}

425 
	$√tif_£t_deÁu…
(
√tif
 *netif)

427 
t˝ù_thªad
 *
thªad
;

429 i‡(
√tif
 =
NULL
) {

431 
	`¢mp_dñëe_ùπeidx_åì
(1, 
√tif
);

434 
	`¢mp_ö£π_ùπeidx_åì
(1, 
√tif
);

435 
thªad
 = 
√tif
->
¥Ÿ_thªad
;

437 
thªad
->
√tif_deÁu…
 = 
√tif
;

438 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("netif: setting default interface %c%c\n",

439 
√tif
 ?Çëif->
«me
[0] : '\'',Çetif ?Çetif->name[1] : '\''));

440 
	}
}

451 
	$√tif_£t_up
(
√tif
 *netif)

453 i‡(!(
√tif
->
Êags
 & 
NETIF_FLAG_UP
)) {

454 
√tif
->
Êags
 |
NETIF_FLAG_UP
;

456 #i‡
LWIP_SNMP


457 
	`¢mp_gë_sysu±ime
(&
√tif
->
ts
);

460 
	`NETIF_STATUS_CALLBACK
(
√tif
);

462 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_LINK_UP
) {

463 #i‡
LWIP_ARP


465 i‡(
√tif
->
Êags
 & (
NETIF_FLAG_ETHARP
)) {

466 
	`ëh¨p_gøtuôous
(
√tif
);

470 #i‡
LWIP_IGMP


472 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

473 
	`igmp_ªp‹t_groups
–
√tif
);

478 
	}
}

488 
	$√tif_£t_down
(
√tif
 *netif)

490 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_UP
) {

491 
√tif
->
Êags
 &~
NETIF_FLAG_UP
;

492 #i‡
LWIP_SNMP


493 
	`¢mp_gë_sysu±ime
(&
√tif
->
ts
);

496 
	`NETIF_STATUS_CALLBACK
(
√tif
);

498 
	}
}

500 #i‡
LWIP_NETIF_STATUS_CALLBACK


504 
	$√tif_£t_°©us_ˇŒback
(
√tif
 *√tif, 
√tif_°©us_ˇŒback_‚
 
°©us_ˇŒback
)

506 i‡(
√tif
) {

507 
√tif
->
°©us_ˇŒback
 = status_callback;

509 
	}
}

515 
	$√tif_£t_lök_up
(
√tif
 *netif )

517 i‡(!(
√tif
->
Êags
 & 
NETIF_FLAG_LINK_UP
)) {

518 
√tif
->
Êags
 |
NETIF_FLAG_LINK_UP
;

520 #i‡
LWIP_DHCP


521 i‡(
√tif
->
dh˝
) {

522 
	`dh˝_√tw‹k_ch™ged
(
√tif
);

526 #i‡
LWIP_AUTOIP


527 i‡(
√tif
->
autoù
) {

528 
	`autoù_√tw‹k_ch™ged
(
√tif
);

532 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_UP
) {

533 #i‡
LWIP_ARP


535 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
) {

536 
	`ëh¨p_gøtuôous
(
√tif
);

540 #i‡
LWIP_IGMP


542 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

543 
	`igmp_ªp‹t_groups
–
√tif
);

547 
	`NETIF_LINK_CALLBACK
(
√tif
);

549 
	}
}

554 
	$√tif_£t_lök_down
(
√tif
 *netif )

556 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_LINK_UP
) {

557 
√tif
->
Êags
 &~
NETIF_FLAG_LINK_UP
;

558 
	`NETIF_LINK_CALLBACK
(
√tif
);

560 
	}
}

562 #i‡
LWIP_NETIF_LINK_CALLBACK


566 
	$√tif_£t_lök_ˇŒback
(
√tif
 *√tif, 
√tif_°©us_ˇŒback_‚
 
lök_ˇŒback
)

568 i‡(
√tif
) {

569 
√tif
->
lök_ˇŒback
 =Üink_callback;

571 
	}
}

574 #i‡
ENABLE_LOOPBACK


589 
îr_t


590 
	$√tif_lo›_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
,

591 
ù_addr_t
 *
ùaddr
)

593 
pbuf
 *
r
;

594 
îr_t
 
îr
;

595 
pbuf
 *
œ°
;

596 #i‡
LWIP_LOOPBACK_MAX_PBUFS


597 
u8_t
 
˛í
 = 0;

601 #i‡
LWIP_SNMP


602 #i‡
LWIP_HAVE_LOOPIF


603 
√tif
 *
°©s_if
 = &
lo›_√tif
;

605 
√tif
 *
°©s_if
 =Çetif;

608 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

609 
	`LWIP_UNUSED_ARG
(
ùaddr
);

612 
r
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
p
->
tŸ_Àn
, 
PBUF_RAM
, 
√tif
->
¥Ÿ_thªad
);

613 i‡(
r
 =
NULL
) {

614 
	`LINK_STATS_INC
(
lök
.
memîr
);

615 
	`LINK_STATS_INC
(
lök
.
dr›
);

616 
	`¢mp_öc_ifoutdisˇrds
(
°©s_if
);

617  
ERR_MEM
;

619 #i‡
LWIP_LOOPBACK_MAX_PBUFS


620 
˛í
 = 
	`pbuf_˛í
(
r
);

622 if(((
√tif
->
lo›_˙t_cuºít
 + 
˛í
) <Çetif->loop_cnt_current) ||

623 ((
√tif
->
lo›_˙t_cuºít
 + 
˛í
Ë> 
LWIP_LOOPBACK_MAX_PBUFS
)) {

624 
	`pbuf_‰ì
(
r
, 
√tif
->
¥Ÿ_thªad
);

625 
	`LINK_STATS_INC
(
lök
.
memîr
);

626 
	`LINK_STATS_INC
(
lök
.
dr›
);

627 
	`¢mp_öc_ifoutdisˇrds
(
°©s_if
);

628  
ERR_MEM
;

630 
√tif
->
lo›_˙t_cuºít
 +
˛í
;

634 i‡((
îr
 = 
	`pbuf_c›y
(
r
, 
p
)Ë!
ERR_OK
) {

635 
	`pbuf_‰ì
(
r
, 
√tif
->
¥Ÿ_thªad
);

636 
	`LINK_STATS_INC
(
lök
.
memîr
);

637 
	`LINK_STATS_INC
(
lök
.
dr›
);

638 
	`¢mp_öc_ifoutdisˇrds
(
°©s_if
);

639  
îr
;

646 
œ°
 = 
r
;Üa°->
√xt
 !
NULL
;Üast =Üast->next);

648 
	`SYS_ARCH_PROTECT
(
Àv
);

649 if(
√tif
->
lo›_fú°
 !
NULL
) {

650 
	`LWIP_ASSERT
("i‡fú° !NULL,Üa° mu°álsÿbê!NULL", 
√tif
->
lo›_œ°
 !
NULL
);

651 
√tif
->
lo›_œ°
->
√xt
 = 
r
;

652 
√tif
->
lo›_œ°
 = 
œ°
;

654 
√tif
->
lo›_fú°
 = 
r
;

655 
√tif
->
lo›_œ°
 = 
œ°
;

657 
	`SYS_ARCH_UNPROTECT
(
Àv
);

659 
	`LINK_STATS_INC
(
lök
.
xmô
);

660 
	`¢mp_add_ifouto˘ës
(
°©s_if
, 
p
->
tŸ_Àn
);

661 
	`¢mp_öc_ifoutuˇ°pkts
(
°©s_if
);

663 #i‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


665 
	`t˝ù_ˇŒback
((
t˝ù_ˇŒback_‚
)
√tif_pﬁl
, 
√tif
);

668  
ERR_OK
;

669 
	}
}

678 
	$√tif_pﬁl
(
√tif
 *netif)

680 
pbuf
 *
ö
;

683 #i‡
LWIP_SNMP


684 #i‡
LWIP_HAVE_LOOPIF


685 
√tif
 *
°©s_if
 = &
lo›_√tif
;

687 
√tif
 *
°©s_if
 =Çetif;

690 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

694 
	`SYS_ARCH_PROTECT
(
Àv
);

695 
ö
 = 
√tif
->
lo›_fú°
;

696 i‡(
ö
 !
NULL
) {

697 
pbuf
 *
ö_íd
 = 
ö
;

698 #i‡
LWIP_LOOPBACK_MAX_PBUFS


699 
u8_t
 
˛í
 = 
	`pbuf_˛í
(
ö
);

701 
	`LWIP_ASSERT
("netif->loop_cnt_current underflow",

702 ((
√tif
->
lo›_˙t_cuºít
 - 
˛í
) <Çetif->loop_cnt_current));

703 
√tif
->
lo›_˙t_cuºít
 -
˛í
;

705 
ö_íd
->
Àn
 !ö_íd->
tŸ_Àn
) {

706 
	`LWIP_ASSERT
("bogu†pbuf:Üí !tŸ_À¿buà√xà=NULL!", 
ö_íd
->
√xt
 !
NULL
);

707 
ö_íd
 = in_íd->
√xt
;

710 i‡(
ö_íd
 =
√tif
->
lo›_œ°
) {

712 
√tif
->
lo›_fú°
 =Çëif->
lo›_œ°
 = 
NULL
;

715 
√tif
->
lo›_fú°
 = 
ö_íd
->
√xt
;

716 
	`LWIP_ASSERT
("shouldÇŸ bênuŒ sö˚ fú° !œ°!", 
√tif
->
lo›_fú°
 !
NULL
);

719 
ö_íd
->
√xt
 = 
NULL
;

721 
	`SYS_ARCH_UNPROTECT
(
Àv
);

723 i‡(
ö
 !
NULL
) {

724 
	`LINK_STATS_INC
(
lök
.
ªcv
);

725 
	`¢mp_add_iföo˘ës
(
°©s_if
, 
ö
->
tŸ_Àn
);

726 
	`¢mp_öc_iföuˇ°pkts
(
°©s_if
);

728 i‡(
	`ù_öput
(
ö
, 
√tif
Ë!
ERR_OK
) {

729 
	`pbuf_‰ì
(
ö
, 
√tif
->
¥Ÿ_thªad
);

732 
ö
 = 
NULL
;

735 } 
√tif
->
lo›_fú°
 !
NULL
);

736 
	}
}

738 #i‡!
LWIP_NETIF_LOOPBACK_MULTITHREADING


743 
	$√tif_pﬁl_Æl
()

745 
√tif
 *√ti‡
lwù_t˝ù_thªad
[
	`sched_gë˝u
()]->
√tif_li°
;

747 
√tif
 !
NULL
) {

748 
	`√tif_pﬁl
(
√tif
);

750 
√tif
 =Çëif->
√xt
;

752 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/pbuf.c

64 
	~"lwù/›t.h
"

66 
	~"lwù/°©s.h
"

67 
	~"lwù/def.h
"

68 
	~"lwù/mem.h
"

69 
	~"lwù/memp.h
"

70 
	~"lwù/pbuf.h
"

71 
	~"lwù/sys.h
"

72 
	~"¨ch/≥rf.h
"

73 #i‡
TCP_QUEUE_OOSEQ


74 
	~"lwù/t˝_im∂.h
"

76 #i‡
LWIP_CHECKSUM_ON_COPY


77 
	~"lwù/öë_chksum.h
"

80 
	~<°rög.h
>

82 
	#SIZEOF_STRUCT_PBUF
 
	`LWIP_MEM_ALIGN_SIZE
((
pbuf
))

	)

85 
	#PBUF_POOL_BUFSIZE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
PBUF_POOL_BUFSIZE
)

	)

87 #i‡!
LWIP_TCP
 || !
TCP_QUEUE_OOSEQ
 || 
NO_SYS


88 
	#PBUF_POOL_IS_EMPTY
()

	)

91 #i‚de‡
PBUF_POOL_FREE_OOSEQ


92 
	#PBUF_POOL_FREE_OOSEQ
 1

	)

95 #i‡
PBUF_POOL_FREE_OOSEQ


96 
	~"lwù/t˝ù.h
"

97 
	#PBUF_POOL_IS_EMPTY
(Ë
	`pbuf_poﬁ_is_em±y
()

	)

98 
u8_t
 
	gpbuf_‰ì_oo£q_queued
;

108 
	$pbuf_‰ì_oo£q
(* 
¨g
)

110 
t˝_pcb
* 
pcb
;

111 
˝u
 = 
	`sched_gë˝u
();

112 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

113 
	`LWIP_UNUSED_ARG
(
¨g
);

115 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

116 
pbuf_‰ì_oo£q_queued
 = 0;

117 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

119 
pcb
 = 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_a˘ive_pcbs
; 
NULL
 !pcb;Öcb =Öcb->
√xt
) {

120 i‡(
NULL
 !
pcb
->
oo£q
) {

122 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_free_ooseq: freeing out-of-sequenceÖbufs\n"));

123 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

124 
pcb
->
oo£q
 = 
NULL
;

128 
	}
}

132 
	$pbuf_poﬁ_is_em±y
()

134 
u8_t
 
queued
;

135 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

137 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

138 
queued
 = 
pbuf_‰ì_oo£q_queued
;

139 
pbuf_‰ì_oo£q_queued
 = 1;

140 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

142 if(!
queued
) {

144 if(
	`t˝ù_ˇŒback_wôh_block
(
pbuf_‰ì_oo£q
, 
NULL
, 0Ë!
ERR_OK
) {

145 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

146 
pbuf_‰ì_oo£q_queued
 = 0;

147 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

150 
	}
}

185 
pbuf
 *

186 
	$pbuf_Æloc
(
pbuf_œyî
 
œyî
, 
u16_t
 
Àngth
, 
pbuf_ty≥
 
ty≥
, 
t˝ù_thªad
 *
t
)

188 
pbuf
 *
p
, *
q
, *
r
;

189 
u16_t
 
off£t
;

190 
s32_t
 
ªm_Àn
;

191 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_Æloc÷ígth=%"
U16_F
")\n", 
Àngth
));

194 
off£t
 = 0;

195 
œyî
) {

196 
PBUF_TRANSPORT
:

198 
off£t
 +
PBUF_TRANSPORT_HLEN
;

200 
PBUF_IP
:

202 
off£t
 +
PBUF_IP_HLEN
;

204 
PBUF_LINK
:

206 
off£t
 +
PBUF_LINK_HLEN
;

208 
PBUF_RAW
:

211 
	`LWIP_ASSERT
("pbuf_alloc: badÖbufÜayer", 0);

212  
NULL
;

215 
ty≥
) {

217 
PBUF_POOL_TX
:

218 
p
 = (
pbuf
 *)
	`memp_mÆloc_tx
(
t
);

220 i‡(
p
 =
NULL
) {

221 
	`PBUF_POOL_IS_EMPTY
();

222  
NULL
;

225 
p
->
ty≥
 =Åype;

226 
p
->
√xt
 = 
NULL
;

227 
p
->
ªf
 = 1;

228 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
Àngth
;

229 
p
->
∑ylﬂd
 +
off£t
;

233 
PBUF_POOL_RX
:

234 
p
 = (
pbuf
 *)
	`memp_mÆloc_rx
(
t
);

236 i‡(
p
 =
NULL
) {

237 
	`PBUF_POOL_IS_EMPTY
();

238  
NULL
;

241 
p
->
ty≥
 =Åype;

242 
p
->
√xt
 = 
NULL
;

243 
p
->
ªf
 = 1;

244 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
Àngth
;

248 
PBUF_POOL
:

250 
p
 = (
pbuf
 *)
	`memp_mÆloc
(
MEMP_PBUF_POOL
, 
t
);

251 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_Æloc:áŒoˇãdÖbu‡%p\n", (*)
p
));

252 i‡(
p
 =
NULL
) {

253 
	`PBUF_POOL_IS_EMPTY
();

254  
NULL
;

256 
p
->
ty≥
 =Åype;

257 
p
->
√xt
 = 
NULL
;

260 
p
->
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)((
u8_t
 *Ì + (
SIZEOF_STRUCT_PBUF
 + 
off£t
)));

261 
	`LWIP_ASSERT
("pbuf_alloc:ÖbufÖ->payloadÖroperlyáligned",

262 ((
mem_±r_t
)
p
->
∑ylﬂd
 % 
MEM_ALIGNMENT
) == 0);

264 
p
->
tŸ_Àn
 = 
Àngth
;

266 
p
->
Àn
 = 
	`LWIP_MIN
(
Àngth
, 
PBUF_POOL_BUFSIZE_ALIGNED
 - 
	`LWIP_MEM_ALIGN_SIZE
(
off£t
));

267 
	`LWIP_ASSERT
("checkÖ->payload +Ö->len doesÇot overflowÖbuf",

268 ((
u8_t
*)
p
->
∑ylﬂd
 +Ö->
Àn
 <=

269 (
u8_t
*)
p
 + 
SIZEOF_STRUCT_PBUF
 + 
PBUF_POOL_BUFSIZE_ALIGNED
));

270 
	`LWIP_ASSERT
("PBUF_POOL_BUFSIZE must be biggerÅhan MEM_ALIGNMENT",

271 (
PBUF_POOL_BUFSIZE_ALIGNED
 - 
	`LWIP_MEM_ALIGN_SIZE
(
off£t
)) > 0 );

273 
p
->
ªf
 = 1;

278 
r
 = 
p
;

280 
ªm_Àn
 = 
Àngth
 - 
p
->
Àn
;

282 
ªm_Àn
 > 0) {

283 
q
 = (
pbuf
 *)
	`memp_mÆloc
(
MEMP_PBUF_POOL
, 
t
);

284 i‡(
q
 =
NULL
) {

285 
	`PBUF_POOL_IS_EMPTY
();

287 
	`pbuf_‰ì
(
p
, 
NULL
);

289  
NULL
;

291 
q
->
ty≥
 =Åype;

292 
q
->
Êags
 = 0;

293 
q
->
√xt
 = 
NULL
;

295 
r
->
√xt
 = 
q
;

297 
	`LWIP_ASSERT
("ªm_À¿< max_u16_t", 
ªm_Àn
 < 0xffff);

298 
q
->
tŸ_Àn
 = (
u16_t
)
ªm_Àn
;

300 
q
->
Àn
 = 
	`LWIP_MIN
((
u16_t
)
ªm_Àn
, 
PBUF_POOL_BUFSIZE_ALIGNED
);

301 
q
->
∑ylﬂd
 = (*)((
u8_t
 *)q + 
SIZEOF_STRUCT_PBUF
);

302 
	`LWIP_ASSERT
("pbuf_alloc:Öbuf q->payloadÖroperlyáligned",

303 ((
mem_±r_t
)
q
->
∑ylﬂd
 % 
MEM_ALIGNMENT
) == 0);

304 
	`LWIP_ASSERT
("checkÖ->payload +Ö->len doesÇot overflowÖbuf",

305 ((
u8_t
*)
p
->
∑ylﬂd
 +Ö->
Àn
 <=

306 (
u8_t
*)
p
 + 
SIZEOF_STRUCT_PBUF
 + 
PBUF_POOL_BUFSIZE_ALIGNED
));

307 
q
->
ªf
 = 1;

309 
ªm_Àn
 -
q
->
Àn
;

311 
r
 = 
q
;

317 
PBUF_RAM
:

319 
p
 = (
pbuf
*)
	`mem_mÆloc
(
	`LWIP_MEM_ALIGN_SIZE
(
SIZEOF_STRUCT_PBUF
 + 
off£t
Ë+ LWIP_MEM_ALIGN_SIZE(
Àngth
));

320 i‡(
p
 =
NULL
) {

321  
NULL
;

324 
p
->
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)((
u8_t
 *Ì + 
SIZEOF_STRUCT_PBUF
 + 
off£t
));

325 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
Àngth
;

326 
p
->
√xt
 = 
NULL
;

327 
p
->
ty≥
 =Åype;

329 
	`LWIP_ASSERT
("pbuf_alloc:Öbuf->payloadÖroperlyáligned",

330 ((
mem_±r_t
)
p
->
∑ylﬂd
 % 
MEM_ALIGNMENT
) == 0);

333 
PBUF_ROM
:

335 
PBUF_REF
:

337 
p
 = (
pbuf
 *)
	`memp_mÆloc
(
MEMP_PBUF
, 
t
);

338 i‡(
p
 =
NULL
) {

339 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
,

341 (
ty≥
 =
PBUF_ROM
) ? "ROM" : "REF"));

342  
NULL
;

345 
p
->
∑ylﬂd
 = 
NULL
;

346 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
Àngth
;

347 
p
->
√xt
 = 
NULL
;

348 
p
->
ty≥
 =Åype;

352 
	`LWIP_ASSERT
("pbuf_alloc:ÉrroneousÅype", 0);

353  
NULL
;

356 
p
->
ªf
 = 1;

358 
p
->
Êags
 = 0;

359 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_Æloc÷ígth=%"
U16_F
"Ë=%p\n", 
Àngth
, (*)
p
));

360  
p
;

361 
	}
}

363 #i‡
LWIP_SUPPORT_CUSTOM_PBUF


377 
pbuf
*

378 
	$pbuf_Ælo˚d_cu°om
(
pbuf_œyî
 
l
, 
u16_t
 
Àngth
, 
pbuf_ty≥
 
ty≥
, 
pbuf_cu°om
 *
p
,

379 *
∑ylﬂd_mem
, 
u16_t
 
∑ylﬂd_mem_Àn
)

381 
u16_t
 
off£t
;

382 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_Ælo˚d_cu°om÷ígth=%"
U16_F
")\n", 
Àngth
));

385 
off£t
 = 0;

386 
l
) {

387 
PBUF_TRANSPORT
:

389 
off£t
 +
PBUF_TRANSPORT_HLEN
;

391 
PBUF_IP
:

393 
off£t
 +
PBUF_IP_HLEN
;

395 
PBUF_LINK
:

397 
off£t
 +
PBUF_LINK_HLEN
;

399 
PBUF_RAW
:

402 
	`LWIP_ASSERT
("pbuf_alloced_custom: badÖbufÜayer", 0);

403  
NULL
;

406 i‡(
	`LWIP_MEM_ALIGN_SIZE
(
off£t
Ë+ 
Àngth
 < 
∑ylﬂd_mem_Àn
) {

407 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_LEVEL_WARNING
, ("pbuf_Ælo˚d_cu°om÷ígth=%"
U16_F
"Ëbuf„∏toÿsh‹t\n", 
Àngth
));

408  
NULL
;

411 
p
->
pbuf
.
√xt
 = 
NULL
;

412 i‡(
∑ylﬂd_mem
 !
NULL
) {

413 
p
->
pbuf
.
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)((
u8_t
 *)
∑ylﬂd_mem
 + 
off£t
));

415 
p
->
pbuf
.
∑ylﬂd
 = 
NULL
;

417 
p
->
pbuf
.
Êags
 = 
PBUF_FLAG_IS_CUSTOM
;

418 
p
->
pbuf
.
Àn
 =Ö->pbuf.
tŸ_Àn
 = 
Àngth
;

419 
p
->
pbuf
.
ty≥
 =Åype;

420 
p
->
pbuf
.
ªf
 = 1;

421  &
p
->
pbuf
;

422 
	}
}

441 
	$pbuf_ªÆloc
(
pbuf
 *
p
, 
u16_t
 
√w_Àn
)

443 
pbuf
 *
q
;

444 
u16_t
 
ªm_Àn
;

445 
s32_t
 
grow
;

447 
	`LWIP_ASSERT
("pbuf_ªÆloc:Ö !NULL", 
p
 !
NULL
);

448 
	`LWIP_ASSERT
("pbuf_ªÆloc: s™êp->ty≥", 
p
->
ty≥
 =
PBUF_POOL
 ||

449 
p
->
ty≥
 =
PBUF_ROM
 ||

450 
p
->
ty≥
 =
PBUF_RAM
 ||

451 
p
->
ty≥
 =
PBUF_REF
 ||

452 
p
->
ty≥
 =
PBUF_POOL_RX
);

455 i‡(
√w_Àn
 >
p
->
tŸ_Àn
) {

462 
grow
 = 
√w_Àn
 - 
p
->
tŸ_Àn
;

465 
ªm_Àn
 = 
√w_Àn
;

466 
q
 = 
p
;

468 
ªm_Àn
 > 
q
->
Àn
) {

470 
ªm_Àn
 -
q
->
Àn
;

472 
	`LWIP_ASSERT
("grow < max_u16_t", 
grow
 < 0xffff);

473 
q
->
tŸ_Àn
 +(
u16_t
)
grow
;

475 
q
 = q->
√xt
;

476 
	`LWIP_ASSERT
("pbuf_ªÆloc: q !NULL", 
q
 !
NULL
);

483 i‡((
q
->
ty≥
 =
PBUF_RAM
Ë&& (
ªm_Àn
 !q->
Àn
)) {

485 
q
 = (
pbuf
 *)
	`mem_åim
(q, (
u16_t
)((
u8_t
 *)q->
∑ylﬂd
 - (u8_à*)qË+ 
ªm_Àn
);

486 
	`LWIP_ASSERT
("mem_åimÑëu∫ed q =NULL", 
q
 !
NULL
);

489 
q
->
Àn
 = 
ªm_Àn
;

490 
q
->
tŸ_Àn
 = q->
Àn
;

493 i‡(
q
->
√xt
 !
NULL
) {

495 
	`pbuf_‰ì
(
q
->
√xt
, 
NULL
);

498 
q
->
√xt
 = 
NULL
;

500 
	}
}

522 
u8_t


523 
	$pbuf_hódî
(
pbuf
 *
p
, 
s16_t
 
hódî_size_ö¸emít
)

525 
u16_t
 
ty≥
;

526 *
∑ylﬂd
;

527 
u16_t
 
ö¸emít_magnôude
;

529 
	`LWIP_ASSERT
("∞!NULL", 
p
 !
NULL
);

530 i‡((
hódî_size_ö¸emít
 =0Ë|| (
p
 =
NULL
)) {

534 i‡(
hódî_size_ö¸emít
 < 0){

535 
ö¸emít_magnôude
 = -
hódî_size_ö¸emít
;

537 
	`LWIP_ERROR
("ö¸emít_magnôudê<p->Àn", (
ö¸emít_magnôude
 <
p
->
Àn
),  1;);

539 
ö¸emít_magnôude
 = 
hódî_size_ö¸emít
;

544 
	`LWIP_ASSERT
("p->type == PBUF_RAM ||Ö->type == PBUF_POOL",

545 
p
->
ty≥
 =
PBUF_RAM
 ||Ö->ty≥ =
PBUF_POOL
 ||Ö->ty≥ =
PBUF_POOL_TX
);

547 
	`LWIP_ASSERT
("p->payload - increment_magnitude >=Ö + SIZEOF_STRUCT_PBUF",

548 (
u8_t
 *)
p
->
∑ylﬂd
 - 
ö¸emít_magnôude
 >(u8_à*Ì + 
SIZEOF_STRUCT_PBUF
);

552 
ty≥
 = 
p
->type;

554 
∑ylﬂd
 = 
p
->payload;

557 i‡(
ty≥
 =
PBUF_RAM
 ||Åy≥ =
PBUF_POOL
) {

559 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd - 
hódî_size_ö¸emít
;

561 i‡((
u8_t
 *)
p
->
∑ylﬂd
 < (u8_à*Ì + 
SIZEOF_STRUCT_PBUF
) {

562 
	`LWIP_DEBUGF
–
PBUF_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
,

564 (*)
p
->
∑ylﬂd
, (*)(p + 1)));

566 
p
->
∑ylﬂd
 =Öayload;

571 } i‡(
ty≥
 =
PBUF_REF
 ||Åy≥ =
PBUF_ROM
) {

573 i‡((
hódî_size_ö¸emít
 < 0Ë&& (
ö¸emít_magnôude
 <
p
->
Àn
)) {

575 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd - 
hódî_size_ö¸emít
;

581 } i‡(
ty≥
 =
PBUF_POOL_RX
) {

582 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd - 
hódî_size_ö¸emít
;

583 } i‡(
ty≥
 =
PBUF_POOL_TX
) {

584 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd - 
hódî_size_ö¸emít
;

587 
	`LWIP_ASSERT
("badÖbufÅype", 0);

591 
p
->
Àn
 +
hódî_size_ö¸emít
;

592 
p
->
tŸ_Àn
 +
hódî_size_ö¸emít
;

594 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_hódî: old %∞√w %∞(%"
S16_F
")\n",

595 (*)
∑ylﬂd
, (*)
p
->∑ylﬂd, 
hódî_size_ö¸emít
));

598 
	}
}

633 
u8_t


634 
	$pbuf_‰ì
(
pbuf
 *
p
, 
t˝ù_thªad
 *
t
)

636 
u16_t
 
ty≥
;

637 
pbuf
 *
q
;

638 
u8_t
 
cou¡
;

639 
˝u
;

641 i‡(
p
 =
NULL
) {

642 
	`LWIP_ASSERT
("∞!NULL", 
p
 !
NULL
);

644 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_LEVEL_SERIOUS
,

648 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_‰ì(%p)\n", (*)
p
));

650 
PERF_START
;

652 
	`LWIP_ASSERT
("pbuf_free: saneÅype",

653 
p
->
ty≥
 =
PBUF_RAM
 ||Ö->ty≥ =
PBUF_ROM
 ||

654 
p
->
ty≥
 =
PBUF_REF
 ||Ö->ty≥ =
PBUF_POOL
 ||

655 
p
->
ty≥
 =
PBUF_POOL_RX
 ||Ö->ty≥ =
PBUF_POOL_TX
);

657 
cou¡
 = 0;

660 i‡(!
t
) {

661 
˝u
 = 
	`sched_gë˝u
();

662 
t
 = 
lwù_t˝ù_thªad
[
˝u
];

664 
p
 !
NULL
) {

665 
u16_t
 
ªf
;

666 
	`±hªad_muãx_lock
(&
t
->
pbuf_muãx
);

670 
ªf
 = --(
p
->ref);

671 
	`±hªad_muãx_u∆ock
(&
t
->
pbuf_muãx
);

673 i‡(
ªf
 == 0) {

675 
q
 = 
p
->
√xt
;

676 
	`LWIP_DEBUGF
–
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_‰ì: dóŒoˇtög %p\n", (*)
p
));

677 
ty≥
 = 
p
->type;

678 #i‡
LWIP_SUPPORT_CUSTOM_PBUF


680 i‡((
p
->
Êags
 & 
PBUF_FLAG_IS_CUSTOM
) != 0) {

681 
pbuf_cu°om
 *
pc
 = (pbuf_cu°om*)
p
;

682 
	`LWIP_ASSERT
("pc->cu°om_‰ì_fun˘i⁄ !NULL", 
pc
->
cu°om_‰ì_fun˘i⁄
 !
NULL
);

683 
pc
->
	`cu°om_‰ì_fun˘i⁄
(
p
);

688 i‡(
ty≥
 =
PBUF_POOL_RX
) {

689 
p
->
	`cu°om_‰ì_fun˘i⁄
(
t
,p);

690 } i‡(
ty≥
 =
PBUF_POOL_TX
) {

691 
p
->
∑ylﬂd
 = 
NULL
;

692 } i‡(
ty≥
 =
PBUF_POOL
) {

693 
	`memp_‰ì
(
MEMP_PBUF_POOL
, 
p
, 
t
);

695 } i‡(
ty≥
 =
PBUF_ROM
 ||Åy≥ =
PBUF_REF
) {

696 
	`memp_‰ì
(
MEMP_PBUF
, 
p
, 
t
);

699 
	`mem_‰ì
(
p
);

702 
cou¡
++;

704 
p
 = 
q
;

708 
	`LWIP_DEBUGF
–
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_‰ì: %∞ha†ª‡%"
U16_F
",Éndög hîe.\n", (*)
p
, 
ªf
));

710 
p
 = 
NULL
;

713 
	`PERF_STOP
("pbuf_free");

715  
cou¡
;

716 
	}
}

725 
u8_t


726 
	$pbuf_˛í
(
pbuf
 *
p
)

728 
u8_t
 
Àn
;

730 
Àn
 = 0;

731 
p
 !
NULL
) {

732 ++
Àn
;

733 
p
 =Ö->
√xt
;

735  
Àn
;

736 
	}
}

745 
	$pbuf_ªf
(
pbuf
 *
p
)

747 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

749 i‡(
p
 !
NULL
) {

750 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

751 ++(
p
->
ªf
);

752 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

754 
	}
}

767 
	$pbuf_ˇt
(
pbuf
 *
h
, pbu‡*
t
)

769 
pbuf
 *
p
;

771 
	`LWIP_ERROR
("(h != NULL) && (t != NULL) (programmer violates API)",

772 ((
h
 !
NULL
Ë&& (
t
 != NULL)), ;);

775 
p
 = 
h
;Ö->
√xt
 !
NULL
;Ö =Ö->next) {

777 
p
->
tŸ_Àn
 +
t
->tot_len;

780 
	`LWIP_ASSERT
("p->tŸ_À¿=p->À¿(o‡œ°Öbu‡ö chaö)", 
p
->
tŸ_Àn
 =p->
Àn
);

781 
	`LWIP_ASSERT
("p->√xà=NULL", 
p
->
√xt
 =
NULL
);

783 
p
->
tŸ_Àn
 +
t
->tot_len;

785 
p
->
√xt
 = 
t
;

789 
	}
}

808 
	$pbuf_chaö
(
pbuf
 *
h
, pbu‡*
t
)

810 
	`pbuf_ˇt
(
h
, 
t
);

812 
	`pbuf_ªf
(
t
);

813 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_chaö: %∞ª„ªn˚†%p\n", (*)
h
, (*)
t
));

814 
	}
}

824 
pbuf
 *

825 
	$pbuf_dechaö
(
pbuf
 *
p
)

827 
pbuf
 *
q
;

828 
u8_t
 
èû_g⁄e
 = 1;

830 
q
 = 
p
->
√xt
;

832 i‡(
q
 !
NULL
) {

834 
	`LWIP_ASSERT
("p->tŸ_À¿=p->À¿+ q->tŸ_Àn", 
q
->
tŸ_Àn
 =
p
->tŸ_À¿-Ö->
Àn
);

836 
q
->
tŸ_Àn
 = 
p
->tŸ_À¿-Ö->
Àn
;

838 
p
->
√xt
 = 
NULL
;

840 
p
->
tŸ_Àn
 =Ö->
Àn
;

842 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_dechaö: uƒe„ªncög %p\n", (*)
q
));

843 
èû_g⁄e
 = 
	`pbuf_‰ì
(
q
, 
NULL
);

844 i‡(
èû_g⁄e
 > 0) {

845 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
,

846 ("pbuf_dechaö: dóŒoˇãd %∞◊†ô i†nÿl⁄gîÑe„ªn˚d)\n", (*)
q
));

851 
	`LWIP_ASSERT
("p->tŸ_À¿=p->Àn", 
p
->
tŸ_Àn
 =p->
Àn
);

852  ((
èû_g⁄e
 > 0Ë? 
NULL
 : 
q
);

853 
	}
}

873 
îr_t


874 
	$pbuf_c›y
(
pbuf
 *
p_to
, pbu‡*
p_‰om
)

876 
u16_t
 
off£t_to
=0, 
off£t_‰om
=0, 
Àn
;

878 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_copy(%p, %p)\n",

879 (*)
p_to
, (*)
p_‰om
));

882 
	`LWIP_ERROR
("pbuf_c›y:Å¨gëÇŸ bigÉnoughÅÿhﬁd sour˚", ((
p_to
 !
NULL
) &&

883 (
p_‰om
 !
NULL
Ë&& (
p_to
->
tŸ_Àn
 >p_‰om->tŸ_Àn)),  
ERR_ARG
;);

888 
	`LWIP_ASSERT
("p_tÿ!NULL", 
p_to
 !
NULL
);

890 i‡((
p_to
->
Àn
 - 
off£t_to
Ë>(
p_‰om
->À¿- 
off£t_‰om
)) {

892 
Àn
 = 
p_‰om
->À¿- 
off£t_‰om
;

895 
Àn
 = 
p_to
->À¿- 
off£t_to
;

897 
	`MEMCPY
((
u8_t
*)
p_to
->
∑ylﬂd
 + 
off£t_to
, (u8_t*)
p_‰om
->∑ylﬂd + 
off£t_‰om
, 
Àn
);

898 
off£t_to
 +
Àn
;

899 
off£t_‰om
 +
Àn
;

900 
	`LWIP_ASSERT
("off£t_tÿ<p_to->Àn", 
off£t_to
 <
p_to
->
Àn
);

901 i‡(
off£t_to
 =
p_to
->
Àn
) {

903 
off£t_to
 = 0;

904 
p_to
 =Ö_to->
√xt
;

906 
	`LWIP_ASSERT
("off£t_‰om <p_‰om->Àn", 
off£t_‰om
 <
p_‰om
->
Àn
);

907 i‡(
off£t_‰om
 >
p_‰om
->
Àn
) {

909 
off£t_‰om
 = 0;

910 
p_‰om
 =Ö_‰om->
√xt
;

913 if((
p_‰om
 !
NULL
Ë&& (p_‰om->
Àn
 =p_‰om->
tŸ_Àn
)) {

915 
	`LWIP_ERROR
("pbuf_copy() doesÇotállowÖacket queues!\n",

916 (
p_‰om
->
√xt
 =
NULL
),  
ERR_VAL
;);

918 if((
p_to
 !
NULL
Ë&& (p_to->
Àn
 =p_to->
tŸ_Àn
)) {

920 
	`LWIP_ERROR
("pbuf_copy() doesÇotállowÖacket queues!\n",

921 (
p_to
->
√xt
 =
NULL
),  
ERR_VAL
;);

923 } 
p_‰om
);

924 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf_copy:Énd of chainÑeached.\n"));

925  
ERR_OK
;

926 
	}
}

939 
u16_t


940 
	$pbuf_c›y_∑πül
(
pbuf
 *
buf
, *
d©≠å
, 
u16_t
 
Àn
, u16_à
off£t
)

942 
pbuf
 *
p
;

943 
u16_t
 
À·
;

944 
u16_t
 
buf_c›y_Àn
;

945 
u16_t
 
c›õd_tŸÆ
 = 0;

947 
	`LWIP_ERROR
("pbuf_c›y_∑πül: invÆid buf", (
buf
 !
NULL
),  0;);

948 
	`LWIP_ERROR
("pbuf_c›y_∑πül: invÆid d©≠å", (
d©≠å
 !
NULL
),  0;);

950 
À·
 = 0;

952 if((
buf
 =
NULL
Ë|| (
d©≠å
 == NULL)) {

957 
p
 = 
buf
; 
Àn
 !0 &&Ö !
NULL
;Ö =Ö->
√xt
) {

958 i‡((
off£t
 !0Ë&& (off£à>
p
->
Àn
)) {

960 
off£t
 -
p
->
Àn
;

963 
buf_c›y_Àn
 = 
p
->
Àn
 - 
off£t
;

964 i‡(
buf_c›y_Àn
 > 
Àn
)

965 
buf_c›y_Àn
 = 
Àn
;

967 
	`MEMCPY
(&((*)
d©≠å
)[
À·
], &((*)
p
->
∑ylﬂd
)[
off£t
], 
buf_c›y_Àn
);

968 
c›õd_tŸÆ
 +
buf_c›y_Àn
;

969 
À·
 +
buf_c›y_Àn
;

970 
Àn
 -
buf_c›y_Àn
;

971 
off£t
 = 0;

974  
c›õd_tŸÆ
;

975 
	}
}

987 
îr_t


988 
	$pbuf_èke
(
pbuf
 *
buf
, c⁄° *
d©≠å
, 
u16_t
 
Àn
)

990 
pbuf
 *
p
;

991 
u16_t
 
buf_c›y_Àn
;

992 
u16_t
 
tŸÆ_c›y_Àn
 = 
Àn
;

993 
u16_t
 
c›õd_tŸÆ
 = 0;

995 
	`LWIP_ERROR
("pbuf_èke: invÆid buf", (
buf
 !
NULL
),  0;);

996 
	`LWIP_ERROR
("pbuf_èke: invÆid d©≠å", (
d©≠å
 !
NULL
),  0;);

998 i‡((
buf
 =
NULL
Ë|| (
d©≠å
 =NULLË|| (buf->
tŸ_Àn
 < 
Àn
)) {

999  
ERR_ARG
;

1003 
p
 = 
buf
; 
tŸÆ_c›y_Àn
 !0;Ö =Ö->
√xt
) {

1004 
	`LWIP_ASSERT
("pbuf_èke: invÆidÖbuf", 
p
 !
NULL
);

1005 
buf_c›y_Àn
 = 
tŸÆ_c›y_Àn
;

1006 i‡(
buf_c›y_Àn
 > 
p
->
Àn
) {

1008 
buf_c›y_Àn
 = 
p
->
Àn
;

1011 
	`MEMCPY
(
p
->
∑ylﬂd
, &((*)
d©≠å
)[
c›õd_tŸÆ
], 
buf_c›y_Àn
);

1012 
tŸÆ_c›y_Àn
 -
buf_c›y_Àn
;

1013 
c›õd_tŸÆ
 +
buf_c›y_Àn
;

1015 
	`LWIP_ASSERT
("didÇŸ c›yáŒ d©a", 
tŸÆ_c›y_Àn
 =0 && 
c›õd_tŸÆ
 =
Àn
);

1016  
ERR_OK
;

1017 
	}
}

1031 
pbuf
*

1032 
	$pbuf_cﬂÀs˚
(
pbuf
 *
p
, 
pbuf_œyî
 
œyî
)

1034 
pbuf
 *
q
;

1035 
îr_t
 
îr
;

1036 i‡(
p
->
√xt
 =
NULL
) {

1037  
p
;

1039 
q
 = 
	`pbuf_Æloc
(
œyî
, 
p
->
tŸ_Àn
, 
PBUF_RAM
, 
NULL
);

1040 i‡(
q
 =
NULL
) {

1042  
p
;

1044 
îr
 = 
	`pbuf_c›y
(
q
, 
p
);

1045 
	`LWIP_ASSERT
("pbuf_c›y faûed", 
îr
 =
ERR_OK
);

1046 
	`pbuf_‰ì
(
p
, 
NULL
);

1047  
q
;

1048 
	}
}

1050 #i‡
LWIP_CHECKSUM_ON_COPY


1063 
îr_t


1064 
	$pbuf_fûl_chksum
(
pbuf
 *
p
, 
u16_t
 
°¨t_off£t
, c⁄° *
d©≠å
,

1065 
u16_t
 
Àn
, u16_à*
chksum
)

1067 
u32_t
 
acc
;

1068 
u16_t
 
c›y_chksum
;

1069 *
d°_±r
;

1070 
	`LWIP_ASSERT
("∞!NULL", 
p
 !
NULL
);

1071 
	`LWIP_ASSERT
("d©≠å !NULL", 
d©≠å
 !
NULL
);

1072 
	`LWIP_ASSERT
("chksum !NULL", 
chksum
 !
NULL
);

1073 
	`LWIP_ASSERT
("À¿!0", 
Àn
 != 0);

1075 i‡((
°¨t_off£t
 >
p
->
Àn
) || (start_offset +Üen >Ö->len)) {

1076  
ERR_ARG
;

1079 
d°_±r
 = ((*)
p
->
∑ylﬂd
Ë+ 
°¨t_off£t
;

1080 
c›y_chksum
 = 
	`LWIP_CHKSUM_COPY
(
d°_±r
, 
d©≠å
, 
Àn
);

1081 i‡((
°¨t_off£t
 & 1) != 0) {

1082 
c›y_chksum
 = 
	`SWAP_BYTES_IN_WORD
(copy_chksum);

1084 
acc
 = *
chksum
;

1085 
acc
 +
c›y_chksum
;

1086 *
chksum
 = 
	`FOLD_U32T
(
acc
);

1087  
ERR_OK
;

1088 
	}
}

1098 
u8_t


1099 
	$pbuf_gë_©
(
pbuf
* 
p
, 
u16_t
 
off£t
)

1101 
u16_t
 
c›y_‰om
 = 
off£t
;

1102 
pbuf
* 
q
 = 
p
;

1105 (
q
 !
NULL
Ë&& (q->
Àn
 <
c›y_‰om
)) {

1106 
c›y_‰om
 -
q
->
Àn
;

1107 
q
 = q->
√xt
;

1110 i‡((
q
 !
NULL
Ë&& (q->
Àn
 > 
c›y_‰om
)) {

1111  ((
u8_t
*)
q
->
∑ylﬂd
)[
c›y_‰om
];

1114 
	}
}

1125 
u16_t


1126 
	$pbuf_memcmp
(
pbuf
* 
p
, 
u16_t
 
off£t
, c⁄° * 
s2
, u16_à
n
)

1128 
u16_t
 
°¨t
 = 
off£t
;

1129 
pbuf
* 
q
 = 
p
;

1132 (
q
 !
NULL
Ë&& (q->
Àn
 <
°¨t
)) {

1133 
°¨t
 -
q
->
Àn
;

1134 
q
 = q->
√xt
;

1137 i‡((
q
 !
NULL
Ë&& (q->
Àn
 > 
°¨t
)) {

1138 
u16_t
 
i
;

1139 
i
 = 0; i < 
n
; i++) {

1140 
u8_t
 
a
 = 
	`pbuf_gë_©
(
q
, 
°¨t
 + 
i
);

1141 
u8_t
 
b
 = ((u8_t*)
s2
)[
i
];

1142 i‡(
a
 !
b
) {

1143  
i
+1;

1149 
	}
}

1161 
u16_t


1162 
	$pbuf_memföd
(
pbuf
* 
p
, c⁄° * 
mem
, 
u16_t
 
mem_Àn
, u16_à
°¨t_off£t
)

1164 
u16_t
 
i
;

1165 
u16_t
 
max
 = 
p
->
tŸ_Àn
 - 
mem_Àn
;

1166 i‡(
p
->
tŸ_Àn
 >
mem_Àn
 + 
°¨t_off£t
) {

1167 
i
 = 
°¨t_off£t
; i <
max
; ) {

1168 
u16_t
 
∂us
 = 
	`pbuf_memcmp
(
p
, 
i
, 
mem
, 
mem_Àn
);

1169 i‡(
∂us
 == 0) {

1170  
i
;

1172 
i
 +
∂us
;

1177 
	}
}

1189 
u16_t


1190 
	$pbuf_°r°r
(
pbuf
* 
p
, c⁄° * 
sub°r
)

1192 
size_t
 
sub°r_Àn
;

1193 i‡((
sub°r
 =
NULL
Ë|| (sub°r[0] =0Ë|| (
p
->
tŸ_Àn
 == 0xFFFF)) {

1196 
sub°r_Àn
 = 
	`°æí
(
sub°r
);

1197 i‡(
sub°r_Àn
 >= 0xFFFF) {

1200  
	`pbuf_memföd
(
p
, 
sub°r
, (
u16_t
)
sub°r_Àn
, 0);

1201 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/stats.c

39 
	~"lwù/›t.h
"

41 #i‡
LWIP_STATS


43 
	~"lwù/def.h
"

44 
	~"lwù/°©s.h
"

45 
	~"lwù/mem.h
"

47 
	~<°rög.h
>

49 
°©s_
 
	glwù_°©s
;

51 
	$°©s_öô
()

53 #ifde‡
LWIP_DEBUG


54 #i‡
MEMP_STATS


55 c⁄° * 
memp_«mes
[] = {

56 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ëdesc,

	)

57 
	~"lwù/memp_°d.h
"

59 
i
;

60 
i
 = 0; i < 
MEMP_MAX
; i++) {

61 
lwù_°©s
.
memp
[
i
].
«me
 = 
memp_«mes
[i];

64 #i‡
MEM_STATS


65 
lwù_°©s
.
mem
.
«me
 = "MEM";

68 
	}
}

70 #i‡
LWIP_STATS_DISPLAY


72 
	$°©s_di•œy_¥Ÿo
(
°©s_¥Ÿo
 *
¥Ÿo
, *
«me
)

74 
	`LWIP_PLATFORM_DIAG
(("\n%s\n\t", 
«me
));

75 
	`LWIP_PLATFORM_DIAG
(("xmô: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
xmô
));

76 
	`LWIP_PLATFORM_DIAG
(("ªcv: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
ªcv
));

77 
	`LWIP_PLATFORM_DIAG
(("fw: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
fw
));

78 
	`LWIP_PLATFORM_DIAG
(("dr›: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
dr›
));

79 
	`LWIP_PLATFORM_DIAG
(("chkîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
chkîr
));

80 
	`LWIP_PLATFORM_DIAG
(("À√º: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
À√º
));

81 
	`LWIP_PLATFORM_DIAG
(("memîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
memîr
));

82 
	`LWIP_PLATFORM_DIAG
(("πîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
πîr
));

83 
	`LWIP_PLATFORM_DIAG
(("¥Ÿîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
¥Ÿîr
));

84 
	`LWIP_PLATFORM_DIAG
(("›ãº: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
›ãº
));

85 
	`LWIP_PLATFORM_DIAG
(("îr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
îr
));

86 
	`LWIP_PLATFORM_DIAG
(("ˇchehô: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
ˇchehô
));

87 
	`LWIP_PLATFORM_DIAG
(("OOO: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
ooo
));

88 
	`LWIP_PLATFORM_DIAG
(("ªxmô: %"
STAT_COUNTER_F
"\n", 
¥Ÿo
->
ªxmô
));

89 
	}
}

91 #i‡
IGMP_STATS


93 
	$°©s_di•œy_igmp
(
°©s_igmp
 *
igmp
)

95 
	`LWIP_PLATFORM_DIAG
(("\nIGMP\n\t"));

96 
	`LWIP_PLATFORM_DIAG
(("xmô: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
xmô
));

97 
	`LWIP_PLATFORM_DIAG
(("ªcv: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
ªcv
));

98 
	`LWIP_PLATFORM_DIAG
(("dr›: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
dr›
));

99 
	`LWIP_PLATFORM_DIAG
(("chkîr: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
chkîr
));

100 
	`LWIP_PLATFORM_DIAG
(("À√º: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
À√º
));

101 
	`LWIP_PLATFORM_DIAG
(("memîr: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
memîr
));

102 
	`LWIP_PLATFORM_DIAG
(("¥Ÿîr: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
¥Ÿîr
));

103 
	`LWIP_PLATFORM_DIAG
(("rx_v1: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
rx_v1
));

104 
	`LWIP_PLATFORM_DIAG
(("rx_group: %"
STAT_COUNTER_F
"\n", 
igmp
->
rx_group
));

105 
	`LWIP_PLATFORM_DIAG
(("rx_gíîÆ: %"
STAT_COUNTER_F
"\n", 
igmp
->
rx_gíîÆ
));

106 
	`LWIP_PLATFORM_DIAG
(("rx_ªp‹t: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
rx_ªp‹t
));

107 
	`LWIP_PLATFORM_DIAG
(("tx_joö: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
tx_joö
));

108 
	`LWIP_PLATFORM_DIAG
(("tx_Àave: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
tx_Àave
));

109 
	`LWIP_PLATFORM_DIAG
(("tx_ªp‹t: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
tx_ªp‹t
));

110 
	}
}

113 #i‡
MEM_STATS
 || 
MEMP_STATS


115 
	$°©s_di•œy_mem
(
°©s_mem
 *
mem
, *
«me
)

117 
	`LWIP_PLATFORM_DIAG
(("\nMEM %s\n\t", 
«me
));

118 
	`LWIP_PLATFORM_DIAG
(("avaû: %"
U32_F
"\n\t", (
u32_t
)
mem
->
avaû
));

119 
	`LWIP_PLATFORM_DIAG
(("u£d: %"
U32_F
"\n\t", (
u32_t
)
mem
->
u£d
));

120 
	`LWIP_PLATFORM_DIAG
(("max: %"
U32_F
"\n\t", (
u32_t
)
mem
->
max
));

121 
	`LWIP_PLATFORM_DIAG
(("îr: %"
U32_F
"\n", (
u32_t
)
mem
->
îr
));

122 
	}
}

124 #i‡
MEMP_STATS


126 
	$°©s_di•œy_memp
(
°©s_mem
 *
mem
, 
ödex
)

128 * 
memp_«mes
[] = {

129 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ëdesc,

	)

130 
	~"lwù/memp_°d.h
"

132 if(
ödex
 < 
MEMP_MAX
) {

133 
	`°©s_di•œy_mem
(
mem
, 
memp_«mes
[
ödex
]);

135 
	}
}

139 #i‡
SYS_STATS


141 
	$°©s_di•œy_sys
(
°©s_sys
 *
sys
)

143 
	`LWIP_PLATFORM_DIAG
(("\nSYS\n\t"));

144 
	`LWIP_PLATFORM_DIAG
(("£m.u£d: %"
U32_F
"\n\t", (
u32_t
)
sys
->
£m
.
u£d
));

145 
	`LWIP_PLATFORM_DIAG
(("£m.max: %"
U32_F
"\n\t", (
u32_t
)
sys
->
£m
.
max
));

146 
	`LWIP_PLATFORM_DIAG
(("£m.îr: %"
U32_F
"\n\t", (
u32_t
)
sys
->
£m
.
îr
));

147 
	`LWIP_PLATFORM_DIAG
(("muãx.u£d: %"
U32_F
"\n\t", (
u32_t
)
sys
->
muãx
.
u£d
));

148 
	`LWIP_PLATFORM_DIAG
(("muãx.max: %"
U32_F
"\n\t", (
u32_t
)
sys
->
muãx
.
max
));

149 
	`LWIP_PLATFORM_DIAG
(("muãx.îr: %"
U32_F
"\n\t", (
u32_t
)
sys
->
muãx
.
îr
));

150 
	`LWIP_PLATFORM_DIAG
(("mbox.u£d: %"
U32_F
"\n\t", (
u32_t
)
sys
->
mbox
.
u£d
));

151 
	`LWIP_PLATFORM_DIAG
(("mbox.max: %"
U32_F
"\n\t", (
u32_t
)
sys
->
mbox
.
max
));

152 
	`LWIP_PLATFORM_DIAG
(("mbox.îr: %"
U32_F
"\n\t", (
u32_t
)
sys
->
mbox
.
îr
));

153 
	}
}

157 
	$°©s_di•œy
()

159 
s16_t
 
i
;

161 
	`LINK_STATS_DISPLAY
();

162 
	`ETHARP_STATS_DISPLAY
();

163 
	`IPFRAG_STATS_DISPLAY
();

164 
	`IP_STATS_DISPLAY
();

165 
	`IGMP_STATS_DISPLAY
();

166 
	`ICMP_STATS_DISPLAY
();

167 
	`UDP_STATS_DISPLAY
();

168 
	`TCP_STATS_DISPLAY
();

169 
	`MEM_STATS_DISPLAY
();

170 
i
 = 0; i < 
MEMP_MAX
; i++) {

171 
	`MEMP_STATS_DISPLAY
(
i
);

173 
	`SYS_STATS_DISPLAY
();

174 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/sys.c

38 
	#_GNU_SOURCE


	)

39 
	~<sched.h
>

40 
	~"lwù/›t.h
"

42 
	~"lwù/sys.h
"

44 
	~<°dio.h
>

45 
	~<uni°d.h
>

46 
	~<î∫o.h
>

47 
	~<numa.h
>

48 
	~<sys/°©.h
>

49 
	~<sys/sysˇŒ.h
>

50 
	~<as£π.h
>

52 
	#MAX_FILE_NAME
 1024

	)

57 #i‡!
NO_SYS


65 
	$sys_m¶ìp
(
u32_t
 
ms
)

67 i‡(
ms
 > 0) {

68 
sys_£m_t
 
dñay£m
;

69 
îr_t
 
îr
 = 
	`sys_£m_√w
(&
dñay£m
, 0);

70 i‡(
îr
 =
ERR_OK
) {

71 
	`sys_¨ch_£m_waô
(&
dñay£m
, 
ms
);

72 
	`sys_£m_‰ì
(&
dñay£m
);

75 
	}
}

79 
	$GëNumCPUs
()

81  
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

82 
	}
}

84 
pid_t


85 
	$Gëtid
()

87  
	`sysˇŒ
(
__NR_gëtid
);

88 
	}
}

91 
	$lwù_thªad_aff
 (
˝u
)

93 
˝u_£t_t
 
˝us
;

94 
bômask
 *
bmask
;

95 
FILE
 *
Â
;

96 
sys‚ame
[
MAX_FILE_NAME
];

97 
phy_id
;

98 
size_t
 
n
;

99 
ªt
;

101 
n
 = 
	`GëNumCPUs
();

103 i‡(
˝u
 < 0 || cpu >(Ë
n
) {

104 
î∫o
 = -
EINVAL
;

108 
	`CPU_ZERO
(&
˝us
);

109 
	`CPU_SET
(()
˝u
, &
˝us
);

111 
ªt
 = 
	`sched_£èfföôy
(
	`Gëtid
(), (
˝us
), &cpus);

112 i‡(
	`numa_max_node
() == 0)

113  
ªt
;

115 
bmask
 = 
	`numa_bômask_Æloc
(
n
);

116 
	`as£π
(
bmask
);

119 
	`¢¥ötf
(
sys‚ame
, 
MAX_FILE_NAME
 - 1,

120 "/sys/devi˚s/sy°em/˝u/˝u%d/t›ﬁogy/physiˇl_∑ckage_id", 
˝u
);

121 
Â
 = 
	`f›í
(
sys‚ame
, "r");

122 i‡(!
Â
) {

123 
	`≥º‹
(
sys‚ame
);

124 
î∫o
 = 
EFAULT
;

127 
	`fsˇnf
(
Â
, "%d", &
phy_id
);

129 
	`numa_bômask_£tbô
(
bmask
, 
phy_id
);

130 
	`numa_£t_memböd
(
bmask
);

131 
	`numa_bômask_‰ì
(
bmask
);

132 
	`f˛o£
(
Â
);

134  
ªt
;

135 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/tcp.c

43 
	~"lwù/›t.h
"

45 #i‡
LWIP_TCP


47 
	~"lwù/def.h
"

48 
	~"lwù/mem.h
"

49 
	~"lwù/memp.h
"

50 
	~"lwù/¢mp.h
"

51 
	~"lwù/t˝.h
"

52 
	~"lwù/t˝_im∂.h
"

53 
	~"lwù/debug.h
"

54 
	~"lwù/°©s.h
"

55 
	~"lwù/t˝ù.h
"

57 
	~<°rög.h
>

59 c⁄° * c⁄° 
	gt˝_°©e_°r
[] = {

73 c⁄° 
u8_t
 
	gt˝_backoff
[13] =

76 c⁄° 
u8_t
 
	gt˝_≥rsi°_backoff
[7] = { 3, 6, 12, 24, 48, 96, 120 };

80 
	#NUM_TCP_PCB_LISTS
 4

	)

81 
	#NUM_TCP_PCB_LISTS_NO_TIME_WAIT
 3

	)

83 
u16_t
 
t˝_√w_p‹t
();

90 
	$t˝_tmr
(
t˝ù_thªad
 *
thªad
)

96 
	`t˝_Á°tmr
();

98 i‡(++
thªad
->
t˝_timî
 & 1) {

101 
	`t˝_¶owtmr
();

103 
	}
}

121 
îr_t


122 
	$t˝_˛o£_shutdown
(
t˝_pcb
 *
pcb
, 
u8_t
 
r°_⁄_u«cked_d©a
)

124 
îr_t
 
îr
;

125 
˝u
 = 
	`sched_gë˝u
();

127 i‡(
r°_⁄_u«cked_d©a
 && (
pcb
->
°©e
 !
LISTEN
)) {

128 i‡((
pcb
->
ªfu£d_d©a
 !
NULL
Ë|| (pcb->
rcv_wnd
 !
TCP_WND
)) {

131 
	`LWIP_ASSERT
("pcb->Êag†& TF_RXCLOSED", 
pcb
->
Êags
 & 
TF_RXCLOSED
);

135 
	`t˝_r°
(
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
, &pcb->
loˇl_ù
, &pcb->
ªmŸe_ù
,

136 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
);

138 
	`t˝_pcb_purge
(
pcb
);

143 
	`TCP_RMV
(&
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_a˘ive_pcbs
, 
pcb
,Üwù_t˝ù_thªad[˝u]->t˝ù_d©a.
t˝_tmp_pcb
);

144 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_pcbs
[lwù_t˝ù_thªad[˝u]->t˝ù_d©a.
t˝_tmp_pcb
->
loˇl_p‹t
 % 
NUM_FLOWS
] = 
NULL
;

145 
pcb
->
°©e
 = 
TIME_WAIT
;

146 
	`TCP_REG
(&
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_tw_pcbs
, 
pcb
);

148  
ERR_OK
;

152 
pcb
->
°©e
) {

153 
CLOSED
:

161 
îr
 = 
ERR_OK
;

162 i‡(
pcb
->
loˇl_p‹t
 != 0) {

163 
	`TCP_RMV
(&
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_bound_pcbs
, 
pcb
,Üwù_t˝ù_thªad[˝u]->t˝ù_d©a.
t˝_tmp_pcb
);

165 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
, 
lwù_t˝ù_thªad
[
˝u
]);

166 
pcb
 = 
NULL
;

168 
LISTEN
:

169 
îr
 = 
ERR_OK
;

170 
	`t˝_pcb_ªmove
(&
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_li°í_pcbs
.
pcbs
, 
pcb
);

171 
	`memp_‰ì
(
MEMP_TCP_PCB_LISTEN
, 
pcb
, 
lwù_t˝ù_thªad
[
˝u
]);

172 
pcb
 = 
NULL
;

174 
SYN_SENT
:

175 
îr
 = 
ERR_OK
;

176 
	`t˝_pcb_ªmove
(&
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_a˘ive_pcbs
, 
pcb
);

177 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_pcbs
[
pcb
->
loˇl_p‹t
 % 
NUM_FLOWS
] = 
NULL
;

178 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
, 
lwù_t˝ù_thªad
[
˝u
]);

179 
pcb
 = 
NULL
;

180 
	`¢mp_öc_t˝©ãm±Áûs
();

182 
SYN_RCVD
:

183 
îr
 = 
	`t˝_£nd_fö
(
pcb
);

184 i‡(
îr
 =
ERR_OK
) {

185 
	`¢mp_öc_t˝©ãm±Áûs
();

186 
pcb
->
°©e
 = 
FIN_WAIT_1
;

189 
ESTABLISHED
:

190 
îr
 = 
	`t˝_£nd_fö
(
pcb
);

191 i‡(
îr
 =
ERR_OK
) {

192 
	`¢mp_öc_t˝e°abª£ts
();

193 
pcb
->
°©e
 = 
FIN_WAIT_1
;

196 
CLOSE_WAIT
:

197 
îr
 = 
	`t˝_£nd_fö
(
pcb
);

198 i‡(
îr
 =
ERR_OK
) {

199 
	`¢mp_öc_t˝e°abª£ts
();

200 
pcb
->
°©e
 = 
LAST_ACK
;

205 
îr
 = 
ERR_OK
;

206 
pcb
 = 
NULL
;

210 i‡(
pcb
 !
NULL
 && 
îr
 =
ERR_OK
) {

219 
	`t˝_ouçut
(
pcb
);

221  
îr
;

222 
	}
}

238 
îr_t


239 
	$t˝_˛o£
(
t˝_pcb
 *
pcb
)

241 #i‡
TCP_DEBUG


242 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_close: closing in "));

243 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

246 i‡(
pcb
->
°©e
 !
LISTEN
) {

248 
pcb
->
Êags
 |
TF_RXCLOSED
;

251  
	`t˝_˛o£_shutdown
(
pcb
, 1);

252 
	}
}

264 
îr_t


265 
	$t˝_shutdown
(
t˝_pcb
 *
pcb
, 
shut_rx
, 
shut_tx
)

267 i‡(
pcb
->
°©e
 =
LISTEN
) {

268  
ERR_CONN
;

270 i‡(
shut_rx
) {

272 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

273 
	`pbuf_‰ì
(
pcb
->
ªfu£d_d©a
, 
NULL
);

274 
pcb
->
ªfu£d_d©a
 = 
NULL
;

277 
pcb
->
Êags
 |
TF_RXCLOSED
;

279 i‡(
shut_tx
) {

282 
pcb
->
°©e
) {

283 
SYN_RCVD
:

284 
ESTABLISHED
:

285 
CLOSE_WAIT
:

286  
	`t˝_˛o£_shutdown
(
pcb
, 0);

293  
ERR_OK
;

294 
	}
}

305 
	$t˝_ab™d⁄
(
t˝_pcb
 *
pcb
, 
ª£t
)

307 
u32_t
 
£qno
, 
ackno
;

308 
u16_t
 
ªmŸe_p‹t
, 
loˇl_p‹t
;

309 
ù_addr_t
 
ªmŸe_ù
, 
loˇl_ù
;

310 #i‡
LWIP_CALLBACK_API


311 
t˝_îr_‚
 
îrf
;

313 *
îrf_¨g
;

314 
˝u
 = 
	`sched_gë˝u
();

317 
	`LWIP_ASSERT
("don't callÅcp_abort/tcp_abandon forÜisten-pcbs",

318 
pcb
->
°©e
 !
LISTEN
);

322 i‡(
pcb
->
°©e
 =
TIME_WAIT
) {

323 
	`t˝_pcb_ªmove
(&
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_tw_pcbs
, 
pcb
);

324 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
, 
lwù_t˝ù_thªad
[
˝u
]);

326 
£qno
 = 
pcb
->
¢d_nxt
;

327 
ackno
 = 
pcb
->
rcv_nxt
;

328 
	`ù_addr_c›y
(
loˇl_ù
, 
pcb
->local_ip);

329 
	`ù_addr_c›y
(
ªmŸe_ù
, 
pcb
->remote_ip);

330 
loˇl_p‹t
 = 
pcb
->local_port;

331 
ªmŸe_p‹t
 = 
pcb
->remote_port;

332 #i‡
LWIP_CALLBACK_API


333 
îrf
 = 
pcb
->errf;

335 
îrf_¨g
 = 
pcb
->
ˇŒback_¨g
;

336 
	`t˝_pcb_ªmove
(&
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_a˘ive_pcbs
, 
pcb
);

337 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_pcbs
[
pcb
->
loˇl_p‹t
 % 
NUM_FLOWS
] = 
NULL
;

338 i‡(
pcb
->
u«cked
 !
NULL
) {

339 
	`t˝_£gs_‰ì
(
pcb
->
u«cked
);

341 i‡(
pcb
->
un£¡
 !
NULL
) {

342 
	`t˝_£gs_‰ì
(
pcb
->
un£¡
);

344 #i‡
TCP_QUEUE_OOSEQ


345 i‡(
pcb
->
oo£q
 !
NULL
) {

346 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

349 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
, 
lwù_t˝ù_thªad
[
˝u
]);

350 
	`TCP_EVENT_ERR
(
îrf
, 
îrf_¨g
, 
ERR_ABRT
);

351 i‡(
ª£t
) {

352 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("tcp_abandon: sending RST\n"));

353 
	`t˝_r°
(
£qno
, 
ackno
, &
loˇl_ù
, &
ªmŸe_ù
, 
loˇl_p‹t
, 
ªmŸe_p‹t
);

356 
	}
}

369 
	$t˝_ab‹t
(
t˝_pcb
 *
pcb
)

371 
	`t˝_ab™d⁄
(
pcb
, 1);

372 
	}
}

388 
îr_t


389 
	$t˝_böd
(
t˝_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
, 
u16_t
 
p‹t
)

391 
i
;

392 
max_pcb_li°
 = 
NUM_TCP_PCB_LISTS
;

393 
t˝_pcb
 *
˝cb
;

394 
˝u
 = 
	`sched_gë˝u
();

396 
	`LWIP_ERROR
("t˝_böd: c™ o∆y böd i¿°©êCLOSED", 
pcb
->
°©e
 =
CLOSED
,  
ERR_VAL
);

398 #i‡
SO_REUSE


404 i‡((
pcb
->
so_›ti⁄s
 & 
SOF_REUSEADDR
) != 0) {

405 
max_pcb_li°
 = 
NUM_TCP_PCB_LISTS_NO_TIME_WAIT
;

409 i‡(
p‹t
 == 0) {

410 
p‹t
 = 
	`t˝_√w_p‹t
();

414 
i
 = 0; i < 
max_pcb_li°
; i++) {

415 
˝cb
 = *
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_pcb_li°s
[
i
]; cpcb !
NULL
; cpcb = cpcb->
√xt
) {

416 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

417 #i‡
SO_REUSE


421 i‡(((
pcb
->
so_›ti⁄s
 & 
SOF_REUSEADDR
) == 0) ||

422 ((
˝cb
->
so_›ti⁄s
 & 
SOF_REUSEADDR
) == 0))

425 i‡(
	`ù_addr_ißny
(&(
˝cb
->
loˇl_ù
)) ||

426 
	`ù_addr_ißny
(
ùaddr
) ||

427 
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

428  
ERR_USE
;

435 i‡(!
	`ù_addr_ißny
(
ùaddr
)) {

436 
pcb
->
loˇl_ù
 = *
ùaddr
;

438 
pcb
->
loˇl_p‹t
 = 
p‹t
;

439 
	`TCP_REG
(&
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_bound_pcbs
, 
pcb
);

440 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_böd: bödÅÿp‹à%"
U16_F
"\n", 
p‹t
));

441  
ERR_OK
;

442 
	}
}

443 #i‡
LWIP_CALLBACK_API


447 
îr_t


448 
	$t˝_ac˚±_nuŒ
(*
¨g
, 
t˝_pcb
 *
pcb
, 
îr_t
 
îr
)

450 
	`LWIP_UNUSED_ARG
(
¨g
);

451 
	`LWIP_UNUSED_ARG
(
pcb
);

452 
	`LWIP_UNUSED_ARG
(
îr
);

454  
ERR_ABRT
;

455 
	}
}

472 
t˝_pcb
 *

473 
	$t˝_li°í_wôh_backlog
(
t˝_pcb
 *
pcb
, 
u8_t
 
backlog
)

475 
t˝_pcb_li°í
 *
Õcb
;

476 
˝u
 = 
	`sched_gë˝u
();

478 
	`LWIP_UNUSED_ARG
(
backlog
);

479 
	`LWIP_ERROR
("t˝_li°í:ÖcbáÃódy c⁄√˘ed", 
pcb
->
°©e
 =
CLOSED
,  
NULL
);

482 i‡(
pcb
->
°©e
 =
LISTEN
) {

483  
pcb
;

485 #i‡
SO_REUSE


486 i‡((
pcb
->
so_›ti⁄s
 & 
SOF_REUSEADDR
) != 0) {

490 
Õcb
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;Üpcb !
NULL
;Üpcb =Üpcb->
√xt
) {

491 i‡(
Õcb
->
loˇl_p‹t
 =
pcb
->local_port) {

492 i‡(
	`ù_addr_cmp
(&
Õcb
->
loˇl_ù
, &
pcb
->local_ip)) {

494  
NULL
;

500 
Õcb
 = (
t˝_pcb_li°í
 *)
	`memp_mÆloc
(
MEMP_TCP_PCB_LISTEN
, 
lwù_t˝ù_thªad
[
˝u
]);

501 i‡(
Õcb
 =
NULL
) {

502  
NULL
;

504 
Õcb
->
ˇŒback_¨g
 = 
pcb
->callback_arg;

505 
Õcb
->
loˇl_p‹t
 = 
pcb
->local_port;

506 
Õcb
->
°©e
 = 
LISTEN
;

507 
Õcb
->
¥io
 = 
pcb
->prio;

508 
Õcb
->
so_›ti⁄s
 = 
pcb
->so_options;

509 
Õcb
->
so_›ti⁄s
 |
SOF_ACCEPTCONN
;

510 
Õcb
->
âl
 = 
pcb
->ttl;

511 
Õcb
->
tos
 = 
pcb
->tos;

512 
	`ù_addr_c›y
(
Õcb
->
loˇl_ù
, 
pcb
->local_ip);

513 i‡(
pcb
->
loˇl_p‹t
 != 0) {

514 
	`TCP_RMV
(&
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_bound_pcbs
, 
pcb
,Üwù_t˝ù_thªad[˝u]->t˝ù_d©a.
t˝_tmp_pcb
);

516 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
, 
lwù_t˝ù_thªad
[
˝u
]);

517 #i‡
LWIP_CALLBACK_API


518 
Õcb
->
ac˚±
 = 
t˝_ac˚±_nuŒ
;

520 #i‡
TCP_LISTEN_BACKLOG


521 
Õcb
->
ac˚±s_≥ndög
 = 0;

522 
Õcb
->
backlog
 = (backlog ? backlog : 1);

524 
	`TCP_REG
(&
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_li°í_pcbs
.
pcbs
, (
t˝_pcb
 *)
Õcb
);

525  (
t˝_pcb
 *)
Õcb
;

526 
	}
}

534 
u32_t
 
	$t˝_upd©e_rcv_™n_wnd
(
t˝_pcb
 *
pcb
)

536 
u32_t
 
√w_right_edge
 = 
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
;

538 i‡(
	`TCP_SEQ_GEQ
(
√w_right_edge
, 
pcb
->
rcv_™n_right_edge
 + 
	`LWIP_MIN
((
TCP_WND
 / 2),Öcb->
mss
))) {

540 
pcb
->
rcv_™n_wnd
 =Öcb->
rcv_wnd
;

541  
√w_right_edge
 - 
pcb
->
rcv_™n_right_edge
;

543 i‡(
	`TCP_SEQ_GT
(
pcb
->
rcv_nxt
,Öcb->
rcv_™n_right_edge
)) {

546 
pcb
->
rcv_™n_wnd
 = 0;

549 
u32_t
 
√w_rcv_™n_wnd
 = 
pcb
->
rcv_™n_right_edge
 -Öcb->
rcv_nxt
;

550 
	`LWIP_ASSERT
("√w_rcv_™n_wnd <0xffff", 
√w_rcv_™n_wnd
 <= 0xffff);

551 
pcb
->
rcv_™n_wnd
 = (
u16_t
)
√w_rcv_™n_wnd
;

555 
	}
}

566 
	$t˝_ªcved
(
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
)

568 
wnd_öÊ©i⁄
;

570 
	`LWIP_ASSERT
("tcp_recved:Üen would wrapÑcv_wnd\n",

571 
Àn
 <0xfff‡- 
pcb
->
rcv_wnd
 );

573 
pcb
->
rcv_wnd
 +
Àn
;

574 i‡(
pcb
->
rcv_wnd
 > 
TCP_WND
) {

575 
pcb
->
rcv_wnd
 = 
TCP_WND
;

578 
wnd_öÊ©i⁄
 = 
	`t˝_upd©e_rcv_™n_wnd
(
pcb
);

584 i‡(
wnd_öÊ©i⁄
 >
TCP_WND_UPDATE_THRESHOLD
) {

585 
	`t˝_ack_now
(
pcb
);

586 
	`t˝_ouçut
(
pcb
);

589 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_ªcved:Ñecveived %"
U16_F
" bytes, wnd %"U16_F" (%"U16_F").\n",

590 
Àn
, 
pcb
->
rcv_wnd
, 
TCP_WND
 -Öcb->rcv_wnd));

591 
	}
}

599 
u16_t


600 
	$t˝_√w_p‹t
()

602 
i
;

603 
t˝_pcb
 *
pcb
;

604 
˝u
 = 
	`sched_gë˝u
();

605 #i‚de‡
TCP_LOCAL_PORT_RANGE_START


608 
	#TCP_LOCAL_PORT_RANGE_START
 0xc000

	)

609 
	#TCP_LOCAL_PORT_RANGE_END
 0xffff

	)

612 
agaö
:

613 i‡(
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
p‹t
++ >
TCP_LOCAL_PORT_RANGE_END
) {

614 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
p‹t
 = 
TCP_LOCAL_PORT_RANGE_START
;

617 
i
 = 0; i < 
NUM_TCP_PCB_LISTS
; i++) {

618 
pcb
 = *
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_pcb_li°s
[
i
];Öcb !
NULL
;Öcb =Öcb->
√xt
) {

619 i‡(
pcb
->
loˇl_p‹t
 =
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
p‹t
) {

620 
agaö
;

624  
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
p‹t
;

625 
	}
}

639 
îr_t


640 
	$t˝_c⁄√˘
(
t˝_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
, 
u16_t
 
p‹t
,

641 
t˝_c⁄√˘ed_‚
 
c⁄√˘ed
)

643 
îr_t
 
ªt
;

644 
u32_t
 
iss
;

645 
u16_t
 
ﬁd_loˇl_p‹t
;

646 
˝u
 = 
	`sched_gë˝u
();

648 
	`LWIP_ERROR
("t˝_c⁄√˘: c™ o∆y c⁄√˘ from sèã CLOSED", 
pcb
->
°©e
 =
CLOSED
,  
ERR_ISCONN
);

650 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_c⁄√˘Åÿp‹à%"
U16_F
"\n", 
p‹t
));

651 i‡(
ùaddr
 !
NULL
) {

652 
pcb
->
ªmŸe_ù
 = *
ùaddr
;

654  
ERR_VAL
;

656 
pcb
->
ªmŸe_p‹t
 = 
p‹t
;

659 i‡(
	`ù_addr_ißny
(&(
pcb
->
loˇl_ù
))) {

661 
√tif
 *√ti‡
	`ù_rouã
(&(
pcb
->
ªmŸe_ù
), 
	`sched_gë˝u
());

662 i‡(
√tif
 =
NULL
) {

665  
ERR_RTE
;

668 
	`ù_addr_c›y
(
pcb
->
loˇl_ù
, 
√tif
->
ù_addr
);

671 
ﬁd_loˇl_p‹t
 = 
pcb
->
loˇl_p‹t
;

672 i‡(
pcb
->
loˇl_p‹t
 == 0) {

673 
pcb
->
loˇl_p‹t
 = 
	`t˝_√w_p‹t
();

675 #i‡
SO_REUSE


676 i‡((
pcb
->
so_›ti⁄s
 & 
SOF_REUSEADDR
) != 0) {

679 
t˝_pcb
 *
˝cb
;

680 
i
;

682 
i
 = 2; i < 
NUM_TCP_PCB_LISTS
; i++) {

683 
˝cb
 = *
t˝_pcb_li°s
[
i
]; cpcb !
NULL
; cpcb = cpcb->
√xt
) {

684 i‡((
˝cb
->
loˇl_p‹t
 =
pcb
->local_port) &&

685 (
˝cb
->
ªmŸe_p‹t
 =
p‹t
) &&

686 
	`ù_addr_cmp
(&
˝cb
->
loˇl_ù
, &
pcb
->local_ip) &&

687 
	`ù_addr_cmp
(&
˝cb
->
ªmŸe_ù
, 
ùaddr
)) {

689  
ERR_USE
;

695 
iss
 = 
	`t˝_√xt_iss
(
lwù_t˝ù_thªad
[
˝u
]);

696 
pcb
->
rcv_nxt
 = 0;

697 
pcb
->
¢d_nxt
 = 
iss
;

698 
pcb
->
œ°ack
 = 
iss
 - 1;

699 
pcb
->
¢d_lbb
 = 
iss
 - 1;

700 
pcb
->
rcv_wnd
 = 
TCP_WND
;

701 
pcb
->
rcv_™n_wnd
 = 
TCP_WND
;

702 
pcb
->
rcv_™n_right_edge
 =Öcb->
rcv_nxt
;

703 
pcb
->
¢d_wnd
 = 
TCP_WND
;

706 
pcb
->
mss
 = (
TCP_MSS
 > 536) ? 536 : TCP_MSS;

707 #i‡
TCP_CALCULATE_EFF_SEND_MSS


708 
pcb
->
mss
 = 
	`t˝_eff_£nd_mss
’cb->mss, 
ùaddr
);

710 
pcb
->
cwnd
 = 1;

711 
pcb
->
s°hªsh
 =Öcb->
mss
 * 10;

712 #i‡
LWIP_CALLBACK_API


713 
pcb
->
c⁄√˘ed
 = connected;

715 
	`LWIP_UNUSED_ARG
(
c⁄√˘ed
);

719 
ªt
 = 
	`t˝_íqueue_Êags
(
pcb
, 
TCP_SYN
);

720 i‡(
ªt
 =
ERR_OK
) {

722 
pcb
->
°©e
 = 
SYN_SENT
;

723 i‡(
ﬁd_loˇl_p‹t
 != 0) {

724 
	`TCP_RMV
(&
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_bound_pcbs
, 
pcb
,Üwù_t˝ù_thªad[˝u]->t˝ù_d©a.
t˝_tmp_pcb
);

726 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_pcbs
[
pcb
->
loˇl_p‹t
 % 
NUM_FLOWS
] =Öcb;

727 
	`TCP_REG
(&
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_a˘ive_pcbs
, 
pcb
);

728 
	`¢mp_öc_t˝a˘ive›ís
();

730 
	`t˝_ouçut
(
pcb
);

732  
ªt
;

733 
	}
}

743 
	$t˝_¶owtmr
()

745 
t˝_pcb
 *
pcb
, *
¥ev
;

746 
u16_t
 
eff_wnd
;

747 
u8_t
 
pcb_ªmove
;

748 
u8_t
 
pcb_ª£t
;

749 
îr_t
 
îr
;

750 
˝u
 = 
	`sched_gë˝u
();

752 
îr
 = 
ERR_OK
;

754 ++
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_ticks
;

757 
¥ev
 = 
NULL
;

758 
pcb
 = 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_a˘ive_pcbs
;

759 i‡(
pcb
 =
NULL
) {

760 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÇoáctiveÖcbs\n"));

762 
pcb
 !
NULL
) {

763 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÖrocessingáctiveÖcb\n"));

764 
	`LWIP_ASSERT
("t˝_¶owtmr:á˘ivêpcb->°©ê!CLOSED\n", 
pcb
->
°©e
 !
CLOSED
);

765 
	`LWIP_ASSERT
("t˝_¶owtmr:á˘ivêpcb->°©ê!LISTEN\n", 
pcb
->
°©e
 !
LISTEN
);

766 
	`LWIP_ASSERT
("t˝_¶owtmr:á˘ivêpcb->°©ê!TIME-WAIT\n", 
pcb
->
°©e
 !
TIME_WAIT
);

768 
pcb_ªmove
 = 0;

769 
pcb_ª£t
 = 0;

771 i‡(
pcb
->
°©e
 =
SYN_SENT
 &&Öcb->
ƒtx
 =
TCP_SYNMAXRTX
) {

772 ++
pcb_ªmove
;

773 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr: max SYNÑetriesÑeached\n"));

775 i‡(
pcb
->
ƒtx
 =
TCP_MAXRTX
) {

776 ++
pcb_ªmove
;

777 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr: max DATAÑetriesÑeached\n"));

779 i‡(
pcb
->
≥rsi°_backoff
 > 0) {

782 
pcb
->
≥rsi°_˙t
++;

783 i‡(
pcb
->
≥rsi°_˙t
 >
t˝_≥rsi°_backoff
[pcb->
≥rsi°_backoff
-1]) {

784 
pcb
->
≥rsi°_˙t
 = 0;

785 i‡(
pcb
->
≥rsi°_backoff
 < (
t˝_≥rsi°_backoff
)) {

786 
pcb
->
≥rsi°_backoff
++;

788 
	`t˝_zîo_wödow_¥obe
(
pcb
);

792 if(
pcb
->
πime
 >= 0)

793 ++
pcb
->
πime
;

795 i‡(
pcb
->
u«cked
 !
NULL
 &&Öcb->
πime
 >pcb->
πo
) {

797 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_¶owtmr:Ñtimê%"
S16_F


798 "Öcb->πÿ%"
S16_F
"\n",

799 
pcb
->
πime
,Öcb->
πo
));

803 i‡(
pcb
->
°©e
 !
SYN_SENT
) {

804 
pcb
->
πo
 = (’cb->
ß
 >> 3Ë+Öcb->
sv
Ë<< 
t˝_backoff
[pcb->
ƒtx
];

808 
pcb
->
πime
 = 0;

811 
eff_wnd
 = 
	`LWIP_MIN
(
pcb
->
cwnd
,Öcb->
¢d_wnd
);

812 
pcb
->
s°hªsh
 = 
eff_wnd
 >> 1;

813 i‡(
pcb
->
s°hªsh
 < (pcb->
mss
 << 1)) {

814 
pcb
->
s°hªsh
 = (pcb->
mss
 << 1);

816 
pcb
->
cwnd
 =Öcb->
mss
;

817 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_¶owtmr: cwnd %"
U16_F


818 " s°hªsh %"
U16_F
"\n",

819 
pcb
->
cwnd
,Öcb->
s°hªsh
));

823 
	`t˝_ªxmô_πo
(
pcb
);

828 i‡(
pcb
->
°©e
 =
FIN_WAIT_2
) {

829 i‡((
u32_t
)(
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_ticks
 - 
pcb
->
tmr
) >

830 
TCP_FIN_WAIT_TIMEOUT
 / 
TCP_SLOW_INTERVAL
) {

831 ++
pcb_ªmove
;

832 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÑemovingÖcb stuck in FIN-WAIT-2\n"));

837 if((
pcb
->
so_›ti⁄s
 & 
SOF_KEEPALIVE
) &&

838 ((
pcb
->
°©e
 =
ESTABLISHED
) ||

839 (
pcb
->
°©e
 =
CLOSE_WAIT
))) {

840 #i‡
LWIP_TCP_KEEPALIVE


841 if((
u32_t
)(
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_ticks
 - 
pcb
->
tmr
) >

842 (
pcb
->
kìp_idÀ
 + (pcb->
kìp_˙t
*pcb->
kìp_ötvl
))

843 / 
TCP_SLOW_INTERVAL
)

845 if((
u32_t
)(
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_ticks
 - 
pcb
->
tmr
) >

846 (
pcb
->
kìp_idÀ
 + 
TCP_MAXIDLE
Ë/ 
TCP_SLOW_INTERVAL
)

849 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_¶owtmr: KEEPALIVEÅimeout. Ab‹tög c⁄√˘i⁄Åÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F".\n",

850 
	`ù4_addr1_16
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2_16
(&pcb->remote_ip),

851 
	`ù4_addr3_16
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4_16
(&pcb->remote_ip)));

853 ++
pcb_ªmove
;

854 ++
pcb_ª£t
;

856 #i‡
LWIP_TCP_KEEPALIVE


857 if((
u32_t
)(
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_ticks
 - 
pcb
->
tmr
) >

858 (
pcb
->
kìp_idÀ
 +Öcb->
kìp_˙t_£¡
 *Öcb->
kìp_ötvl
)

859 / 
TCP_SLOW_INTERVAL
)

861 if((
u32_t
)(
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_ticks
 - 
pcb
->
tmr
) >

862 (
pcb
->
kìp_idÀ
 +Öcb->
kìp_˙t_£¡
 * 
TCP_KEEPINTVL_DEFAULT
)

863 / 
TCP_SLOW_INTERVAL
)

866 
	`t˝_kì∑live
(
pcb
);

867 
pcb
->
kìp_˙t_£¡
++;

874 #i‡
TCP_QUEUE_OOSEQ


875 i‡(
pcb
->
oo£q
 !
NULL
 &&

876 (
u32_t
)
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_ticks
 - 
pcb
->
tmr
 >pcb->
πo
 * 
TCP_OOSEQ_TIMEOUT
) {

877 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

878 
pcb
->
oo£q
 = 
NULL
;

879 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("tcp_slowtmr: dropping OOSEQ queued data\n"));

884 i‡(
pcb
->
°©e
 =
SYN_RCVD
) {

885 i‡((
u32_t
)(
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_ticks
 - 
pcb
->
tmr
) >

886 
TCP_SYN_RCVD_TIMEOUT
 / 
TCP_SLOW_INTERVAL
) {

887 ++
pcb_ªmove
;

888 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÑemovingÖcb stuck in SYN-RCVD\n"));

893 i‡(
pcb
->
°©e
 =
LAST_ACK
) {

894 i‡((
u32_t
)(
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_ticks
 - 
pcb
->
tmr
Ë> 2 * 
TCP_MSL
 / 
TCP_SLOW_INTERVAL
) {

895 ++
pcb_ªmove
;

896 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÑemovingÖcb stuck in LAST-ACK\n"));

901 i‡(
pcb_ªmove
) {

902 
t˝_pcb
 *
pcb2
;

903 
	`t˝_pcb_purge
(
pcb
);

905 i‡(
¥ev
 !
NULL
) {

906 
	`LWIP_ASSERT
("t˝_¶owtmr: middÀÅ˝ !t˝_a˘ive_pcbs", 
pcb
 !
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_a˘ive_pcbs
);

907 
¥ev
->
√xt
 = 
pcb
->next;

910 
	`LWIP_ASSERT
("t˝_¶owtmr: fú°Öcb =t˝_a˘ive_pcbs", 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_a˘ive_pcbs
 =
pcb
);

911 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_a˘ive_pcbs
 = 
pcb
->
√xt
;

914 
	`TCP_EVENT_ERR
(
pcb
->
îrf
,Öcb->
ˇŒback_¨g
, 
ERR_ABRT
);

915 i‡(
pcb_ª£t
) {

916 
	`t˝_r°
(
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
, &pcb->
loˇl_ù
, &pcb->
ªmŸe_ù
,

917 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
);

920 
pcb2
 = 
pcb
;

921 
pcb
 =Öcb->
√xt
;

922 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb2
, 
lwù_t˝ù_thªad
[
˝u
]);

925 
¥ev
 = 
pcb
;

926 
pcb
 =Öcb->
√xt
;

929 ++
¥ev
->
pﬁ…mr
;

930 i‡(
¥ev
->
pﬁ…mr
 >¥ev->
pﬁlöãrvÆ
) {

931 
¥ev
->
pﬁ…mr
 = 0;

932 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:Öollingápplication\n"));

933 
	`TCP_EVENT_POLL
(
¥ev
, 
îr
);

935 i‡(
îr
 =
ERR_OK
) {

936 
	`t˝_ouçut
(
¥ev
);

944 
¥ev
 = 
NULL
;

945 
pcb
 = 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_tw_pcbs
;

946 
pcb
 !
NULL
) {

947 
	`LWIP_ASSERT
("t˝_¶owtmr: TIME-WAITÖcb->°©ê=TIME-WAIT", 
pcb
->
°©e
 =
TIME_WAIT
);

948 
pcb_ªmove
 = 0;

951 i‡((
u32_t
)(
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_ticks
 - 
pcb
->
tmr
Ë> 2 * 
TCP_MSL
 / 
TCP_SLOW_INTERVAL
) {

952 ++
pcb_ªmove
;

958 i‡(
pcb_ªmove
) {

959 
t˝_pcb
 *
pcb2
;

960 
	`t˝_pcb_purge
(
pcb
);

962 i‡(
¥ev
 !
NULL
) {

963 
	`LWIP_ASSERT
("t˝_¶owtmr: middÀÅ˝ !t˝_tw_pcbs", 
pcb
 !
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_tw_pcbs
);

964 
¥ev
->
√xt
 = 
pcb
->next;

967 
	`LWIP_ASSERT
("t˝_¶owtmr: fú°Öcb =t˝_tw_pcbs", 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_tw_pcbs
 =
pcb
);

968 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_tw_pcbs
 = 
pcb
->
√xt
;

970 
pcb2
 = 
pcb
;

971 
pcb
 =Öcb->
√xt
;

972 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb2
, 
lwù_t˝ù_thªad
[
˝u
]);

974 
¥ev
 = 
pcb
;

975 
pcb
 =Öcb->
√xt
;

978 
	}
}

987 
	$t˝_Á°tmr
()

989 
˝u
 = 
	`sched_gë˝u
();

990 
t˝_pcb
 *
pcb
 = 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_a˘ive_pcbs
;

992 
pcb
 !
NULL
) {

993 
t˝_pcb
 *
√xt
 = 
pcb
->next;

995 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

997 
îr_t
 
îr
;

998 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_fasttmr:Çotify keptÖacket\n"));

999 
	`TCP_EVENT_RECV
(
pcb
,Öcb->
ªfu£d_d©a
, 
ERR_OK
, 
îr
);

1000 i‡(
îr
 =
ERR_OK
) {

1001 
pcb
->
ªfu£d_d©a
 = 
NULL
;

1002 } i‡(
îr
 =
ERR_ABRT
) {

1004 
pcb
 = 
NULL
;

1009 i‡(
pcb
 && (pcb->
Êags
 & 
TF_ACK_DELAY
)) {

1010 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_fasttmr: delayed ACK\n"));

1011 
	`t˝_ack_now
(
pcb
);

1012 
	`t˝_ouçut
(
pcb
);

1013 
pcb
->
Êags
 &~(
TF_ACK_DELAY
 | 
TF_ACK_NOW
);

1016 
pcb
 = 
√xt
;

1018 
	}
}

1026 
	$t˝_£gs_‰ì
(
t˝_£g
 *
£g
)

1028 
£g
 !
NULL
) {

1029 
t˝_£g
 *
√xt
 = 
£g
->next;

1030 
	`t˝_£g_‰ì
(
£g
);

1031 
£g
 = 
√xt
;

1033 
	}
}

1041 
	$t˝_£g_‰ì
(
t˝_£g
 *
£g
)

1043 i‡(
£g
 !
NULL
) {

1044 i‡(
£g
->
p
 !
NULL
) {

1045 
	`pbuf_‰ì
(
£g
->
p
, 
NULL
);

1046 #i‡
TCP_DEBUG


1047 
£g
->
p
 = 
NULL
;

1050 
	`memp_‰ì
(
MEMP_TCP_SEG
, 
£g
, 
NULL
);

1052 
	}
}

1061 
	$t˝_£çrio
(
t˝_pcb
 *
pcb
, 
u8_t
 
¥io
)

1063 
pcb
->
¥io
 =Örio;

1064 
	}
}

1066 #i‡
TCP_QUEUE_OOSEQ


1074 
t˝_£g
 *

1075 
	$t˝_£g_c›y
(
t˝_£g
 *
£g
)

1077 
t˝_£g
 *
c£g
;

1079 
c£g
 = (
t˝_£g
 *)
	`memp_mÆloc
(
MEMP_TCP_SEG
, 
NULL
);

1080 i‡(
c£g
 =
NULL
) {

1081  
NULL
;

1083 
	`SMEMCPY
((
u8_t
 *)
c£g
, (c⁄° u8_à*)
£g
, (
t˝_£g
));

1084 
	`pbuf_ªf
(
c£g
->
p
);

1085  
c£g
;

1086 
	}
}

1089 #i‡
LWIP_CALLBACK_API


1094 
îr_t


1095 
	$t˝_ªcv_nuŒ
(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
, 
îr_t
 
îr
)

1097 
	`LWIP_UNUSED_ARG
(
¨g
);

1098 i‡(
p
 !
NULL
) {

1099 
	`t˝_ªcved
(
pcb
, 
p
->
tŸ_Àn
);

1100 
	`pbuf_‰ì
(
p
, 
NULL
);

1101 } i‡(
îr
 =
ERR_OK
) {

1102  
	`t˝_˛o£
(
pcb
);

1104  
ERR_OK
;

1105 
	}
}

1114 
	$t˝_kûl_¥io
(
u8_t
 
¥io
)

1116 
t˝_pcb
 *
pcb
, *
öa˘ive
;

1117 
u32_t
 
öa˘ivôy
;

1118 
u8_t
 
m¥io
;

1119 
˝u
 = 
	`sched_gë˝u
();

1121 
m¥io
 = 
TCP_PRIO_MAX
;

1124 
öa˘ivôy
 = 0;

1125 
öa˘ive
 = 
NULL
;

1126 
pcb
 = 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1127 i‡(
pcb
->
¥io
 <=Örio &&

1128 
pcb
->
¥io
 <
m¥io
 &&

1129 (
u32_t
)(
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_ticks
 - 
pcb
->
tmr
Ë>
öa˘ivôy
) {

1130 
öa˘ivôy
 = 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_ticks
 - 
pcb
->
tmr
;

1131 
öa˘ive
 = 
pcb
;

1132 
m¥io
 = 
pcb
->
¥io
;

1135 i‡(
öa˘ive
 !
NULL
) {

1136 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kûl_¥io: kûlög olde° PCB %∞(%"
S32_F
")\n",

1137 (*)
öa˘ive
, 
öa˘ivôy
));

1138 
	`t˝_ab‹t
(
öa˘ive
);

1140 
	}
}

1147 
	$t˝_kûl_timewaô
()

1149 
t˝_pcb
 *
pcb
, *
öa˘ive
;

1150 
u32_t
 
öa˘ivôy
;

1151 
˝u
 = 
	`sched_gë˝u
();

1153 
öa˘ivôy
 = 0;

1154 
öa˘ive
 = 
NULL
;

1156 
pcb
 = 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1157 i‡((
u32_t
)(
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_ticks
 - 
pcb
->
tmr
Ë>
öa˘ivôy
) {

1158 
öa˘ivôy
 = 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_ticks
 - 
pcb
->
tmr
;

1159 
öa˘ive
 = 
pcb
;

1162 i‡(
öa˘ive
 !
NULL
) {

1163 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kûl_timewaô: kûlög olde° TIME-WAIT PCB %∞(%"
S32_F
")\n",

1164 (*)
öa˘ive
, 
öa˘ivôy
));

1165 
	`t˝_ab‹t
(
öa˘ive
);

1167 
	}
}

1175 
t˝_pcb
 *

1176 
	$t˝_Æloc
(
u8_t
 
¥io
)

1178 
t˝_pcb
 *
pcb
;

1179 
u32_t
 
iss
;

1180 
˝u
 = 
	`sched_gë˝u
();

1182 
pcb
 = (
t˝_pcb
 *)
	`memp_mÆloc
(
MEMP_TCP_PCB
, 
lwù_t˝ù_thªad
[
˝u
]);

1183 i‡(
pcb
 =
NULL
) {

1185 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));

1186 
	`t˝_kûl_timewaô
();

1188 
pcb
 = (
t˝_pcb
 *)
	`memp_mÆloc
(
MEMP_TCP_PCB
, 
lwù_t˝ù_thªad
[
˝u
]);

1189 i‡(
pcb
 =
NULL
) {

1191 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_Æloc: kûlög c⁄√˘i⁄ wôhÖriÿlowîÅh™ %d\n", 
¥io
));

1192 
	`t˝_kûl_¥io
(
¥io
);

1194 
pcb
 = (
t˝_pcb
 *)
	`memp_mÆloc
(
MEMP_TCP_PCB
, 
lwù_t˝ù_thªad
[
˝u
]);

1195 i‡(
pcb
 !
NULL
) {

1197 
	`MEMP_STATS_DEC
(
îr
, 
MEMP_TCP_PCB
);

1200 i‡(
pcb
 !
NULL
) {

1202 
	`MEMP_STATS_DEC
(
îr
, 
MEMP_TCP_PCB
);

1205 i‡(
pcb
 !
NULL
) {

1206 
	`mem£t
(
pcb
, 0, (
t˝_pcb
));

1207 
pcb
->
¥io
 =Örio;

1208 
pcb
->
¢d_buf
 = 
TCP_SND_BUF
;

1209 
pcb
->
¢d_queuñí
 = 0;

1210 
pcb
->
rcv_wnd
 = 
TCP_WND
;

1211 
pcb
->
rcv_™n_wnd
 = 
TCP_WND
;

1212 
pcb
->
tos
 = 0;

1213 
pcb
->
âl
 = 
TCP_TTL
;

1216 
pcb
->
mss
 = (
TCP_MSS
 > 536) ? 536 : TCP_MSS;

1217 
pcb
->
πo
 = 3000 / 
TCP_SLOW_INTERVAL
;

1218 
pcb
->
ß
 = 0;

1219 
pcb
->
sv
 = 3000 / 
TCP_SLOW_INTERVAL
;

1220 
pcb
->
πime
 = -1;

1221 
pcb
->
cwnd
 = 1;

1222 
iss
 = 
	`t˝_√xt_iss
(
lwù_t˝ù_thªad
[
˝u
]);

1223 
pcb
->
¢d_wl2
 = 
iss
;

1224 
pcb
->
¢d_nxt
 = 
iss
;

1225 
pcb
->
œ°ack
 = 
iss
;

1226 
pcb
->
¢d_lbb
 = 
iss
;

1227 
pcb
->
tmr
 = 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_ticks
;

1229 
pcb
->
pﬁ…mr
 = 0;

1231 #i‡
LWIP_CALLBACK_API


1232 
pcb
->
ªcv
 = 
t˝_ªcv_nuŒ
;

1236 
pcb
->
kìp_idÀ
 = 
TCP_KEEPIDLE_DEFAULT
;

1238 #i‡
LWIP_TCP_KEEPALIVE


1239 
pcb
->
kìp_ötvl
 = 
TCP_KEEPINTVL_DEFAULT
;

1240 
pcb
->
kìp_˙t
 = 
TCP_KEEPCNT_DEFAULT
;

1243 
pcb
->
kìp_˙t_£¡
 = 0;

1245  
pcb
;

1246 
	}
}

1260 
t˝_pcb
 *

1261 
	$t˝_√w
()

1263  
	`t˝_Æloc
(
TCP_PRIO_NORMAL
);

1264 
	}
}

1274 
	$t˝_¨g
(
t˝_pcb
 *
pcb
, *
¨g
)

1276 
pcb
->
ˇŒback_¨g
 = 
¨g
;

1277 
	}
}

1278 #i‡
LWIP_CALLBACK_API


1288 
	$t˝_ªcv
(
t˝_pcb
 *
pcb
, 
t˝_ªcv_‚
 
ªcv
)

1290 
pcb
->
ªcv
 =Ñecv;

1291 
	}
}

1301 
	$t˝_£¡
(
t˝_pcb
 *
pcb
, 
t˝_£¡_‚
 
£¡
)

1303 
pcb
->
£¡
 = sent;

1304 
	}
}

1315 
	$t˝_îr
(
t˝_pcb
 *
pcb
, 
t˝_îr_‚
 
îr
)

1317 
pcb
->
îrf
 = 
îr
;

1318 
	}
}

1329 
	$t˝_ac˚±
(
t˝_pcb
 *
pcb
, 
t˝_ac˚±_‚
 
ac˚±
)

1331 
pcb
->
ac˚±
 =áccept;

1332 
	}
}

1343 
	$t˝_pﬁl
(
t˝_pcb
 *
pcb
, 
t˝_pﬁl_‚
 
pﬁl
, 
u8_t
 
öãrvÆ
)

1345 #i‡
LWIP_CALLBACK_API


1346 
pcb
->
pﬁl
 =Öoll;

1348 
	`LWIP_UNUSED_ARG
(
pﬁl
);

1350 
pcb
->
pﬁlöãrvÆ
 = 
öãrvÆ
;

1351 
	}
}

1360 
	$t˝_pcb_purge
(
t˝_pcb
 *
pcb
)

1362 i‡(
pcb
->
°©e
 !
CLOSED
 &&

1363 
pcb
->
°©e
 !
TIME_WAIT
 &&

1364 
pcb
->
°©e
 !
LISTEN
) {

1366 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge\n"));

1368 #i‡
TCP_LISTEN_BACKLOG


1369 i‡(
pcb
->
°©e
 =
SYN_RCVD
) {

1371 
t˝_pcb_li°í
 *
Õcb
;

1372 
	`LWIP_ASSERT
("tcp_pcb_purge:Öcb->state == SYN_RCVD butÅcp_listen_pcbs is NULL",

1373 
t˝_li°í_pcbs
.
li°í_pcbs
 !
NULL
);

1374 
Õcb
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;Üpcb !
NULL
;Üpcb =Üpcb->
√xt
) {

1375 i‡((
Õcb
->
loˇl_p‹t
 =
pcb
->local_port) &&

1376 (
	`ù_addr_ißny
(&
Õcb
->
loˇl_ù
) ||

1377 
	`ù_addr_cmp
(&
pcb
->
loˇl_ù
, &
Õcb
->local_ip))) {

1379 
	`LWIP_ASSERT
("tcp_pcb_purge:ÜistenÖcb doesÇot haveácceptsÖending",

1380 
Õcb
->
ac˚±s_≥ndög
 > 0);

1381 
Õcb
->
ac˚±s_≥ndög
--;

1389 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

1390 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge: dataÜeft on ->refused_data\n"));

1391 
	`pbuf_‰ì
(
pcb
->
ªfu£d_d©a
, 
NULL
);

1392 
pcb
->
ªfu£d_d©a
 = 
NULL
;

1394 i‡(
pcb
->
un£¡
 !
NULL
) {

1395 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge:Çotáll data sent\n"));

1397 i‡(
pcb
->
u«cked
 !
NULL
) {

1398 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge: dataÜeft on ->unacked\n"));

1400 #i‡
TCP_QUEUE_OOSEQ


1401 i‡(
pcb
->
oo£q
 !
NULL
) {

1402 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge: dataÜeft on ->ooseq\n"));

1404 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

1405 
pcb
->
oo£q
 = 
NULL
;

1410 
pcb
->
πime
 = -1;

1412 
	`t˝_£gs_‰ì
(
pcb
->
un£¡
);

1413 
	`t˝_£gs_‰ì
(
pcb
->
u«cked
);

1414 
pcb
->
u«cked
 =Öcb->
un£¡
 = 
NULL
;

1415 #i‡
TCP_OVERSIZE


1416 
pcb
->
un£¡_ovîsize
 = 0;

1419 
	}
}

1428 
	$t˝_pcb_ªmove
(
t˝_pcb
 **
pcbli°
, t˝_pcb *
pcb
)

1430 
˝u
 = 
	`sched_gë˝u
();

1431 
	`TCP_RMV
(
pcbli°
, 
pcb
, 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_tmp_pcb
);

1433 
	`t˝_pcb_purge
(
pcb
);

1436 i‡(
pcb
->
°©e
 !
TIME_WAIT
 &&

1437 
pcb
->
°©e
 !
LISTEN
 &&

1438 
pcb
->
Êags
 & 
TF_ACK_DELAY
) {

1439 
pcb
->
Êags
 |
TF_ACK_NOW
;

1440 
	`t˝_ouçut
(
pcb
);

1443 i‡(
pcb
->
°©e
 !
LISTEN
) {

1444 
	`LWIP_ASSERT
("un£¡ segmít†Àakög", 
pcb
->
un£¡
 =
NULL
);

1445 
	`LWIP_ASSERT
("u«cked segmít†Àakög", 
pcb
->
u«cked
 =
NULL
);

1446 #i‡
TCP_QUEUE_OOSEQ


1447 
	`LWIP_ASSERT
("oo£q segmít†Àakög", 
pcb
->
oo£q
 =
NULL
);

1451 
pcb
->
°©e
 = 
CLOSED
;

1453 
	`LWIP_ASSERT
("t˝_pcb_ªmove:Å˝_pcbs_ß√()", 
	`t˝_pcbs_ß√
());

1454 
	}
}

1461 
u32_t


1462 
	$t˝_√xt_iss
(
t˝ù_thªad
 *
thªad
)

1464 
thªad
->
iss
 +thªad->
t˝ù_d©a
.
t˝_ticks
;

1465  
thªad
->
iss
;

1466 
	}
}

1468 #i‡
TCP_CALCULATE_EFF_SEND_MSS


1474 
u16_t


1475 
	$t˝_eff_£nd_mss
(
u16_t
 
£ndmss
, 
ù_addr_t
 *
addr
)

1477 
u16_t
 
mss_s
;

1478 
√tif
 *
outif
;

1480 
outif
 = 
	`ù_rouã
(
addr
, 
	`sched_gë˝u
());

1481 i‡((
outif
 !
NULL
Ë&& (outif->
mtu
 != 0)) {

1482 
mss_s
 = 
outif
->
mtu
 - 
IP_HLEN
 - 
TCP_HLEN
;

1487 
£ndmss
 = 
	`LWIP_MIN
(£ndmss, 
mss_s
);

1489  
£ndmss
;

1490 
	}
}

1494 
	$t˝_debug_°©e_°r
(
t˝_°©e
 
s
)

1496  
t˝_°©e_°r
[
s
];

1497 
	}
}

1499 #i‡
TCP_DEBUG
 || 
TCP_INPUT_DEBUG
 || 
TCP_OUTPUT_DEBUG


1506 
	$t˝_debug_¥öt
(
t˝_hdr
 *
t˝hdr
)

1508 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP header:\n"));

1509 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1510 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %5"
U16_F
" | %5"U16_F" | (srcÖort, destÖort)\n",

1511 
	`¡ohs
(
t˝hdr
->
§c
),Çtohs—˝hdr->
de°
)));

1512 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1513 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %010"
U32_F
" | (seqÇo)\n",

1514 
	`¡ohl
(
t˝hdr
->
£qno
)));

1515 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1516 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %010"
U32_F
" | (ackÇo)\n",

1517 
	`¡ohl
(
t˝hdr
->
ackno
)));

1518 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1519 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %2"
U16_F
" | |%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"| %5"U16_F" | (hdrlen, flags (",

1520 
	`TCPH_HDRLEN
(
t˝hdr
),

1521 
	`TCPH_FLAGS
(
t˝hdr
) >> 5 & 1,

1522 
	`TCPH_FLAGS
(
t˝hdr
) >> 4 & 1,

1523 
	`TCPH_FLAGS
(
t˝hdr
) >> 3 & 1,

1524 
	`TCPH_FLAGS
(
t˝hdr
) >> 2 & 1,

1525 
	`TCPH_FLAGS
(
t˝hdr
) >> 1 & 1,

1526 
	`TCPH_FLAGS
(
t˝hdr
) & 1,

1527 
	`¡ohs
(
t˝hdr
->
wnd
)));

1528 
	`t˝_debug_¥öt_Êags
(
	`TCPH_FLAGS
(
t˝hdr
));

1529 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("), win)\n"));

1530 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1531 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| 0x%04"
X16_F
" | %5"
U16_F
" | (chksum, urgp)\n",

1532 
	`¡ohs
(
t˝hdr
->
chksum
),Çtohs—˝hdr->
urgp
)));

1533 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1534 
	}
}

1542 
	$t˝_debug_¥öt_°©e
(
t˝_°©e
 
s
)

1544 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Sèã: %s\n", 
t˝_°©e_°r
[
s
]));

1545 
	}
}

1553 
	$t˝_debug_¥öt_Êags
(
u8_t
 
Êags
)

1555 i‡(
Êags
 & 
TCP_FIN
) {

1556 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("FIN "));

1558 i‡(
Êags
 & 
TCP_SYN
) {

1559 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("SYN "));

1561 i‡(
Êags
 & 
TCP_RST
) {

1562 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("RST "));

1564 i‡(
Êags
 & 
TCP_PSH
) {

1565 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("PSH "));

1567 i‡(
Êags
 & 
TCP_ACK
) {

1568 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("ACK "));

1570 i‡(
Êags
 & 
TCP_URG
) {

1571 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("URG "));

1573 i‡(
Êags
 & 
TCP_ECE
) {

1574 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("ECE "));

1576 i‡(
Êags
 & 
TCP_CWR
) {

1577 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CWR "));

1579 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("\n"));

1580 
	}
}

1586 
	$t˝_debug_¥öt_pcbs
()

1588 
t˝_pcb
 *
pcb
;

1589 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Active PCB states:\n"));

1590 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1591 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Loˇ»p‹à%"
U16_F
", f‹eig¿p‹à%"U16_F" snd_nxà%"
U32_F
"Ñcv_nxt %"U32_F" ",

1592 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
,

1593 
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
));

1594 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

1596 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Listen PCB states:\n"));

1597 
pcb
 = (
t˝_pcb
 *)
t˝_li°í_pcbs
.
pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1598 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Loˇ»p‹à%"
U16_F
", f‹eig¿p‹à%"U16_F" snd_nxà%"
U32_F
"Ñcv_nxt %"U32_F" ",

1599 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
,

1600 
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
));

1601 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

1603 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TIME-WAIT PCB states:\n"));

1604 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1605 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Loˇ»p‹à%"
U16_F
", f‹eig¿p‹à%"U16_F" snd_nxà%"
U32_F
"Ñcv_nxt %"U32_F" ",

1606 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
,

1607 
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
));

1608 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

1610 
	}
}

1615 
s16_t


1616 
	$t˝_pcbs_ß√
()

1618 
t˝_pcb
 *
pcb
;

1619 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1620 
	`LWIP_ASSERT
("t˝_pcbs_ß√:á˘ivêpcb->°©ê!CLOSED", 
pcb
->
°©e
 !
CLOSED
);

1621 
	`LWIP_ASSERT
("t˝_pcbs_ß√:á˘ivêpcb->°©ê!LISTEN", 
pcb
->
°©e
 !
LISTEN
);

1622 
	`LWIP_ASSERT
("t˝_pcbs_ß√:á˘ivêpcb->°©ê!TIME-WAIT", 
pcb
->
°©e
 !
TIME_WAIT
);

1624 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1625 
	`LWIP_ASSERT
("t˝_pcbs_ß√:ÅwÖcb->°©ê=TIME-WAIT", 
pcb
->
°©e
 =
TIME_WAIT
);

1628 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/tcp_in.c

44 
	~"lwù/›t.h
"

46 #i‡
LWIP_TCP


48 
	~"lwù/t˝_im∂.h
"

49 
	~"lwù/def.h
"

50 
	~"lwù/ù_addr.h
"

51 
	~"lwù/√tif.h
"

52 
	~"lwù/mem.h
"

53 
	~"lwù/memp.h
"

54 
	~"lwù/öë_chksum.h
"

55 
	~"lwù/°©s.h
"

56 
	~"lwù/¢mp.h
"

57 
	~"lwù/t˝ù.h
"

58 
	~"¨ch/≥rf.h
"

59 
	~"lwù/ßm∂e_åa˚poöt.h
"

64 
	st˝_d©a_ö
 {

65 
t˝_£g
 
	mö£g
;

66 
t˝_hdr
 *
	mt˝hdr
;

67 
ù_hdr
 *
	mùhdr
;

68 
u32_t
 
	m£qno
, 
	mackno
;

69 
u16_t
 
	mt˝Àn
;

70 
u8_t
 
	mªcv_Êags
;

71 
u8_t
 
	mÊags
;

72 
u32_t
 
	mfûÀr
;

73 
pbuf
 *
	mªcv_d©a
;

74 
t˝ù_thªad
 *
	mthªad
;

78 
îr_t
 
t˝_¥o˚ss
(
t˝_pcb
 *
pcb
, 
t˝_d©a_ö
 *
ö_d©a
);

79 
t˝_ª˚ive
(
t˝_pcb
 *
pcb
, 
t˝_d©a_ö
 *
ö_d©a
);

80 
t˝_∑r£›t
(
t˝_pcb
 *
pcb
, 
t˝_d©a_ö
 *
ö_d©a
);

82 
îr_t
 
t˝_li°í_öput
(
t˝_pcb_li°í
 *
pcb
, 
t˝_d©a_ö
 *
ö_d©a
);

83 
îr_t
 
t˝_timewaô_öput
(
t˝_pcb
 *
pcb
, 
t˝_d©a_ö
 *
ö_d©a
);

95 
	$t˝_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

97 
t˝_pcb
 *
pcb
, *
¥ev
;

98 
t˝_pcb_li°í
 *
Õcb
;

99 
t˝_d©a_ö
 
ö_d©a
;

100 
t˝ù_thªad
 *
thªad
 = 
öp
->
¥Ÿ_thªad
;

101 #i‡
SO_REUSE


102 
t˝_pcb
 *
Õcb_¥ev
 = 
NULL
;

103 
t˝_pcb_li°í
 *
Õcb_™y
 = 
NULL
;

105 
u8_t
 
hdæí
;

106 
îr_t
 
îr
;

108 
PERF_START
;

110 
	`TCP_STATS_INC
(
t˝
.
ªcv
);

111 
	`¢mp_öc_t˝ö£gs
();

113 
ö_d©a
.
thªad
 =Åhread;

114 
ö_d©a
.
ùhdr
 = (
ù_hdr
 *)
p
->
∑ylﬂd
;

115 
ö_d©a
.
t˝hdr
 = (
t˝_hdr
 *)((
u8_t
 *)
p
->
∑ylﬂd
 + 
	`IPH_HL
(ö_d©a.
ùhdr
) * 4);

117 #i‡
TCP_INPUT_DEBUG


118 
	`t˝_debug_¥öt
(
ö_d©a
.
t˝hdr
);

122 i‡(
	`pbuf_hódî
(
p
, -((
s16_t
)(
	`IPH_HL
(
ö_d©a
.
ùhdr
Ë* 4))Ë|| (p->
tŸ_Àn
 < (
t˝_hdr
))) {

124 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_öput: sh‹à∑ckë (%"
U16_F
" byãsËdisˇrded\n", 
p
->
tŸ_Àn
));

125 
	`TCP_STATS_INC
(
t˝
.
À√º
);

126 
	`TCP_STATS_INC
(
t˝
.
dr›
);

127 
	`¢mp_öc_t˝öîrs
();

128 
	`pbuf_‰ì
(
p
, 
thªad
);

133 i‡(
	`ù_addr_isbrﬂdˇ°
(&
thªad
->
cuºít_ùhdr_de°
, 
öp
) ||

134 
	`ù_addr_ismu…iˇ°
(&
thªad
->
cuºít_ùhdr_de°
)) {

135 
	`TCP_STATS_INC
(
t˝
.
¥Ÿîr
);

136 
	`TCP_STATS_INC
(
t˝
.
dr›
);

137 
	`¢mp_öc_t˝öîrs
();

138 
	`pbuf_‰ì
(
p
, 
thªad
);

142 #i‡
CHECKSUM_CHECK_TCP


144 i‡(
	`öë_chksum_p£udo
(
p
, 
	`ù_cuºít_§c_addr
(), 
	`ù_cuºít_de°_addr
(),

145 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
) != 0) {

146 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_öput:Öackë disˇrded duêtÿÁûög checksum 0x%04"
X16_F
"\n",

147 
	`öë_chksum_p£udo
(
p
, 
	`ù_cuºít_§c_addr
(), 
	`ù_cuºít_de°_addr
(),

148 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
)));

149 #i‡
TCP_DEBUG


150 
	`t˝_debug_¥öt
(
öd©a
.
t˝hdr
);

152 
	`TCP_STATS_INC
(
t˝
.
chkîr
);

153 
	`TCP_STATS_INC
(
t˝
.
dr›
);

154 
	`¢mp_öc_t˝öîrs
();

155 
	`pbuf_‰ì
(
p
, 
thªad
);

162 
hdæí
 = 
	`TCPH_HDRLEN
(
ö_d©a
.
t˝hdr
);

163 if(
	`pbuf_hódî
(
p
, -(
hdæí
 * 4))){

165 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input: shortÖacket\n"));

166 
	`TCP_STATS_INC
(
t˝
.
À√º
);

167 
	`TCP_STATS_INC
(
t˝
.
dr›
);

168 
	`¢mp_öc_t˝öîrs
();

169 
	`pbuf_‰ì
(
p
, 
thªad
);

174 
ö_d©a
.
t˝hdr
->
§c
 = 
	`¡ohs
(in_data.tcphdr->src);

175 
ö_d©a
.
t˝hdr
->
de°
 = 
	`¡ohs
(in_data.tcphdr->dest);

176 
ö_d©a
.
£qno
 = in_d©a.
t˝hdr
->£qnÿ
	`¡ohl
(in_data.tcphdr->seqno);

177 
ö_d©a
.
ackno
 = in_d©a.
t˝hdr
->acknÿ
	`¡ohl
(in_data.tcphdr->ackno);

178 
ö_d©a
.
t˝hdr
->
wnd
 = 
	`¡ohs
(in_data.tcphdr->wnd);

180 
ö_d©a
.
Êags
 = 
	`TCPH_FLAGS
(ö_d©a.
t˝hdr
);

181 
ö_d©a
.
t˝Àn
 = 
p
->
tŸ_Àn
 + ((ö_d©a.
Êags
 & (
TCP_FIN
 | 
TCP_SYN
)) ? 1 : 0);

185 
¥ev
 = 
NULL
;

188 
pcb
 = 
thªad
->
t˝ù_d©a
.
t˝_pcbs
[
ö_d©a
.
t˝hdr
->
de°
 % 
NUM_FLOWS
];

189 i‡(
pcb
) {

190 i‡(
pcb
->
ªmŸe_p‹t
 =
ö_d©a
.
t˝hdr
->
§c
 &&

191 
pcb
->
loˇl_p‹t
 =
ö_d©a
.
t˝hdr
->
de°
 &&

192 
	`ù_addr_cmp
(&(
pcb
->
ªmŸe_ù
), &
thªad
->
cuºít_ùhdr_§c
) &&

193 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &
thªad
->
cuºít_ùhdr_de°
)) {

194 
¥ev
 = 
pcb
;

198 i‡(!
¥ev
) {

199 
pcb
 = 
thªad
->
t˝ù_d©a
.
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

200 
	`LWIP_ASSERT
("t˝_öput:á˘ivêpcb->°©ê!CLOSED", 
pcb
->
°©e
 !
CLOSED
);

201 
	`LWIP_ASSERT
("t˝_öput:á˘ivêpcb->°©ê!TIME-WAIT", 
pcb
->
°©e
 !
TIME_WAIT
);

202 
	`LWIP_ASSERT
("t˝_öput:á˘ivêpcb->°©ê!LISTEN", 
pcb
->
°©e
 !
LISTEN
);

203 i‡(
pcb
->
ªmŸe_p‹t
 =
ö_d©a
.
t˝hdr
->
§c
 &&

204 
pcb
->
loˇl_p‹t
 =
ö_d©a
.
t˝hdr
->
de°
 &&

205 
	`ù_addr_cmp
(&(
pcb
->
ªmŸe_ù
), &
thªad
->
cuºít_ùhdr_§c
) &&

206 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &
thªad
->
cuºít_ùhdr_de°
)) {

211 
	`LWIP_ASSERT
("t˝_öput:Öcb->√xà!pcb (bef‹êˇche)", 
pcb
->
√xt
 !=Öcb);

212 i‡(
¥ev
 !
NULL
) {

213 
¥ev
->
√xt
 = 
pcb
->next;

214 
pcb
->
√xt
 = 
thªad
->
t˝ù_d©a
.
t˝_a˘ive_pcbs
;

215 
thªad
->
t˝ù_d©a
.
t˝_a˘ive_pcbs
 = 
pcb
;

217 
	`LWIP_ASSERT
("t˝_öput:Öcb->√xà!pcb (a·î cache)", 
pcb
->
√xt
 !=Öcb);

220 
¥ev
 = 
pcb
;

224 i‡(
pcb
 =
NULL
) {

227 
pcb
 = 
thªad
->
t˝ù_d©a
.
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

228 
	`LWIP_ASSERT
("t˝_öput: TIME-WAITÖcb->°©ê=TIME-WAIT", 
pcb
->
°©e
 =
TIME_WAIT
);

229 i‡(
pcb
->
ªmŸe_p‹t
 =
ö_d©a
.
t˝hdr
->
§c
 &&

230 
pcb
->
loˇl_p‹t
 =
ö_d©a
.
t˝hdr
->
de°
 &&

231 
	`ù_addr_cmp
(&(
pcb
->
ªmŸe_ù
), &
thªad
->
cuºít_ùhdr_§c
) &&

232 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &
thªad
->
cuºít_ùhdr_de°
)) {

236 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input:Öacked for TIME_WAITing connection.\n"));

237 
	`t˝_timewaô_öput
(
pcb
, &
ö_d©a
);

238 
	`pbuf_‰ì
(
p
, 
thªad
);

245 
¥ev
 = 
NULL
;

246 
Õcb
 = 
thªad
->
t˝ù_d©a
.
t˝_li°í_pcbs
.
li°í_pcbs
;Üpcb !
NULL
;Üpcb =Üpcb->
√xt
) {

247 i‡(
Õcb
->
loˇl_p‹t
 =
ö_d©a
.
t˝hdr
->
de°
) {

248 #i‡
SO_REUSE


249 i‡(
	`ù_addr_cmp
(&(
Õcb
->
loˇl_ù
), &
thªad
->
cuºít_ùhdr_de°
)) {

252 } if(
	`ù_addr_ißny
(&(
Õcb
->
loˇl_ù
))) {

254 
Õcb_™y
 = 
Õcb
;

255 
Õcb_¥ev
 = 
¥ev
;

258 i‡(
	`ù_addr_cmp
(&(
Õcb
->
loˇl_ù
), &
thªad
->
cuºít_ùhdr_de°
) ||

259 
	`ù_addr_ißny
(&(
Õcb
->
loˇl_ù
))) {

265 
¥ev
 = (
t˝_pcb
 *)
Õcb
;

267 #i‡
SO_REUSE


269 i‡(
Õcb
 =
NULL
) {

271 
Õcb
 = 
Õcb_™y
;

272 
¥ev
 = 
Õcb_¥ev
;

275 i‡(
Õcb
 !
NULL
) {

279 i‡(
¥ev
 !
NULL
) {

280 ((
t˝_pcb_li°í
 *)
¥ev
)->
√xt
 = 
Õcb
->next;

282 
Õcb
->
√xt
 = 
thªad
->
t˝ù_d©a
.
t˝_li°í_pcbs
.
li°í_pcbs
;

284 
thªad
->
t˝ù_d©a
.
t˝_li°í_pcbs
.
li°í_pcbs
 = 
Õcb
;

287 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input:Öacked for LISTENing connection.\n"));

288 
	`t˝_li°í_öput
(
Õcb
, &
ö_d©a
);

289 
	`pbuf_‰ì
(
p
, 
thªad
);

294 #i‡
TCP_INPUT_DEBUG


295 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("+-+-+-+-+-+-+-+-+-+-+-+-+-+-Åcp_input: flags "));

296 
	`t˝_debug_¥öt_Êags
(
	`TCPH_FLAGS
(
ö_d©a
.
t˝hdr
));

297 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));

301 i‡(
pcb
 !
NULL
) {

303 #i‡
TCP_INPUT_DEBUG


304 #i‡
TCP_DEBUG


305 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

310 
ö_d©a
.
ö£g
.
√xt
 = 
NULL
;

311 
ö_d©a
.
ö£g
.
Àn
 = 
p
->
tŸ_Àn
;

312 
ö_d©a
.
ö£g
.
p
 =Ö;

313 
ö_d©a
.
ö£g
.
t˝hdr
 = in_data.tcphdr;

315 
ö_d©a
.
ªcv_d©a
 = 
NULL
;

316 
ö_d©a
.
ªcv_Êags
 = 0;

319 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

321 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input:Çotify keptÖacket\n"));

322 
	`TCP_EVENT_RECV
(
pcb
,Öcb->
ªfu£d_d©a
, 
ERR_OK
, 
îr
);

323 i‡(
îr
 =
ERR_OK
) {

324 
pcb
->
ªfu£d_d©a
 = 
NULL
;

325 } i‡((
îr
 =
ERR_ABRT
Ë|| (
ö_d©a
.
t˝Àn
 > 0)) {

329 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input: drop incomingÖackets, becauseÖcb is \"full\"\n"));

330 
	`TCP_STATS_INC
(
t˝
.
dr›
);

331 
	`¢mp_öc_t˝öîrs
();

332 
	`pbuf_‰ì
(
p
, 
thªad
);

336 
thªad
->
t˝ù_d©a
.
t˝_öput_pcb
 = 
pcb
;

337 
îr
 = 
	`t˝_¥o˚ss
(
pcb
, &
ö_d©a
);

340 i‡(
îr
 !
ERR_ABRT
) {

341 i‡(
ö_d©a
.
ªcv_Êags
 & 
TF_RESET
) {

346 
	`TCP_EVENT_ERR
(
pcb
->
îrf
,Öcb->
ˇŒback_¨g
, 
ERR_RST
);

347 
	`t˝_pcb_ªmove
(&
thªad
->
t˝ù_d©a
.
t˝_a˘ive_pcbs
, 
pcb
);

348 
thªad
->
t˝ù_d©a
.
t˝_pcbs
[
pcb
->
loˇl_p‹t
 % 
NUM_FLOWS
] = 
NULL
;

349 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
, 
thªad
);

350 } i‡(
ö_d©a
.
ªcv_Êags
 & 
TF_CLOSED
) {

353 
	`t˝_pcb_ªmove
(&
thªad
->
t˝ù_d©a
.
t˝_a˘ive_pcbs
, 
pcb
);

354 
thªad
->
t˝ù_d©a
.
t˝_pcbs
[
pcb
->
loˇl_p‹t
 % 
NUM_FLOWS
] = 
NULL
;

355 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
, 
thªad
);

357 
îr
 = 
ERR_OK
;

361 i‡(
pcb
->
acked
 > 0) {

362 
	`TCP_EVENT_SENT
(
pcb
,Öcb->
acked
, 
îr
);

363 i‡(
îr
 =
ERR_ABRT
) {

364 
ab‹ãd
;

368 i‡(
ö_d©a
.
ªcv_d©a
 !
NULL
) {

369 
	`LWIP_ASSERT
("pcb->ªfu£d_d©®=NULL", 
pcb
->
ªfu£d_d©a
 =
NULL
);

370 i‡(
pcb
->
Êags
 & 
TF_RXCLOSED
) {

373 
	`pbuf_‰ì
(
ö_d©a
.
ªcv_d©a
, in_d©a.
thªad
);

374 
	`t˝_ab‹t
(
pcb
);

375 
ab‹ãd
;

377 i‡(
ö_d©a
.
Êags
 & 
TCP_PSH
) {

378 
ö_d©a
.
ªcv_d©a
->
Êags
 |
PBUF_FLAG_PUSH
;

385 
	`TCP_EVENT_RECV
(
pcb
, 
ö_d©a
.
ªcv_d©a
, 
ERR_OK
, 
îr
);

386 i‡(
îr
 =
ERR_ABRT
) {

387 
ab‹ãd
;

391 i‡(
îr
 !
ERR_OK
) {

392 
pcb
->
ªfu£d_d©a
 = 
ö_d©a
.
ªcv_d©a
;

393 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input: keep incomingÖacket, becauseÖcb is \"full\"\n"));

399 i‡(
ö_d©a
.
ªcv_Êags
 & 
TF_GOT_FIN
) {

402 i‡(
pcb
->
rcv_wnd
 !
TCP_WND
) {

403 
pcb
->
rcv_wnd
++;

405 
	`TCP_EVENT_CLOSED
(
pcb
, 
îr
);

406 i‡(
îr
 =
ERR_ABRT
) {

407 
ab‹ãd
;

411 
thªad
->
t˝ù_d©a
.
t˝_öput_pcb
 = 
NULL
;

413 
	`t˝_ouçut
(
pcb
);

414 #i‡
TCP_INPUT_DEBUG


415 #i‡
TCP_DEBUG


416 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

423 
ab‹ãd
:

424 
thªad
->
t˝ù_d©a
.
t˝_öput_pcb
 = 
NULL
;

425 
ö_d©a
.
ªcv_d©a
 = 
NULL
;

428 i‡(
ö_d©a
.
ö£g
.
p
 !
NULL
)

430 
	`pbuf_‰ì
(
ö_d©a
.
ö£g
.
p
, in_d©a.
thªad
);

431 
ö_d©a
.
ö£g
.
p
 = 
NULL
;

437 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("tcp_input:Ço PCB match found,Ñesetting.\n"));

438 i‡(!(
	`TCPH_FLAGS
(
ö_d©a
.
t˝hdr
Ë& 
TCP_RST
)) {

439 
	`TCP_STATS_INC
(
t˝
.
¥Ÿîr
);

440 
	`TCP_STATS_INC
(
t˝
.
dr›
);

441 
	`t˝_r°
(
ö_d©a
.
ackno
, in_d©a.
£qno
 + in_d©a.
t˝Àn
,

442 
	`ù_cuºít_de°_addr
(), 
	`ù_cuºít_§c_addr
(),

443 
ö_d©a
.
t˝hdr
->
de°
, in_d©a.t˝hdr->
§c
);

445 
	`pbuf_‰ì
(
p
, 
thªad
);

448 
	`LWIP_ASSERT
("t˝_öput:Å˝_pcbs_ß√()", 
	`t˝_pcbs_ß√
());

449 
	`PERF_STOP
("tcp_input");

450 
	}
}

464 
îr_t


465 
	$t˝_li°í_öput
(
t˝_pcb_li°í
 *
pcb
, 
t˝_d©a_ö
 *
ö_d©a
)

467 
t˝_pcb
 *
≈cb
;

468 
îr_t
 
rc
;

472 i‡(
ö_d©a
->
Êags
 & 
TCP_ACK
) {

475 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("tcp_listen_input: ACK in LISTEN, sendingÑeset\n"));

476 
	`t˝_r°
(
ö_d©a
->
ackno
 + 1, in_d©a->
£qno
 + in_d©a->
t˝Àn
,

477 
	`ù_cuºít_de°_addr
(), 
	`ù_cuºít_§c_addr
(),

478 
ö_d©a
->
t˝hdr
->
de°
, in_d©a->t˝hdr->
§c
);

479 } i‡(
ö_d©a
->
Êags
 & 
TCP_SYN
) {

480 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄Ñeque° %"
U16_F
" -> %"U16_F".\n", 
ö_d©a
->
t˝hdr
->
§c
, in_d©a->t˝hdr->
de°
));

481 #i‡
TCP_LISTEN_BACKLOG


482 i‡(
pcb
->
ac˚±s_≥ndög
 >pcb->
backlog
) {

483 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_li°í_öput:Üi°í backlogÉx˚eded f‹Ö‹à%"
U16_F
"\n", 
ö_d©a
->
t˝hdr
->
de°
));

484  
ERR_ABRT
;

487 
≈cb
 = 
	`t˝_Æloc
(
pcb
->
¥io
);

491 i‡(
≈cb
 =
NULL
) {

492 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_listen_input: couldÇotállocate PCB\n"));

493 
	`TCP_STATS_INC
(
t˝
.
memîr
);

494  
ERR_MEM
;

496 #i‡
TCP_LISTEN_BACKLOG


497 
pcb
->
ac˚±s_≥ndög
++;

500 
	`ù_addr_c›y
(
≈cb
->
loˇl_ù
, 
ö_d©a
->
thªad
->
cuºít_ùhdr_de°
);

501 
≈cb
->
loˇl_p‹t
 = 
pcb
->local_port;

502 
	`ù_addr_c›y
(
≈cb
->
ªmŸe_ù
, 
ö_d©a
->
thªad
->
cuºít_ùhdr_§c
);

503 
≈cb
->
ªmŸe_p‹t
 = 
ö_d©a
->
t˝hdr
->
§c
;

504 
≈cb
->
°©e
 = 
SYN_RCVD
;

505 
≈cb
->
rcv_nxt
 = 
ö_d©a
->
£qno
 + 1;

506 
≈cb
->
rcv_™n_right_edge
 =Çpcb->
rcv_nxt
;

507 
≈cb
->
¢d_wnd
 = 
ö_d©a
->
t˝hdr
->
wnd
;

508 
≈cb
->
s°hªsh
 =Çpcb->
¢d_wnd
;

509 
≈cb
->
¢d_wl1
 = 
ö_d©a
->
£qno
 - 1;

510 
≈cb
->
ˇŒback_¨g
 = 
pcb
->callback_arg;

511 #i‡
LWIP_CALLBACK_API


512 
≈cb
->
ac˚±
 = 
pcb
->accept;

515 
≈cb
->
so_›ti⁄s
 = 
pcb
->so_›ti⁄†& 
SOF_INHERITED
;

518 
ö_d©a
->
thªad
->
t˝ù_d©a
.
t˝_pcbs
[
≈cb
->
loˇl_p‹t
 % 
NUM_FLOWS
] =Çpcb;

519 
	`TCP_REG
(&
ö_d©a
->
thªad
->
t˝ù_d©a
.
t˝_a˘ive_pcbs
, 
≈cb
);

522 
	`t˝_∑r£›t
(
≈cb
, 
ö_d©a
);

523 #i‡
TCP_CALCULATE_EFF_SEND_MSS


524 
≈cb
->
mss
 = 
	`t˝_eff_£nd_mss
“pcb->mss, &“pcb->
ªmŸe_ù
));

527 
	`¢mp_öc_t˝∑ssive›ís
();

530 
rc
 = 
	`t˝_íqueue_Êags
(
≈cb
, 
TCP_SYN
 | 
TCP_ACK
);

531 i‡(
rc
 !
ERR_OK
) {

532 
	`t˝_ab™d⁄
(
≈cb
, 0);

533  
rc
;

535  
	`t˝_ouçut
(
≈cb
);

537  
ERR_OK
;

538 
	}
}

549 
îr_t


550 
	$t˝_timewaô_öput
(
t˝_pcb
 *
pcb
, 
t˝_d©a_ö
 *
ö_d©a
)

557 i‡(
ö_d©a
->
Êags
 & 
TCP_RST
) {

558  
ERR_OK
;

561 i‡(
ö_d©a
->
Êags
 & 
TCP_SYN
) {

564 i‡(
	`TCP_SEQ_BETWEEN
(
ö_d©a
->
£qno
, 
pcb
->
rcv_nxt
,Öcb->rcv_nxt+pcb->
rcv_wnd
)) {

566 
	`t˝_r°
(
ö_d©a
->
ackno
, in_d©a->
£qno
 + in_d©a->
t˝Àn
, 
	`ù_cuºít_de°_addr
(),

567 
	`ù_cuºít_§c_addr
(), 
ö_d©a
->
t˝hdr
->
de°
, in_d©a->t˝hdr->
§c
);

568  
ERR_OK
;

570 } i‡(
ö_d©a
->
Êags
 & 
TCP_FIN
) {

573 
pcb
->
tmr
 = 
ö_d©a
->
thªad
->
t˝ù_d©a
.
t˝_ticks
;

576 i‡((
ö_d©a
->
t˝Àn
 > 0)) {

578 
pcb
->
Êags
 |
TF_ACK_NOW
;

579  
	`t˝_ouçut
(
pcb
);

581  
ERR_OK
;

582 
	}
}

595 
îr_t


596 
	$t˝_¥o˚ss
(
t˝_pcb
 *
pcb
, 
t˝_d©a_ö
 *
ö_d©a
)

598 
t˝_£g
 *
r£g
;

599 
u8_t
 
ac˚±abÀ
 = 0;

600 
îr_t
 
îr
;

602 
îr
 = 
ERR_OK
;

605 i‡(
ö_d©a
->
Êags
 & 
TCP_RST
) {

607 i‡(
pcb
->
°©e
 =
SYN_SENT
) {

608 i‡(
ö_d©a
->
ackno
 =
pcb
->
¢d_nxt
) {

609 
ac˚±abÀ
 = 1;

612 i‡(
	`TCP_SEQ_BETWEEN
(
ö_d©a
->
£qno
, 
pcb
->
rcv_nxt
,

613 
pcb
->
rcv_nxt
+pcb->
rcv_wnd
)) {

614 
ac˚±abÀ
 = 1;

618 i‡(
ac˚±abÀ
) {

619 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_process: Connection RESET\n"));

620 
	`LWIP_ASSERT
("t˝_öput:Öcb->°©ê!CLOSED", 
pcb
->
°©e
 !
CLOSED
);

621 
ö_d©a
->
ªcv_Êags
 |
TF_RESET
;

622 
pcb
->
Êags
 &~
TF_ACK_DELAY
;

623  
ERR_RST
;

625 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_¥o˚ss: u«c˚±abÀÑe£à£qnÿ%"
U32_F
"Ñcv_nxt %"U32_F"\n",

626 
£qno
, 
pcb
->
rcv_nxt
));

627 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_¥o˚ss: u«c˚±abÀÑe£à£qnÿ%"
U32_F
"Ñcv_nxt %"U32_F"\n",

628 
£qno
, 
pcb
->
rcv_nxt
));

629  
ERR_OK
;

633 i‡((
ö_d©a
->
Êags
 & 
TCP_SYN
Ë&& (
pcb
->
°©e
 !
SYN_SENT
 &&Öcb->°©ê!
SYN_RCVD
)) {

635 
	`t˝_ack_now
(
pcb
);

636  
ERR_OK
;

639 i‡((
pcb
->
Êags
 & 
TF_RXCLOSED
) == 0) {

641 
pcb
->
tmr
 = 
ö_d©a
->
thªad
->
t˝ù_d©a
.
t˝_ticks
;

643 
pcb
->
kìp_˙t_£¡
 = 0;

645 
	`t˝_∑r£›t
(
pcb
, 
ö_d©a
);

648 
pcb
->
°©e
) {

649 
SYN_SENT
:

650 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("SYN-SENT:ácknÿ%"
U32_F
"Öcb->¢d_nxà%"U32_F" u«cked %"U32_F"\n", 
ö_d©a
->
ackno
,

651 
pcb
->
¢d_nxt
, 
	`¡ohl
’cb->
u«cked
->
t˝hdr
->
£qno
)));

653 i‡((
ö_d©a
->
Êags
 & 
TCP_ACK
Ë&& (ö_d©a->Êag†& 
TCP_SYN
)

654 && 
ö_d©a
->
ackno
 =
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
) + 1) {

655 
pcb
->
¢d_buf
++;

656 
pcb
->
rcv_nxt
 = 
ö_d©a
->
£qno
 + 1;

657 
pcb
->
rcv_™n_right_edge
 =Öcb->
rcv_nxt
;

658 
pcb
->
œ°ack
 = 
ö_d©a
->
ackno
;

659 
pcb
->
¢d_wnd
 = 
ö_d©a
->
t˝hdr
->
wnd
;

660 
pcb
->
¢d_wl1
 = 
ö_d©a
->
£qno
 - 1;

661 
pcb
->
°©e
 = 
ESTABLISHED
;

663 #i‡
TCP_CALCULATE_EFF_SEND_MSS


664 
pcb
->
mss
 = 
	`t˝_eff_£nd_mss
’cb->mss, &’cb->
ªmŸe_ù
));

669 
pcb
->
s°hªsh
 =Öcb->
mss
 * 10;

671 
pcb
->
cwnd
 = (’cb->cwnd =1Ë? (pcb->
mss
 * 2) :Öcb->mss);

672 
	`LWIP_ASSERT
("pcb->¢d_queuñí > 0", (
pcb
->
¢d_queuñí
 > 0));

673 --
pcb
->
¢d_queuñí
;

674 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_¥o˚ss: SYN-SENT --queuñí %"
U16_F
"\n", (
u16_t
)
pcb
->
¢d_queuñí
));

675 
r£g
 = 
pcb
->
u«cked
;

676 
pcb
->
u«cked
 = 
r£g
->
√xt
;

680 if(
pcb
->
u«cked
 =
NULL
)

681 
pcb
->
πime
 = -1;

683 
pcb
->
πime
 = 0;

684 
pcb
->
ƒtx
 = 0;

687 
	`t˝_£g_‰ì
(
r£g
);

691 
	`TCP_EVENT_CONNECTED
(
pcb
, 
ERR_OK
, 
îr
);

692 i‡(
îr
 =
ERR_ABRT
) {

693  
ERR_ABRT
;

695 
	`t˝_ack_now
(
pcb
);

698 i‡(
ö_d©a
->
Êags
 & 
TCP_ACK
) {

700 
	`t˝_r°
(
ö_d©a
->
ackno
, in_d©a->
£qno
 + in_d©a->
t˝Àn
, 
	`ù_cuºít_de°_addr
(),

701 
	`ù_cuºít_§c_addr
(), 
ö_d©a
->
t˝hdr
->
de°
, in_d©a->t˝hdr->
§c
);

704 
SYN_RCVD
:

705 i‡(
ö_d©a
->
Êags
 & 
TCP_ACK
) {

707 i‡(
	`TCP_SEQ_BETWEEN
(
ö_d©a
->
ackno
, 
pcb
->
œ°ack
+1,Öcb->
¢d_nxt
)) {

708 
u16_t
 
ﬁd_cwnd
;

709 
pcb
->
°©e
 = 
ESTABLISHED
;

710 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄É°ablished %"
U16_F
" -> %"U16_F".\n", 
ö_d©a
->
ö£g
.
t˝hdr
->
§c
, in_d©a->ö£g.t˝hdr->
de°
));

711 #i‡
LWIP_CALLBACK_API


712 
	`LWIP_ASSERT
("pcb->ac˚± !NULL", 
pcb
->
ac˚±
 !
NULL
);

715 
	`TCP_EVENT_ACCEPT
(
pcb
, 
ERR_OK
, 
îr
);

716 i‡(
îr
 !
ERR_OK
) {

720 i‡(
îr
 !
ERR_ABRT
) {

721 
	`t˝_ab‹t
(
pcb
);

723  
ERR_ABRT
;

725 
ﬁd_cwnd
 = 
pcb
->
cwnd
;

728 
	`t˝_ª˚ive
(
pcb
, 
ö_d©a
);

731 i‡(
pcb
->
acked
 != 0) {

732 
pcb
->
acked
--;

735 
pcb
->
cwnd
 = ((
ﬁd_cwnd
 =1Ë? (pcb->
mss
 * 2) :Öcb->mss);

737 i‡(
ö_d©a
->
ªcv_Êags
 & 
TF_GOT_FIN
) {

738 
	`t˝_ack_now
(
pcb
);

739 
pcb
->
°©e
 = 
CLOSE_WAIT
;

743 
	`t˝_r°
(
ö_d©a
->
ackno
, in_d©a->
£qno
 + in_d©a->
t˝Àn
, 
	`ù_cuºít_de°_addr
(), 
	`ù_cuºít_§c_addr
(),

744 
ö_d©a
->
t˝hdr
->
de°
, in_d©a->t˝hdr->
§c
);

746 } i‡((
ö_d©a
->
Êags
 & 
TCP_SYN
Ë&& (ö_d©a->
£qno
 =
pcb
->
rcv_nxt
 - 1)) {

748 
	`t˝_ªxmô
(
pcb
);

751 
CLOSE_WAIT
:

753 
ESTABLISHED
:

754 
	`t˝_ª˚ive
(
pcb
, 
ö_d©a
);

755 i‡(
ö_d©a
->
ªcv_Êags
 & 
TF_GOT_FIN
) {

756 
	`t˝_ack_now
(
pcb
);

757 
pcb
->
°©e
 = 
CLOSE_WAIT
;

760 
FIN_WAIT_1
:

761 
	`t˝_ª˚ive
(
pcb
, 
ö_d©a
);

762 i‡(
ö_d©a
->
ªcv_Êags
 & 
TF_GOT_FIN
) {

763 i‡((
ö_d©a
->
Êags
 & 
TCP_ACK
Ë&& (ö_d©a->
ackno
 =
pcb
->
¢d_nxt
)) {

764 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

765 ("TCP c⁄√˘i⁄ clo£d: FIN_WAIT_1 %"
U16_F
" -> %"U16_F".\n", 
ö_d©a
->
ö£g
.
t˝hdr
->
§c
, in_d©a->ö£g.t˝hdr->
de°
));

766 
	`t˝_ack_now
(
pcb
);

767 
	`t˝_pcb_purge
(
pcb
);

768 
	`TCP_RMV
(&
ö_d©a
->
thªad
->
t˝ù_d©a
.
t˝_a˘ive_pcbs
, 
pcb
, in_d©a->thªad->t˝ù_d©a.
t˝_tmp_pcb
);

769 
ö_d©a
->
thªad
->
t˝ù_d©a
.
t˝_pcbs
[ö_d©a->thªad->t˝ù_d©a.
t˝_tmp_pcb
->
loˇl_p‹t
 % 
NUM_FLOWS
] = 
NULL
;

770 
pcb
->
°©e
 = 
TIME_WAIT
;

771 
	`TCP_REG
(&
ö_d©a
->
thªad
->
t˝ù_d©a
.
t˝_tw_pcbs
, 
pcb
);

773 
	`t˝_ack_now
(
pcb
);

774 
pcb
->
°©e
 = 
CLOSING
;

776 } i‡((
ö_d©a
->
Êags
 & 
TCP_ACK
Ë&& (ö_d©a->
ackno
 =
pcb
->
¢d_nxt
)) {

777 
pcb
->
°©e
 = 
FIN_WAIT_2
;

780 
FIN_WAIT_2
:

781 
	`t˝_ª˚ive
(
pcb
, 
ö_d©a
);

782 i‡(
ö_d©a
->
ªcv_Êags
 & 
TF_GOT_FIN
) {

783 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄ clo£d: FIN_WAIT_2 %"
U16_F
" -> %"U16_F".\n", 
ö_d©a
->
ö£g
.
t˝hdr
->
§c
, 
öd©a
.ö£g.t˝hdr->
de°
));

784 
	`t˝_ack_now
(
pcb
);

785 
	`t˝_pcb_purge
(
pcb
);

786 
	`TCP_RMV
(&
ö_d©a
->
thªad
->
t˝ù_d©a
.
t˝_a˘ive_pcbs
, 
pcb
, in_d©a->thªad->t˝ù_d©a.
t˝_tmp_pcb
);

787 
ö_d©a
->
thªad
->
t˝ù_d©a
.
t˝_pcbs
[ö_d©a->thªad->t˝ù_d©a.
t˝_tmp_pcb
->
loˇl_p‹t
 % 
NUM_FLOWS
] = 
NULL
;

788 
pcb
->
°©e
 = 
TIME_WAIT
;

789 
	`TCP_REG
(&
ö_d©a
->
thªad
->
t˝ù_d©a
.
t˝_tw_pcbs
, 
pcb
);

792 
CLOSING
:

793 
	`t˝_ª˚ive
(
pcb
, 
ö_d©a
);

794 i‡(
ö_d©a
->
Êags
 & 
TCP_ACK
 && in_d©a->
ackno
 =
pcb
->
¢d_nxt
) {

795 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄ clo£d: CLOSING %"
U16_F
" -> %"U16_F".\n", 
ö_d©a
->
ö£g
.
t˝hdr
->
§c
, in_d©a->ö£g.t˝hdr->
de°
));

796 
	`t˝_pcb_purge
(
pcb
);

797 
	`TCP_RMV
(&
ö_d©a
->
thªad
->
t˝ù_d©a
.
t˝_a˘ive_pcbs
, 
pcb
, in_d©a->thªad->t˝ù_d©a.
t˝_tmp_pcb
);

798 
ö_d©a
->
thªad
->
t˝ù_d©a
.
t˝_pcbs
[ö_d©a->thªad->t˝ù_d©a.
t˝_tmp_pcb
->
loˇl_p‹t
 % 
NUM_FLOWS
] = 
NULL
;

799 
pcb
->
°©e
 = 
TIME_WAIT
;

800 
	`TCP_REG
(&
ö_d©a
->
thªad
->
t˝ù_d©a
.
t˝_tw_pcbs
, 
pcb
);

803 
LAST_ACK
:

804 
	`t˝_ª˚ive
(
pcb
, 
ö_d©a
);

805 i‡(
ö_d©a
->
Êags
 & 
TCP_ACK
 && in_d©a->
ackno
 =
pcb
->
¢d_nxt
) {

806 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄ clo£d: LAST_ACK %"
U16_F
" -> %"U16_F".\n", 
ö_d©a
->
ö£g
.
t˝hdr
->
§c
, in_d©a->ö£g.t˝hdr->
de°
));

808 
ö_d©a
->
ªcv_Êags
 |
TF_CLOSED
;

814  
ERR_OK
;

815 
	}
}

817 #i‡
TCP_QUEUE_OOSEQ


824 
	$t˝_oos_ö£π_£gmít
(
t˝_£g
 *
c£g
, t˝_£g *
√xt
, 
t˝_d©a_ö
 *
ö_d©a
)

826 
t˝_£g
 *
ﬁd_£g
;

828 i‡(
	`TCPH_FLAGS
(
c£g
->
t˝hdr
Ë& 
TCP_FIN
) {

830 
	`t˝_£gs_‰ì
(
√xt
);

831 
√xt
 = 
NULL
;

836 
√xt
 &&

837 
	`TCP_SEQ_GEQ
((
ö_d©a
->
£qno
 + 
c£g
->
Àn
),

838 (
√xt
->
t˝hdr
->
£qno
 +Çext->
Àn
))) {

840 i‡(
	`TCPH_FLAGS
(
√xt
->
t˝hdr
Ë& 
TCP_FIN
) {

841 
	`TCPH_SET_FLAG
(
c£g
->
t˝hdr
, 
TCP_FIN
);

843 
ﬁd_£g
 = 
√xt
;

844 
√xt
 =Çext->next;

845 
	`t˝_£g_‰ì
(
ﬁd_£g
);

847 i‡(
√xt
 &&

848 
	`TCP_SEQ_GT
(
ö_d©a
->
£qno
 + 
c£g
->
Àn
, 
√xt
->
t˝hdr
->seqno)) {

850 
c£g
->
Àn
 = (
u16_t
)(
√xt
->
t˝hdr
->
£qno
 - 
ö_d©a
->seqno);

851 
	`pbuf_ªÆloc
(
c£g
->
p
, c£g->
Àn
);

854 
c£g
->
√xt
 =Çext;

855 
	}
}

871 
	$t˝_ª˚ive
(
t˝_pcb
 *
pcb
, 
t˝_d©a_ö
 *
ö_d©a
)

873 
t˝_£g
 *
√xt
;

874 #i‡
TCP_QUEUE_OOSEQ


875 
t˝_£g
 *
¥ev
, *
c£g
;

877 
pbuf
 *
p
;

878 
s32_t
 
off
;

879 
s16_t
 
m
;

880 
u32_t
 
right_wnd_edge
;

881 
u16_t
 
√w_tŸ_Àn
;

882 
found_du∑ck
 = 0;

884 i‡(
ö_d©a
->
Êags
 & 
TCP_ACK
) {

885 
right_wnd_edge
 = 
pcb
->
¢d_wnd
 +Öcb->
¢d_wl2
;

888 i‡(
	`TCP_SEQ_LT
(
pcb
->
¢d_wl1
, 
ö_d©a
->
£qno
) ||

889 (
pcb
->
¢d_wl1
 =
ö_d©a
->
£qno
 && 
	`TCP_SEQ_LT
’cb->
¢d_wl2
, in_d©a->
ackno
)) ||

890 (
pcb
->
¢d_wl2
 =
ö_d©a
->
ackno
 && in_d©a->
t˝hdr
->
wnd
 >Öcb->
¢d_wnd
)) {

891 
pcb
->
¢d_wnd
 = 
ö_d©a
->
t˝hdr
->
wnd
;

892 
pcb
->
¢d_wl1
 = 
ö_d©a
->
£qno
;

893 
pcb
->
¢d_wl2
 = 
ö_d©a
->
ackno
;

894 i‡(
pcb
->
¢d_wnd
 > 0 &&Öcb->
≥rsi°_backoff
 > 0) {

895 
pcb
->
≥rsi°_backoff
 = 0;

897 
	`LWIP_DEBUGF
(
TCP_WND_DEBUG
, ("t˝_ª˚ive: wödow upd©ê%"
U16_F
"\n", 
pcb
->
¢d_wnd
));

898 #i‡
TCP_WND_DEBUG


900 i‡(
pcb
->
¢d_wnd
 !
t˝hdr
->
wnd
) {

901 
	`LWIP_DEBUGF
(
TCP_WND_DEBUG
,

902 ("t˝_ª˚ive:Çÿwödow upd©êœ°ack %"
U32_F
"áckno %"

903 
U32_F
" wl1 %"U32_F" seqno %"U32_F" wl2 %"U32_F"\n",

904 
pcb
->
œ°ack
, 
ö_d©a
->
ackno
,Öcb->
¢d_wl1
, in_d©a->
£qno
,Öcb->
¢d_wl2
));

930 i‡(
	`TCP_SEQ_LEQ
(
ö_d©a
->
ackno
, 
pcb
->
œ°ack
)) {

931 
pcb
->
acked
 = 0;

933 i‡(
ö_d©a
->
t˝Àn
 == 0) {

935 i‡(
pcb
->
¢d_wl2
 +Öcb->
¢d_wnd
 =
right_wnd_edge
){

937 i‡(
pcb
->
πime
 >= 0) {

939 i‡(
pcb
->
œ°ack
 =
ö_d©a
->
ackno
) {

940 
found_du∑ck
 = 1;

941 i‡(
pcb
->
du∑cks
 + 1 >Öcb->dupacks)

942 ++
pcb
->
du∑cks
;

943 i‡(
pcb
->
du∑cks
 > 3) {

946 i‡((
u16_t
)(
pcb
->
cwnd
 +Öcb->
mss
) >Öcb->cwnd) {

947 
pcb
->
cwnd
 +pcb->
mss
;

949 } i‡(
pcb
->
du∑cks
 == 3) {

951 
	`t˝_ªxmô_Á°
(
pcb
);

959 i‡(!
found_du∑ck
) {

960 
pcb
->
du∑cks
 = 0;

962 } i‡(
	`TCP_SEQ_BETWEEN
(
ö_d©a
->
ackno
, 
pcb
->
œ°ack
+1,Öcb->
¢d_nxt
)){

968 i‡(
pcb
->
Êags
 & 
TF_INFR
) {

969 
pcb
->
Êags
 &~
TF_INFR
;

970 
pcb
->
cwnd
 =Öcb->
s°hªsh
;

974 
pcb
->
ƒtx
 = 0;

977 
pcb
->
πo
 = (pcb->
ß
 >> 3Ë+Öcb->
sv
;

980 
pcb
->
acked
 = (
u16_t
)(
ö_d©a
->
ackno
 -Öcb->
œ°ack
);

982 
pcb
->
¢d_buf
 +pcb->
acked
;

985 
pcb
->
du∑cks
 = 0;

986 
pcb
->
œ°ack
 = 
ö_d©a
->
ackno
;

990 i‡(
pcb
->
°©e
 >
ESTABLISHED
) {

991 i‡(
pcb
->
cwnd
 <Öcb->
s°hªsh
) {

992 i‡((
u16_t
)(
pcb
->
cwnd
 +Öcb->
mss
) >Öcb->cwnd) {

993 
pcb
->
cwnd
 +pcb->
mss
;

995 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ª˚ive: slow sèπ cwnd %"
U16_F
"\n", 
pcb
->
cwnd
));

997 
u16_t
 
√w_cwnd
 = (
pcb
->
cwnd
 +Öcb->
mss
 *Öcb->mss /Öcb->cwnd);

998 i‡(
√w_cwnd
 > 
pcb
->
cwnd
) {

999 
pcb
->
cwnd
 = 
√w_cwnd
;

1001 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ª˚ive: c⁄ge°i⁄ávoid™˚ cwnd %"
U16_F
"\n", 
pcb
->
cwnd
));

1004 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive: ACK f‹ %"
U32_F
", unacked->seqno %"U32_F":%"U32_F"\n",

1005 
ö_d©a
->
ackno
,

1006 
pcb
->
u«cked
 !
NULL
?

1007 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
): 0,

1008 
pcb
->
u«cked
 !
NULL
?

1009 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(pcb->unacked): 0));

1013 
pcb
->
u«cked
 !
NULL
 &&

1014 
	`TCP_SEQ_LEQ
(
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
) +

1015 
	`TCP_TCPLEN
(
pcb
->
u«cked
), 
ö_d©a
->
ackno
)) {

1016 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive:Ñemovög %"
U32_F
":%"U32_F" fromÖcb->unacked\n",

1017 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
),

1018 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
) +

1019 
	`TCP_TCPLEN
(
pcb
->
u«cked
)));

1021 
√xt
 = 
pcb
->
u«cked
;

1022 
pcb
->
u«cked
 =Öcb->u«cked->
√xt
;

1024 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_ª˚ive: queuñí %"
U16_F
" ... ", (
u16_t
)
pcb
->
¢d_queuñí
));

1025 
	`LWIP_ASSERT
("pcb->¢d_queuñí >pbuf_˛í“ext->p)", (
pcb
->
¢d_queuñí
 >
	`pbuf_˛í
(
√xt
->
p
)));

1027 i‡((
pcb
->
acked
 !0Ë&& ((
	`TCPH_FLAGS
(
√xt
->
t˝hdr
Ë& 
TCP_FIN
) != 0)) {

1028 
pcb
->
acked
--;

1031 
pcb
->
¢d_queuñí
 -
	`pbuf_˛í
(
√xt
->
p
);

1032 
	`t˝_£g_‰ì
(
√xt
);

1034 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("%"
U16_F
" (a·î fªeög u«cked)\n", (
u16_t
)
pcb
->
¢d_queuñí
));

1035 i‡(
pcb
->
¢d_queuñí
 != 0) {

1036 
	`LWIP_ASSERT
("t˝_ª˚ive: vÆid queuêÀngth", 
pcb
->
u«cked
 !
NULL
 ||

1037 
pcb
->
un£¡
 !
NULL
);

1043 if(
pcb
->
u«cked
 =
NULL
)

1044 
pcb
->
πime
 = -1;

1046 
pcb
->
πime
 = 0;

1048 
pcb
->
pﬁ…mr
 = 0;

1051 
pcb
->
acked
 = 0;

1060 
pcb
->
un£¡
 !
NULL
 &&

1061 
	`TCP_SEQ_BETWEEN
(
ö_d©a
->
ackno
, 
	`¡ohl
(
pcb
->
un£¡
->
t˝hdr
->
£qno
) +

1062 
	`TCP_TCPLEN
(
pcb
->
un£¡
),Öcb->
¢d_nxt
)) {

1063 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive:Ñemovög %"
U32_F
":%"U32_F" fromÖcb->unsent\n",

1064 
	`¡ohl
(
pcb
->
un£¡
->
t˝hdr
->
£qno
),Çtohl(pcb->unsent->tcphdr->seqno) +

1065 
	`TCP_TCPLEN
(
pcb
->
un£¡
)));

1067 
√xt
 = 
pcb
->
un£¡
;

1068 
pcb
->
un£¡
 =Öcb->un£¡->
√xt
;

1069 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_ª˚ive: queuñí %"
U16_F
" ... ", (
u16_t
)
pcb
->
¢d_queuñí
));

1070 
	`LWIP_ASSERT
("pcb->¢d_queuñí >pbuf_˛í“ext->p)", (
pcb
->
¢d_queuñí
 >
	`pbuf_˛í
(
√xt
->
p
)));

1072 i‡((
pcb
->
acked
 !0Ë&& ((
	`TCPH_FLAGS
(
√xt
->
t˝hdr
Ë& 
TCP_FIN
) != 0)) {

1073 
pcb
->
acked
--;

1075 
pcb
->
¢d_queuñí
 -
	`pbuf_˛í
(
√xt
->
p
);

1076 
	`t˝_£g_‰ì
(
√xt
);

1077 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("%"
U16_F
" (a·î fªeög un£¡)\n", (
u16_t
)
pcb
->
¢d_queuñí
));

1078 i‡(
pcb
->
¢d_queuñí
 != 0) {

1079 
	`LWIP_ASSERT
("tcp_receive: valid queueÜength",

1080 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

1085 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ª˚ive:Öcb->πã° %"
U32_F
"Ñtseq %"U32_F"áckno %"U32_F"\n",

1086 
pcb
->
πã°
,Öcb->
π£q
, 
ö_d©a
->
ackno
));

1091 i‡(
pcb
->
πã°
 && 
	`TCP_SEQ_LT
’cb->
π£q
, 
ö_d©a
->
ackno
)) {

1094 
m
 = (
s16_t
)(
ö_d©a
->
thªad
->
t˝ù_d©a
.
t˝_ticks
 - 
pcb
->
πã°
);

1096 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ª˚ive:Éx≥rõn˚dÑâ %"
U16_F
"Åicks (%"U16_F" msec).\n",

1097 
m
, m * 
TCP_SLOW_INTERVAL
));

1100 
m
 = m - (
pcb
->
ß
 >> 3);

1101 
pcb
->
ß
 +
m
;

1102 i‡(
m
 < 0) {

1103 
m
 = -m;

1105 
m
 = m - (
pcb
->
sv
 >> 2);

1106 
pcb
->
sv
 +
m
;

1107 
pcb
->
πo
 = (pcb->
ß
 >> 3Ë+Öcb->
sv
;

1109 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ª˚ive: RTO %"
U16_F
" (%"U16_F" milliseconds)\n",

1110 
pcb
->
πo
,Öcb->πÿ* 
TCP_SLOW_INTERVAL
));

1112 
pcb
->
πã°
 = 0;

1118 i‡(
ö_d©a
->
t˝Àn
 > 0) {

1149 i‡(
	`TCP_SEQ_BETWEEN
(
pcb
->
rcv_nxt
, 
ö_d©a
->
£qno
 + 1, in_d©a->£qnÿ+ in_d©a->
t˝Àn
 - 1)){

1170 
off
 = 
pcb
->
rcv_nxt
 - 
ö_d©a
->
£qno
;

1171 
p
 = 
ö_d©a
->
ö£g
.p;

1172 
	`LWIP_ASSERT
("ö£g.∞!NULL", 
ö_d©a
->
ö£g
.
p
);

1173 
	`LWIP_ASSERT
("öß√ off£t!", (
off
 < 0x7fff));

1174 i‡(
ö_d©a
->
ö£g
.
p
->
Àn
 < 
off
) {

1175 
	`LWIP_ASSERT
("pbu‡toÿsh‹t!", (((
s32_t
)
ö_d©a
->
ö£g
.
p
->
tŸ_Àn
Ë>
off
));

1176 
√w_tŸ_Àn
 = (
u16_t
)(
ö_d©a
->
ö£g
.
p
->
tŸ_Àn
 - 
off
);

1177 
p
->
Àn
 < 
off
) {

1178 
off
 -
p
->
Àn
;

1182 
p
->
tŸ_Àn
 = 
√w_tŸ_Àn
;

1183 
p
->
Àn
 = 0;

1184 
p
 =Ö->
√xt
;

1186 if(
	`pbuf_hódî
(
p
, (
s16_t
)-
off
)) {

1188 
	`LWIP_ASSERT
("pbuf_header failed", 0);

1191 if(
	`pbuf_hódî
(
ö_d©a
->
ö£g
.
p
, (
s16_t
)-
off
)) {

1193 
	`LWIP_ASSERT
("pbuf_header failed", 0);

1196 
ö_d©a
->
ö£g
.
Àn
 -(
u16_t
)(
pcb
->
rcv_nxt
 - in_d©a->
£qno
);

1197 
ö_d©a
->
ö£g
.
t˝hdr
->
£qno
 = in_d©a->£qnÿ
pcb
->
rcv_nxt
;

1200 i‡(
	`TCP_SEQ_LT
(
ö_d©a
->
£qno
, 
pcb
->
rcv_nxt
)){

1204 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive: du∂iˇã seqnÿ%"
U32_F
"\n", 
ö_d©a
->
£qno
));

1205 
	`t˝_ack_now
(
pcb
);

1212 i‡(
	`TCP_SEQ_BETWEEN
(
ö_d©a
->
£qno
, 
pcb
->
rcv_nxt
,

1213 
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
 - 1)){

1214 i‡(
pcb
->
rcv_nxt
 =
ö_d©a
->
£qno
) {

1218 
ö_d©a
->
t˝Àn
 = 
	`TCP_TCPLEN
(&ö_d©a->
ö£g
);

1220 i‡(
ö_d©a
->
t˝Àn
 > 
pcb
->
rcv_wnd
) {

1221 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
,

1223 "£qnÿ%"
U32_F
"Üí %"
U16_F
"ÑightÉdge %"U32_F"\n",

1224 
ö_d©a
->
£qno
, in_d©a->
t˝Àn
, 
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
));

1225 i‡(
	`TCPH_FLAGS
(
ö_d©a
->
ö£g
.
t˝hdr
Ë& 
TCP_FIN
) {

1228 
	`TCPH_FLAGS_SET
(
ö_d©a
->
ö£g
.
t˝hdr
, 
	`TCPH_FLAGS
(ö_d©a->ö£g.t˝hdrË&~ 
TCP_FIN
);

1231 
ö_d©a
->
ö£g
.
Àn
 = 
pcb
->
rcv_wnd
;

1232 i‡(
	`TCPH_FLAGS
(
ö_d©a
->
ö£g
.
t˝hdr
Ë& 
TCP_SYN
) {

1233 
ö_d©a
->
ö£g
.
Àn
 -= 1;

1235 
	`pbuf_ªÆloc
(
ö_d©a
->
ö£g
.
p
, in_d©a->ö£g.
Àn
);

1236 
ö_d©a
->
t˝Àn
 = 
	`TCP_TCPLEN
(&ö_d©a->
ö£g
);

1237 
	`LWIP_ASSERT
("tcp_receive: segmentÇotÅrimmed correctlyÅoÑcv_wnd\n",

1238 (
ö_d©a
->
£qno
 + in_d©a->
t˝Àn
Ë=(
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
));

1240 #i‡
TCP_QUEUE_OOSEQ


1244 i‡(
pcb
->
oo£q
 !
NULL
) {

1245 i‡(
	`TCPH_FLAGS
(
ö_d©a
->
ö£g
.
t˝hdr
Ë& 
TCP_FIN
) {

1246 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
,

1251 
pcb
->
oo£q
 !
NULL
) {

1252 
t˝_£g
 *
ﬁd_oo£q
 = 
pcb
->
oo£q
;

1253 
pcb
->
oo£q
 =Öcb->oo£q->
√xt
;

1254 
	`t˝_£g_‰ì
(
ﬁd_oo£q
);

1258 
√xt
 = 
pcb
->
oo£q
;

1261 
√xt
 &&

1262 
	`TCP_SEQ_GEQ
(
ö_d©a
->
£qno
 + in_d©a->
t˝Àn
,

1263 
√xt
->
t˝hdr
->
£qno
 +Çext->
Àn
)) {

1265 i‡(
	`TCPH_FLAGS
(
√xt
->
t˝hdr
Ë& 
TCP_FIN
 &&

1266 (
	`TCPH_FLAGS
(
ö_d©a
->
ö£g
.
t˝hdr
Ë& 
TCP_SYN
) == 0) {

1267 
	`TCPH_SET_FLAG
(
ö_d©a
->
ö£g
.
t˝hdr
, 
TCP_FIN
);

1268 
ö_d©a
->
t˝Àn
 = 
	`TCP_TCPLEN
(&ö_d©a->
ö£g
);

1270 
¥ev
 = 
√xt
;

1271 
√xt
 =Çext->next;

1272 
	`t˝_£g_‰ì
(
¥ev
);

1276 i‡(
√xt
 &&

1277 
	`TCP_SEQ_GT
(
ö_d©a
->
£qno
 + in_d©a->
t˝Àn
,

1278 
√xt
->
t˝hdr
->
£qno
)) {

1280 
ö_d©a
->
ö£g
.
Àn
 = (
u16_t
)(
√xt
->
t˝hdr
->
£qno
 - in_data->seqno);

1281 i‡(
	`TCPH_FLAGS
(
ö_d©a
->
ö£g
.
t˝hdr
Ë& 
TCP_SYN
) {

1282 
ö_d©a
->
ö£g
.
Àn
 -= 1;

1284 
	`pbuf_ªÆloc
(
ö_d©a
->
ö£g
.
p
, in_d©a->ö£g.
Àn
);

1285 
ö_d©a
->
t˝Àn
 = 
	`TCP_TCPLEN
(&ö_d©a->
ö£g
);

1286 
	`LWIP_ASSERT
("tcp_receive: segmentÇotÅrimmed correctlyÅo ooseq queue\n",

1287 (
ö_d©a
->
£qno
 + in_d©a->
t˝Àn
Ë=
√xt
->
t˝hdr
->seqno);

1289 
pcb
->
oo£q
 = 
√xt
;

1294 
pcb
->
rcv_nxt
 = 
ö_d©a
->
£qno
 + in_d©a->
t˝Àn
;

1297 
	`LWIP_ASSERT
("t˝_ª˚ive:Å˝À¿>Ñcv_wnd\n", 
pcb
->
rcv_wnd
 >
ö_d©a
->
t˝Àn
);

1298 
pcb
->
rcv_wnd
 -
ö_d©a
->
t˝Àn
;

1300 
	`t˝_upd©e_rcv_™n_wnd
(
pcb
);

1311 i‡(
ö_d©a
->
ö£g
.
p
->
tŸ_Àn
 > 0) {

1312 
ö_d©a
->
ªcv_d©a
 = in_d©a->
ö£g
.
p
;

1316 
ö_d©a
->
ö£g
.
p
 = 
NULL
;

1318 i‡(
	`TCPH_FLAGS
(
ö_d©a
->
ö£g
.
t˝hdr
Ë& 
TCP_FIN
) {

1319 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_receive:Ñeceived FIN.\n"));

1320 
ö_d©a
->
ªcv_Êags
 |
TF_GOT_FIN
;

1323 #i‡
TCP_QUEUE_OOSEQ


1326 
pcb
->
oo£q
 !
NULL
 &&

1327 
pcb
->
oo£q
->
t˝hdr
->
£qno
 =pcb->
rcv_nxt
) {

1329 
c£g
 = 
pcb
->
oo£q
;

1330 
ö_d©a
->
£qno
 = 
pcb
->
oo£q
->
t˝hdr
->seqno;

1332 
pcb
->
rcv_nxt
 +
	`TCP_TCPLEN
(
c£g
);

1333 
	`LWIP_ASSERT
("tcp_receive: ooseqÅcplen >Ñcv_wnd\n",

1334 
pcb
->
rcv_wnd
 >
	`TCP_TCPLEN
(
c£g
));

1335 
pcb
->
rcv_wnd
 -
	`TCP_TCPLEN
(
c£g
);

1337 
	`t˝_upd©e_rcv_™n_wnd
(
pcb
);

1339 i‡(
c£g
->
p
->
tŸ_Àn
 > 0) {

1342 i‡(
ö_d©a
->
ªcv_d©a
) {

1343 
	`pbuf_ˇt
(
ö_d©a
->
ªcv_d©a
, 
c£g
->
p
);

1345 
ö_d©a
->
ªcv_d©a
 = 
c£g
->
p
;

1347 
c£g
->
p
 = 
NULL
;

1349 i‡(
	`TCPH_FLAGS
(
c£g
->
t˝hdr
Ë& 
TCP_FIN
) {

1350 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_receive: dequeued FIN.\n"));

1351 
ö_d©a
->
ªcv_Êags
 |
TF_GOT_FIN
;

1352 i‡(
pcb
->
°©e
 =
ESTABLISHED
) {

1353 
pcb
->
°©e
 = 
CLOSE_WAIT
;

1357 
pcb
->
oo£q
 = 
c£g
->
√xt
;

1358 
	`t˝_£g_‰ì
(
c£g
);

1364 
	`t˝_ack
(
pcb
);

1368 
	`TCP_STATS_INC
(
t˝
.
ooo
);

1369 
	`t˝_£nd_em±y_ack
(
pcb
);

1370 #i‡
TCP_QUEUE_OOSEQ


1372 i‡(
pcb
->
oo£q
 =
NULL
) {

1373 
pcb
->
oo£q
 = 
	`t˝_£g_c›y
(&
ö_d©a
->
ö£g
);

1387 
¥ev
 = 
NULL
;

1388 
√xt
 = 
pcb
->
oo£q
;Çexà!
NULL
;Çext =Çext->next) {

1389 i‡(
ö_d©a
->
£qno
 =
√xt
->
t˝hdr
->seqno) {

1394 i‡(
ö_d©a
->
ö£g
.
Àn
 > 
√xt
->len) {

1398 
c£g
 = 
	`t˝_£g_c›y
(&
ö_d©a
->
ö£g
);

1399 i‡(
c£g
 !
NULL
) {

1400 i‡(
¥ev
 !
NULL
) {

1401 
¥ev
->
√xt
 = 
c£g
;

1403 
pcb
->
oo£q
 = 
c£g
;

1405 
	`t˝_oos_ö£π_£gmít
(
c£g
, 
√xt
, 
ö_d©a
);

1415 i‡(
¥ev
 =
NULL
) {

1416 i‡(
	`TCP_SEQ_LT
(
ö_d©a
->
£qno
, 
√xt
->
t˝hdr
->seqno)) {

1421 
c£g
 = 
	`t˝_£g_c›y
(&
ö_d©a
->
ö£g
);

1422 i‡(
c£g
 !
NULL
) {

1423 
pcb
->
oo£q
 = 
c£g
;

1424 
	`t˝_oos_ö£π_£gmít
(
c£g
, 
√xt
, 
ö_d©a
);

1431 i‡(
	`TCP_SEQ_BETWEEN
(
ö_d©a
->
£qno
, 
¥ev
->
t˝hdr
->£qno+1, 
√xt
->tcphdr->seqno-1)) {

1437 
c£g
 = 
	`t˝_£g_c›y
(&
ö_d©a
->
ö£g
);

1438 i‡(
c£g
 !
NULL
) {

1439 i‡(
	`TCP_SEQ_GT
(
¥ev
->
t˝hdr
->
£qno
 +Öªv->
Àn
, 
ö_d©a
->seqno)) {

1441 
¥ev
->
Àn
 = (
u16_t
)(
ö_d©a
->
£qno
 -Öªv->
t˝hdr
->seqno);

1442 
	`pbuf_ªÆloc
(
¥ev
->
p
,Öªv->
Àn
);

1444 
¥ev
->
√xt
 = 
c£g
;

1445 
	`t˝_oos_ö£π_£gmít
(
c£g
, 
√xt
, 
ö_d©a
);

1453 i‡(
√xt
->√xà=
NULL
 &&

1454 
	`TCP_SEQ_GT
(
ö_d©a
->
£qno
, 
√xt
->
t˝hdr
->seqno)) {

1455 i‡(
	`TCPH_FLAGS
(
√xt
->
t˝hdr
Ë& 
TCP_FIN
) {

1459 
√xt
->√xà
	`t˝_£g_c›y
(&
ö_d©a
->
ö£g
);

1460 i‡(
√xt
->√xà!
NULL
) {

1461 i‡(
	`TCP_SEQ_GT
(
√xt
->
t˝hdr
->
£qno
 +Çext->
Àn
, 
ö_d©a
->seqno)) {

1463 
√xt
->
Àn
 = (
u16_t
)(
ö_d©a
->
£qno
 -Çext->
t˝hdr
->seqno);

1464 
	`pbuf_ªÆloc
(
√xt
->
p
,Çext->
Àn
);

1467 i‡((
u32_t
)
ö_d©a
->
t˝Àn
 + in_d©a->
£qno
 > 
pcb
->
rcv_nxt
 + (u32_tÌcb->
rcv_wnd
) {

1468 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
,

1470 "£qnÿ%"
U32_F
"Üí %"
U16_F
"ÑightÉdge %"U32_F"\n",

1471 
ö_d©a
->
£qno
, in_d©a->
t˝Àn
, 
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
));

1472 i‡(
	`TCPH_FLAGS
(
√xt
->√xt->
t˝hdr
Ë& 
TCP_FIN
) {

1475 
	`TCPH_FLAGS_SET
(
√xt
->√xt->
t˝hdr
, 
	`TCPH_FLAGS
“ext->√xt->t˝hdrË&~ 
TCP_FIN
);

1478 
√xt
->√xt->
Àn
 = 
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
 - 
ö_d©a
->
£qno
;

1479 
	`pbuf_ªÆloc
(
√xt
->√xt->
p
,Çext->√xt->
Àn
);

1480 
ö_d©a
->
t˝Àn
 = 
	`TCP_TCPLEN
(
√xt
->next);

1481 
	`LWIP_ASSERT
("tcp_receive: segmentÇotÅrimmed correctlyÅoÑcv_wnd\n",

1482 (
ö_d©a
->
£qno
 + in_d©a->
t˝Àn
Ë=(
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
));

1488 
¥ev
 = 
√xt
;

1496 
	`t˝_£nd_em±y_ack
(
pcb
);

1503 if(!
	`TCP_SEQ_BETWEEN
(
ö_d©a
->
£qno
, 
pcb
->
rcv_nxt
,Öcb->rcv_nxà+Öcb->
rcv_wnd
-1)){

1504 
	`t˝_ack_now
(
pcb
);

1507 
	}
}

1518 
	$t˝_∑r£›t
(
t˝_pcb
 *
pcb
, 
t˝_d©a_ö
 *
ö_d©a
)

1520 
u16_t
 
c
, 
max_c
;

1521 
u16_t
 
mss
;

1522 
u8_t
 *
›ts
, 
›t
;

1523 #i‡
LWIP_TCP_TIMESTAMPS


1524 
u32_t
 
tsvÆ
;

1527 
›ts
 = (
u8_t
 *)
ö_d©a
->
t˝hdr
 + 
TCP_HLEN
;

1530 if(
	`TCPH_HDRLEN
(
ö_d©a
->
t˝hdr
) > 0x5) {

1531 
max_c
 = (
	`TCPH_HDRLEN
(
ö_d©a
->
t˝hdr
) - 5) << 2;

1532 
c
 = 0; c < 
max_c
; ) {

1533 
›t
 = 
›ts
[
c
];

1534 
›t
) {

1537 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: EOL\n"));

1541 ++
c
;

1542 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: NOP\n"));

1545 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: MSS\n"));

1546 i‡(
›ts
[
c
 + 1] !0x04 || c + 0x04 > 
max_c
) {

1548 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: badÜength\n"));

1552 
mss
 = (
›ts
[
c
 + 2] << 8) | opts[c + 3];

1554 
pcb
->
mss
 = ((ms†> 
TCP_MSS
) || (mss == 0)) ? TCP_MSS : mss;

1556 
c
 += 0x04;

1558 #i‡
LWIP_TCP_TIMESTAMPS


1560 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: TS\n"));

1561 i‡(
›ts
[
c
 + 1] !0x0A || c + 0x0A > 
max_c
) {

1563 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: badÜength\n"));

1567 
tsvÆ
 = (
›ts
[
c
+2]) | (opts[c+3] << 8) |

1568 (
›ts
[
c
+4] << 16) | (opts[c+5] << 24);

1569 i‡(
ö_d©a
->
Êags
 & 
TCP_SYN
) {

1570 
pcb
->
ts_ª˚¡
 = 
	`¡ohl
(
tsvÆ
);

1571 
pcb
->
Êags
 |
TF_TIMESTAMP
;

1572 } i‡(
	`TCP_SEQ_BETWEEN
(
pcb
->
ts_œ°ack£¡
, 
ö_d©a
->
£qno
, in_d©a->£qno+ö_d©a->
t˝Àn
)) {

1573 
pcb
->
ts_ª˚¡
 = 
	`¡ohl
(
tsvÆ
);

1576 
c
 += 0x0A;

1580 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: other\n"));

1581 i‡(
›ts
[
c
 + 1] == 0) {

1582 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: badÜength\n"));

1589 
c
 +
›ts
[c + 1];

1593 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/tcp_out.c

41 
	~"lwù/›t.h
"

43 #i‡
LWIP_TCP


45 
	~"lwù/t˝_im∂.h
"

46 
	~"lwù/def.h
"

47 
	~"lwù/mem.h
"

48 
	~"lwù/memp.h
"

49 
	~"lwù/sys.h
"

50 
	~"lwù/ù_addr.h
"

51 
	~"lwù/√tif.h
"

52 
	~"lwù/öë_chksum.h
"

53 
	~"lwù/°©s.h
"

54 
	~"lwù/¢mp.h
"

55 
	~"lwù/t˝ù.h
"

56 
	~<sched.h
>

57 
	~<°rög.h
>

61 #i‡
TCP_CHECKSUM_ON_COPY


62 
	#TCP_DATA_COPY
(
d°
, 
§c
, 
Àn
, 
£g
) do { \

63 
	`t˝_£g_add_chksum
(
	`LWIP_CHKSUM_COPY
(
d°
, 
§c
, 
Àn
), \

64 
Àn
, &
£g
->
chksum
, &£g->
chksum_sw≠≥d
); \

65 
£g
->
Êags
 |
TF_SEG_DATA_CHECKSUMMED
; } 0)

	)

66 
	#TCP_DATA_COPY2
(
d°
, 
§c
, 
Àn
, 
chksum
, 
chksum_sw≠≥d
) \

67 
	`t˝_£g_add_chksum
(
	`LWIP_CHKSUM_COPY
(
d°
, 
§c
, 
Àn
),Üí, 
chksum
, 
chksum_sw≠≥d
);

	)

69 
	#TCP_DATA_COPY
(
d°
, 
§c
, 
Àn
, 
£g
Ë
	`MEMCPY
(d°, src,Üí)

	)

70 
	#TCP_DATA_COPY2
(
d°
, 
§c
, 
Àn
, 
chksum
, 
chksum_sw≠≥d
Ë
	`MEMCPY
(d°, src,Üí)

	)

75 #i‚de‡
TCP_CHECKSUM_ON_COPY_SANITY_CHECK


76 
	#TCP_CHECKSUM_ON_COPY_SANITY_CHECK
 0

	)

80 
t˝_ouçut_£gmít
(
t˝_£g
 *
£g
, 
t˝_pcb
 *
pcb
);

92 
pbuf
 *

93 
	$t˝_ouçut_Æloc_hódî
(
t˝_pcb
 *
pcb
, 
u16_t
 
›éí
, u16_à
d©Æí
,

94 
u32_t
 
£qno_be
 )

96 
t˝_hdr
 *
t˝hdr
;

97 
˝u
 = 
	`sched_gë˝u
();

98 
pbuf
 *
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
TCP_HLEN
 + 
›éí
 + 
d©Æí
, 
PBUF_POOL_TX
, 
lwù_t˝ù_thªad
[
˝u
]);

99 i‡(
p
 !
NULL
) {

100 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅcp_hdr",

101 (
p
->
Àn
 >
TCP_HLEN
 + 
›éí
));

102 
t˝hdr
 = (
t˝_hdr
 *)
p
->
∑ylﬂd
;

103 
t˝hdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

104 
t˝hdr
->
de°
 = 
	`ht⁄s
(
pcb
->
ªmŸe_p‹t
);

105 
t˝hdr
->
£qno
 = 
£qno_be
;

106 
t˝hdr
->
ackno
 = 
	`ht⁄l
(
pcb
->
rcv_nxt
);

107 
	`TCPH_HDRLEN_FLAGS_SET
(
t˝hdr
, (5 + 
›éí
 / 4), 
TCP_ACK
);

108 
t˝hdr
->
wnd
 = 
	`ht⁄s
(
pcb
->
rcv_™n_wnd
);

109 
t˝hdr
->
chksum
 = 0;

110 
t˝hdr
->
urgp
 = 0;

113 
pcb
->
rcv_™n_right_edge
 =Öcb->
rcv_nxt
 +Öcb->
rcv_™n_wnd
;

115  
p
;

116 
	}
}

124 
îr_t


125 
	$t˝_£nd_fö
(
t˝_pcb
 *
pcb
)

128 i‡(
pcb
->
un£¡
 !
NULL
) {

129 
t˝_£g
 *
œ°_un£¡
;

130 
œ°_un£¡
 = 
pcb
->
un£¡
;Üa°_un£¡->
√xt
 !
NULL
;

131 
œ°_un£¡
 =Üa°_un£¡->
√xt
);

133 i‡((
	`TCPH_FLAGS
(
œ°_un£¡
->
t˝hdr
Ë& (
TCP_SYN
 | 
TCP_FIN
 | 
TCP_RST
)) == 0) {

135 
	`TCPH_SET_FLAG
(
œ°_un£¡
->
t˝hdr
, 
TCP_FIN
);

136  
ERR_OK
;

140  
	`t˝_íqueue_Êags
(
pcb
, 
TCP_FIN
);

141 
	}
}

157 
t˝_£g
 *

158 
	$t˝_¸óã_£gmít
(
t˝_pcb
 *
pcb
, 
pbuf
 *
p
, 
u8_t
 
Êags
, 
u32_t
 
£qno
, u8_à
›tÊags
)

160 
t˝_£g
 *
£g
;

161 
u8_t
 
›éí
 = 
	`LWIP_TCP_OPT_LENGTH
(
›tÊags
);

163 i‡((
£g
 = (
t˝_£g
 *)
	`memp_mÆloc
(
MEMP_TCP_SEG
, 
NULL
)) == NULL) {

164 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("tcp_create_segment:Ço memory.\n"));

165 
	`pbuf_‰ì
(
p
, 
NULL
);

166  
NULL
;

168 
£g
->
Êags
 = 
›tÊags
;

169 
£g
->
√xt
 = 
NULL
;

170 
£g
->
p
 =Ö;

171 
£g
->
Àn
 = 
p
->
tŸ_Àn
 - 
›éí
;

172 #i‡
TCP_OVERSIZE_DBGCHECK


173 
£g
->
ovîsize_À·
 = 0;

175 #i‡
TCP_CHECKSUM_ON_COPY


176 
£g
->
chksum
 = 0;

177 
£g
->
chksum_sw≠≥d
 = 0;

179 
	`LWIP_ASSERT
("invalid optflagsÖassed: TF_SEG_DATA_CHECKSUMMED",

180 (
›tÊags
 & 
TF_SEG_DATA_CHECKSUMMED
) == 0);

184 i‡(
	`pbuf_hódî
(
p
, 
TCP_HLEN
)) {

185 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("tcp_create_segment:ÇoÑoom for TCP header inÖbuf.\n"));

186 
	`TCP_STATS_INC
(
t˝
.
îr
);

187 
	`t˝_£g_‰ì
(
£g
);

188  
NULL
;

190 
£g
->
t˝hdr
 = (
t˝_hdr
 *)£g->
p
->
∑ylﬂd
;

191 
£g
->
t˝hdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

192 
£g
->
t˝hdr
->
de°
 = 
	`ht⁄s
(
pcb
->
ªmŸe_p‹t
);

193 
£g
->
t˝hdr
->
£qno
 = 
	`ht⁄l
(seqno);

195 
	`TCPH_HDRLEN_FLAGS_SET
(
£g
->
t˝hdr
, (5 + 
›éí
 / 4), 
Êags
);

197 
£g
->
t˝hdr
->
urgp
 = 0;

198  
£g
;

199 
	}
}

216 #i‡
TCP_OVERSIZE


217 
pbuf
 *

218 
	$t˝_pbuf_¥óŒoc
(
pbuf_œyî
 
œyî
, 
u16_t
 
Àngth
, u16_à
max_Àngth
,

219 
u16_t
 *
ovîsize
, 
t˝_pcb
 *
pcb
, 
u8_t
 
≠iÊags
,

220 
u8_t
 
fú°_£g
)

222 
pbuf
 *
p
;

223 
u16_t
 
Æloc
 = 
Àngth
;

224 
˝u
 = 
	`sched_gë˝u
();

226 #i‡
LWIP_NETIF_TX_SINGLE_PBUF


227 
	`LWIP_UNUSED_ARG
(
max_Àngth
);

228 
	`LWIP_UNUSED_ARG
(
pcb
);

229 
	`LWIP_UNUSED_ARG
(
≠iÊags
);

230 
	`LWIP_UNUSED_ARG
(
fú°_£g
);

232 
Æloc
 = 
TCP_MSS
;

234 i‡(
Àngth
 < 
max_Àngth
) {

246 i‡((
≠iÊags
 & 
TCP_WRITE_FLAG_MORE
) ||

247 (!(
pcb
->
Êags
 & 
TF_NODELAY
) &&

248 (!
fú°_£g
 ||

249 
pcb
->
un£¡
 !
NULL
 ||

250 
pcb
->
u«cked
 !
NULL
))) {

251 
Æloc
 = 
	`LWIP_MIN
(
max_Àngth
, 
	`LWIP_MEM_ALIGN_SIZE
(
Àngth
 + 
TCP_OVERSIZE
));

255 
p
 = 
	`pbuf_Æloc
(
œyî
, 
Æloc
, 
PBUF_POOL_TX
, 
lwù_t˝ù_thªad
[
˝u
]);

256 i‡(
p
 =
NULL
) {

257  
NULL
;

259 
	`LWIP_ASSERT
("√ed unchaöedÖbuf", 
p
->
√xt
 =
NULL
);

260 *
ovîsize
 = 
p
->
Àn
 - 
Àngth
;

262 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
Àngth
;

263  
p
;

264 
	}
}

266 
	#t˝_pbuf_¥óŒoc
(
œyî
, 
Àngth
, 
mx
, 
os
, 
pcb
, 
≠i
, 
f°
Ë
	`pbuf_Æloc
(÷ayî), (Àngth), 
PBUF_RAM
, 
NULL
)

	)

269 #i‡
TCP_CHECKSUM_ON_COPY


272 
	$t˝_£g_add_chksum
(
u16_t
 
chksum
, u16_à
Àn
, u16_à*
£g_chksum
,

273 
u8_t
 *
£g_chksum_sw≠≥d
)

275 
u32_t
 
hñ≥r
;

277 
hñ≥r
 = 
chksum
 + *
£g_chksum
;

278 
chksum
 = 
	`FOLD_U32T
(
hñ≥r
);

279 i‡((
Àn
 & 1) != 0) {

280 *
£g_chksum_sw≠≥d
 = 1 - *seg_chksum_swapped;

281 
chksum
 = 
	`SWAP_BYTES_IN_WORD
(chksum);

283 *
£g_chksum
 = 
chksum
;

284 
	}
}

293 
îr_t


294 
	$t˝_wrôe_checks
(
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
)

297 i‡((
pcb
->
°©e
 !
ESTABLISHED
) &&

298 (
pcb
->
°©e
 !
CLOSE_WAIT
) &&

299 (
pcb
->
°©e
 !
SYN_SENT
) &&

300 (
pcb
->
°©e
 !
SYN_RCVD
)) {

301 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 
LWIP_DBG_STATE
 | 
LWIP_DBG_LEVEL_SEVERE
, ("tcp_write() called in invalid state\n"));

302  
ERR_CONN
;

303 } i‡(
Àn
 == 0) {

304  
ERR_OK
;

308 i‡(
Àn
 > 
pcb
->
¢d_buf
) {

309 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 3, ("t˝_wrôe:Åoÿmuch d©®÷í=%"
U16_F
" > snd_buf=%"U16_F")\n",

310 
Àn
, 
pcb
->
¢d_buf
));

311 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

312  
ERR_MEM
;

315 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_wrôe: queuñí: %"
U16_F
"\n", (
u16_t
)
pcb
->
¢d_queuñí
));

320 i‡((
pcb
->
¢d_queuñí
 >
TCP_SND_QUEUELEN
Ë|| (pcb->¢d_queuñí > 
TCP_SNDQUEUELEN_OVERFLOW
)) {

321 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 3, ("t˝_wrôe:Åoÿl⁄g queuê%"
U16_F
" (max %"U16_F")\n",

322 
pcb
->
¢d_queuñí
, 
TCP_SND_QUEUELEN
));

323 
	`TCP_STATS_INC
(
t˝
.
memîr
);

324 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

325  
ERR_MEM
;

327 i‡(
pcb
->
¢d_queuñí
 != 0) {

328 
	`LWIP_ASSERT
("tcp_write:Öbufs on queue =>átÜeast one queueÇon-empty",

329 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

331 
	`LWIP_ASSERT
("tcp_write:ÇoÖbufs on queue => both queuesÉmpty",

332 
pcb
->
u«cked
 =
NULL
 &&Öcb->
un£¡
 == NULL);

334  
ERR_OK
;

335 
	}
}

353 
îr_t


354 
	$t˝_wrôe
(
t˝_pcb
 *
pcb
, c⁄° *
¨g
, 
u16_t
 
Àn
, 
u8_t
 
≠iÊags
)

356 
pbuf
 *
c⁄ˇt_p
 = 
NULL
;

357 
t˝_£g
 *
œ°_un£¡
 = 
NULL
, *
£g
 = NULL, *
¥ev_£g
 = NULL, *
queue
 = NULL;

358 
u16_t
 
pos
 = 0;

359 
u16_t
 
queuñí
;

360 
u8_t
 
›éí
 = 0;

361 
u8_t
 
›tÊags
 = 0;

362 #i‡
TCP_OVERSIZE


363 
u16_t
 
ovîsize
 = 0;

364 
u16_t
 
ovîsize_u£d
 = 0;

366 #i‡
TCP_CHECKSUM_ON_COPY


367 
u16_t
 
c⁄ˇt_chksum
 = 0;

368 
u8_t
 
c⁄ˇt_chksum_sw≠≥d
 = 0;

369 
u16_t
 
c⁄ˇt_chksummed
 = 0;

371 
îr_t
 
îr
;

373 #i‡
LWIP_NETIF_TX_SINGLE_PBUF


375 
≠iÊags
 |
TCP_WRITE_FLAG_COPY
;

378 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("t˝_wrôe’cb=%p, d©a=%p,Üí=%"
U16_F
",ápiflags=%"U16_F")\n",

379 (*)
pcb
, 
¨g
, 
Àn
, (
u16_t
)
≠iÊags
));

380 
	`LWIP_ERROR
("tcp_write:árg == NULL (programmer violates API)",

381 
¨g
 !
NULL
,  
ERR_ARG
;);

383 
îr
 = 
	`t˝_wrôe_checks
(
pcb
, 
Àn
);

384 i‡(
îr
 !
ERR_OK
) {

385  
îr
;

387 
queuñí
 = 
pcb
->
¢d_queuñí
;

389 #i‡
LWIP_TCP_TIMESTAMPS


390 i‡((
pcb
->
Êags
 & 
TF_TIMESTAMP
)) {

391 
›tÊags
 = 
TF_SEG_OPTS_TS
;

392 
›éí
 = 
	`LWIP_TCP_OPT_LENGTH
(
TF_SEG_OPTS_TS
);

420 i‡(
pcb
->
un£¡
 !
NULL
) {

421 
u16_t
 
•a˚
;

422 
u16_t
 
un£¡_›éí
;

425 
œ°_un£¡
 = 
pcb
->
un£¡
;Üa°_un£¡->
√xt
 !
NULL
;

426 
œ°_un£¡
 =Üa°_un£¡->
√xt
);

429 
un£¡_›éí
 = 
	`LWIP_TCP_OPT_LENGTH
(
œ°_un£¡
->
Êags
);

430 
•a˚
 = 
pcb
->
mss
 - (
œ°_un£¡
->
Àn
 + 
un£¡_›éí
);

439 #i‡
TCP_OVERSIZE


440 #i‡
TCP_OVERSIZE_DBGCHECK


442 
	`LWIP_ASSERT
("unsent_oversize mismatch (pcb vs.Üast_unsent)",

443 
pcb
->
un£¡_ovîsize
 =
œ°_un£¡
->
ovîsize_À·
);

445 
ovîsize
 = 
pcb
->
un£¡_ovîsize
;

446 i‡(
ovîsize
 > 0) {

447 
	`LWIP_ASSERT
("öc⁄si°íàovîsizêvs. s∑˚", 
ovîsize_u£d
 <
•a˚
);

448 
£g
 = 
œ°_un£¡
;

449 
ovîsize_u£d
 = 
ovîsize
 < 
Àn
 ? oversize :Üen;

450 
pos
 +
ovîsize_u£d
;

451 
ovîsize
 -
ovîsize_u£d
;

452 
•a˚
 -
ovîsize_u£d
;

455 
	`LWIP_ASSERT
("öc⁄si°íd ovîsizêvs.Üí", (
ovîsize
 =0Ë|| (
pos
 =
Àn
));

465 i‡((
pos
 < 
Àn
Ë&& (
•a˚
 > 0Ë&& (
œ°_un£¡
->len > 0)) {

466 
u16_t
 
£gÀn
 = 
•a˚
 < 
Àn
 - 
pos
 ? space :Üen -Öos;

467 
£g
 = 
œ°_un£¡
;

472 i‡(
≠iÊags
 & 
TCP_WRITE_FLAG_COPY
) {

474 i‡((
c⁄ˇt_p
 = 
	`t˝_pbuf_¥óŒoc
(
PBUF_RAW
, 
£gÀn
, 
•a˚
, &
ovîsize
, 
pcb
, 
≠iÊags
, 1)Ë=
NULL
) {

475 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2,

476 ("t˝_wrôê: couldÇŸáŒoˇã mem‹y f‹Öbu‡c›y sizê%"
U16_F
"\n",

477 
£gÀn
));

478 
memîr
;

480 #i‡
TCP_OVERSIZE_DBGCHECK


481 
œ°_un£¡
->
ovîsize_À·
 = 
ovîsize
;

483 
	`TCP_DATA_COPY2
(
c⁄ˇt_p
->
∑ylﬂd
, (
u8_t
*)
¨g
 + 
pos
, 
£gÀn
, &
c⁄ˇt_chksum
, &
c⁄ˇt_chksum_sw≠≥d
);

484 #i‡
TCP_CHECKSUM_ON_COPY


485 
c⁄ˇt_chksummed
 +
£gÀn
;

489 i‡((
c⁄ˇt_p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
£gÀn
, 
PBUF_ROM
, 
NULL
)) == NULL) {

490 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2,

492 
memîr
;

494 #i‡
TCP_CHECKSUM_ON_COPY


496 
	`t˝_£g_add_chksum
(~
	`öë_chksum
((
u8_t
*)
¨g
 + 
pos
, 
£gÀn
), seglen,

497 &
c⁄ˇt_chksum
, &
c⁄ˇt_chksum_sw≠≥d
);

498 
c⁄ˇt_chksummed
 +
£gÀn
;

501 
c⁄ˇt_p
->
∑ylﬂd
 = (
u8_t
*)
¨g
 + 
pos
;

504 
pos
 +
£gÀn
;

505 
queuñí
 +
	`pbuf_˛í
(
c⁄ˇt_p
);

508 #i‡
TCP_OVERSIZE


509 
	`LWIP_ASSERT
("unsent_oversize mismatch (pcb->unsent is NULL)",

510 
pcb
->
un£¡_ovîsize
 == 0);

520 
pos
 < 
Àn
) {

521 
pbuf
 *
p
;

522 
u16_t
 
À·
 = 
Àn
 - 
pos
;

523 
u16_t
 
max_Àn
 = 
pcb
->
mss
 - 
›éí
;

524 
u16_t
 
£gÀn
 = 
À·
 > 
max_Àn
 ? max_len :Üeft;

525 #i‡
TCP_CHECKSUM_ON_COPY


526 
u16_t
 
chksum
 = 0;

527 
u8_t
 
chksum_sw≠≥d
 = 0;

530 i‡(
≠iÊags
 & 
TCP_WRITE_FLAG_COPY
) {

533 i‡((
p
 = 
	`t˝_pbuf_¥óŒoc
(
PBUF_TRANSPORT
, 
£gÀn
 + 
›éí
, 
pcb
->
mss
, &
ovîsize
,Öcb, 
≠iÊags
, 
queue
 =
NULL
)) == NULL) {

534 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("t˝_wrôê: couldÇŸáŒoˇã mem‹y f‹Öbu‡c›y sizê%"
U16_F
"\n", 
£gÀn
));

535 
memîr
;

537 
	`LWIP_ASSERT
("tcp_write: checkÅhat firstÖbuf can holdÅhe complete seglen",

538 (
p
->
Àn
 >
£gÀn
));

539 
	`TCP_DATA_COPY2
((*)
p
->
∑ylﬂd
 + 
›éí
, (
u8_t
*)
¨g
 + 
pos
, 
£gÀn
, &
chksum
, &
chksum_sw≠≥d
);

546 
pbuf
 *
p2
;

547 #i‡
TCP_OVERSIZE


548 
	`LWIP_ASSERT
("ovîsizê=0", 
ovîsize
 == 0);

550 i‡((
p2
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
£gÀn
, 
PBUF_ROM
, 
NULL
)) == NULL) {

551 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("tcp_write: couldÇotállocate memory for zero-copyÖbuf\n"));

552 
memîr
;

554 #i‡
TCP_CHECKSUM_ON_COPY


556 
chksum
 = ~
	`öë_chksum
((
u8_t
*)
¨g
 + 
pos
, 
£gÀn
);

559 
p2
->
∑ylﬂd
 = (
u8_t
*)
¨g
 + 
pos
;

562 i‡((
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
›éí
, 
PBUF_RAM
, 
NULL
)) == NULL) {

565 
	`pbuf_‰ì
(
p2
, 
NULL
);

566 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("tcp_write: couldÇotállocate memory for headerÖbuf\n"));

567 
memîr
;

570 
	`pbuf_ˇt
(
p
 , 
p2
 );

573 
queuñí
 +
	`pbuf_˛í
(
p
);

578 i‡((
queuñí
 > 
TCP_SND_QUEUELEN
Ë|| (queuñí > 
TCP_SNDQUEUELEN_OVERFLOW
)) {

579 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("t˝_wrôe: queuêtoÿl⁄g %"
U16_F
" (%"U16_F")\n", 
queuñí
, 
TCP_SND_QUEUELEN
));

580 
	`pbuf_‰ì
(
p
, 
NULL
);

581 
memîr
;

584 i‡((
£g
 = 
	`t˝_¸óã_£gmít
(
pcb
, 
p
, 0,Öcb->
¢d_lbb
 + 
pos
, 
›tÊags
)Ë=
NULL
) {

585 
memîr
;

587 #i‡
TCP_OVERSIZE_DBGCHECK


588 
£g
->
ovîsize_À·
 = 
ovîsize
;

590 #i‡
TCP_CHECKSUM_ON_COPY


591 
£g
->
chksum
 = chksum;

592 
£g
->
chksum_sw≠≥d
 = chksum_swapped;

593 
£g
->
Êags
 |
TF_SEG_DATA_CHECKSUMMED
;

597 i‡(
queue
 =
NULL
) {

598 
queue
 = 
£g
;

601 
	`LWIP_ASSERT
("¥ev_£g !NULL", 
¥ev_£g
 !
NULL
);

602 
¥ev_£g
->
√xt
 = 
£g
;

605 
¥ev_£g
 = 
£g
;

607 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 
LWIP_DBG_TRACE
, ("t˝_wrôe: queueög %"
U32_F
":%"U32_F"\n",

608 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
),

609 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(seg)));

611 
pos
 +
£gÀn
;

623 #i‡
TCP_OVERSIZE


624 i‡(
ovîsize_u£d
 > 0) {

625 
pbuf
 *
p
;

627 
p
 = 
œ°_un£¡
->p;Ö;Ö =Ö->
√xt
) {

628 
p
->
tŸ_Àn
 +
ovîsize_u£d
;

629 i‡(
p
->
√xt
 =
NULL
) {

630 
	`TCP_DATA_COPY
((*)
p
->
∑ylﬂd
 +Ö->
Àn
, 
¨g
, 
ovîsize_u£d
, 
œ°_un£¡
);

631 
p
->
Àn
 +
ovîsize_u£d
;

634 
œ°_un£¡
->
Àn
 +
ovîsize_u£d
;

635 #i‡
TCP_OVERSIZE_DBGCHECK


636 
œ°_un£¡
->
ovîsize_À·
 -
ovîsize_u£d
;

639 
pcb
->
un£¡_ovîsize
 = 
ovîsize
;

645 i‡(
c⁄ˇt_p
 !
NULL
) {

646 
	`LWIP_ASSERT
("tcp_write: cannot concatenate whenÖcb->unsent isÉmpty",

647 (
œ°_un£¡
 !
NULL
));

648 
	`pbuf_ˇt
(
œ°_un£¡
->
p
, 
c⁄ˇt_p
);

649 
œ°_un£¡
->
Àn
 +
c⁄ˇt_p
->
tŸ_Àn
;

650 #i‡
TCP_CHECKSUM_ON_COPY


651 i‡(
c⁄ˇt_chksummed
) {

652 
	`t˝_£g_add_chksum
(
c⁄ˇt_chksum
, 
c⁄ˇt_chksummed
, &
œ°_un£¡
->
chksum
,

653 &
œ°_un£¡
->
chksum_sw≠≥d
);

654 
œ°_un£¡
->
Êags
 |
TF_SEG_DATA_CHECKSUMMED
;

663 i‡(
œ°_un£¡
 =
NULL
) {

664 
pcb
->
un£¡
 = 
queue
;

666 
œ°_un£¡
->
√xt
 = 
queue
;

672 
pcb
->
¢d_lbb
 +
Àn
;

673 
pcb
->
¢d_buf
 -
Àn
;

674 
pcb
->
¢d_queuñí
 = 
queuñí
;

676 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_wrôe: %"
S16_F
" (afterÉnqueued)\n",

677 
pcb
->
¢d_queuñí
));

678 i‡(
pcb
->
¢d_queuñí
 != 0) {

679 
	`LWIP_ASSERT
("tcp_write: valid queueÜength",

680 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

684 i‡(
£g
 !
NULL
 && seg->
t˝hdr
 !NULL && ((
≠iÊags
 & 
TCP_WRITE_FLAG_MORE
)==0)) {

685 
	`TCPH_SET_FLAG
(
£g
->
t˝hdr
, 
TCP_PSH
);

688  
ERR_OK
;

689 
memîr
:

690 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

691 
	`TCP_STATS_INC
(
t˝
.
memîr
);

693 i‡(
c⁄ˇt_p
 !
NULL
) {

694 
	`pbuf_‰ì
(
c⁄ˇt_p
, 
NULL
);

696 i‡(
queue
 !
NULL
) {

697 
	`t˝_£gs_‰ì
(
queue
);

699 i‡(
pcb
->
¢d_queuñí
 != 0) {

700 
	`LWIP_ASSERT
("t˝_wrôe: vÆid queuêÀngth", 
pcb
->
u«cked
 !
NULL
 ||

701 
pcb
->
un£¡
 !
NULL
);

703 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
 | 
LWIP_DBG_STATE
, ("t˝_wrôe: %"
S16_F
" (wôh memÉº)\n", 
pcb
->
¢d_queuñí
));

704  
ERR_MEM
;

705 
	}
}

717 
îr_t


718 
	$t˝_íqueue_Êags
(
t˝_pcb
 *
pcb
, 
u8_t
 
Êags
)

720 
pbuf
 *
p
;

721 
t˝_£g
 *
£g
;

722 
u8_t
 
›tÊags
 = 0;

723 
u8_t
 
›éí
 = 0;

724 
˝u
 = 
	`sched_gë˝u
();

726 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_íqueue_Êags: queuñí: %"
U16_F
"\n", (
u16_t
)
pcb
->
¢d_queuñí
));

728 
	`LWIP_ASSERT
("tcp_enqueue_flags:ÇeedÉither TCP_SYN or TCP_FIN in flags (programmer violates API)",

729 (
Êags
 & (
TCP_SYN
 | 
TCP_FIN
)) != 0);

732 i‡((
pcb
->
¢d_queuñí
 >
TCP_SND_QUEUELEN
Ë|| (pcb->¢d_queuñí > 
TCP_SNDQUEUELEN_OVERFLOW
)) {

733 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 3, ("t˝_íqueue_Êags:Åoÿl⁄g queuê%"
U16_F
" (max %"U16_F")\n",

734 
pcb
->
¢d_queuñí
, 
TCP_SND_QUEUELEN
));

735 
	`TCP_STATS_INC
(
t˝
.
memîr
);

736 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

737  
ERR_MEM
;

740 i‡(
Êags
 & 
TCP_SYN
) {

741 
›tÊags
 = 
TF_SEG_OPTS_MSS
;

743 #i‡
LWIP_TCP_TIMESTAMPS


744 i‡((
pcb
->
Êags
 & 
TF_TIMESTAMP
)) {

745 
›tÊags
 |
TF_SEG_OPTS_TS
;

748 
›éí
 = 
	`LWIP_TCP_OPT_LENGTH
(
›tÊags
);

754 i‡(
pcb
->
¢d_buf
 == 0) {

755 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 3, ("tcp_enqueue_flags:Ço send bufferávailable\n"));

756 
	`TCP_STATS_INC
(
t˝
.
memîr
);

757  
ERR_MEM
;

761 i‡((
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
›éí
, 
PBUF_POOL_TX
, 
lwù_t˝ù_thªad
[
˝u
])Ë=
NULL
) {

762 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

763 
	`TCP_STATS_INC
(
t˝
.
memîr
);

764  
ERR_MEM
;

766 
	`LWIP_ASSERT
("tcp_enqueue_flags: checkÅhat firstÖbuf can hold optlen",

767 (
p
->
Àn
 >
›éí
));

770 i‡((
£g
 = 
	`t˝_¸óã_£gmít
(
pcb
, 
p
, 
Êags
,Öcb->
¢d_lbb
, 
›tÊags
)Ë=
NULL
) {

771 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

772 
	`TCP_STATS_INC
(
t˝
.
memîr
);

773  
ERR_MEM
;

775 
	`LWIP_ASSERT
("£g->t˝hd∏nŸálig√d", ((
mem_±r_t
)
£g
->
t˝hdr
 % 
MEM_ALIGNMENT
) == 0);

776 
	`LWIP_ASSERT
("t˝_íqueue_Êags: invÆid segmíàÀngth", 
£g
->
Àn
 == 0);

778 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 
LWIP_DBG_TRACE
,

779 ("t˝_íqueue_Êags: queueög %"
U32_F
":%"U32_F" (0x%"
X16_F
")\n",

780 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
),

781 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(seg),

782 (
u16_t
)
Êags
));

785 i‡(
pcb
->
un£¡
 =
NULL
) {

786 
pcb
->
un£¡
 = 
£g
;

788 
t˝_£g
 *
u£g
;

789 
u£g
 = 
pcb
->
un£¡
; u£g->
√xt
 !
NULL
; useg = useg->next);

790 
u£g
->
√xt
 = 
£g
;

792 #i‡
TCP_OVERSIZE


794 
pcb
->
un£¡_ovîsize
 = 0;

798 i‡((
Êags
 & 
TCP_SYN
Ë|| (Êag†& 
TCP_FIN
)) {

799 
pcb
->
¢d_lbb
++;

801 
pcb
->
¢d_buf
--;

803 i‡(
Êags
 & 
TCP_FIN
) {

804 
pcb
->
Êags
 |
TF_FIN
;

808 
pcb
->
¢d_queuñí
 +
	`pbuf_˛í
(
£g
->
p
);

809 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_íqueue_Êags: %"
S16_F
" (a·îÉnqueued)\n", 
pcb
->
¢d_queuñí
));

810 i‡(
pcb
->
¢d_queuñí
 != 0) {

811 
	`LWIP_ASSERT
("tcp_enqueue_flags: invalid queueÜength",

812 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

815  
ERR_OK
;

816 
	}
}

819 #i‡
LWIP_TCP_TIMESTAMPS


826 
	$t˝_buûd_time°amp_›ti⁄
(
t˝_pcb
 *
pcb
, 
u32_t
 *
›ts
)

829 
›ts
[0] = 
	`PP_HTONL
(0x0101080A);

830 
›ts
[1] = 
	`ht⁄l
(
	`sys_now
());

831 
›ts
[2] = 
	`ht⁄l
(
pcb
->
ts_ª˚¡
);

832 
	}
}

839 
îr_t


840 
	$t˝_£nd_em±y_ack
(
t˝_pcb
 *
pcb
)

842 
pbuf
 *
p
;

843 
t˝_hdr
 *
t˝hdr
;

844 
u8_t
 
›éí
 = 0;

846 #i‡
LWIP_TCP_TIMESTAMPS


847 i‡(
pcb
->
Êags
 & 
TF_TIMESTAMP
) {

848 
›éí
 = 
	`LWIP_TCP_OPT_LENGTH
(
TF_SEG_OPTS_TS
);

852 
p
 = 
	`t˝_ouçut_Æloc_hódî
(
pcb
, 
›éí
, 0, 
	`ht⁄l
’cb->
¢d_nxt
));

853 i‡(
p
 =
NULL
) {

854 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("tcp_output: (ACK) couldÇotállocateÖbuf\n"));

855  
ERR_BUF
;

857 
t˝hdr
 = (
t˝_hdr
 *)
p
->
∑ylﬂd
;

858 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
,

859 ("t˝_ouçut: sídög ACK f‹ %"
U32_F
"\n", 
pcb
->
rcv_nxt
));

861 
pcb
->
Êags
 &~(
TF_ACK_DELAY
 | 
TF_ACK_NOW
);

864 #i‡
LWIP_TCP_TIMESTAMPS


865 
pcb
->
ts_œ°ack£¡
 =Öcb->
rcv_nxt
;

867 i‡(
pcb
->
Êags
 & 
TF_TIMESTAMP
) {

868 
	`t˝_buûd_time°amp_›ti⁄
(
pcb
, (
u32_t
 *)(
t˝hdr
 + 1));

872 #i‡
CHECKSUM_GEN_TCP


873 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),

874 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

876 #i‡
LWIP_NETIF_HWADDRHINT


877 
	`ù_ouçut_höãd
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

878 
IP_PROTO_TCP
, &(
pcb
->
addr_höt
));

880 
	`ù_ouçut
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

881 
IP_PROTO_TCP
);

883 
	`pbuf_‰ì
(
p
, 
NULL
);

885  
ERR_OK
;

886 
	}
}

895 
îr_t


896 
	$t˝_ouçut
(
t˝_pcb
 *
pcb
)

898 
t˝_£g
 *
£g
, *
u£g
;

899 
u32_t
 
wnd
, 
¢d_nxt
;

900 
˝u
 = 
	`sched_gë˝u
();

901 #i‡
TCP_CWND_DEBUG


902 
s16_t
 
i
 = 0;

909 i‡(
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_öput_pcb
 =
pcb
) {

910  
ERR_OK
;

913 
wnd
 = 
	`LWIP_MIN
(
pcb
->
¢d_wnd
,Öcb->
cwnd
);

915 
£g
 = 
pcb
->
un£¡
;

923 i‡(
pcb
->
Êags
 & 
TF_ACK_NOW
 &&

924 (
£g
 =
NULL
 ||

925 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
 > 
wnd
)) {

926  
	`t˝_£nd_em±y_ack
(
pcb
);

930 
u£g
 = 
pcb
->
u«cked
;

931 i‡(
u£g
 !
NULL
) {

932 ; 
u£g
->
√xt
 !
NULL
; useg = useg->next);

935 #i‡
TCP_OUTPUT_DEBUG


936 i‡(
£g
 =
NULL
) {

937 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("tcp_output:ÇothingÅo send (%p)\n",

938 (*)
pcb
->
un£¡
));

941 #i‡
TCP_CWND_DEBUG


942 i‡(
£g
 =
NULL
) {

943 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ouçut: snd_wnd %"
U16_F


944 ", cwnd %"
U16_F
", wnd %"
U32_F


945 ", seg =NULL,áck %"
U32_F
"\n",

946 
pcb
->
¢d_wnd
,Öcb->
cwnd
, 
wnd
,Öcb->
œ°ack
));

948 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
,

949 ("t˝_ouçut: snd_wnd %"
U16_F
", cwnd %"U16_F", wnd %"
U32_F


950 ",Éffwnd %"
U32_F
", seq %"U32_F",áck %"U32_F"\n",

951 
pcb
->
¢d_wnd
,Öcb->
cwnd
, 
wnd
,

952 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
,

953 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
), 
pcb
->
œ°ack
));

957 
£g
 !
NULL
 &&

958 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
 <
wnd
) {

959 
	`LWIP_ASSERT
("RSTÇotÉxpected here!",

960 (
	`TCPH_FLAGS
(
£g
->
t˝hdr
Ë& 
TCP_RST
) == 0);

968 if((
	`t˝_do_ouçut_«gÀ
(
pcb
) == 0) &&

969 ((
pcb
->
Êags
 & (
TF_NAGLEMEMERR
 | 
TF_FIN
)) == 0)){

972 #i‡
TCP_CWND_DEBUG


973 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ouçut: snd_wnd %"
U16_F
", cwnd %"U16_F", wnd %"
U32_F
",Éffwnd %"U32_F", seq %"U32_F",áck %"U32_F", i %"
S16_F
"\n",

974 
pcb
->
¢d_wnd
,Öcb->
cwnd
, 
wnd
,

975 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ seg->
Àn
 -

976 
pcb
->
œ°ack
,

977 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
), 
pcb
->
œ°ack
, 
i
));

978 ++
i
;

981 
pcb
->
un£¡
 = 
£g
->
√xt
;

983 i‡(
pcb
->
°©e
 !
SYN_SENT
) {

984 
	`TCPH_SET_FLAG
(
£g
->
t˝hdr
, 
TCP_ACK
);

985 
pcb
->
Êags
 &~(
TF_ACK_DELAY
 | 
TF_ACK_NOW
);

988 
	`t˝_ouçut_£gmít
(
£g
, 
pcb
);

989 
¢d_nxt
 = 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(seg);

990 i‡(
	`TCP_SEQ_LT
(
pcb
->
¢d_nxt
, snd_nxt)) {

991 
pcb
->
¢d_nxt
 = snd_nxt;

994 i‡(
	`TCP_TCPLEN
(
£g
) > 0) {

995 
£g
->
√xt
 = 
NULL
;

997 i‡(
pcb
->
u«cked
 =
NULL
) {

998 
pcb
->
u«cked
 = 
£g
;

999 
u£g
 = 
£g
;

1005 i‡(
	`TCP_SEQ_LT
(
	`¡ohl
(
£g
->
t˝hdr
->
£qno
),Çtohl(
u£g
->tcphdr->seqno))) {

1007 
t˝_£g
 **
cur_£g
 = &(
pcb
->
u«cked
);

1008 *
cur_£g
 &&

1009 
	`TCP_SEQ_LT
(
	`¡ohl
((*
cur_£g
)->
t˝hdr
->
£qno
),Çtohl(
£g
->tcphdr->seqno))) {

1010 
cur_£g
 = &((*cur_£g)->
√xt
 );

1012 
£g
->
√xt
 = (*
cur_£g
);

1013 (*
cur_£g
Ë
£g
;

1016 
u£g
->
√xt
 = 
£g
;

1017 
u£g
 = u£g->
√xt
;

1022 
	`t˝_£g_‰ì
(
£g
);

1024 
£g
 = 
pcb
->
un£¡
;

1026 #i‡
TCP_OVERSIZE


1027 i‡(
pcb
->
un£¡
 =
NULL
) {

1029 
pcb
->
un£¡_ovîsize
 = 0;

1033 i‡(
£g
 !
NULL
 && 
pcb
->
≥rsi°_backoff
 == 0 &&

1034 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
 >Öcb->
¢d_wnd
) {

1036 
pcb
->
≥rsi°_˙t
 = 0;

1037 
pcb
->
≥rsi°_backoff
 = 1;

1040 
pcb
->
Êags
 &~
TF_NAGLEMEMERR
;

1041  
ERR_OK
;

1042 
	}
}

1051 
	$t˝_ouçut_£gmít
(
t˝_£g
 *
£g
, 
t˝_pcb
 *
pcb
)

1053 
u16_t
 
Àn
;

1054 
√tif
 *netif;

1055 
u32_t
 *
›ts
;

1056 
˝u
 = 
	`sched_gë˝u
();

1059 
	`¢mp_öc_t˝out£gs
();

1063 
£g
->
t˝hdr
->
ackno
 = 
	`ht⁄l
(
pcb
->
rcv_nxt
);

1066 
£g
->
t˝hdr
->
wnd
 = 
	`ht⁄s
(
pcb
->
rcv_™n_wnd
);

1068 
pcb
->
rcv_™n_right_edge
 =Öcb->
rcv_nxt
 +Öcb->
rcv_™n_wnd
;

1072 
	`LWIP_ASSERT
("£g->t˝hd∏nŸálig√d", ((
mem_±r_t
)
£g
->
t˝hdr
 % 
MEM_ALIGNMENT
) == 0);

1073 
›ts
 = (
u32_t
 *)(*)(
£g
->
t˝hdr
 + 1);

1074 i‡(
£g
->
Êags
 & 
TF_SEG_OPTS_MSS
) {

1075 
	`TCP_BUILD_MSS_OPTION
(*
›ts
);

1076 
›ts
 += 1;

1078 #i‡
LWIP_TCP_TIMESTAMPS


1079 
pcb
->
ts_œ°ack£¡
 =Öcb->
rcv_nxt
;

1081 i‡(
£g
->
Êags
 & 
TF_SEG_OPTS_TS
) {

1082 
	`t˝_buûd_time°amp_›ti⁄
(
pcb
, 
›ts
);

1083 
›ts
 += 3;

1089 i‡(
pcb
->
πime
 == -1) {

1090 
pcb
->
πime
 = 0;

1095 i‡(
	`ù_addr_ißny
(&(
pcb
->
loˇl_ù
))) {

1096 
√tif
 = 
	`ù_rouã
(&(
pcb
->
ªmŸe_ù
), 
˝u
);

1097 i‡(
√tif
 =
NULL
) {

1100 
	`ù_addr_c›y
(
pcb
->
loˇl_ù
, 
√tif
->
ù_addr
);

1103 i‡(
pcb
->
πã°
 == 0) {

1104 
pcb
->
πã°
 = 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_ticks
;

1105 
pcb
->
π£q
 = 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
);

1107 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ouçut_£gmít:Ñt£q %"
U32_F
"\n", 
pcb
->
π£q
));

1109 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("t˝_ouçut_£gmít: %"
U32_F
":%"U32_F"\n",

1110 
	`ht⁄l
(
£g
->
t˝hdr
->
£qno
), htonl(seg->tcphdr->seqno) +

1111 
£g
->
Àn
));

1113 
Àn
 = (
u16_t
)((
u8_t
 *)
£g
->
t˝hdr
 - (u8_à*)£g->
p
->
∑ylﬂd
);

1115 
£g
->
p
->
Àn
 -=Üen;

1116 
£g
->
p
->
tŸ_Àn
 -
Àn
;

1118 
£g
->
p
->
∑ylﬂd
 = seg->
t˝hdr
;

1120 
£g
->
t˝hdr
->
chksum
 = 0;

1121 #i‡
CHECKSUM_GEN_TCP


1122 #i‡
TCP_CHECKSUM_ON_COPY


1124 
u32_t
 
acc
;

1125 #i‡
TCP_CHECKSUM_ON_COPY_SANITY_CHECK


1126 
u16_t
 
chksum_¶ow
 = 
	`öë_chksum_p£udo
(
£g
->
p
, &(
pcb
->
loˇl_ù
),

1127 &(
pcb
->
ªmŸe_ù
),

1128 
IP_PROTO_TCP
, 
£g
->
p
->
tŸ_Àn
);

1130 i‡((
£g
->
Êags
 & 
TF_SEG_DATA_CHECKSUMMED
) == 0) {

1131 
	`LWIP_ASSERT
("data included butÇot checksummed",

1132 
£g
->
p
->
tŸ_Àn
 =(
	`TCPH_HDRLEN
(£g->
t˝hdr
) * 4));

1136 
acc
 = 
	`öë_chksum_p£udo_∑πül
(
£g
->
p
, &(
pcb
->
loˇl_ù
),

1137 &(
pcb
->
ªmŸe_ù
),

1138 
IP_PROTO_TCP
, 
£g
->
p
->
tŸ_Àn
, 
	`TCPH_HDRLEN
(£g->
t˝hdr
) * 4);

1140 i‡(
£g
->
chksum_sw≠≥d
) {

1141 
£g
->
chksum
 = 
	`SWAP_BYTES_IN_WORD
(seg->chksum);

1142 
£g
->
chksum_sw≠≥d
 = 0;

1144 
acc
 +(
u16_t
)~(
£g
->
chksum
);

1145 
£g
->
t˝hdr
->
chksum
 = 
	`FOLD_U32T
(
acc
);

1146 #i‡
TCP_CHECKSUM_ON_COPY_SANITY_CHECK


1147 i‡(
chksum_¶ow
 !
£g
->
t˝hdr
->
chksum
) {

1148 
	`LWIP_DEBUGF
(
TCP_DEBUG
 | 
LWIP_DBG_LEVEL_WARNING
,

1149 ("t˝_ouçut_£gmít: cÆcuœãd checksum i†%"
X16_F
" instead of %"X16_F"\n",

1150 
£g
->
t˝hdr
->
chksum
, 
chksum_¶ow
));

1151 
£g
->
t˝hdr
->
chksum
 = 
chksum_¶ow
;

1156 
£g
->
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(£g->
p
, &(
pcb
->
loˇl_ù
),

1157 &(
pcb
->
ªmŸe_ù
),

1158 
IP_PROTO_TCP
, 
£g
->
p
->
tŸ_Àn
);

1161 
	`TCP_STATS_INC
(
t˝
.
xmô
);

1163 #i‡
LWIP_NETIF_HWADDRHINT


1164 
	`ù_ouçut_höãd
(
£g
->
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

1165 
IP_PROTO_TCP
, &(
pcb
->
addr_höt
));

1167 
	`ù_ouçut
(
£g
->
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

1168 
IP_PROTO_TCP
);

1170 
	}
}

1193 
	$t˝_r°
(
u32_t
 
£qno
, u32_à
ackno
,

1194 
ù_addr_t
 *
loˇl_ù
, ip_addr_à*
ªmŸe_ù
,

1195 
u16_t
 
loˇl_p‹t
, u16_à
ªmŸe_p‹t
)

1197 
pbuf
 *
p
;

1198 
t˝_hdr
 *
t˝hdr
;

1199 
˝u
 = 
	`sched_gë˝u
();

1201 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
TCP_HLEN
, 
PBUF_POOL_TX
, 
lwù_t˝ù_thªad
[
˝u
]);

1202 i‡(
p
 =
NULL
) {

1203 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_rst: couldÇotállocate memory forÖbuf\n"));

1206 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅcp_hdr",

1207 (
p
->
Àn
 >(
t˝_hdr
)));

1209 
t˝hdr
 = (
t˝_hdr
 *)
p
->
∑ylﬂd
;

1210 
t˝hdr
->
§c
 = 
	`ht⁄s
(
loˇl_p‹t
);

1211 
t˝hdr
->
de°
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

1212 
t˝hdr
->
£qno
 = 
	`ht⁄l
(seqno);

1213 
t˝hdr
->
ackno
 = 
	`ht⁄l
(ackno);

1214 
	`TCPH_HDRLEN_FLAGS_SET
(
t˝hdr
, 
TCP_HLEN
/4, 
TCP_RST
 | 
TCP_ACK
);

1215 
t˝hdr
->
wnd
 = 
	`PP_HTONS
(
TCP_WND
);

1216 
t˝hdr
->
chksum
 = 0;

1217 
t˝hdr
->
urgp
 = 0;

1219 #i‡
CHECKSUM_GEN_TCP


1220 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, 
loˇl_ù
, 
ªmŸe_ù
,

1221 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

1223 
	`TCP_STATS_INC
(
t˝
.
xmô
);

1224 
	`¢mp_öc_t˝ouå°s
();

1226 
	`ù_ouçut
(
p
, 
loˇl_ù
, 
ªmŸe_ù
, 
TCP_TTL
, 0, 
IP_PROTO_TCP
);

1227 
	`pbuf_‰ì
(
p
, 
NULL
);

1228 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("t˝_r°: seqnÿ%"
U32_F
"ácknÿ%"U32_F".\n", 
£qno
, 
ackno
));

1229 
	}
}

1239 
	$t˝_ªxmô_πo
(
t˝_pcb
 *
pcb
)

1241 
t˝_£g
 *
£g
;

1243 i‡(
pcb
->
u«cked
 =
NULL
) {

1248 
£g
 = 
pcb
->
u«cked
; seg->
√xt
 !
NULL
; seg = seg->next);

1250 
£g
->
√xt
 = 
pcb
->
un£¡
;

1252 
pcb
->
un£¡
 =Öcb->
u«cked
;

1254 
pcb
->
u«cked
 = 
NULL
;

1257 ++
pcb
->
ƒtx
;

1260 
pcb
->
πã°
 = 0;

1263 
	`t˝_ouçut
(
pcb
);

1264 
	}
}

1274 
	$t˝_ªxmô
(
t˝_pcb
 *
pcb
)

1276 
t˝_£g
 *
£g
;

1277 
t˝_£g
 **
cur_£g
;

1279 i‡(
pcb
->
u«cked
 =
NULL
) {

1285 
£g
 = 
pcb
->
u«cked
;

1286 
pcb
->
u«cked
 = 
£g
->
√xt
;

1288 
cur_£g
 = &(
pcb
->
un£¡
);

1289 *
cur_£g
 &&

1290 
	`TCP_SEQ_LT
(
	`¡ohl
((*
cur_£g
)->
t˝hdr
->
£qno
),Çtohl(
£g
->tcphdr->seqno))) {

1291 
cur_£g
 = &((*cur_£g)->
√xt
 );

1293 
£g
->
√xt
 = *
cur_£g
;

1294 *
cur_£g
 = 
£g
;

1296 ++
pcb
->
ƒtx
;

1299 
pcb
->
πã°
 = 0;

1301 
	`TCP_STATS_INC
(
t˝
.
ªxmô
);

1303 
	`¢mp_öc_t˝ªå™s£gs
();

1306 
	}
}

1315 
	$t˝_ªxmô_Á°
(
t˝_pcb
 *
pcb
)

1317 i‡(
pcb
->
u«cked
 !
NULL
 && !’cb->
Êags
 & 
TF_INFR
)) {

1319 
	`LWIP_DEBUGF
(
TCP_FR_DEBUG
,

1320 ("t˝_ª˚ive: du∑ck†%"
U16_F
" (%"
U32_F


1321 "), fa°Ñëønsmô %"
U32_F
"\n",

1322 (
u16_t
)
pcb
->
du∑cks
,Öcb->
œ°ack
,

1323 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
)));

1324 
	`t˝_ªxmô
(
pcb
);

1328 i‡(
pcb
->
cwnd
 >Öcb->
¢d_wnd
) {

1329 
pcb
->
s°hªsh
 =Öcb->
¢d_wnd
 / 2;

1331 
pcb
->
s°hªsh
 =Öcb->
cwnd
 / 2;

1335 i‡(
pcb
->
s°hªsh
 < 2*pcb->
mss
) {

1336 
	`LWIP_DEBUGF
(
TCP_FR_DEBUG
,

1337 ("t˝_ª˚ive: Thêmöimum vÆuêf‹ s°hªsh %"
U16_F


1338 " should bêmö 2 ms†%"
U16_F
"...\n",

1339 
pcb
->
s°hªsh
, 2*pcb->
mss
));

1340 
pcb
->
s°hªsh
 = 2*pcb->
mss
;

1343 
pcb
->
cwnd
 =Öcb->
s°hªsh
 + 3 *Öcb->
mss
;

1344 
pcb
->
Êags
 |
TF_INFR
;

1346 
	}
}

1358 
	$t˝_kì∑live
(
t˝_pcb
 *
pcb
)

1360 
pbuf
 *
p
;

1361 
t˝_hdr
 *
t˝hdr
;

1363 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kì∑live: sídög KEEPALIVEÖrobêtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

1364 
	`ù4_addr1_16
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2_16
(&pcb->remote_ip),

1365 
	`ù4_addr3_16
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4_16
(&pcb->remote_ip)));

1367 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kì∑live:Å˝_tick†%"
U32_F
"Öcb->tm∏%"U32_F"Öcb->kìp_˙t_£¡ %"
U16_F
"\n",

1368 
t˝_ticks
, 
pcb
->
tmr
,Öcb->
kìp_˙t_£¡
));

1370 
p
 = 
	`t˝_ouçut_Æloc_hódî
(
pcb
, 0, 0, 
	`ht⁄l
’cb->
¢d_nxt
 - 1));

1371 if(
p
 =
NULL
) {

1372 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

1376 
t˝hdr
 = (
t˝_hdr
 *)
p
->
∑ylﬂd
;

1378 #i‡
CHECKSUM_GEN_TCP


1379 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,

1380 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

1382 
	`TCP_STATS_INC
(
t˝
.
xmô
);

1385 #i‡
LWIP_NETIF_HWADDRHINT


1386 
	`ù_ouçut_höãd
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
,

1387 &(
pcb
->
addr_höt
));

1389 
	`ù_ouçut
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
);

1392 
	`pbuf_‰ì
(
p
, 
NULL
);

1394 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kì∑live: seqnÿ%"
U32_F
"áckno %"U32_F".\n",

1395 
pcb
->
¢d_nxt
 - 1,Öcb->
rcv_nxt
));

1396 
	}
}

1408 
	$t˝_zîo_wödow_¥obe
(
t˝_pcb
 *
pcb
)

1410 
pbuf
 *
p
;

1411 
t˝_hdr
 *
t˝hdr
;

1412 
t˝_£g
 *
£g
;

1413 
u16_t
 
Àn
;

1414 
u8_t
 
is_fö
;

1416 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

1418 
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

1419 
	`ù4_addr1_16
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2_16
(&pcb->remote_ip),

1420 
	`ù4_addr3_16
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4_16
(&pcb->remote_ip)));

1422 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

1423 ("t˝_zîo_wödow_¥obe:Å˝_tick†%"
U32_F


1424 "Öcb->tm∏%"
U32_F
"Öcb->kìp_˙t_£¡ %"
U16_F
"\n",

1425 
t˝_ticks
, 
pcb
->
tmr
,Öcb->
kìp_˙t_£¡
));

1427 
£g
 = 
pcb
->
u«cked
;

1429 if(
£g
 =
NULL
) {

1430 
£g
 = 
pcb
->
un£¡
;

1432 if(
£g
 =
NULL
) {

1436 
is_fö
 = ((
	`TCPH_FLAGS
(
£g
->
t˝hdr
Ë& 
TCP_FIN
Ë!0Ë&& (£g->
Àn
 == 0);

1438 
Àn
 = 
is_fö
 ? 0 : 1;

1440 
p
 = 
	`t˝_ouçut_Æloc_hódî
(
pcb
, 0, 
Àn
, 
£g
->
t˝hdr
->
£qno
);

1441 if(
p
 =
NULL
) {

1442 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_zero_window_probe:Ço memory forÖbuf\n"));

1445 
t˝hdr
 = (
t˝_hdr
 *)
p
->
∑ylﬂd
;

1447 i‡(
is_fö
) {

1449 
	`TCPH_FLAGS_SET
(
t˝hdr
, 
TCP_ACK
 | 
TCP_FIN
);

1452 
t˝_hdr
 *
thdr
 = (t˝_hd∏*)
£g
->
p
->
∑ylﬂd
;

1453 *
d
 = ((*)
p
->
∑ylﬂd
 + 
TCP_HLEN
);

1454 
	`pbuf_c›y_∑πül
(
£g
->
p
, 
d
, 1, 
	`TCPH_HDRLEN
(
thdr
) * 4);

1457 #i‡
CHECKSUM_GEN_TCP


1458 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,

1459 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

1461 
	`TCP_STATS_INC
(
t˝
.
xmô
);

1464 #i‡
LWIP_NETIF_HWADDRHINT


1465 
	`ù_ouçut_höãd
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
,

1466 &(
pcb
->
addr_höt
));

1468 
	`ù_ouçut
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
);

1471 
	`pbuf_‰ì
(
p
, 
NULL
);

1473 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_zîo_wödow_¥obe: seqnÿ%"
U32_F


1474 "ácknÿ%"
U32_F
".\n",

1475 
pcb
->
¢d_nxt
 - 1,Öcb->
rcv_nxt
));

1476 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/timers.c

42 
	~"lwù/›t.h
"

44 
	~"lwù/timîs.h
"

45 
	~"lwù/t˝_im∂.h
"

47 #i‡
LWIP_TIMERS


49 
	~"lwù/def.h
"

50 
	~"lwù/memp.h
"

51 
	~"lwù/t˝ù.h
"

53 
	~"lwù/ù_‰ag.h
"

54 
	~"√tif/ëh¨p.h
"

55 
	~"lwù/autoù.h
"

56 
	~"lwù/igmp.h
"

57 
	~"lwù/t˝ù.h
"

59 #i‡
NO_SYS


60 
u32_t
 
	gtimeouts_œ°_time
;

63 #i‡
LWIP_TCP


71 
	$t˝ù_t˝_timî
(*
¨g
)

73 
	`LWIP_UNUSED_ARG
(
¨g
);

74 
˝u
 = 
	`sched_gë˝u
();

77 
	`t˝_tmr
(
lwù_t˝ù_thªad
[
˝u
]);

79 i‡(
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝_a˘ive_pcbs
 ||Üwù_t˝ù_thªad[˝u]->t˝ù_d©a.
t˝_tw_pcbs
) {

81 
	`sys_timeout
(
TCP_TMR_INTERVAL
, 
t˝ù_t˝_timî
, 
NULL
);

84 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝ù_t˝_timî_a˘ive
 = 0;

86 
	}
}

94 
	$t˝_timî_√eded
()

97 
˝u
 = 
	`sched_gë˝u
();

98 i‡(!
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝ù_t˝_timî_a˘ive
 && (lwù_t˝ù_thªad[˝u]->t˝ù_d©a.
t˝_a˘ive_pcbs
 ||Üwù_t˝ù_thªad[˝u]->t˝ù_d©a.
t˝_tw_pcbs
)) {

100 
lwù_t˝ù_thªad
[
˝u
]->
t˝ù_d©a
.
t˝ù_t˝_timî_a˘ive
 = 1;

101 
	`sys_timeout
(
TCP_TMR_INTERVAL
, 
t˝ù_t˝_timî
, 
NULL
);

103 
	}
}

106 #i‡
IP_REASSEMBLY


113 
	$ù_ªass_timî
(*
¨g
)

115 
	`LWIP_UNUSED_ARG
(
¨g
);

116 
	`LWIP_DEBUGF
(
TIMERS_DEBUG
, ("tcpip: ip_reass_tmr()\n"));

117 
	`ù_ªass_tmr
();

118 
	`sys_timeout
(
IP_TMR_INTERVAL
, 
ù_ªass_timî
, 
NULL
);

119 
	}
}

122 #i‡
LWIP_ARP


129 
	$¨p_timî
(*
¨g
)

131 
	`LWIP_UNUSED_ARG
(
¨g
);

132 
	`LWIP_DEBUGF
(
TIMERS_DEBUG
, ("tcpip:Étharp_tmr()\n"));

133 
	`ëh¨p_tmr
();

134 
	`sys_timeout
(
ARP_TMR_INTERVAL
, 
¨p_timî
, 
NULL
);

135 
	}
}

138 #i‡
LWIP_DHCP


145 
	$dh˝_timî_cﬂr£
(*
¨g
)

147 
	`LWIP_UNUSED_ARG
(
¨g
);

148 
	`LWIP_DEBUGF
(
TIMERS_DEBUG
, ("tcpip: dhcp_coarse_tmr()\n"));

149 
	`dh˝_cﬂr£_tmr
();

150 
	`sys_timeout
(
DHCP_COARSE_TIMER_MSECS
, 
dh˝_timî_cﬂr£
, 
NULL
);

151 
	}
}

159 
	$dh˝_timî_föe
(*
¨g
)

161 
	`LWIP_UNUSED_ARG
(
¨g
);

162 
	`LWIP_DEBUGF
(
TIMERS_DEBUG
, ("tcpip: dhcp_fine_tmr()\n"));

163 
	`dh˝_föe_tmr
();

164 
	`sys_timeout
(
DHCP_FINE_TIMER_MSECS
, 
dh˝_timî_föe
, 
NULL
);

165 
	}
}

168 #i‡
LWIP_AUTOIP


175 
	$autoù_timî
(*
¨g
)

177 
	`LWIP_UNUSED_ARG
(
¨g
);

178 
	`LWIP_DEBUGF
(
TIMERS_DEBUG
, ("tcpip:áutoip_tmr()\n"));

179 
	`autoù_tmr
();

180 
	`sys_timeout
(
AUTOIP_TMR_INTERVAL
, 
autoù_timî
, 
NULL
);

181 
	}
}

184 #i‡
LWIP_IGMP


191 
	$igmp_timî
(*
¨g
)

193 
	`LWIP_UNUSED_ARG
(
¨g
);

194 
	`LWIP_DEBUGF
(
TIMERS_DEBUG
, ("tcpip: igmp_tmr()\n"));

195 
	`igmp_tmr
();

196 
	`sys_timeout
(
IGMP_TMR_INTERVAL
, 
igmp_timî
, 
NULL
);

197 
	}
}

200 #i‡
LWIP_DNS


207 
	$dns_timî
(*
¨g
)

209 
	`LWIP_UNUSED_ARG
(
¨g
);

210 
	`LWIP_DEBUGF
(
TIMERS_DEBUG
, ("tcpip: dns_tmr()\n"));

211 
	`dns_tmr
();

212 
	`sys_timeout
(
DNS_TMR_INTERVAL
, 
dns_timî
, 
NULL
);

213 
	}
}

217 
	$sys_timeouts_öô
()

221 
	}
}

233 #i‡
LWIP_DEBUG_TIMERNAMES


235 
	$sys_timeout_debug
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h™dÀr
, *
¨g
, c⁄° * 
h™dÀr_«me
)

238 
	$sys_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h™dÀr
, *
¨g
)

241 
sys_timeo
 *
timeout
, *
t
;

242 
˝u
 = 
	`sched_gë˝u
();

244 
timeout
 = (
sys_timeo
 *)
	`memp_mÆloc
(
MEMP_SYS_TIMEOUT
, 
NULL
);

245 i‡(
timeout
 =
NULL
) {

246 
	`LWIP_ASSERT
("sys_timeout:Åimeouà!NULL,Öoﬁ MEMP_SYS_TIMEOUT i†em±y", 
timeout
 !
NULL
);

249 
timeout
->
√xt
 = 
NULL
;

250 
timeout
->
h
 = 
h™dÀr
;

251 
timeout
->
¨g
 =árg;

252 
timeout
->
time
 = 
m£cs
;

253 #i‡
LWIP_DEBUG_TIMERNAMES


254 
timeout
->
h™dÀr_«me
 = handler_name;

255 
	`LWIP_DEBUGF
(
TIMERS_DEBUG
, ("sys_timeout: %∞m£cs=%"
U32_F
" handler=%sárg=%p\n",

256 (*)
timeout
, 
m£cs
, 
h™dÀr_«me
, (*)
¨g
));

259 i‡(
lwù_t˝ù_thªad
[
˝u
]->
√xt_timeout
 =
NULL
) {

260 
lwù_t˝ù_thªad
[
˝u
]->
√xt_timeout
 = 
timeout
;

264 i‡(
lwù_t˝ù_thªad
[
˝u
]->
√xt_timeout
->
time
 > 
m£cs
) {

265 
lwù_t˝ù_thªad
[
˝u
]->
√xt_timeout
->
time
 -
m£cs
;

266 
timeout
->
√xt
 = 
lwù_t˝ù_thªad
[
˝u
]->
√xt_timeout
;

267 
lwù_t˝ù_thªad
[
˝u
]->
√xt_timeout
 = 
timeout
;

269 
t
 = 
lwù_t˝ù_thªad
[
˝u
]->
√xt_timeout
;Å !
NULL
;Å =Å->
√xt
) {

270 
timeout
->
time
 -
t
->time;

271 i‡(
t
->
√xt
 =
NULL
 ||Å->√xt->
time
 > 
timeout
->time) {

272 i‡(
t
->
√xt
 !
NULL
) {

273 
t
->
√xt
->
time
 -
timeout
->time;

275 
timeout
->
√xt
 = 
t
->next;

276 
t
->
√xt
 = 
timeout
;

281 
	}
}

294 
	$sys_u¡imeout
(
sys_timeout_h™dÀr
 
h™dÀr
, *
¨g
)

296 
sys_timeo
 *
¥ev_t
, *
t
;

297 
˝u
 = 
	`sched_gë˝u
();

299 i‡(
lwù_t˝ù_thªad
[
˝u
]->
√xt_timeout
 =
NULL
) {

303 
t
 = 
lwù_t˝ù_thªad
[
˝u
]->
√xt_timeout
, 
¥ev_t
 = 
NULL
;Å !NULL;Öªv_àt,Å =Å->
√xt
) {

304 i‡((
t
->
h
 =
h™dÀr
Ë&& (t->
¨g
 ==árg)) {

307 i‡(
¥ev_t
 =
NULL
) {

308 
lwù_t˝ù_thªad
[
˝u
]->
√xt_timeout
 = 
t
->
√xt
;

310 
¥ev_t
->
√xt
 = 
t
->next;

313 i‡(
t
->
√xt
 !
NULL
) {

314 
t
->
√xt
->
time
 +=Å->time;

316 
	`memp_‰ì
(
MEMP_SYS_TIMEOUT
, 
t
, 
NULL
);

321 
	}
}

323 #i‡
NO_SYS


332 
	$sys_check_timeouts
()

334 
sys_timeo
 *
tm±imeout
;

335 
u32_t
 
diff
;

336 
sys_timeout_h™dÀr
 
h™dÀr
;

337 *
¨g
;

338 
had_⁄e
;

339 
u32_t
 
now
;

341 
now
 = 
	`sys_now
();

342 i‡(
lwù_t˝ù_thªad
[
˝u
]->
√xt_timeout
) {

344 
diff
 = 
	`LWIP_U32_DIFF
(
now
, 
timeouts_œ°_time
);

347 
had_⁄e
 = 0;

348 
tm±imeout
 = 
lwù_t˝ù_thªad
[
˝u
]->
√xt_timeout
;

349 i‡(
tm±imeout
->
time
 <
diff
) {

351 
had_⁄e
 = 1;

352 
timeouts_œ°_time
 = 
now
;

353 
diff
 -
tm±imeout
->
time
;

354 
lwù_t˝ù_thªad
[
˝u
]->
√xt_timeout
 = 
tm±imeout
->
√xt
;

355 
h™dÀr
 = 
tm±imeout
->
h
;

356 
¨g
 = 
tm±imeout
->arg;

357 #i‡
LWIP_DEBUG_TIMERNAMES


358 i‡(
h™dÀr
 !
NULL
) {

359 
	`LWIP_DEBUGF
(
TIMERS_DEBUG
, ("sct calling h=%sárg=%p\n",

360 
tm±imeout
->
h™dÀr_«me
, 
¨g
));

363 
	`memp_‰ì
(
MEMP_SYS_TIMEOUT
, 
tm±imeout
, 
NULL
);

364 i‡(
h™dÀr
 !
NULL
) {

365 
	`h™dÀr
(
¨g
);

369 }
had_⁄e
);

371 
	}
}

379 
	$sys_ª°¨t_timeouts
()

381 
timeouts_œ°_time
 = 
	`sys_now
();

382 
	}
}

394 
	$sys_timeouts_mbox_„tch
(
lwù_mbox_t
 *
mbox
, **
msg
)

396 
u32_t
 
time_√eded
;

397 
sys_timeo
 *
tm±imeout
;

398 
sys_timeout_h™dÀr
 
h™dÀr
;

399 *
¨g
;

400 
˝u
 = 
	`sched_gë˝u
();

402 
agaö
:

403 i‡(!
lwù_t˝ù_thªad
[
˝u
]->
√xt_timeout
) {

404 
time_√eded
 = 
	`sys_lwù_¨ch_mbox_„tch
(
mbox
, 
msg
, 0, 1);

406 i‡(
lwù_t˝ù_thªad
[
˝u
]->
√xt_timeout
->
time
 > 0) {

408 
time_√eded
 = 
	`sys_lwù_¨ch_mbox_„tch
(
mbox
, 
msg
, 0, 1);

410 
time_√eded
 = 
SYS_ARCH_TIMEOUT
;

413 i‡(
time_√eded
 =
SYS_ARCH_TIMEOUT
) {

417 
tm±imeout
 = 
lwù_t˝ù_thªad
[
˝u
]->
√xt_timeout
;

418 
lwù_t˝ù_thªad
[
˝u
]->
√xt_timeout
 = 
tm±imeout
->
√xt
;

419 
h™dÀr
 = 
tm±imeout
->
h
;

420 
¨g
 = 
tm±imeout
->arg;

421 #i‡
LWIP_DEBUG_TIMERNAMES


422 i‡(
h™dÀr
 !
NULL
) {

423 
	`LWIP_DEBUGF
(
TIMERS_DEBUG
, ("stmf calling h=%sárg=%p\n",

424 
tm±imeout
->
h™dÀr_«me
, 
¨g
));

427 
	`memp_‰ì
(
MEMP_SYS_TIMEOUT
, 
tm±imeout
, 
NULL
);

428 i‡(
h™dÀr
 !
NULL
) {

431 
	`LOCK_TCPIP_CORE
();

432 
	`h™dÀr
(
¨g
);

433 
	`UNLOCK_TCPIP_CORE
();

435 
	`LWIP_TCPIP_THREAD_ALIVE
();

443 i‡(
time_√eded
 < 
lwù_t˝ù_thªad
[
˝u
]->
√xt_timeout
->
time
) {

444 
lwù_t˝ù_thªad
[
˝u
]->
√xt_timeout
->
time
 -
time_√eded
;

446 
lwù_t˝ù_thªad
[
˝u
]->
√xt_timeout
->
time
 = 0;

450 
	}
}

457 
	$t˝_timî_√eded
()

459 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/ipv4/lwip/autoip.h

44 #i‚de‡
__LWIP_AUTOIP_H__


45 
	#__LWIP_AUTOIP_H__


	)

47 
	~"lwù/›t.h
"

49 #i‡
LWIP_AUTOIP


51 
	~"lwù/√tif.h
"

52 
	~"lwù/udp.h
"

53 
	~"√tif/ëh¨p.h
"

55 #ifde‡
__˝lu•lus


60 
	#AUTOIP_TMR_INTERVAL
 100

	)

61 
	#AUTOIP_TICKS_PER_SECOND
 (1000 / 
AUTOIP_TMR_INTERVAL
)

	)

64 
	#PROBE_WAIT
 1

	)

65 
	#PROBE_MIN
 1

	)

66 
	#PROBE_MAX
 2

	)

67 
	#PROBE_NUM
 3

	)

68 
	#ANNOUNCE_NUM
 2

	)

69 
	#ANNOUNCE_INTERVAL
 2

	)

70 
	#ANNOUNCE_WAIT
 2

	)

71 
	#MAX_CONFLICTS
 10

	)

72 
	#RATE_LIMIT_INTERVAL
 60

	)

73 
	#DEFEND_INTERVAL
 10

	)

76 
	#AUTOIP_STATE_OFF
 0

	)

77 
	#AUTOIP_STATE_PROBING
 1

	)

78 
	#AUTOIP_STATE_ANNOUNCING
 2

	)

79 
	#AUTOIP_STATE_BOUND
 3

	)

81 
	sautoù


83 
ù_addr_t
 
Œùaddr
;

84 
u8_t
 
°©e
;

85 
u8_t
 
£¡_num
;

86 
u16_t
 
âw
;

87 
u8_t
 
œ°c⁄Êi˘
;

88 
u8_t
 
åõd_Œùaddr
;

93 
autoù_öô
();

96 
autoù_£t_°ru˘
(
√tif
 *√tif, 
autoù
 *autoip);

99 
îr_t
 
autoù_°¨t
(
√tif
 *netif);

102 
îr_t
 
autoù_°›
(
√tif
 *netif);

105 
autoù_¨p_ª∂y
(
√tif
 *√tif, 
ëh¨p_hdr
 *
hdr
);

108 
autoù_tmr
();

111 
autoù_√tw‹k_ch™ged
(
√tif
 *netif);

113 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/ipv4/lwip/icmp.h

32 #i‚de‡
__LWIP_ICMP_H__


33 
	#__LWIP_ICMP_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/pbuf.h
"

37 
	~"lwù/ù_addr.h
"

38 
	~"lwù/√tif.h
"

40 #ifde‡
__˝lu•lus


44 
	#ICMP_ER
 0

	)

45 
	#ICMP_DUR
 3

	)

46 
	#ICMP_SQ
 4

	)

47 
	#ICMP_RD
 5

	)

48 
	#ICMP_ECHO
 8

	)

49 
	#ICMP_TE
 11

	)

50 
	#ICMP_PP
 12

	)

51 
	#ICMP_TS
 13

	)

52 
	#ICMP_TSR
 14

	)

53 
	#ICMP_IRQ
 15

	)

54 
	#ICMP_IR
 16

	)

56 
	eicmp_dur_ty≥
 {

57 
ICMP_DUR_NET
 = 0,

58 
ICMP_DUR_HOST
 = 1,

59 
ICMP_DUR_PROTO
 = 2,

60 
ICMP_DUR_PORT
 = 3,

61 
ICMP_DUR_FRAG
 = 4,

62 
ICMP_DUR_SR
 = 5

65 
	eicmp_ã_ty≥
 {

66 
ICMP_TE_TTL
 = 0,

67 
ICMP_TE_FRAG
 = 1

70 #ifde‡
PACK_STRUCT_USE_INCLUDES


71 
	~"¨ch/bp°ru˘.h
"

78 
PACK_STRUCT_BEGIN


79 
	sicmp_echo_hdr
 {

80 
PACK_STRUCT_FIELD
(
u8_t
 
ty≥
);

81 
PACK_STRUCT_FIELD
(
u8_t
 
code
);

82 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

83 
PACK_STRUCT_FIELD
(
u16_t
 
id
);

84 
PACK_STRUCT_FIELD
(
u16_t
 
£qno
);

85 } 
PACK_STRUCT_STRUCT
;

86 
PACK_STRUCT_END


87 #ifde‡
PACK_STRUCT_USE_INCLUDES


88 
	~"¨ch/ï°ru˘.h
"

91 
	#ICMPH_TYPE
(
hdr
Ë((hdr)->
ty≥
)

	)

92 
	#ICMPH_CODE
(
hdr
Ë((hdr)->
code
)

	)

95 
	#ICMPH_TYPE_SET
(
hdr
, 
t
Ë((hdr)->
ty≥
 = (t))

	)

96 
	#ICMPH_CODE_SET
(
hdr
, 
c
Ë((hdr)->
code
 = (c))

	)

99 #i‡
LWIP_ICMP


101 
icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

102 
icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
);

103 
icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
);

107 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/ipv4/lwip/igmp.h

35 #i‚de‡
__LWIP_IGMP_H__


36 
	#__LWIP_IGMP_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/ù_addr.h
"

40 
	~"lwù/√tif.h
"

41 
	~"lwù/pbuf.h
"

43 #i‡
LWIP_IGMP


45 #ifde‡
__˝lu•lus


51 
	#IGMP_TMR_INTERVAL
 100

	)

52 
	#IGMP_V1_DELAYING_MEMBER_TMR
 (1000/
IGMP_TMR_INTERVAL
)

	)

53 
	#IGMP_JOIN_DELAYING_MEMBER_TMR
 (500 /
IGMP_TMR_INTERVAL
)

	)

57 
	#IGMP_DEL_MAC_FILTER
 0

	)

58 
	#IGMP_ADD_MAC_FILTER
 1

	)

72 
	sigmp_group
 {

74 
igmp_group
 *
√xt
;

76 
√tif
 *netif;

78 
ù_addr_t
 
group_addªss
;

80 
u8_t
 
œ°_ªp‹ãr_Êag
;

82 
u8_t
 
group_°©e
;

84 
u16_t
 
timî
;

86 
u8_t
 
u£
;

90 
igmp_öô
();

91 
îr_t
 
igmp_°¨t
(
√tif
 *netif);

92 
îr_t
 
igmp_°›
(
√tif
 *netif);

93 
igmp_ªp‹t_groups
(
√tif
 *netif);

94 
igmp_group
 *
igmp_lookf‹_group
(
√tif
 *
iÂ
, 
ù_addr_t
 *
addr
);

95 
igmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
, 
ù_addr_t
 *
de°
);

96 
îr_t
 
igmp_joögroup
(
ù_addr_t
 *
iÁddr
, ip_addr_à*
grou∑ddr
);

97 
îr_t
 
igmp_Àavegroup
(
ù_addr_t
 *
iÁddr
, ip_addr_à*
grou∑ddr
);

98 
igmp_tmr
();

100 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/ipv4/lwip/inet.h

32 #i‚de‡
__LWIP_INET_H__


33 
	#__LWIP_INET_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/def.h
"

37 
	~"lwù/ù_addr.h
"

39 #ifde‡
__˝lu•lus


44 
	sö_addr
 {

45 
u32_t
 
s_addr
;

49 
	#INADDR_NONE
 
IPADDR_NONE


	)

51 
	#INADDR_LOOPBACK
 
IPADDR_LOOPBACK


	)

53 
	#INADDR_ANY
 
IPADDR_ANY


	)

55 
	#INADDR_BROADCAST
 
IPADDR_BROADCAST


	)

61 
	#IN_CLASSA
(
a
Ë
	`IP_CLASSA
◊)

	)

62 
	#IN_CLASSA_NET
 
IP_CLASSA_NET


	)

63 
	#IN_CLASSA_NSHIFT
 
IP_CLASSA_NSHIFT


	)

64 
	#IN_CLASSA_HOST
 
IP_CLASSA_HOST


	)

65 
	#IN_CLASSA_MAX
 
IP_CLASSA_MAX


	)

67 
	#IN_CLASSB
(
b
Ë
	`IP_CLASSB
(b)

	)

68 
	#IN_CLASSB_NET
 
IP_CLASSB_NET


	)

69 
	#IN_CLASSB_NSHIFT
 
IP_CLASSB_NSHIFT


	)

70 
	#IN_CLASSB_HOST
 
IP_CLASSB_HOST


	)

71 
	#IN_CLASSB_MAX
 
IP_CLASSB_MAX


	)

73 
	#IN_CLASSC
(
c
Ë
	`IP_CLASSC
(c)

	)

74 
	#IN_CLASSC_NET
 
IP_CLASSC_NET


	)

75 
	#IN_CLASSC_NSHIFT
 
IP_CLASSC_NSHIFT


	)

76 
	#IN_CLASSC_HOST
 
IP_CLASSC_HOST


	)

77 
	#IN_CLASSC_MAX
 
IP_CLASSC_MAX


	)

79 
	#IN_CLASSD
(
d
Ë
	`IP_CLASSD
(d)

	)

80 
	#IN_CLASSD_NET
 
IP_CLASSD_NET


	)

81 
	#IN_CLASSD_NSHIFT
 
IP_CLASSD_NSHIFT


	)

82 
	#IN_CLASSD_HOST
 
IP_CLASSD_HOST


	)

83 
	#IN_CLASSD_MAX
 
IP_CLASSD_MAX


	)

85 
	#IN_MULTICAST
(
a
Ë
	`IP_MULTICAST
◊)

	)

87 
	#IN_EXPERIMENTAL
(
a
Ë
	`IP_EXPERIMENTAL
◊)

	)

88 
	#IN_BADCLASS
(
a
Ë
	`IP_BADCLASS
◊)

	)

90 
	#IN_LOOPBACKNET
 
IP_LOOPBACKNET


	)

92 
	#öë_addr_‰om_ùaddr
(
èrgë_öaddr
, 
sour˚_ùaddr
Ë(—¨gë_öaddr)->
s_addr
 = 
	`ù4_addr_gë_u32
(sour˚_ùaddr))

	)

93 
	#öë_addr_to_ùaddr
(
èrgë_ùaddr
, 
sour˚_öaddr
Ë(
	`ù4_addr_£t_u32
—¨gë_ùaddr, (sour˚_öaddr)->
s_addr
))

	)

95 
	#öë_addr_to_ùaddr_p
(
èrgë_ùaddr_p
, 
sour˚_öaddr
Ë(—¨gë_ùaddr_pË(
ù_addr_t
*)&((sour˚_öaddr)->
s_addr
))

	)

98 
	#öë_addr
(
˝
Ë
	`ùaddr_addr
(˝)

	)

99 
	#öë_©⁄
(
˝
, 
addr
Ë
	`ùaddr_©⁄
(˝, (
ù_addr_t
*Ôddr)

	)

100 
	#öë_¡ﬂ
(
addr
Ë
	`ùaddr_¡ﬂ
((
ù_addr_t
*)&◊ddr))

	)

101 
	#öë_¡ﬂ_r
(
addr
, 
buf
, 
buÊí
Ë
	`ùaddr_¡ﬂ_r
((
ù_addr_t
*)&◊ddr), buf, buÊí)

	)

103 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/ipv4/lwip/inet_chksum.h

32 #i‚de‡
__LWIP_INET_CHKSUM_H__


33 
	#__LWIP_INET_CHKSUM_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/pbuf.h
"

38 
	~"lwù/ù_addr.h
"

41 #i‚de‡
SWAP_BYTES_IN_WORD


42 #i‡
LWIP_PLATFORM_BYTESWAP
 && (
BYTE_ORDER
 =
LITTLE_ENDIAN
)

44 
	#SWAP_BYTES_IN_WORD
(
w
Ë
	`LWIP_PLATFORM_HTONS
(w)

	)

47 
	#SWAP_BYTES_IN_WORD
(
w
Ë(((wË& 0xffË<< 8Ë| (((wË& 0xff00Ë>> 8)

	)

52 #i‚de‡
FOLD_U32T


53 
	#FOLD_U32T
(
u
Ë(((uË>> 16Ë+ ((uË& 0x0000ffffUL))

	)

56 #i‡
LWIP_CHECKSUM_ON_COPY


59 #i‚de‡
LWIP_CHKSUM_COPY


60 
	#LWIP_CHKSUM_COPY
(
d°
, 
§c
, 
Àn
Ë
	`lwù_chksum_c›y
(d°, src,Üí)

	)

61 #i‚de‡
LWIP_CHKSUM_COPY_ALGORITHM


62 
	#LWIP_CHKSUM_COPY_ALGORITHM
 1

	)

66 
	#LWIP_CHKSUM_COPY_ALGORITHM
 0

	)

69 #ifde‡
__˝lu•lus


73 
u16_t
 
öë_chksum
(*
d©≠å
, u16_à
Àn
);

74 
u16_t
 
öë_chksum_pbuf
(
pbuf
 *
p
);

75 
u16_t
 
öë_chksum_p£udo
(
pbuf
 *
p
,

76 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

77 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
);

78 
u16_t
 
öë_chksum_p£udo_∑πül
(
pbuf
 *
p
,

79 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

80 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
, u16_à
chksum_Àn
);

81 #i‡
LWIP_CHKSUM_COPY_ALGORITHM


82 
u16_t
 
lwù_chksum_c›y
(*
d°
, c⁄° *
§c
, u16_à
Àn
);

85 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/ipv4/lwip/ip.h

32 #i‚de‡
__LWIP_IP_H__


33 
	#__LWIP_IP_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/def.h
"

38 
	~"lwù/pbuf.h
"

39 
	~"lwù/ù_addr.h
"

40 
	~"lwù/îr.h
"

41 
	~"lwù/t˝ù_thªad.h
"

42 
	~"lwù/√tif.h
"

44 #ifde‡
__˝lu•lus


49 
	#IP_OPTIONS_SEND
 
LWIP_IGMP


	)

51 
	#IP_HLEN
 20

	)

53 
	#IP_PROTO_ICMP
 1

	)

54 
	#IP_PROTO_IGMP
 2

	)

55 
	#IP_PROTO_UDP
 17

	)

56 
	#IP_PROTO_UDPLITE
 136

	)

57 
	#IP_PROTO_TCP
 6

	)

62 #ifde‡
IP_HDRINCL


63 #unde‡
IP_HDRINCL


65 
	#IP_HDRINCL
 
NULL


	)

67 
	sù_pcb
 {

69 
IP_PCB
;

76 
	#SOF_ACCEPTCONN
 (
u8_t
)0x02U

	)

77 
	#SOF_REUSEADDR
 (
u8_t
)0x04U

	)

78 
	#SOF_KEEPALIVE
 (
u8_t
)0x08U

	)

80 
	#SOF_BROADCAST
 (
u8_t
)0x20U

	)

82 
	#SOF_LINGER
 (
u8_t
)0x80U

	)

87 
	#SOF_INHERITED
 (
SOF_REUSEADDR
|
SOF_KEEPALIVE
|
SOF_LINGER
 )

	)

90 #ifde‡
PACK_STRUCT_USE_INCLUDES


91 
	~"¨ch/bp°ru˘.h
"

93 
PACK_STRUCT_BEGIN


94 
	sù_hdr
 {

96 
PACK_STRUCT_FIELD
(
u16_t
 
_v_hl_tos
);

98 
PACK_STRUCT_FIELD
(
u16_t
 
_Àn
);

100 
PACK_STRUCT_FIELD
(
u16_t
 
_id
);

102 
PACK_STRUCT_FIELD
(
u16_t
 
_off£t
);

103 
	#IP_RF
 0x8000U

	)

104 
	#IP_DF
 0x4000U

	)

105 
	#IP_MF
 0x2000U

	)

106 
	#IP_OFFMASK
 0x1fffU

	)

108 
PACK_STRUCT_FIELD
(
u8_t
 
_âl
);

110 
PACK_STRUCT_FIELD
(
u8_t
 
_¥Ÿo
);

112 
PACK_STRUCT_FIELD
(
u16_t
 
_chksum
);

114 
PACK_STRUCT_FIELD
(
ù_addr_p_t
 
§c
);

115 
PACK_STRUCT_FIELD
(
ù_addr_p_t
 
de°
);

116 } 
PACK_STRUCT_STRUCT
;

117 
PACK_STRUCT_END


118 #ifde‡
PACK_STRUCT_USE_INCLUDES


119 
	~"¨ch/ï°ru˘.h
"

122 
	#IPH_V
(
hdr
Ë(
	`¡ohs
((hdr)->
_v_hl_tos
Ë>> 12)

	)

123 
	#IPH_HL
(
hdr
Ë((
	`¡ohs
((hdr)->
_v_hl_tos
Ë>> 8Ë& 0x0f)

	)

124 
	#IPH_TOS
(
hdr
Ë(
	`¡ohs
((hdr)->
_v_hl_tos
Ë& 0xff)

	)

125 
	#IPH_LEN
(
hdr
Ë((hdr)->
_Àn
)

	)

126 
	#IPH_ID
(
hdr
Ë((hdr)->
_id
)

	)

127 
	#IPH_OFFSET
(
hdr
Ë((hdr)->
_off£t
)

	)

128 
	#IPH_TTL
(
hdr
Ë((hdr)->
_âl
)

	)

129 
	#IPH_PROTO
(
hdr
Ë((hdr)->
_¥Ÿo
)

	)

130 
	#IPH_CHKSUM
(
hdr
Ë((hdr)->
_chksum
)

	)

132 
	#IPH_VHLTOS_SET
(
hdr
, 
v
, 
hl
, 
tos
Ë(hdr)->
_v_hl_tos
 = (
	`ht⁄s
(((vË<< 12Ë| ((hlË<< 8Ë| (tos)))

	)

133 
	#IPH_LEN_SET
(
hdr
, 
Àn
Ë(hdr)->
_Àn
 = (Àn)

	)

134 
	#IPH_ID_SET
(
hdr
, 
id
Ë(hdr)->
_id
 = (id)

	)

135 
	#IPH_OFFSET_SET
(
hdr
, 
off
Ë(hdr)->
_off£t
 = (off)

	)

136 
	#IPH_TTL_SET
(
hdr
, 
âl
Ë(hdr)->
_âl
 = (
u8_t
)—é)

	)

137 
	#IPH_PROTO_SET
(
hdr
, 
¥Ÿo
Ë(hdr)->
_¥Ÿo
 = (
u8_t
)’rŸo)

	)

138 
	#IPH_CHKSUM_SET
(
hdr
, 
chksum
Ë(hdr)->
_chksum
 = (chksum)

	)

140 
	#ù_öô
(Ë

	)

141 
√tif
 *
ù_rouã
(
ù_addr_t
 *
de°
, 
˝u
);

142 
îr_t
 
ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

143 
îr_t
 
ù_ouçut
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

144 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
);

145 
îr_t
 
ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

146 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
,

147 
√tif
 *netif);

148 #i‡
LWIP_NETIF_HWADDRHINT


149 
îr_t
 
ù_ouçut_höãd
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

150 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, u8_à*
addr_höt
);

152 #i‡
IP_OPTIONS_SEND


153 
îr_t
 
ù_ouçut_if_›t
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

154 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, 
√tif
 *√tif, *
ù_›ti⁄s
,

155 
u16_t
 
›éí
);

158 
	#ù_cuºít_§c_addr
(Ë(&
lwù_t˝ù_thªad
[
	`sched_gë˝u
()]->
cuºít_ùhdr_§c
)

	)

160 
	#ù_cuºít_de°_addr
(Ë(&
lwù_t˝ù_thªad
[
	`sched_gë˝u
()]->
cuºít_ùhdr_de°
)

	)

162 #i‡
IP_DEBUG


163 
ù_debug_¥öt
(
pbuf
 *
p
);

165 
	#ù_debug_¥öt
(
p
)

	)

168 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/ipv4/lwip/ip_addr.h

32 #i‚de‡
__LWIP_IP_ADDR_H__


33 
	#__LWIP_IP_ADDR_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/def.h
"

37 
	~"lwù/t˝ù_thªad.h
"

39 #ifde‡
__˝lu•lus


45 #ifde‡
PACK_STRUCT_USE_INCLUDES


46 
	~"¨ch/bp°ru˘.h
"

48 
PACK_STRUCT_BEGIN


49 
	sù_addr_∑cked
 {

50 
PACK_STRUCT_FIELD
(
u32_t
 
addr
);

51 } 
PACK_STRUCT_STRUCT
;

52 
PACK_STRUCT_END


53 #ifde‡
PACK_STRUCT_USE_INCLUDES


54 
	~"¨ch/ï°ru˘.h
"

59 
ù_addr_∑cked
 
	tù_addr_p_t
;

65 #ifde‡
PACK_STRUCT_USE_INCLUDES


66 
	~"¨ch/bp°ru˘.h
"

68 
PACK_STRUCT_BEGIN


69 
	sù_addr2
 {

70 
PACK_STRUCT_FIELD
(
u16_t
 
addrw
[2]);

71 } 
PACK_STRUCT_STRUCT
;

72 
PACK_STRUCT_END


73 #ifde‡
PACK_STRUCT_USE_INCLUDES


74 
	~"¨ch/ï°ru˘.h
"

78 
√tif
;

80 c⁄° 
ù_addr_t
 
ù_addr_™y
;

81 c⁄° 
ù_addr_t
 
ù_addr_brﬂdˇ°
;

86 
	#IP_ADDR_ANY
 ((
ù_addr_t
 *)&
ù_addr_™y
)

	)

87 
	#IP_ADDR_BROADCAST
 ((
ù_addr_t
 *)&
ù_addr_brﬂdˇ°
)

	)

90 
	#IPADDR_NONE
 ((
u32_t
)0xffffffffUL)

	)

92 
	#IPADDR_LOOPBACK
 ((
u32_t
)0x7f000001UL)

	)

94 
	#IPADDR_ANY
 ((
u32_t
)0x00000000UL)

	)

96 
	#IPADDR_BROADCAST
 ((
u32_t
)0xffffffffUL)

	)

102 
	#IP_CLASSA
(
a
Ë((((
u32_t
)◊)Ë& 0x80000000ULË=0)

	)

103 
	#IP_CLASSA_NET
 0xff000000

	)

104 
	#IP_CLASSA_NSHIFT
 24

	)

105 
	#IP_CLASSA_HOST
 (0xfffffff‡& ~
IP_CLASSA_NET
)

	)

106 
	#IP_CLASSA_MAX
 128

	)

108 
	#IP_CLASSB
(
a
Ë((((
u32_t
)◊)Ë& 0xc0000000ULË=0x80000000UL)

	)

109 
	#IP_CLASSB_NET
 0xffff0000

	)

110 
	#IP_CLASSB_NSHIFT
 16

	)

111 
	#IP_CLASSB_HOST
 (0xfffffff‡& ~
IP_CLASSB_NET
)

	)

112 
	#IP_CLASSB_MAX
 65536

	)

114 
	#IP_CLASSC
(
a
Ë((((
u32_t
)◊)Ë& 0xe0000000ULË=0xc0000000UL)

	)

115 
	#IP_CLASSC_NET
 0xffffff00

	)

116 
	#IP_CLASSC_NSHIFT
 8

	)

117 
	#IP_CLASSC_HOST
 (0xfffffff‡& ~
IP_CLASSC_NET
)

	)

119 
	#IP_CLASSD
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xe0000000UL)

	)

120 
	#IP_CLASSD_NET
 0xf0000000

	)

121 
	#IP_CLASSD_NSHIFT
 28

	)

122 
	#IP_CLASSD_HOST
 0x0ffffff‡

	)

123 
	#IP_MULTICAST
(
a
Ë
	`IP_CLASSD
◊)

	)

125 
	#IP_EXPERIMENTAL
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xf0000000UL)

	)

126 
	#IP_BADCLASS
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xf0000000UL)

	)

128 
	#IP_LOOPBACKNET
 127

	)

131 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


133 
	#IP4_ADDR
(
ùaddr
, 
a
,
b
,
c
,
d
) \

134 (
ùaddr
)->
addr
 = ((
u32_t
)((
a
) & 0xff) << 24) | \

135 ((
u32_t
)((
b
) & 0xff) << 16) | \

136 ((
u32_t
)((
c
) & 0xff) << 8) | \

137 (
u32_t
)((
d
Ë& 0xff)

	)

141 
	#IP4_ADDR
(
ùaddr
, 
a
,
b
,
c
,
d
) \

142 (
ùaddr
)->
addr
 = ((
u32_t
)((
d
) & 0xff) << 24) | \

143 ((
u32_t
)((
c
) & 0xff) << 16) | \

144 ((
u32_t
)((
b
) & 0xff) << 8) | \

145 (
u32_t
)((
a
Ë& 0xff)

	)

151 #i‚de‡
IPADDR2_COPY


152 
	#IPADDR2_COPY
(
de°
, 
§c
Ë
	`SMEMCPY
(de°, src, (
ù_addr_t
))

	)

156 
	#ù_addr_c›y
(
de°
, 
§c
Ë((de°).
addr
 = (§c).addr)

	)

158 
	#ù_addr_£t
(
de°
, 
§c
Ë((de°)->
addr
 = \

159 ((
§c
Ë=
NULL
 ? 0 : \

160 (
§c
)->
addr
))

	)

162 
	#ù_addr_£t_zîo
(
ùaddr
Ë((ùaddr)->
addr
 = 0)

	)

164 
	#ù_addr_£t_™y
(
ùaddr
Ë((ùaddr)->
addr
 = 
IPADDR_ANY
)

	)

166 
	#ù_addr_£t_lo›back
(
ùaddr
Ë((ùaddr)->
addr
 = 
	`PP_HTONL
(
IPADDR_LOOPBACK
))

	)

169 
	#ù_addr_£t_ht⁄
(
de°
, 
§c
Ë((de°)->
addr
 = \

170 ((
§c
Ë=
NULL
 ? 0:\

171 
	`ht⁄l
((
§c
)->
addr
)))

	)

173 
	#ù4_addr_£t_u32
(
de°_ùaddr
, 
§c_u32
Ë((de°_ùaddr)->
addr
 = (§c_u32))

	)

175 
	#ù4_addr_gë_u32
(
§c_ùaddr
Ë((§c_ùaddr)->
addr
)

	)

178 
	#ù_addr_gë_√tw‹k
(
èrgë
, 
ho°
, 
√tmask
Ë(—¨gë)->
addr
 = ((ho°)->addrË& (“ëmask)->addr))

	)

188 
	#ù_addr_√tcmp
(
addr1
, 
addr2
, 
mask
Ë((◊ddr1)->
addr
 & \

189 (
mask
)->
addr
) == \

190 ((
addr2
)->
addr
 & \

191 (
mask
)->
addr
))

	)

192 
	#ù_addr_cmp
(
addr1
, 
addr2
Ë(◊ddr1)->
addr
 =◊ddr2)->addr)

	)

194 
	#ù_addr_ißny
(
addr1
Ë(◊ddr1Ë=
NULL
 || (addr1)->
addr
 =
IPADDR_ANY
)

	)

196 
	#ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
Ë
	`ù4_addr_isbrﬂdˇ°
((ùaddr)->
addr
, (√tif))

	)

197 
u8_t
 
ù4_addr_isbrﬂdˇ°
(
u32_t
 
addr
, c⁄° 
√tif
 *netif);

199 
	#ù_addr_√tmask_vÆid
(
√tmask
Ë
	`ù4_addr_√tmask_vÆid
(“ëmask)->
addr
)

	)

200 
u8_t
 
ù4_addr_√tmask_vÆid
(
u32_t
 
√tmask
);

202 
	#ù_addr_ismu…iˇ°
(
addr1
Ë((◊ddr1)->
addr
 & 
	`PP_HTONL
(0xf0000000UL)Ë=PP_HTONL(0xe0000000UL))

	)

204 
	#ù_addr_i¶ökloˇl
(
addr1
Ë((◊ddr1)->
addr
 & 
	`PP_HTONL
(0xffff0000UL)Ë=PP_HTONL(0xa9„0000UL))

	)

206 
	#ù_addr_debug_¥öt
(
debug
, 
ùaddr
) \

207 
	`LWIP_DEBUGF
(
debug
, ("%"
U16_F
".%"U16_F".%"U16_F".%"U16_F, \

208 
ùaddr
 !
NULL
 ? 
	`ù4_addr1_16
(ipaddr) : 0, \

209 
ùaddr
 !
NULL
 ? 
	`ù4_addr2_16
(ipaddr) : 0, \

210 
ùaddr
 !
NULL
 ? 
	`ù4_addr3_16
(ipaddr) : 0, \

211 
ùaddr
 !
NULL
 ? 
	`ù4_addr4_16
(ùaddrË: 0))

	)

214 
	#ù4_addr1
(
ùaddr
Ë(((
u8_t
*)(ùaddr))[0])

	)

215 
	#ù4_addr2
(
ùaddr
Ë(((
u8_t
*)(ùaddr))[1])

	)

216 
	#ù4_addr3
(
ùaddr
Ë(((
u8_t
*)(ùaddr))[2])

	)

217 
	#ù4_addr4
(
ùaddr
Ë(((
u8_t
*)(ùaddr))[3])

	)

220 
	#ù4_addr1_16
(
ùaddr
Ë((
u16_t
)
	`ù4_addr1
(ùaddr))

	)

221 
	#ù4_addr2_16
(
ùaddr
Ë((
u16_t
)
	`ù4_addr2
(ùaddr))

	)

222 
	#ù4_addr3_16
(
ùaddr
Ë((
u16_t
)
	`ù4_addr3
(ùaddr))

	)

223 
	#ù4_addr4_16
(
ùaddr
Ë((
u16_t
)
	`ù4_addr4
(ùaddr))

	)

226 
	#ù_¡ﬂ
(
ùaddr
Ë
	`ùaddr_¡ﬂ
(ùaddr)

	)

228 
u32_t
 
ùaddr_addr
(c⁄° *
˝
);

229 
ùaddr_©⁄
(c⁄° *
˝
, 
ù_addr_t
 *
addr
);

231 *
ùaddr_¡ﬂ
(c⁄° 
ù_addr_t
 *
addr
);

232 *
ùaddr_¡ﬂ_r
(c⁄° 
ù_addr_t
 *
addr
, *
buf
, 
buÊí
);

234 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/ipv4/lwip/ip_frag.h

33 #i‚de‡
__LWIP_IP_FRAG_H__


34 
	#__LWIP_IP_FRAG_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/îr.h
"

38 
	~"lwù/pbuf.h
"

39 
	~"lwù/√tif.h
"

40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/ù.h
"

43 #ifde‡
__˝lu•lus


47 #i‡
IP_REASSEMBLY


49 
	#IP_TMR_INTERVAL
 1000

	)

54 
	sù_ªassd©a
 {

55 
ù_ªassd©a
 *
√xt
;

56 
pbuf
 *
p
;

57 
ù_hdr
 
ùhdr
;

58 
u16_t
 
d©agøm_Àn
;

59 
u8_t
 
Êags
;

60 
u8_t
 
timî
;

63 
ù_ªass_öô
();

64 
ù_ªass_tmr
();

65 
pbuf
 * 
ù_ªass
(pbu‡*
p
);

68 #i‡
IP_FRAG


69 #i‡!
IP_FRAG_USES_STATIC_BUF
 && !
LWIP_NETIF_TX_SINGLE_PBUF


73 
	spbuf_cu°om_ªf
 {

75 
pbuf_cu°om
 
	mpc
;

77 
pbuf
 *
	m‹igöÆ
;

81 
îr_t
 
ù_‰ag
(
pbuf
 *
p
, 
√tif
 *√tif, 
ù_addr_t
 *
de°
);

84 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/api.h

32 #i‚de‡
__LWIP_API_H__


33 
	#__LWIP_API_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_NETCONN


39 
	~<°ddef.h
>

41 
	~"lwù/√tbuf.h
"

42 
	~"lwù/sys.h
"

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/îr.h
"

46 #ifde‡
__˝lu•lus


55 
	#NETCONN_NOFLAG
 0x00

	)

56 
	#NETCONN_NOCOPY
 0x00

	)

57 
	#NETCONN_COPY
 0x01

	)

58 
	#NETCONN_MORE
 0x02

	)

59 
	#NETCONN_DONTBLOCK
 0x04

	)

65 
	#NETCONN_FLAG_WRITE_DELAYED
 0x01

	)

67 
	#NETCONN_FLAG_NON_BLOCKING
 0x02

	)

69 
	#NETCONN_FLAG_IN_NONBLOCKING_CONNECT
 0x04

	)

72 
	#NETCONN_FLAG_NO_AUTO_RECVED
 0x08

	)

75 
	#NETCONN_FLAG_CHECK_WRITESPACE
 0x10

	)

79 
	#NETCONNTYPE_GROUP
(
t
Ë—&0xF0)

	)

80 
	#NETCONNTYPE_DATAGRAM
(
t
Ë—&0xE0)

	)

83 
	e√tc⁄n_ty≥
 {

84 
NETCONN_INVALID
 = 0,

86 
NETCONN_TCP
 = 0x10,

88 
NETCONN_UDP
 = 0x20,

89 
NETCONN_UDPLITE
 = 0x21,

90 
NETCONN_UDPNOCHKSUM
= 0x22,

92 
NETCONN_RAW
 = 0x40

97 
	e√tc⁄n_°©e
 {

98 
NETCONN_NONE
,

99 
NETCONN_WRITE
,

100 
NETCONN_LISTEN
,

101 
NETCONN_CONNECT
,

102 
NETCONN_CLOSE


106 
	e√tc⁄n_evt
 {

107 
NETCONN_EVT_RCVPLUS
,

108 
NETCONN_EVT_RCVMINUS
,

109 
NETCONN_EVT_SENDPLUS
,

110 
NETCONN_EVT_SENDMINUS
,

111 
NETCONN_EVT_ERROR


114 #i‡
LWIP_IGMP


116 
	e√tc⁄n_igmp
 {

117 
NETCONN_JOIN
,

118 
NETCONN_LEAVE


123 
ù_pcb
;

124 
t˝_pcb
;

125 
udp_pcb
;

126 
øw_pcb
;

127 
√tc⁄n
;

128 
≠i_msg_msg
;

131 (* 
√tc⁄n_ˇŒback
)(
	t√tc⁄n
 *, 
	t√tc⁄n_evt
, 
	tu16_t
 
	tÀn
);

134 
	s√tc⁄n
 {

136 
√tc⁄n_ty≥
 
ty≥
;

138 
√tc⁄n_°©e
 
°©e
;

141 
ù_pcb
 *
ù
;

142 
t˝_pcb
 *
t˝
;

143 
udp_pcb
 *
udp
;

144 
øw_pcb
 *
øw
;

145 } 
pcb
;

147 
îr_t
 
œ°_îr
;

149 
±hªad_muãx_t
 
ªad_muãx
;

150 
±hªad_c⁄d_t
 
ªad_c⁄d
;

153 
sys_£m_t
 
›_com∂ëed
;

154 
lwù_mbox_t
 
ªcvbox
;

157 
sys_mbox_t
 
ªcvmbox
;

160 
sys_mbox_t
 
ac˚±mbox
;

161 
sockë
;

164 
ªcv_timeout
;

167 
ªcv_bufsize
;

171 
s16_t
 
ªcv_avaû
;

173 
u8_t
 
Êags
;

176 
size_t
 
wrôe_off£t
;

180 
≠i_msg_msg
 *
cuºít_msg
;

182 
√tc⁄n_ˇŒback
 
ˇŒback
;

183 
t˝ù_thªad
 *
thªad
;

184 
uöt32_t
 
u£_ïﬁl
;

185 
uöt32_t
 
ïﬁl_id
;

186 
uöt32_t
 
ïﬁl
;

187 
uöt32_t
 
evíts
;

188 
lwù_ïﬁl
 *
ïﬁl_±r
;

192 
	#API_EVENT
(
c
,
e
,
l
Ëi‡(c->
ˇŒback
) { \

193 (*
c
->
ˇŒback
)(c, 
e
, 
l
); \

194 }

	)

197 
	#NETCONN_SET_SAFE_ERR
(
c⁄n
, 
îr
) do { \

198 
	`SYS_ARCH_DECL_PROTECT
(
Àv
); \

199 
	`SYS_ARCH_PROTECT
(
Àv
); \

200 i‡(!
	`ERR_IS_FATAL
((
c⁄n
)->
œ°_îr
)) { \

201 (
c⁄n
)->
œ°_îr
 = 
îr
; \

203 
	`SYS_ARCH_UNPROTECT
(
Àv
); \

204 } 0);

	)

207 
	#√tc⁄n_√w
(
t
Ë
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
—, 0, 
NULL
)

	)

208 
	#√tc⁄n_√w_wôh_ˇŒback
(
t
, 
c
Ë
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
—, 0, c)

	)

210 
√tc⁄n
 *
√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
√tc⁄n_ty≥
 
t
, 
u8_t
 
¥Ÿo
,

211 
√tc⁄n_ˇŒback
 
ˇŒback
);

212 
îr_t
 
√tc⁄n_dñëe
(
√tc⁄n
 *
c⁄n
);

214 
	#√tc⁄n_ty≥
(
c⁄n
Ë(c⁄n->
ty≥
)

	)

216 
îr_t
 
√tc⁄n_gëaddr
(
√tc⁄n
 *
c⁄n
, 
ù_addr_t
 *
addr
,

217 
u16_t
 *
p‹t
, 
u8_t
 
loˇl
);

218 
	#√tc⁄n_≥î
(
c
,
i
,
p
Ë
	`√tc⁄n_gëaddr
(c,i,p,0)

	)

219 
	#√tc⁄n_addr
(
c
,
i
,
p
Ë
	`√tc⁄n_gëaddr
(c,i,p,1)

	)

221 
îr_t
 
√tc⁄n_böd
(
√tc⁄n
 *
c⁄n
, 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
);

222 
îr_t
 
√tc⁄n_c⁄√˘
(
√tc⁄n
 *
c⁄n
, 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
);

223 
îr_t
 
√tc⁄n_disc⁄√˘
 (
√tc⁄n
 *
c⁄n
);

224 
îr_t
 
√tc⁄n_li°í_wôh_backlog
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
backlog
);

225 
	#√tc⁄n_li°í
(
c⁄n
Ë
	`√tc⁄n_li°í_wôh_backlog
(c⁄n, 
TCP_DEFAULT_LISTEN_BACKLOG
)

	)

226 
îr_t
 
√tc⁄n_ac˚±
(
√tc⁄n
 *
c⁄n
, √tc⁄¿**
√w_c⁄n
);

227 
îr_t
 
√tc⁄n_ªcv
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 **
√w_buf
);

228 
îr_t
 
√tc⁄n_ªcv_t˝_pbuf
(
√tc⁄n
 *
c⁄n
, 
pbuf
 **
√w_buf
);

229 
√tc⁄n_ªcved
(
√tc⁄n
 *
c⁄n
, 
u32_t
 
Àngth
);

230 
îr_t
 
√tc⁄n_£ndto
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 *
buf
,

231 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
);

232 
îr_t
 
√tc⁄n_£nd
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 *
buf
);

233 
îr_t
 
√tc⁄n_wrôe
(
√tc⁄n
 *
c⁄n
, c⁄° *
d©≠å
, 
size_t
 
size
,

234 
u8_t
 
≠iÊags
);

235 
îr_t
 
√tc⁄n_˛o£
(
√tc⁄n
 *
c⁄n
);

236 
îr_t
 
√tc⁄n_shutdown
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
shut_rx
, u8_à
shut_tx
);

238 #i‡
LWIP_IGMP


239 
îr_t
 
√tc⁄n_joö_Àave_group
(
√tc⁄n
 *
c⁄n
, 
ù_addr_t
 *
mu…üddr
,

240 
ù_addr_t
 *
√tif_addr
, 
√tc⁄n_igmp
 
joö_‹_Àave
);

242 #i‡
LWIP_DNS


243 
îr_t
 
√tc⁄n_gëho°by«me
(c⁄° *
«me
, 
ù_addr_t
 *
addr
);

246 
	#√tc⁄n_îr
(
c⁄n
Ë((c⁄n)->
œ°_îr
)

	)

247 
	#√tc⁄n_ªcv_bufsize
(
c⁄n
Ë((c⁄n)->
ªcv_bufsize
)

	)

250 
	#√tc⁄n_£t_n⁄blockög
(
c⁄n
, 
vÆ
) do { if(val) { \

251 (
c⁄n
)->
Êags
 |
NETCONN_FLAG_NON_BLOCKING
; \

253 (
c⁄n
)->
Êags
 &~ 
NETCONN_FLAG_NON_BLOCKING
; }} 0)

	)

255 
	#√tc⁄n_is_n⁄blockög
(
c⁄n
Ë(((c⁄n)->
Êags
 & 
NETCONN_FLAG_NON_BLOCKING
Ë!0)

	)

258 
	#√tc⁄n_£t_nﬂut‹ecved
(
c⁄n
, 
vÆ
) do { if(val) { \

259 (
c⁄n
)->
Êags
 |
NETCONN_FLAG_NO_AUTO_RECVED
; \

261 (
c⁄n
)->
Êags
 &~ 
NETCONN_FLAG_NO_AUTO_RECVED
; }} 0)

	)

263 
	#√tc⁄n_gë_nﬂut‹ecved
(
c⁄n
Ë(((c⁄n)->
Êags
 & 
NETCONN_FLAG_NO_AUTO_RECVED
Ë!0)

	)

265 #i‡
LWIP_SO_RCVTIMEO


267 
	#√tc⁄n_£t_ªcvtimeout
(
c⁄n
, 
timeout
Ë((c⁄n)->
ªcv_timeout
 = (timeout))

	)

269 
	#√tc⁄n_gë_ªcvtimeout
(
c⁄n
Ë((c⁄n)->
ªcv_timeout
)

	)

271 #i‡
LWIP_SO_RCVBUF


273 
	#√tc⁄n_£t_ªcvbufsize
(
c⁄n
, 
ªcvbufsize
Ë((c⁄n)->
ªcv_bufsize
 = (ªcvbufsize))

	)

275 
	#√tc⁄n_gë_ªcvbufsize
(
c⁄n
Ë((c⁄n)->
ªcv_bufsize
)

	)

278 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/api_msg.h

32 #i‚de‡
__LWIP_API_MSG_H__


33 
	#__LWIP_API_MSG_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_NETCONN


39 
	~<°ddef.h
>

41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/îr.h
"

43 
	~"lwù/sys.h
"

44 
	~"lwù/igmp.h
"

45 
	~"lwù/≠i.h
"

47 #ifde‡
__˝lu•lus


52 
	#NETCONN_SHUT_RD
 1

	)

53 
	#NETCONN_SHUT_WR
 2

	)

54 
	#NETCONN_SHUT_RDWR
 (
NETCONN_SHUT_RD
 | 
NETCONN_SHUT_WR
)

	)

62 
	s≠i_msg_msg
 {

65 
√tc⁄n
 *
c⁄n
;

67 
îr_t
 
îr
;

71 
√tbuf
 *
b
;

74 
u8_t
 
¥Ÿo
;

75 } 
n
;

78 
ù_addr_t
 *
ùaddr
;

79 
u16_t
 
p‹t
;

80 } 
bc
;

83 
ù_addr_t
 *
ùaddr
;

84 
u16_t
 *
p‹t
;

85 
u8_t
 
loˇl
;

86 } 
ad
;

89 c⁄° *
d©≠å
;

90 
size_t
 
Àn
;

91 
u8_t
 
≠iÊags
;

92 } 
w
;

95 
u32_t
 
Àn
;

96 } 
r
;

99 
u8_t
 
shut
;

100 } 
sd
;

101 #i‡
LWIP_IGMP


104 
ù_addr_t
 *
mu…üddr
;

105 
ù_addr_t
 *
√tif_addr
;

106 
√tc⁄n_igmp
 
joö_‹_Àave
;

107 } 
jl
;

109 #i‡
TCP_LISTEN_BACKLOG


111 
u8_t
 
backlog
;

112 } 
lb
;

114 } 
msg
;

120 
	s≠i_msg
 {

122 (* 
fun˘i⁄
)(
≠i_msg_msg
 *
msg
);

124 
≠i_msg_msg
 
msg
;

127 #i‡
LWIP_DNS


132 
	sdns_≠i_msg
 {

134 c⁄° *
«me
;

136 
ù_addr_t
 *
addr
;

139 
sys_£m_t
 *
£m
;

141 
îr_t
 *
îr
;

145 
do_√wc⁄n
 ( 
≠i_msg_msg
 *
msg
);

146 
do_dñc⁄n
 ( 
≠i_msg_msg
 *
msg
);

147 
do_böd
 ( 
≠i_msg_msg
 *
msg
);

148 
do_c⁄√˘
 ( 
≠i_msg_msg
 *
msg
);

149 
do_disc⁄√˘
 ( 
≠i_msg_msg
 *
msg
);

150 
do_li°í
 ( 
≠i_msg_msg
 *
msg
);

151 
do_£nd
 ( 
≠i_msg_msg
 *
msg
);

152 
do_ªcv
 ( 
≠i_msg_msg
 *
msg
);

153 
do_wrôe
 ( 
≠i_msg_msg
 *
msg
);

154 
do_gëaddr
 ( 
≠i_msg_msg
 *
msg
);

155 
do_˛o£
 ( 
≠i_msg_msg
 *
msg
);

156 
do_shutdown
 ( 
≠i_msg_msg
 *
msg
);

157 #i‡
LWIP_IGMP


158 
do_joö_Àave_group
–
≠i_msg_msg
 *
msg
);

161 #i‡
LWIP_DNS


162 
do_gëho°by«me
(*
¨g
);

165 
√tc⁄n
* 
√tc⁄n_Æloc
(
√tc⁄n_ty≥
 
t
, 
√tc⁄n_ˇŒback
 
ˇŒback
);

166 
√tc⁄n_‰ì
(
√tc⁄n
 *
c⁄n
);

168 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/arch.h

32 #i‚de‡
__LWIP_ARCH_H__


33 
	#__LWIP_ARCH_H__


	)

35 #i‚de‡
LITTLE_ENDIAN


36 
	#LITTLE_ENDIAN
 1234

	)

39 #i‚de‡
BIG_ENDIAN


40 
	#BIG_ENDIAN
 4321

	)

43 
	~"¨ch/cc.h
"

46 #i‚de‡
SZT_F


47 
	#SZT_F
 
U32_F


	)

51 #i‚de‡
X8_F


52 
	#X8_F
 "02x"

	)

55 #ifde‡
__˝lu•lus


59 #i‚de‡
PACK_STRUCT_BEGIN


60 
	#PACK_STRUCT_BEGIN


	)

63 #i‚de‡
PACK_STRUCT_END


64 
	#PACK_STRUCT_END


	)

67 #i‚de‡
PACK_STRUCT_FIELD


68 
	#PACK_STRUCT_FIELD
(
x
Ë
	)
x

72 #i‚de‡
LWIP_UNUSED_ARG


73 
	#LWIP_UNUSED_ARG
(
x
Ë()
	)
x

77 #ifde‡
LWIP_PROVIDE_ERRNO


79 
	#EPERM
 1

	)

80 
	#ENOENT
 2

	)

81 
	#ESRCH
 3

	)

82 
	#EINTR
 4

	)

83 
	#EIO
 5

	)

84 
	#ENXIO
 6

	)

85 
	#E2BIG
 7

	)

86 
	#ENOEXEC
 8

	)

87 
	#EBADF
 9

	)

88 
	#ECHILD
 10

	)

89 
	#EAGAIN
 11

	)

90 
	#ENOMEM
 12

	)

91 
	#EACCES
 13

	)

92 
	#EFAULT
 14

	)

93 
	#ENOTBLK
 15

	)

94 
	#EBUSY
 16

	)

95 
	#EEXIST
 17

	)

96 
	#EXDEV
 18

	)

97 
	#ENODEV
 19

	)

98 
	#ENOTDIR
 20

	)

99 
	#EISDIR
 21

	)

100 
	#EINVAL
 22

	)

101 
	#ENFILE
 23

	)

102 
	#EMFILE
 24

	)

103 
	#ENOTTY
 25

	)

104 
	#ETXTBSY
 26

	)

105 
	#EFBIG
 27

	)

106 
	#ENOSPC
 28

	)

107 
	#ESPIPE
 29

	)

108 
	#EROFS
 30

	)

109 
	#EMLINK
 31

	)

110 
	#EPIPE
 32

	)

111 
	#EDOM
 33

	)

112 
	#ERANGE
 34

	)

113 
	#EDEADLK
 35

	)

114 
	#ENAMETOOLONG
 36

	)

115 
	#ENOLCK
 37

	)

116 
	#ENOSYS
 38

	)

117 
	#ENOTEMPTY
 39

	)

118 
	#ELOOP
 40

	)

119 
	#EWOULDBLOCK
 
EAGAIN


	)

120 
	#ENOMSG
 42

	)

121 
	#EIDRM
 43

	)

122 
	#ECHRNG
 44

	)

123 
	#EL2NSYNC
 45

	)

124 
	#EL3HLT
 46

	)

125 
	#EL3RST
 47

	)

126 
	#ELNRNG
 48

	)

127 
	#EUNATCH
 49

	)

128 
	#ENOCSI
 50

	)

129 
	#EL2HLT
 51

	)

130 
	#EBADE
 52

	)

131 
	#EBADR
 53

	)

132 
	#EXFULL
 54

	)

133 
	#ENOANO
 55

	)

134 
	#EBADRQC
 56

	)

135 
	#EBADSLT
 57

	)

137 
	#EDEADLOCK
 
EDEADLK


	)

139 
	#EBFONT
 59

	)

140 
	#ENOSTR
 60

	)

141 
	#ENODATA
 61

	)

142 
	#ETIME
 62

	)

143 
	#ENOSR
 63

	)

144 
	#ENONET
 64

	)

145 
	#ENOPKG
 65

	)

146 
	#EREMOTE
 66

	)

147 
	#ENOLINK
 67

	)

148 
	#EADV
 68

	)

149 
	#ESRMNT
 69

	)

150 
	#ECOMM
 70

	)

151 
	#EPROTO
 71

	)

152 
	#EMULTIHOP
 72

	)

153 
	#EDOTDOT
 73

	)

154 
	#EBADMSG
 74

	)

155 
	#EOVERFLOW
 75

	)

156 
	#ENOTUNIQ
 76

	)

157 
	#EBADFD
 77

	)

158 
	#EREMCHG
 78

	)

159 
	#ELIBACC
 79

	)

160 
	#ELIBBAD
 80

	)

161 
	#ELIBSCN
 81

	)

162 
	#ELIBMAX
 82

	)

163 
	#ELIBEXEC
 83

	)

164 
	#EILSEQ
 84

	)

165 
	#ERESTART
 85

	)

166 
	#ESTRPIPE
 86

	)

167 
	#EUSERS
 87

	)

168 
	#ENOTSOCK
 88

	)

169 
	#EDESTADDRREQ
 89

	)

170 
	#EMSGSIZE
 90

	)

171 
	#EPROTOTYPE
 91

	)

172 
	#ENOPROTOOPT
 92

	)

173 
	#EPROTONOSUPPORT
 93

	)

174 
	#ESOCKTNOSUPPORT
 94

	)

175 
	#EOPNOTSUPP
 95

	)

176 
	#EPFNOSUPPORT
 96

	)

177 
	#EAFNOSUPPORT
 97

	)

178 
	#EADDRINUSE
 98

	)

179 
	#EADDRNOTAVAIL
 99

	)

180 
	#ENETDOWN
 100

	)

181 
	#ENETUNREACH
 101

	)

182 
	#ENETRESET
 102

	)

183 
	#ECONNABORTED
 103

	)

184 
	#ECONNRESET
 104

	)

185 
	#ENOBUFS
 105

	)

186 
	#EISCONN
 106

	)

187 
	#ENOTCONN
 107

	)

188 
	#ESHUTDOWN
 108

	)

189 
	#ETOOMANYREFS
 109

	)

190 
	#ETIMEDOUT
 110

	)

191 
	#ECONNREFUSED
 111

	)

192 
	#EHOSTDOWN
 112

	)

193 
	#EHOSTUNREACH
 113

	)

194 
	#EALREADY
 114

	)

195 
	#EINPROGRESS
 115

	)

196 
	#ESTALE
 116

	)

197 
	#EUCLEAN
 117

	)

198 
	#ENOTNAM
 118

	)

199 
	#ENAVAIL
 119

	)

200 
	#EISNAM
 120

	)

201 
	#EREMOTEIO
 121

	)

202 
	#EDQUOT
 122

	)

204 
	#ENOMEDIUM
 123

	)

205 
	#EMEDIUMTYPE
 124

	)

208 
	#ENSROK
 0

	)

209 
	#ENSRNODATA
 160

	)

210 
	#ENSRFORMERR
 161

	)

211 
	#ENSRSERVFAIL
 162

	)

212 
	#ENSRNOTFOUND
 163

	)

213 
	#ENSRNOTIMP
 164

	)

214 
	#ENSRREFUSED
 165

	)

215 
	#ENSRBADQUERY
 166

	)

216 
	#ENSRBADNAME
 167

	)

217 
	#ENSRBADFAMILY
 168

	)

218 
	#ENSRBADRESP
 169

	)

219 
	#ENSRCONNREFUSED
 170

	)

220 
	#ENSRTIMEOUT
 171

	)

221 
	#ENSROF
 172

	)

222 
	#ENSRFILE
 173

	)

223 
	#ENSRNOMEM
 174

	)

224 
	#ENSRDESTRUCTION
 175

	)

225 
	#ENSRQUERYDOMAINTOOLONG
 176

	)

226 
	#ENSRCNAMELOOP
 177

	)

228 #i‚de‡
î∫o


229 
î∫o
;

234 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/debug.h

32 #i‚de‡
__LWIP_DEBUG_H__


33 
	#__LWIP_DEBUG_H__


	)

35 
	~"lwù/¨ch.h
"

43 
	#LWIP_DBG_LEVEL_ALL
 0x00

	)

44 
	#LWIP_DBG_LEVEL_OFF
 
LWIP_DBG_LEVEL_ALL


	)

45 
	#LWIP_DBG_LEVEL_WARNING
 0x01

	)

46 
	#LWIP_DBG_LEVEL_SERIOUS
 0x02

	)

47 
	#LWIP_DBG_LEVEL_SEVERE
 0x03

	)

48 
	#LWIP_DBG_MASK_LEVEL
 0x03

	)

51 
	#LWIP_DBG_ON
 0x80U

	)

53 
	#LWIP_DBG_OFF
 0x00U

	)

56 
	#LWIP_DBG_TRACE
 0x40U

	)

58 
	#LWIP_DBG_STATE
 0x20U

	)

60 
	#LWIP_DBG_FRESH
 0x10U

	)

62 
	#LWIP_DBG_HALT
 0x08U

	)

64 #i‚de‡
LWIP_NOASSERT


65 
	#LWIP_ASSERT
(
mesßge
, 
as£πi⁄
) do { if(!(assertion)) \

66 
	`LWIP_PLATFORM_ASSERT
(
mesßge
); } 0)

	)

68 
	#LWIP_ASSERT
(
mesßge
, 
as£πi⁄
)

	)

72 #i‚de‡
LWIP_ERROR


73 
	#LWIP_ERROR
(
mesßge
, 
ex¥essi⁄
, 
h™dÀr
) do { if (!(expression)) { \

74 
	`LWIP_PLATFORM_ASSERT
(
mesßge
); 
h™dÀr
;}} 0)

	)

77 #ifde‡
LWIP_DEBUG


81 
	#LWIP_DEBUGF
(
debug
, 
mesßge
) do { \

83 ((
debug
Ë& 
LWIP_DBG_ON
) && \

84 ((
debug
Ë& 
LWIP_DBG_TYPES_ON
) && \

85 ((
s16_t
)((
debug
Ë& 
LWIP_DBG_MASK_LEVEL
Ë>
LWIP_DBG_MIN_LEVEL
)) { \

86 
	`LWIP_PLATFORM_DIAG
(
mesßge
); \

87 i‡((
debug
Ë& 
LWIP_DBG_HALT
) { \

91 } 0)

	)

94 
	#LWIP_DEBUGF
(
debug
, 
mesßge
)

	)

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/def.h

32 #i‚de‡
__LWIP_DEF_H__


33 
	#__LWIP_DEF_H__


	)

36 
	~"lwù/¨ch.h
"

37 
	~"lwù/›t.h
"

39 #ifde‡
__˝lu•lus


43 
	#LWIP_MAX
(
x
 , 
y
Ë(((xË> (y)Ë? (xË: (y))

	)

44 
	#LWIP_MIN
(
x
 , 
y
Ë(((xË< (y)Ë? (xË: (y))

	)

46 #i‚de‡
NULL


47 
	#NULL
 ((*)0)

	)

52 
	#LWIP_U32_DIFF
(
a
, 
b
Ë((◊Ë>(b)Ë? (◊Ë- (b)Ë: ((◊Ë+ ((bË^ 0xFFFFFFFFË+ 1)))

	)

55 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


56 
	#LWIP_MAKE_U16
(
a
, 
b
Ë(◊ << 8Ë| b)

	)

58 
	#LWIP_MAKE_U16
(
a
, 
b
Ë((b << 8Ë|á)

	)

61 #i‚de‡
LWIP_PLATFORM_BYTESWAP


62 
	#LWIP_PLATFORM_BYTESWAP
 0

	)

65 #i‚de‡
LWIP_PREFIX_BYTEORDER_FUNCS


68 #ifde‡
ht⁄s


69 #unde‡
ht⁄s


71 #ifde‡
ht⁄l


72 #unde‡
ht⁄l


74 #ifde‡
¡ohs


75 #unde‡
¡ohs


77 #ifde‡
¡ohl


78 #unde‡
¡ohl


81 
	#ht⁄s
(
x
Ë
	`lwù_ht⁄s
(x)

	)

82 
	#¡ohs
(
x
Ë
	`lwù_¡ohs
(x)

	)

83 
	#ht⁄l
(
x
Ë
	`lwù_ht⁄l
(x)

	)

84 
	#¡ohl
(
x
Ë
	`lwù_¡ohl
(x)

	)

87 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


88 
	#lwù_ht⁄s
(
x
Ë(x)

	)

89 
	#lwù_¡ohs
(
x
Ë(x)

	)

90 
	#lwù_ht⁄l
(
x
Ë(x)

	)

91 
	#lwù_¡ohl
(
x
Ë(x)

	)

92 
	#PP_HTONS
(
x
Ë(x)

	)

93 
	#PP_NTOHS
(
x
Ë(x)

	)

94 
	#PP_HTONL
(
x
Ë(x)

	)

95 
	#PP_NTOHL
(
x
Ë(x)

	)

97 #i‡
LWIP_PLATFORM_BYTESWAP


98 
	#lwù_ht⁄s
(
x
Ë
	`LWIP_PLATFORM_HTONS
(x)

	)

99 
	#lwù_¡ohs
(
x
Ë
	`LWIP_PLATFORM_HTONS
(x)

	)

100 
	#lwù_ht⁄l
(
x
Ë
	`LWIP_PLATFORM_HTONL
(x)

	)

101 
	#lwù_¡ohl
(
x
Ë
	`LWIP_PLATFORM_HTONL
(x)

	)

103 
u16_t
 
lwù_ht⁄s
(u16_à
x
);

104 
u16_t
 
lwù_¡ohs
(u16_à
x
);

105 
u32_t
 
lwù_ht⁄l
(u32_à
x
);

106 
u32_t
 
lwù_¡ohl
(u32_à
x
);

112 
	#PP_HTONS
(
x
Ë((((xË& 0xffË<< 8Ë| (((xË& 0xff00Ë>> 8))

	)

113 
	#PP_NTOHS
(
x
Ë
	`PP_HTONS
(x)

	)

114 
	#PP_HTONL
(
x
) ((((x) & 0xff) << 24) | \

115 (((
x
) & 0xff00) << 8) | \

116 (((
x
) & 0xff0000UL) >> 8) | \

117 (((
x
Ë& 0xff000000ULË>> 24))

	)

118 
	#PP_NTOHL
(
x
Ë
	`PP_HTONL
(x)

	)

122 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/epoll.h

1 #i‚de‡
__LWIP_EPOLL_H__


2 
	#__LWIP_EPOLL_H__


	)

4 
	~"lwù/›t.h
"

6 #i‡
LWIP_NETCONN


8 
	~<°ddef.h
>

10 
	~"lwù/√tbuf.h
"

11 
	~"lwù/sys.h
"

12 
	~"lwù/ù_addr.h
"

13 
	~"lwù/îr.h
"

14 
	~"lwù/t˝ù.h
"

15 
	~"lwù/t˝ù_thªad.h
"

17 
	elwù_ïﬁl_›


19 
	mEPOLL_CTL_ADD
 = 1,

20 
	mEPOLL_CTL_DEL
 = 2,

21 
	mEPOLL_CTL_MOD
 = 3,

24 
	elwù_evít_ty≥


26 
	mEPOLLNONE
 = 0x000,

27 
	mEPOLLIN
 = 0x001,

28 
	mEPOLLPRI
 = 0x002,

29 
	mEPOLLOUT
 = 0x004,

30 
	mEPOLLRDNORM
 = 0x040,

31 
	mEPOLLRDBAND
 = 0x080,

32 
	mEPOLLWRNORM
 = 0x100,

33 
	mEPOLLWRBAND
 = 0x200,

34 
	mEPOLLMSG
 = 0x400,

35 
	mEPOLLERR
 = 0x008,

36 
	mEPOLLHUP
 = 0x010,

37 
	mEPOLLRDHUP
 = 0x2000,

38 
	mEPOLLONESHOT
 = (1 << 30),

39 
	mEPOLLET
 = (1 << 31)

42 
	ulwù_ïﬁl_d©a


44 *
	m±r
;

45 
	msockid
;

46 
uöt32_t
 
	mu32
;

47 
uöt64_t
 
	mu64
;

48 } 
	tlwù_ïﬁl_d©a_t
;

50 
	slwù_ïﬁl_evít


52 
uöt32_t
 
	mevíts
;

53 
lwù_ïﬁl_d©a_t
 
	md©a
;

58 
lwù_ïﬁl_˘l
(
sockid
, 
lwù_ïﬁl_evít
 *
evít
);

61 
lwù_ïﬁl_waô
(
ïid
, 
lwù_ïﬁl_evít
 *
evíts
);

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/err.h

32 #i‚de‡
__LWIP_ERR_H__


33 
	#__LWIP_ERR_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/¨ch.h
"

38 #ifde‡
__˝lu•lus


44 #ifde‡
LWIP_ERR_T


45 
LWIP_ERR_T
 
	tîr_t
;

47 
s8_t
 
	tîr_t
;

52 
	#ERR_OK
 0

	)

53 
	#ERR_MEM
 -1

	)

54 
	#ERR_BUF
 -2

	)

55 
	#ERR_TIMEOUT
 -3

	)

56 
	#ERR_RTE
 -4

	)

57 
	#ERR_INPROGRESS
 -5

	)

58 
	#ERR_VAL
 -6

	)

59 
	#ERR_WOULDBLOCK
 -7

	)

60 
	#ERR_USE
 -8

	)

61 
	#ERR_ISCONN
 -9

	)

63 
	#ERR_IS_FATAL
(
e
Ë(”Ë< 
ERR_ISCONN
)

	)

65 
	#ERR_ABRT
 -10

	)

66 
	#ERR_RST
 -11

	)

67 
	#ERR_CLSD
 -12

	)

68 
	#ERR_CONN
 -13

	)

70 
	#ERR_ARG
 -14

	)

72 
	#ERR_IF
 -15

	)

75 #ifde‡
LWIP_DEBUG


76 c⁄° *
lwù_°ªº
(
îr_t
 
îr
);

78 
	#lwù_°ªº
(
x
Ë""

	)

81 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/init.h

32 #i‚de‡
__LWIP_INIT_H__


33 
	#__LWIP_INIT_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


42 
	#LWIP_VERSION_MAJOR
 1U

	)

44 
	#LWIP_VERSION_MINOR
 4U

	)

46 
	#LWIP_VERSION_REVISION
 0U

	)

50 
	#LWIP_VERSION_RC
 255U

	)

53 
	#LWIP_RC_RELEASE
 255U

	)

55 
	#LWIP_RC_DEVELOPMENT
 0U

	)

57 
	#LWIP_VERSION_IS_RELEASE
 (
LWIP_VERSION_RC
 =
LWIP_RC_RELEASE
)

	)

58 
	#LWIP_VERSION_IS_DEVELOPMENT
 (
LWIP_VERSION_RC
 =
LWIP_RC_DEVELOPMENT
)

	)

59 
	#LWIP_VERSION_IS_RC
 ((
LWIP_VERSION_RC
 !
LWIP_RC_RELEASE
Ë&& (LWIP_VERSION_RC !
LWIP_RC_DEVELOPMENT
))

	)

62 
	#LWIP_VERSION
 (
LWIP_VERSION_MAJOR
 << 24 | 
LWIP_VERSION_MINOR
 << 16 | \

63 
LWIP_VERSION_REVISION
 << 8 | 
LWIP_VERSION_RC
)

	)

66 
lwù_öô
();

68 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/mem.h

32 #i‚de‡
__LWIP_MEM_H__


33 
	#__LWIP_MEM_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 #i‡
MEM_LIBC_MALLOC


43 
	~<°ddef.h
>

45 
size_t
 
	tmem_size_t
;

48 
	#mem_öô
()

	)

52 #i‚de‡
mem_‰ì


53 
	#mem_‰ì
 
‰ì


	)

55 #i‚de‡
mem_mÆloc


56 
	#mem_mÆloc
 
mÆloc


	)

58 #i‚de‡
mem_ˇŒoc


59 
	#mem_ˇŒoc
 
ˇŒoc


	)

63 #i‚de‡
mem_åim


64 
	#mem_åim
(
mem
, 
size
Ë(mem)

	)

71 #i‡
MEM_SIZE
 > 64000L

72 
u32_t
 
	tmem_size_t
;

73 
	#MEM_SIZE_F
 
U32_F


	)

75 
u16_t
 
	tmem_size_t
;

76 
	#MEM_SIZE_F
 
U16_F


	)

79 #i‡
MEM_USE_POOLS


81 
	#mem_öô
()

	)

84 
	#mem_åim
(
mem
, 
size
Ë(mem)

	)

87 
mem_öô
();

88 *
mem_åim
(*
mem
, 
mem_size_t
 
size
);

90 *
mem_mÆloc
(
mem_size_t
 
size
);

91 *
mem_ˇŒoc
(
mem_size_t
 
cou¡
, mem_size_à
size
);

92 
mem_‰ì
(*
mem
);

99 #i‚de‡
LWIP_MEM_ALIGN_SIZE


100 
	#LWIP_MEM_ALIGN_SIZE
(
size
Ë(((sizeË+ 
MEM_ALIGNMENT
 - 1Ë& ~(MEM_ALIGNMENT-1))

	)

107 #i‚de‡
LWIP_MEM_ALIGN_BUFFER


108 
	#LWIP_MEM_ALIGN_BUFFER
(
size
Ë(((sizeË+ 
MEM_ALIGNMENT
 - 1))

	)

114 #i‚de‡
LWIP_MEM_ALIGN


115 
	#LWIP_MEM_ALIGN
(
addr
Ë((*)(((
mem_±r_t
)◊ddrË+ 
MEM_ALIGNMENT
 - 1Ë& ~(mem_±r_t)(MEM_ALIGNMENT-1)))

	)

118 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/memp.h

33 #i‚de‡
__LWIP_MEMP_H__


34 
	#__LWIP_MEMP_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/t˝ù_thªad.h
"

39 #ifde‡
__˝lu•lus


45 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë
MEMP_
##«me,

	)

46 
	~"lwù/memp_°d.h
"

47 
MEMP_MAX


48 } 
	tmemp_t
;

50 #i‡
MEM_USE_POOLS


55 
MEMP_POOL_HELPER_FIRST
 = ((
u8_t
)

56 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
)

	)

57 
	#LWIP_MALLOC_MEMPOOL_START
 1

	)

58 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë* 
MEMP_POOL_
##sizê+ 0

	)

59 
	#LWIP_MALLOC_MEMPOOL_END


	)

60 
	~"lwù/memp_°d.h
"

64 
MEMP_POOL_HELPER_LAST
 = ((
u8_t
)

65 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
)

	)

66 
	#LWIP_MALLOC_MEMPOOL_START


	)

67 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë0 + 
MEMP_POOL_
##sizê*

	)

68 
	#LWIP_MALLOC_MEMPOOL_END
 1

	)

69 
	~"lwù/memp_°d.h
"

71 } 
	tmemp_poﬁ_hñ≥r_t
;

75 
	#MEMP_POOL_FIRST
 ((
memp_t
Ë
MEMP_POOL_HELPER_FIRST
)

	)

76 
	#MEMP_POOL_LAST
 ((
memp_t
Ë
MEMP_POOL_HELPER_LAST
)

	)

79 #i‡
MEMP_MEM_MALLOC
 || 
MEM_USE_POOLS


80 c⁄° 
u16_t
 
memp_sizes
[
MEMP_MAX
];

83 #i‡
MEMP_MEM_MALLOC


85 
	~"mem.h
"

87 
	#memp_öô
()

	)

88 
	#memp_mÆloc
(
ty≥
Ë
	`mem_mÆloc
(
memp_sizes
[ty≥])

	)

89 
	#memp_‰ì
(
ty≥
, 
mem
Ë
	`mem_‰ì
(mem)

	)

93 #i‡
MEM_USE_POOLS


95 
	smemp_mÆloc_hñ≥r


97 
memp_t
 
	gpoﬁƒ
;

101 
memp_öô
();

103 *
memp_mÆloc_t˝ù_msg
(
t˝ù_thªad
 *
thªad
);

104 *
memp_mÆloc_rx
(
t˝ù_thªad
 *
thªad
);

105 *
memp_mÆloc_tx
(
t˝ù_thªad
 *
thªad
);

107 #i‡
MEMP_OVERFLOW_CHECK


108 *
memp_mÆloc_‚
(
memp_t
 
ty≥
, c⁄° * 
fûe
, c⁄° 
löe
);

109 
	#memp_mÆloc
(
t
Ë
	`memp_mÆloc_‚
(—), 
__FILE__
, 
__LINE__
)

	)

111 *
memp_mÆloc
(
memp_t
 
ty≥
, 
t˝ù_thªad
 *
thªad
);

113 
memp_‰ì
(
memp_t
 
ty≥
, *
mem
, 
t˝ù_thªad
 *
thªad
);

117 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/memp_std.h

12 #i‚de‡
LWIP_MALLOC_MEMPOOL


15 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë
	`LWIP_MEMPOOL
(
POOL_
##size,Çum, (sizê+ (
memp_mÆloc_hñ≥r
)), "MALLOC_"#size)

	)

16 
	#LWIP_MALLOC_MEMPOOL_START


	)

17 
	#LWIP_MALLOC_MEMPOOL_END


	)

20 #i‚de‡
LWIP_PBUF_MEMPOOL


23 
	#LWIP_PBUF_MEMPOOL
(
«me
, 
num
, 
∑ylﬂd
, 
desc
Ë
	`LWIP_MEMPOOL
“ame,Çum, (
	`MEMP_ALIGN_SIZE
((
pbuf
)Ë+ MEMP_ALIGN_SIZE’aylﬂd)), desc)

	)

33 #i‡
LWIP_RAW


34 
LWIP_MEMPOOL
(
RAW_PCB
, 
MEMP_NUM_RAW_PCB
, (
øw_pcb
), "RAW_PCB")

37 #i‡
LWIP_UDP


38 
LWIP_MEMPOOL
(
UDP_PCB
, 
MEMP_NUM_UDP_PCB
, (
udp_pcb
), "UDP_PCB")

41 #i‡
LWIP_TCP


42 
LWIP_MEMPOOL
(
TCP_PCB
, 
MEMP_NUM_TCP_PCB
, (
t˝_pcb
), "TCP_PCB")

43 
LWIP_MEMPOOL
(
TCP_PCB_LISTEN
, 
MEMP_NUM_TCP_PCB_LISTEN
, (
t˝_pcb_li°í
), "TCP_PCB_LISTEN")

44 
LWIP_MEMPOOL
(
TCP_SEG
, 
MEMP_NUM_TCP_SEG
, (
t˝_£g
), "TCP_SEG")

47 #i‡
IP_REASSEMBLY


48 
LWIP_MEMPOOL
(
REASSDATA
, 
MEMP_NUM_REASSDATA
, (
ù_ªassd©a
), "REASSDATA")

50 #i‡
IP_FRAG
 && !
IP_FRAG_USES_STATIC_BUF
 && !
LWIP_NETIF_TX_SINGLE_PBUF


51 
LWIP_MEMPOOL
(
FRAG_PBUF
, 
MEMP_NUM_FRAG_PBUF
, (
pbuf_cu°om_ªf
),"FRAG_PBUF")

54 #i‡
LWIP_NETCONN


55 
LWIP_MEMPOOL
(
NETBUF
, 
MEMP_NUM_NETBUF
, (
√tbuf
), "NETBUF")

56 
LWIP_MEMPOOL
(
NETCONN
, 
MEMP_NUM_NETCONN
, (
√tc⁄n
), "NETCONN")

59 #i‡
NO_SYS
==0

60 
LWIP_MEMPOOL
(
TCPIP_MSG_API
, 
MEMP_NUM_TCPIP_MSG_API
, (
t˝ù_msg
), "TCPIP_MSG_API")

61 #i‡!
LWIP_TCPIP_CORE_LOCKING_INPUT


62 
LWIP_MEMPOOL
(
TCPIP_MSG_INPKT
,
MEMP_NUM_TCPIP_MSG_INPKT
, (
t˝ù_msg
), "TCPIP_MSG_INPKT")

66 #i‡
ARP_QUEUEING


67 
LWIP_MEMPOOL
(
ARP_QUEUE
, 
MEMP_NUM_ARP_QUEUE
, (
ëh¨p_q_íåy
), "ARP_QUEUE")

70 #i‡
LWIP_IGMP


71 
LWIP_MEMPOOL
(
IGMP_GROUP
, 
MEMP_NUM_IGMP_GROUP
, (
igmp_group
), "IGMP_GROUP")

74 #i‡(!
NO_SYS
 || (NO_SYS && !
NO_SYS_NO_TIMERS
))

75 
LWIP_MEMPOOL
(
SYS_TIMEOUT
, 
MEMP_NUM_SYS_TIMEOUT
, (
sys_timeo
), "SYS_TIMEOUT")

78 #i‡
LWIP_SNMP


79 
LWIP_MEMPOOL
(
SNMP_ROOTNODE
, 
MEMP_NUM_SNMP_ROOTNODE
, (
mib_li°_roŸnode
), "SNMP_ROOTNODE")

80 
LWIP_MEMPOOL
(
SNMP_NODE
, 
MEMP_NUM_SNMP_NODE
, (
mib_li°_node
), "SNMP_NODE")

81 
LWIP_MEMPOOL
(
SNMP_VARBIND
, 
MEMP_NUM_SNMP_VARBIND
, (
¢mp_v¨böd
), "SNMP_VARBIND")

82 
LWIP_MEMPOOL
(
SNMP_VALUE
, 
MEMP_NUM_SNMP_VALUE
, 
SNMP_MAX_VALUE_SIZE
, "SNMP_VALUE")

84 #i‡
LWIP_DNS
 && 
LWIP_SOCKET


85 
LWIP_MEMPOOL
(
NETDB
, 
MEMP_NUM_NETDB
, 
NETDB_ELEM_SIZE
, "NETDB")

87 #i‡
LWIP_DNS
 && 
DNS_LOCAL_HOSTLIST
 && 
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


88 
LWIP_MEMPOOL
(
LOCALHOSTLIST
, 
MEMP_NUM_LOCALHOSTLIST
, 
LOCALHOSTLIST_ELEM_SIZE
, "LOCALHOSTLIST")

90 #i‡
PPP_SUPPORT
 && 
PPPOE_SUPPORT


91 
LWIP_MEMPOOL
(
PPPOE_IF
, 
MEMP_NUM_PPPOE_INTERFACES
, (
µp€_so·c
), "PPPOE_IF")

102 
LWIP_PBUF_MEMPOOL
(
PBUF
, 
MEMP_NUM_PBUF
, 0, "PBUF_REF/ROM")

103 
LWIP_PBUF_MEMPOOL
(
PBUF_POOL
, 
PBUF_POOL_DUMMY_SIZE
, 
PBUF_POOL_BUFSIZE
, "PBUF_POOL")

110 #i‡
MEMP_USE_CUSTOM_POOLS


111 
	~"lwùpoﬁs.h
"

118 #unde‡
LWIP_MEMPOOL


119 #unde‡
LWIP_MALLOC_MEMPOOL


120 #unde‡
LWIP_MALLOC_MEMPOOL_START


121 #unde‡
LWIP_MALLOC_MEMPOOL_END


122 #unde‡
LWIP_PBUF_MEMPOOL


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/netbuf.h

32 #i‚de‡
__LWIP_NETBUF_H__


33 
	#__LWIP_NETBUF_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/pbuf.h
"

37 
	~"lwù/ù_addr.h
"

39 #ifde‡
__˝lu•lus


44 
	#NETBUF_FLAG_DESTADDR
 0x01

	)

46 
	#NETBUF_FLAG_CHKSUM
 0x02

	)

48 
	s√tbuf
 {

49 
pbuf
 *
p
, *
±r
;

50 
ù_addr_t
 
addr
;

51 
u16_t
 
p‹t
;

52 #i‡
LWIP_NETBUF_RECVINFO
 || 
LWIP_CHECKSUM_ON_COPY


53 #i‡
LWIP_CHECKSUM_ON_COPY


54 
u8_t
 
Êags
;

56 
u16_t
 
t›‹t_chksum
;

57 #i‡
LWIP_NETBUF_RECVINFO


58 
ù_addr_t
 
tﬂddr
;

64 
√tbuf
 * 
√tbuf_√w
 ();

65 
√tbuf_dñëe
 (
√tbuf
 *
buf
);

66 * 
√tbuf_Æloc
 (
√tbuf
 *
buf
, 
u16_t
 
size
);

67 
√tbuf_‰ì
 (
√tbuf
 *
buf
);

68 
îr_t
 
√tbuf_ªf
 (
√tbuf
 *
buf
,

69 c⁄° *
d©≠å
, 
u16_t
 
size
);

70 
√tbuf_chaö
 (
√tbuf
 *
hód
,

71 
√tbuf
 *
èû
);

73 
îr_t
 
√tbuf_d©a
 (
√tbuf
 *
buf
,

74 **
d©≠å
, 
u16_t
 *
Àn
);

75 
s8_t
 
√tbuf_√xt
 (
√tbuf
 *
buf
);

76 
√tbuf_fú°
 (
√tbuf
 *
buf
);

79 
	#√tbuf_c›y_∑πül
(
buf
, 
d©≠å
, 
Àn
, 
off£t
) \

80 
	`pbuf_c›y_∑πül
((
buf
)->
p
, (
d©≠å
), (
Àn
), (
off£t
))

	)

81 
	#√tbuf_c›y
(
buf
,
d©≠å
,
Àn
Ë
	`√tbuf_c›y_∑πül
(buf, d©≠å,Üí, 0)

	)

82 
	#√tbuf_èke
(
buf
, 
d©≠å
, 
Àn
Ë
	`pbuf_èke
((buf)->
p
, d©≠å,Üí)

	)

83 
	#√tbuf_Àn
(
buf
Ë((buf)->
p
->
tŸ_Àn
)

	)

84 
	#√tbuf_‰omaddr
(
buf
Ë(&((buf)->
addr
))

	)

85 
	#√tbuf_£t_‰omaddr
(
buf
, 
‰omaddr
Ë
	`ù_addr_£t
((&(buf)->
addr
), fromaddr)

	)

86 
	#√tbuf_‰omp‹t
(
buf
Ë((buf)->
p‹t
)

	)

87 #i‡
LWIP_NETBUF_RECVINFO


88 
	#√tbuf_de°addr
(
buf
Ë(&((buf)->
tﬂddr
))

	)

89 
	#√tbuf_£t_de°addr
(
buf
, 
de°addr
Ë
	`ù_addr_£t
((&(buf)->
addr
), de°addr)

	)

90 
	#√tbuf_de°p‹t
(
buf
Ë(((buf)->
Êags
 & 
NETBUF_FLAG_DESTADDR
Ë? (buf)->
t›‹t_chksum
 : 0)

	)

92 #i‡
LWIP_CHECKSUM_ON_COPY


93 
	#√tbuf_£t_chksum
(
buf
, 
chksum
Ëdÿ{ (buf)->
Êags
 = 
NETBUF_FLAG_CHKSUM
; \

94 (
buf
)->
t›‹t_chksum
 = 
chksum
; } 0)

	)

97 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/netdb.h

29 #i‚de‡
__LWIP_NETDB_H__


30 
	#__LWIP_NETDB_H__


	)

32 
	~"lwù/›t.h
"

34 #i‡
LWIP_DNS
 && 
LWIP_SOCKET


36 
	~<°ddef.h
>

38 
	~"lwù/öë.h
"

39 
	~"lwù/sockës.h
"

41 #ifde‡
__˝lu•lus


46 #i‚de‡
LWIP_DNS_API_DECLARE_H_ERRNO


47 
	#LWIP_DNS_API_DECLARE_H_ERRNO
 1

	)

50 #i‚de‡
LWIP_DNS_API_DEFINE_ERRORS


51 
	#LWIP_DNS_API_DEFINE_ERRORS
 1

	)

54 #i‚de‡
LWIP_DNS_API_DECLARE_STRUCTS


55 
	#LWIP_DNS_API_DECLARE_STRUCTS
 1

	)

58 #i‡
LWIP_DNS_API_DEFINE_ERRORS


60 
	#EAI_NONAME
 200

	)

61 
	#EAI_SERVICE
 201

	)

62 
	#EAI_FAIL
 202

	)

63 
	#EAI_MEMORY
 203

	)

65 
	#HOST_NOT_FOUND
 210

	)

66 
	#NO_DATA
 211

	)

67 
	#NO_RECOVERY
 212

	)

68 
	#TRY_AGAIN
 213

	)

71 #i‡
LWIP_DNS_API_DECLARE_STRUCTS


72 
	sho°ít
 {

73 *
h_«me
;

74 **
h_Æü£s
;

76 
h_addπy≥
;

77 
h_Àngth
;

78 **
h_addr_li°
;

80 
	#h_addr
 
h_addr_li°
[0]

	)

83 
	saddröfo
 {

84 
	mai_Êags
;

85 
	mai_Ámûy
;

86 
	mai_sockty≥
;

87 
	mai_¥Ÿocﬁ
;

88 
sockÀn_t
 
	mai_addæí
;

89 
sockaddr
 *
	mai_addr
;

90 *
	mai_ˇn⁄«me
;

91 
addröfo
 *
	mai_√xt
;

95 #i‡
LWIP_DNS_API_DECLARE_H_ERRNO


97 
h_î∫o
;

100 
ho°ít
 *
lwù_gëho°by«me
(c⁄° *
«me
);

101 
lwù_gëho°by«me_r
(c⁄° *
«me
, 
ho°ít
 *
ªt
, *
buf
,

102 
size_t
 
buÊí
, 
ho°ít
 **
ªsu…
, *
h_î∫›
);

103 
lwù_‰ìaddröfo
(
addröfo
 *
ai
);

104 
lwù_gëaddröfo
(c⁄° *
nodíame
,

105 c⁄° *
£rv«me
,

106 c⁄° 
addröfo
 *
höts
,

107 
addröfo
 **
ªs
);

109 #i‡
LWIP_COMPAT_SOCKETS


110 
	#gëho°by«me
(
«me
Ë
	`lwù_gëho°by«me
“ame)

	)

111 
	#gëho°by«me_r
(
«me
, 
ªt
, 
buf
, 
buÊí
, 
ªsu…
, 
h_î∫›
) \

112 
	`lwù_gëho°by«me_r
(
«me
, 
ªt
, 
buf
, 
buÊí
, 
ªsu…
, 
h_î∫›
)

	)

113 
	#‰ìaddröfo
(
addröfo
Ë
	`lwù_‰ìaddröfo
◊ddröfo)

	)

114 
	#gëaddröfo
(
nod«me
, 
£rv«me
, 
höts
, 
ªs
) \

115 
	`lwù_gëaddröfo
(
nod«me
, 
£rv«me
, 
höts
, 
ªs
)

	)

118 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/netif.h

32 #i‚de‡
__LWIP_NETIF_H__


33 
	#__LWIP_NETIF_H__


	)

35 
	~"lwù/›t.h
"

37 
	#ENABLE_LOOPBACK
 (
LWIP_NETIF_LOOPBACK
 || 
LWIP_HAVE_LOOPIF
)

	)

39 
	~"lwù/îr.h
"

41 
	~"lwù/ù_addr.h
"

43 
	~"lwù/def.h
"

44 
	~"lwù/t˝ù_thªad.h
"

45 
	~"lwù/pbuf.h
"

47 #ifde‡
__˝lu•lus


56 
	#NETIF_MAX_HWADDR_LEN
 6U

	)

64 
	#NETIF_FLAG_UP
 0x01U

	)

67 
	#NETIF_FLAG_BROADCAST
 0x02U

	)

70 
	#NETIF_FLAG_POINTTOPOINT
 0x04U

	)

73 
	#NETIF_FLAG_DHCP
 0x08U

	)

79 
	#NETIF_FLAG_LINK_UP
 0x10U

	)

83 
	#NETIF_FLAG_ETHARP
 0x20U

	)

87 
	#NETIF_FLAG_ETHERNET
 0x40U

	)

90 
	#NETIF_FLAG_IGMP
 0x80U

	)

97 
îr_t
 (*
	t√tif_öô_‚
)(
	t√tif
 *netif);

99 (*
√tif_°©us_ˇŒback_‚
)(
	t√tif
 *netif);

101 
îr_t
 (*
	t√tif_igmp_mac_fûãr_‚
)(
	t√tif
 *netif,

102 
	tù_addr_t
 *
	tgroup
, 
	tu8_t
 
	ta˘i⁄
);

104 
√tif_öô
(
˝u
);

106 
√tif
 *
√tif_add
(√ti‡*√tif, 
ù_addr_t
 *
ùaddr
, ip_addr_à*
√tmask
,

107 
ù_addr_t
 *
gw
, *
°©e
, 
√tif_öô_‚
 
öô
, 
√tif_öput_‚
 
öput
);

110 
√tif_£t_addr
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
, ip_addr_à*
√tmask
,

111 
ù_addr_t
 *
gw
);

112 
√tif_ªmove
(
√tif
 *Çetif);

118 
√tif
 *
√tif_föd
(*
«me
);

120 
√tif_£t_deÁu…
(
√tif
 *netif);

122 
√tif_£t_ùaddr
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
);

123 
√tif_£t_√tmask
(
√tif
 *√tif, 
ù_addr_t
 *
√tmask
);

124 
√tif_£t_gw
(
√tif
 *√tif, 
ù_addr_t
 *
gw
);

126 
√tif_£t_up
(
√tif
 *netif);

127 
√tif_£t_down
(
√tif
 *netif);

129 
	#√tif_is_up
(
√tif
Ë((“ëif)->
Êags
 & 
NETIF_FLAG_UP
Ë? (
u8_t
)1 : (u8_t)0)

	)

131 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/netifapi.h

28 #i‚de‡
__LWIP_NETIFAPI_H__


29 
	#__LWIP_NETIFAPI_H__


	)

31 
	~"lwù/›t.h
"

33 #i‡
LWIP_NETIF_API


35 
	~"lwù/sys.h
"

36 
	~"lwù/√tif.h
"

37 
	~"lwù/dh˝.h
"

38 
	~"lwù/autoù.h
"

40 #ifde‡
__˝lu•lus


44 (*
√tiÁpi_void_‚
)(
	t√tif
 *netif);

45 
îr_t
 (*
	t√tiÁpi_îπ_‚
)(
	t√tif
 *netif);

47 
	s√tiÁpi_msg_msg
 {

48 #i‡!
LWIP_TCPIP_CORE_LOCKING


49 
sys_£m_t
 
£m
;

51 
îr_t
 
îr
;

52 
√tif
 *netif;

55 
ù_addr_t
 *
ùaddr
;

56 
ù_addr_t
 *
√tmask
;

57 
ù_addr_t
 *
gw
;

58 *
°©e
;

59 
√tif_öô_‚
 
öô
;

60 
√tif_öput_‚
 
öput
;

61 } 
add
;

63 
√tiÁpi_void_‚
 
voidfunc
;

64 
√tiÁpi_îπ_‚
 
îπfunc
;

65 } 
comm⁄
;

66 } 
msg
;

69 
	s√tiÁpi_msg
 {

70 (* 
fun˘i⁄
)(
√tiÁpi_msg_msg
 *
msg
);

71 
√tiÁpi_msg_msg
 
msg
;

76 
îr_t
 
√tiÁpi_√tif_add
 ( 
√tif
 *netif,

77 
ù_addr_t
 *
ùaddr
,

78 
ù_addr_t
 *
√tmask
,

79 
ù_addr_t
 *
gw
,

80 *
°©e
,

81 
√tif_öô_‚
 
öô
,

82 
√tif_öput_‚
 
öput
);

84 
îr_t
 
√tiÁpi_√tif_£t_addr
 ( 
√tif
 *netif,

85 
ù_addr_t
 *
ùaddr
,

86 
ù_addr_t
 *
√tmask
,

87 
ù_addr_t
 *
gw
 );

89 
îr_t
 
√tiÁpi_√tif_comm⁄
 ( 
√tif
 *netif,

90 
√tiÁpi_void_‚
 
voidfunc
,

91 
√tiÁpi_îπ_‚
 
îπfunc
);

93 
	#√tiÁpi_√tif_ªmove
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_ªmove
, 
NULL
)

	)

94 
	#√tiÁpi_√tif_£t_up
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_up
, 
NULL
)

	)

95 
	#√tiÁpi_√tif_£t_down
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_down
, 
NULL
)

	)

96 
	#√tiÁpi_√tif_£t_deÁu…
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_deÁu…
, 
NULL
)

	)

97 
	#√tiÁpi_dh˝_°¨t
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
dh˝_°¨t
)

	)

98 
	#√tiÁpi_dh˝_°›
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
dh˝_°›
, 
NULL
)

	)

99 
	#√tiÁpi_autoù_°¨t
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
autoù_°¨t
)

	)

100 
	#√tiÁpi_autoù_°›
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
autoù_°›
)

	)

102 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/opt.h

38 #i‚de‡
__LWIP_OPT_H__


39 
	#__LWIP_OPT_H__


	)

45 
	~"lwù›ts.h
"

46 
	~"lwù/debug.h
"

59 #i‚de‡
SYS_LIGHTWEIGHT_PROT


60 
	#SYS_LIGHTWEIGHT_PROT
 0

	)

67 #i‚de‡
NO_SYS


68 
	#NO_SYS
 0

	)

75 #i‚de‡
NO_SYS_NO_TIMERS


76 
	#NO_SYS_NO_TIMERS
 0

	)

83 #i‚de‡
MEMCPY


84 
	#MEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
(d°,§c,Àn)

	)

91 #i‚de‡
SMEMCPY


92 
	#SMEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
(d°,§c,Àn)

	)

105 #i‚de‡
MEM_LIBC_MALLOC


106 
	#MEM_LIBC_MALLOC
 0

	)

114 #i‚de‡
MEMP_MEM_MALLOC


115 
	#MEMP_MEM_MALLOC
 0

	)

123 #i‚de‡
MEM_ALIGNMENT


124 
	#MEM_ALIGNMENT
 1

	)

131 #i‚de‡
MEM_SIZE


132 
	#MEM_SIZE
 1600

	)

140 #i‚de‡
MEMP_SEPARATE_POOLS


141 
	#MEMP_SEPARATE_POOLS
 0

	)

153 #i‚de‡
MEMP_OVERFLOW_CHECK


154 
	#MEMP_OVERFLOW_CHECK
 0

	)

161 #i‚de‡
MEMP_SANITY_CHECK


162 
	#MEMP_SANITY_CHECK
 0

	)

171 #i‚de‡
MEM_USE_POOLS


172 
	#MEM_USE_POOLS
 0

	)

179 #i‚de‡
MEM_USE_POOLS_TRY_BIGGER_POOL


180 
	#MEM_USE_POOLS_TRY_BIGGER_POOL
 0

	)

189 #i‚de‡
MEMP_USE_CUSTOM_POOLS


190 
	#MEMP_USE_CUSTOM_POOLS
 0

	)

211 #i‚de‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


212 
	#LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
 0

	)

225 #i‚de‡
MEMP_NUM_PBUF


226 
	#MEMP_NUM_PBUF
 16

	)

233 #i‚de‡
MEMP_NUM_RAW_PCB


234 
	#MEMP_NUM_RAW_PCB
 4

	)

242 #i‚de‡
MEMP_NUM_UDP_PCB


243 
	#MEMP_NUM_UDP_PCB
 4

	)

250 #i‚de‡
MEMP_NUM_TCP_PCB


251 
	#MEMP_NUM_TCP_PCB
 5

	)

258 #i‚de‡
MEMP_NUM_TCP_PCB_LISTEN


259 
	#MEMP_NUM_TCP_PCB_LISTEN
 8

	)

266 #i‚de‡
MEMP_NUM_TCP_SEG


267 
	#MEMP_NUM_TCP_SEG
 16

	)

274 #i‚de‡
MEMP_NUM_REASSDATA


275 
	#MEMP_NUM_REASSDATA
 5

	)

285 #i‚de‡
MEMP_NUM_FRAG_PBUF


286 
	#MEMP_NUM_FRAG_PBUF
 15

	)

295 #i‚de‡
MEMP_NUM_ARP_QUEUE


296 
	#MEMP_NUM_ARP_QUEUE
 30

	)

305 #i‚de‡
MEMP_NUM_IGMP_GROUP


306 
	#MEMP_NUM_IGMP_GROUP
 8

	)

313 #i‚de‡
MEMP_NUM_SYS_TIMEOUT


314 
	#MEMP_NUM_SYS_TIMEOUT
 3

	)

321 #i‚de‡
MEMP_NUM_NETBUF


322 
	#MEMP_NUM_NETBUF
 2

	)

329 #i‚de‡
MEMP_NUM_NETCONN


330 
	#MEMP_NUM_NETCONN
 4

	)

338 #i‚de‡
MEMP_NUM_TCPIP_MSG_API


339 
	#MEMP_NUM_TCPIP_MSG_API
 8

	)

347 #i‚de‡
MEMP_NUM_TCPIP_MSG_INPKT


348 
	#MEMP_NUM_TCPIP_MSG_INPKT
 8

	)

354 #i‚de‡
MEMP_NUM_SNMP_NODE


355 
	#MEMP_NUM_SNMP_NODE
 50

	)

362 #i‚de‡
MEMP_NUM_SNMP_ROOTNODE


363 
	#MEMP_NUM_SNMP_ROOTNODE
 30

	)

371 #i‚de‡
MEMP_NUM_SNMP_VARBIND


372 
	#MEMP_NUM_SNMP_VARBIND
 2

	)

380 #i‚de‡
MEMP_NUM_SNMP_VALUE


381 
	#MEMP_NUM_SNMP_VALUE
 3

	)

388 #i‚de‡
MEMP_NUM_NETDB


389 
	#MEMP_NUM_NETDB
 1

	)

396 #i‚de‡
MEMP_NUM_LOCALHOSTLIST


397 
	#MEMP_NUM_LOCALHOSTLIST
 1

	)

404 #i‚de‡
MEMP_NUM_PPPOE_INTERFACES


405 
	#MEMP_NUM_PPPOE_INTERFACES
 1

	)

411 #i‚de‡
PBUF_POOL_DUMMY_SIZE


412 
	#PBUF_POOL_DUMMY_SIZE
 16

	)

423 #i‚de‡
LWIP_ARP


424 
	#LWIP_ARP
 1

	)

430 #i‚de‡
ARP_TABLE_SIZE


431 
	#ARP_TABLE_SIZE
 16

	)

441 #i‚de‡
ARP_QUEUEING


442 
	#ARP_QUEUEING
 0

	)

455 #i‚de‡
ETHARP_TRUST_IP_MAC


456 
	#ETHARP_TRUST_IP_MAC
 1

	)

465 #i‚de‡
ETHARP_SUPPORT_VLAN


466 
	#ETHARP_SUPPORT_VLAN
 0

	)

472 #i‚de‡
LWIP_ETHERNET


473 
	#LWIP_ETHERNET
 (
LWIP_ARP
 || 
PPPOE_SUPPORT
)

	)

481 #i‚de‡
ETH_PAD_SIZE


482 
	#ETH_PAD_SIZE
 0

	)

488 #i‚de‡
ETHARP_SUPPORT_STATIC_ENTRIES


489 
	#ETHARP_SUPPORT_STATIC_ENTRIES
 0

	)

503 #i‚de‡
IP_FORWARD


504 
	#IP_FORWARD
 0

	)

512 #i‚de‡
IP_OPTIONS_ALLOWED


513 
	#IP_OPTIONS_ALLOWED
 1

	)

521 #i‚de‡
IP_REASSEMBLY


522 
	#IP_REASSEMBLY
 1

	)

530 #i‚de‡
IP_FRAG


531 
	#IP_FRAG
 1

	)

539 #i‚de‡
IP_REASS_MAXAGE


540 
	#IP_REASS_MAXAGE
 3

	)

549 #i‚de‡
IP_REASS_MAX_PBUFS


550 
	#IP_REASS_MAX_PBUFS
 10

	)

560 #i‚de‡
IP_FRAG_USES_STATIC_BUF


561 
	#IP_FRAG_USES_STATIC_BUF
 0

	)

568 #i‡
IP_FRAG_USES_STATIC_BUF
 && !
deföed
(
IP_FRAG_MAX_MTU
)

569 
	#IP_FRAG_MAX_MTU
 1500

	)

575 #i‚de‡
IP_DEFAULT_TTL


576 
	#IP_DEFAULT_TTL
 255

	)

584 #i‚de‡
IP_SOF_BROADCAST


585 
	#IP_SOF_BROADCAST
 0

	)

592 #i‚de‡
IP_SOF_BROADCAST_RECV


593 
	#IP_SOF_BROADCAST_RECV
 0

	)

605 #i‚de‡
LWIP_ICMP


606 
	#LWIP_ICMP
 1

	)

612 #i‚de‡
ICMP_TTL


613 
	#ICMP_TTL
 (
IP_DEFAULT_TTL
)

	)

619 #i‚de‡
LWIP_BROADCAST_PING


620 
	#LWIP_BROADCAST_PING
 0

	)

626 #i‚de‡
LWIP_MULTICAST_PING


627 
	#LWIP_MULTICAST_PING
 0

	)

638 #i‚de‡
LWIP_RAW


639 
	#LWIP_RAW
 1

	)

645 #i‚de‡
RAW_TTL


646 
	#RAW_TTL
 (
IP_DEFAULT_TTL
)

	)

657 #i‚de‡
LWIP_DHCP


658 
	#LWIP_DHCP
 0

	)

664 #i‚de‡
DHCP_DOES_ARP_CHECK


665 
	#DHCP_DOES_ARP_CHECK
 ((
LWIP_DHCP
Ë&& (
LWIP_ARP
))

	)

676 #i‚de‡
LWIP_AUTOIP


677 
	#LWIP_AUTOIP
 0

	)

684 #i‚de‡
LWIP_DHCP_AUTOIP_COOP


685 
	#LWIP_DHCP_AUTOIP_COOP
 0

	)

695 #i‚de‡
LWIP_DHCP_AUTOIP_COOP_TRIES


696 
	#LWIP_DHCP_AUTOIP_COOP_TRIES
 9

	)

708 #i‚de‡
LWIP_SNMP


709 
	#LWIP_SNMP
 0

	)

717 #i‚de‡
SNMP_CONCURRENT_REQUESTS


718 
	#SNMP_CONCURRENT_REQUESTS
 1

	)

725 #i‚de‡
SNMP_TRAP_DESTINATIONS


726 
	#SNMP_TRAP_DESTINATIONS
 1

	)

734 #i‚de‡
SNMP_PRIVATE_MIB


735 
	#SNMP_PRIVATE_MIB
 0

	)

743 #i‚de‡
SNMP_SAFE_REQUESTS


744 
	#SNMP_SAFE_REQUESTS
 1

	)

751 #i‚de‡
SNMP_MAX_OCTET_STRING_LEN


752 
	#SNMP_MAX_OCTET_STRING_LEN
 127

	)

760 #i‚de‡
SNMP_MAX_TREE_DEPTH


761 
	#SNMP_MAX_TREE_DEPTH
 15

	)

768 #i‚de‡
SNMP_MAX_VALUE_SIZE


769 
	#SNMP_MAX_VALUE_SIZE
 
	`LWIP_MAX
((
SNMP_MAX_OCTET_STRING_LEN
)+1, (
s32_t
)*(
SNMP_MAX_TREE_DEPTH
))

	)

780 #i‚de‡
LWIP_IGMP


781 
	#LWIP_IGMP
 0

	)

793 #i‚de‡
LWIP_DNS


794 
	#LWIP_DNS
 0

	)

798 #i‚de‡
DNS_TABLE_SIZE


799 
	#DNS_TABLE_SIZE
 4

	)

803 #i‚de‡
DNS_MAX_NAME_LENGTH


804 
	#DNS_MAX_NAME_LENGTH
 256

	)

808 #i‚de‡
DNS_MAX_SERVERS


809 
	#DNS_MAX_SERVERS
 2

	)

813 #i‚de‡
DNS_DOES_NAME_CHECK


814 
	#DNS_DOES_NAME_CHECK
 1

	)

818 #i‚de‡
DNS_MSG_SIZE


819 
	#DNS_MSG_SIZE
 512

	)

832 #i‚de‡
DNS_LOCAL_HOSTLIST


833 
	#DNS_LOCAL_HOSTLIST
 0

	)

838 #i‚de‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


839 
	#DNS_LOCAL_HOSTLIST_IS_DYNAMIC
 0

	)

850 #i‚de‡
LWIP_UDP


851 
	#LWIP_UDP
 1

	)

857 #i‚de‡
LWIP_UDPLITE


858 
	#LWIP_UDPLITE
 0

	)

864 #i‚de‡
UDP_TTL


865 
	#UDP_TTL
 (
IP_DEFAULT_TTL
)

	)

871 #i‚de‡
LWIP_NETBUF_RECVINFO


872 
	#LWIP_NETBUF_RECVINFO
 0

	)

883 #i‚de‡
LWIP_TCP


884 
	#LWIP_TCP
 1

	)

890 #i‚de‡
TCP_TTL


891 
	#TCP_TTL
 (
IP_DEFAULT_TTL
)

	)

898 #i‚de‡
TCP_WND


899 
	#TCP_WND
 (4 * 
TCP_MSS
)

	)

905 #i‚de‡
TCP_MAXRTX


906 
	#TCP_MAXRTX
 12

	)

912 #i‚de‡
TCP_SYNMAXRTX


913 
	#TCP_SYNMAXRTX
 6

	)

920 #i‚de‡
TCP_QUEUE_OOSEQ


921 
	#TCP_QUEUE_OOSEQ
 (
LWIP_TCP
)

	)

931 #i‚de‡
TCP_MSS


932 
	#TCP_MSS
 536

	)

943 #i‚de‡
TCP_CALCULATE_EFF_SEND_MSS


944 
	#TCP_CALCULATE_EFF_SEND_MSS
 1

	)

951 #i‚de‡
TCP_SND_BUF


952 
	#TCP_SND_BUF
 256

	)

959 #i‚de‡
TCP_SND_QUEUELEN


960 
	#TCP_SND_QUEUELEN
 ((4 * (
TCP_SND_BUF
Ë+ (
TCP_MSS
 - 1))/(TCP_MSS))

	)

968 #i‚de‡
TCP_SNDLOWAT


969 
	#TCP_SNDLOWAT
 ((
TCP_SND_BUF
)/2)

	)

977 #i‚de‡
TCP_SNDQUEUELOWAT


978 
	#TCP_SNDQUEUELOWAT
 ((
TCP_SND_QUEUELEN
)/2)

	)

984 #i‚de‡
TCP_LISTEN_BACKLOG


985 
	#TCP_LISTEN_BACKLOG
 0

	)

993 #i‚de‡
TCP_DEFAULT_LISTEN_BACKLOG


994 
	#TCP_DEFAULT_LISTEN_BACKLOG
 0xff

	)

1011 #i‚de‡
TCP_OVERSIZE


1012 
	#TCP_OVERSIZE
 
TCP_MSS


	)

1018 #i‚de‡
LWIP_TCP_TIMESTAMPS


1019 
	#LWIP_TCP_TIMESTAMPS
 0

	)

1026 #i‚de‡
TCP_WND_UPDATE_THRESHOLD


1027 
	#TCP_WND_UPDATE_THRESHOLD
 (
TCP_WND
 / 4)

	)

1037 #i‚de‡
LWIP_EVENT_API


1038 
	#LWIP_EVENT_API
 0

	)

1039 
	#LWIP_CALLBACK_API
 1

	)

1041 
	#LWIP_EVENT_API
 1

	)

1042 
	#LWIP_CALLBACK_API
 0

	)

1056 #i‚de‡
PBUF_LINK_HLEN


1057 
	#PBUF_LINK_HLEN
 (14 + 
ETH_PAD_SIZE
)

	)

1065 #i‚de‡
PBUF_POOL_BUFSIZE


1066 
	#PBUF_POOL_BUFSIZE
 
	`LWIP_MEM_ALIGN_SIZE
(
TCP_MSS
+40+
PBUF_LINK_HLEN
)

	)

1078 #i‚de‡
LWIP_NETIF_HOSTNAME


1079 
	#LWIP_NETIF_HOSTNAME
 0

	)

1085 #i‚de‡
LWIP_NETIF_API


1086 
	#LWIP_NETIF_API
 0

	)

1093 #i‚de‡
LWIP_NETIF_STATUS_CALLBACK


1094 
	#LWIP_NETIF_STATUS_CALLBACK
 0

	)

1101 #i‚de‡
LWIP_NETIF_LINK_CALLBACK


1102 
	#LWIP_NETIF_LINK_CALLBACK
 0

	)

1112 #i‚de‡
LWIP_NETIF_HWADDRHINT


1113 
	#LWIP_NETIF_HWADDRHINT
 0

	)

1120 #i‚de‡
LWIP_NETIF_LOOPBACK


1121 
	#LWIP_NETIF_LOOPBACK
 0

	)

1128 #i‚de‡
LWIP_LOOPBACK_MAX_PBUFS


1129 
	#LWIP_LOOPBACK_MAX_PBUFS
 0

	)

1145 #i‚de‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


1146 
	#LWIP_NETIF_LOOPBACK_MULTITHREADING
 (!
NO_SYS
)

	)

1158 #i‚de‡
LWIP_NETIF_TX_SINGLE_PBUF


1159 
	#LWIP_NETIF_TX_SINGLE_PBUF
 0

	)

1170 #i‚de‡
LWIP_HAVE_LOOPIF


1171 
	#LWIP_HAVE_LOOPIF
 0

	)

1182 #i‚de‡
LWIP_HAVE_SLIPIF


1183 
	#LWIP_HAVE_SLIPIF
 0

	)

1194 #i‚de‡
TCPIP_THREAD_NAME


1195 
	#TCPIP_THREAD_NAME
 "t˝ù_thªad"

	)

1203 #i‚de‡
TCPIP_THREAD_STACKSIZE


1204 
	#TCPIP_THREAD_STACKSIZE
 0

	)

1212 #i‚de‡
TCPIP_THREAD_PRIO


1213 
	#TCPIP_THREAD_PRIO
 1

	)

1221 #i‚de‡
TCPIP_MBOX_SIZE


1222 
	#TCPIP_MBOX_SIZE
 0

	)

1228 #i‚de‡
SLIPIF_THREAD_NAME


1229 
	#SLIPIF_THREAD_NAME
 "¶ùif_lo›"

	)

1237 #i‚de‡
SLIPIF_THREAD_STACKSIZE


1238 
	#SLIPIF_THREAD_STACKSIZE
 0

	)

1246 #i‚de‡
SLIPIF_THREAD_PRIO


1247 
	#SLIPIF_THREAD_PRIO
 1

	)

1253 #i‚de‡
PPP_THREAD_NAME


1254 
	#PPP_THREAD_NAME
 "µpI≈utThªad"

	)

1262 #i‚de‡
PPP_THREAD_STACKSIZE


1263 
	#PPP_THREAD_STACKSIZE
 0

	)

1271 #i‚de‡
PPP_THREAD_PRIO


1272 
	#PPP_THREAD_PRIO
 1

	)

1278 #i‚de‡
DEFAULT_THREAD_NAME


1279 
	#DEFAULT_THREAD_NAME
 "lwIP"

	)

1287 #i‚de‡
DEFAULT_THREAD_STACKSIZE


1288 
	#DEFAULT_THREAD_STACKSIZE
 0

	)

1296 #i‚de‡
DEFAULT_THREAD_PRIO


1297 
	#DEFAULT_THREAD_PRIO
 1

	)

1305 #i‚de‡
DEFAULT_RAW_RECVMBOX_SIZE


1306 
	#DEFAULT_RAW_RECVMBOX_SIZE
 0

	)

1314 #i‚de‡
DEFAULT_UDP_RECVMBOX_SIZE


1315 
	#DEFAULT_UDP_RECVMBOX_SIZE
 0

	)

1323 #i‚de‡
DEFAULT_TCP_RECVMBOX_SIZE


1324 
	#DEFAULT_TCP_RECVMBOX_SIZE
 0

	)

1332 #i‚de‡
DEFAULT_ACCEPTMBOX_SIZE


1333 
	#DEFAULT_ACCEPTMBOX_SIZE
 0

	)

1345 #i‚de‡
LWIP_TCPIP_CORE_LOCKING


1346 
	#LWIP_TCPIP_CORE_LOCKING
 0

	)

1353 #i‚de‡
LWIP_TCPIP_CORE_LOCKING_INPUT


1354 
	#LWIP_TCPIP_CORE_LOCKING_INPUT
 0

	)

1360 #i‚de‡
LWIP_NETCONN


1361 
	#LWIP_NETCONN
 1

	)

1367 #i‚de‡
LWIP_TCPIP_TIMEOUT


1368 
	#LWIP_TCPIP_TIMEOUT
 1

	)

1379 #i‚de‡
LWIP_SOCKET


1380 
	#LWIP_SOCKET
 1

	)

1387 #i‚de‡
LWIP_COMPAT_SOCKETS


1388 
	#LWIP_COMPAT_SOCKETS
 1

	)

1396 #i‚de‡
LWIP_POSIX_SOCKETS_IO_NAMES


1397 
	#LWIP_POSIX_SOCKETS_IO_NAMES
 1

	)

1405 #i‚de‡
LWIP_TCP_KEEPALIVE


1406 
	#LWIP_TCP_KEEPALIVE
 0

	)

1412 #i‚de‡
LWIP_SO_RCVTIMEO


1413 
	#LWIP_SO_RCVTIMEO
 0

	)

1419 #i‚de‡
LWIP_SO_RCVBUF


1420 
	#LWIP_SO_RCVBUF
 0

	)

1426 #i‚de‡
RECV_BUFSIZE_DEFAULT


1427 
	#RECV_BUFSIZE_DEFAULT
 
INT_MAX


	)

1433 #i‚de‡
SO_REUSE


1434 
	#SO_REUSE
 0

	)

1442 #i‚de‡
SO_REUSE_RXTOALL


1443 
	#SO_REUSE_RXTOALL
 0

	)

1454 #i‚de‡
LWIP_STATS


1455 
	#LWIP_STATS
 1

	)

1458 #i‡
LWIP_STATS


1463 #i‚de‡
LWIP_STATS_DISPLAY


1464 
	#LWIP_STATS_DISPLAY
 0

	)

1470 #i‚de‡
LINK_STATS


1471 
	#LINK_STATS
 1

	)

1477 #i‚de‡
ETHARP_STATS


1478 
	#ETHARP_STATS
 (
LWIP_ARP
)

	)

1484 #i‚de‡
IP_STATS


1485 
	#IP_STATS
 1

	)

1492 #i‚de‡
IPFRAG_STATS


1493 
	#IPFRAG_STATS
 (
IP_REASSEMBLY
 || 
IP_FRAG
)

	)

1499 #i‚de‡
ICMP_STATS


1500 
	#ICMP_STATS
 1

	)

1506 #i‚de‡
IGMP_STATS


1507 
	#IGMP_STATS
 (
LWIP_IGMP
)

	)

1514 #i‚de‡
UDP_STATS


1515 
	#UDP_STATS
 (
LWIP_UDP
)

	)

1522 #i‚de‡
TCP_STATS


1523 
	#TCP_STATS
 (
LWIP_TCP
)

	)

1529 #i‚de‡
MEM_STATS


1530 
	#MEM_STATS
 ((
MEM_LIBC_MALLOC
 =0Ë&& (
MEM_USE_POOLS
 =0))

	)

1536 #i‚de‡
MEMP_STATS


1537 
	#MEMP_STATS
 (
MEMP_MEM_MALLOC
 =0)

	)

1543 #i‚de‡
SYS_STATS


1544 
	#SYS_STATS
 (
NO_SYS
 =0)

	)

1549 
	#LINK_STATS
 0

	)

1550 
	#IP_STATS
 0

	)

1551 
	#IPFRAG_STATS
 0

	)

1552 
	#ICMP_STATS
 0

	)

1553 
	#IGMP_STATS
 0

	)

1554 
	#UDP_STATS
 0

	)

1555 
	#TCP_STATS
 0

	)

1556 
	#MEM_STATS
 0

	)

1557 
	#MEMP_STATS
 0

	)

1558 
	#SYS_STATS
 0

	)

1559 
	#LWIP_STATS_DISPLAY
 0

	)

1571 #i‚de‡
PPP_SUPPORT


1572 
	#PPP_SUPPORT
 0

	)

1578 #i‚de‡
PPPOE_SUPPORT


1579 
	#PPPOE_SUPPORT
 0

	)

1585 #i‚de‡
PPPOS_SUPPORT


1586 
	#PPPOS_SUPPORT
 
PPP_SUPPORT


	)

1589 #i‡
PPP_SUPPORT


1594 #i‚de‡
NUM_PPP


1595 
	#NUM_PPP
 1

	)

1601 #i‚de‡
PAP_SUPPORT


1602 
	#PAP_SUPPORT
 0

	)

1608 #i‚de‡
CHAP_SUPPORT


1609 
	#CHAP_SUPPORT
 0

	)

1615 #i‚de‡
MSCHAP_SUPPORT


1616 
	#MSCHAP_SUPPORT
 0

	)

1622 #i‚de‡
CBCP_SUPPORT


1623 
	#CBCP_SUPPORT
 0

	)

1629 #i‚de‡
CCP_SUPPORT


1630 
	#CCP_SUPPORT
 0

	)

1636 #i‚de‡
VJ_SUPPORT


1637 
	#VJ_SUPPORT
 0

	)

1643 #i‚de‡
MD5_SUPPORT


1644 
	#MD5_SUPPORT
 0

	)

1650 #i‚de‡
FSM_DEFTIMEOUT


1651 
	#FSM_DEFTIMEOUT
 6

	)

1654 #i‚de‡
FSM_DEFMAXTERMREQS


1655 
	#FSM_DEFMAXTERMREQS
 2

	)

1658 #i‚de‡
FSM_DEFMAXCONFREQS


1659 
	#FSM_DEFMAXCONFREQS
 10

	)

1662 #i‚de‡
FSM_DEFMAXNAKLOOPS


1663 
	#FSM_DEFMAXNAKLOOPS
 5

	)

1666 #i‚de‡
UPAP_DEFTIMEOUT


1667 
	#UPAP_DEFTIMEOUT
 6

	)

1670 #i‚de‡
UPAP_DEFREQTIME


1671 
	#UPAP_DEFREQTIME
 30

	)

1674 #i‚de‡
CHAP_DEFTIMEOUT


1675 
	#CHAP_DEFTIMEOUT
 6

	)

1678 #i‚de‡
CHAP_DEFTRANSMITS


1679 
	#CHAP_DEFTRANSMITS
 10

	)

1683 #i‚de‡
LCP_ECHOINTERVAL


1684 
	#LCP_ECHOINTERVAL
 0

	)

1688 #i‚de‡
LCP_MAXECHOFAILS


1689 
	#LCP_MAXECHOFAILS
 3

	)

1693 #i‚de‡
PPP_MAXIDLEFLAG


1694 
	#PPP_MAXIDLEFLAG
 100

	)

1705 
	#PPP_MTU
 1500

	)

1706 #i‚de‡
PPP_MAXMTU


1708 
	#PPP_MAXMTU
 1500

	)

1710 
	#PPP_MINMTU
 64

	)

1711 
	#PPP_MRU
 1500

	)

1712 
	#PPP_MAXMRU
 1500

	)

1713 #i‚de‡
PPP_DEFMRU


1714 
	#PPP_DEFMRU
 296

	)

1716 
	#PPP_MINMRU
 128

	)

1718 #i‚de‡
MAXNAMELEN


1719 
	#MAXNAMELEN
 256

	)

1721 #i‚de‡
MAXSECRETLEN


1722 
	#MAXSECRETLEN
 256

	)

1735 #i‚de‡
CHECKSUM_GEN_IP


1736 
	#CHECKSUM_GEN_IP
 1

	)

1742 #i‚de‡
CHECKSUM_GEN_UDP


1743 
	#CHECKSUM_GEN_UDP
 1

	)

1749 #i‚de‡
CHECKSUM_GEN_TCP


1750 
	#CHECKSUM_GEN_TCP
 1

	)

1756 #i‚de‡
CHECKSUM_CHECK_IP


1757 
	#CHECKSUM_CHECK_IP
 1

	)

1763 #i‚de‡
CHECKSUM_CHECK_UDP


1764 
	#CHECKSUM_CHECK_UDP
 1

	)

1770 #i‚de‡
CHECKSUM_CHECK_TCP


1771 
	#CHECKSUM_CHECK_TCP
 1

	)

1778 #i‚de‡
LWIP_CHECKSUM_ON_COPY


1779 
	#LWIP_CHECKSUM_ON_COPY
 0

	)

1792 #i‚de‡
LWIP_DBG_MIN_LEVEL


1793 
	#LWIP_DBG_MIN_LEVEL
 
LWIP_DBG_LEVEL_ALL


	)

1800 #i‚de‡
LWIP_DBG_TYPES_ON


1801 
	#LWIP_DBG_TYPES_ON
 
LWIP_DBG_ON


	)

1807 #i‚de‡
ETHARP_DEBUG


1808 
	#ETHARP_DEBUG
 
LWIP_DBG_OFF


	)

1814 #i‚de‡
NETIF_DEBUG


1815 
	#NETIF_DEBUG
 
LWIP_DBG_OFF


	)

1821 #i‚de‡
PBUF_DEBUG


1822 
	#PBUF_DEBUG
 
LWIP_DBG_OFF


	)

1828 #i‚de‡
API_LIB_DEBUG


1829 
	#API_LIB_DEBUG
 
LWIP_DBG_OFF


	)

1835 #i‚de‡
API_MSG_DEBUG


1836 
	#API_MSG_DEBUG
 
LWIP_DBG_OFF


	)

1842 #i‚de‡
SOCKETS_DEBUG


1843 
	#SOCKETS_DEBUG
 
LWIP_DBG_OFF


	)

1849 #i‚de‡
ICMP_DEBUG


1850 
	#ICMP_DEBUG
 
LWIP_DBG_OFF


	)

1856 #i‚de‡
IGMP_DEBUG


1857 
	#IGMP_DEBUG
 
LWIP_DBG_OFF


	)

1863 #i‚de‡
INET_DEBUG


1864 
	#INET_DEBUG
 
LWIP_DBG_OFF


	)

1870 #i‚de‡
IP_DEBUG


1871 
	#IP_DEBUG
 
LWIP_DBG_OFF


	)

1877 #i‚de‡
IP_REASS_DEBUG


1878 
	#IP_REASS_DEBUG
 
LWIP_DBG_OFF


	)

1884 #i‚de‡
RAW_DEBUG


1885 
	#RAW_DEBUG
 
LWIP_DBG_OFF


	)

1891 #i‚de‡
MEM_DEBUG


1892 
	#MEM_DEBUG
 
LWIP_DBG_OFF


	)

1898 #i‚de‡
MEMP_DEBUG


1899 
	#MEMP_DEBUG
 
LWIP_DBG_OFF


	)

1905 #i‚de‡
SYS_DEBUG


1906 
	#SYS_DEBUG
 
LWIP_DBG_OFF


	)

1912 #i‚de‡
TIMERS_DEBUG


1913 
	#TIMERS_DEBUG
 
LWIP_DBG_OFF


	)

1919 #i‚de‡
TCP_DEBUG


1920 
	#TCP_DEBUG
 
LWIP_DBG_OFF


	)

1926 #i‚de‡
TCP_INPUT_DEBUG


1927 
	#TCP_INPUT_DEBUG
 
LWIP_DBG_OFF


	)

1933 #i‚de‡
TCP_FR_DEBUG


1934 
	#TCP_FR_DEBUG
 
LWIP_DBG_OFF


	)

1941 #i‚de‡
TCP_RTO_DEBUG


1942 
	#TCP_RTO_DEBUG
 
LWIP_DBG_OFF


	)

1948 #i‚de‡
TCP_CWND_DEBUG


1949 
	#TCP_CWND_DEBUG
 
LWIP_DBG_OFF


	)

1955 #i‚de‡
TCP_WND_DEBUG


1956 
	#TCP_WND_DEBUG
 
LWIP_DBG_OFF


	)

1962 #i‚de‡
TCP_OUTPUT_DEBUG


1963 
	#TCP_OUTPUT_DEBUG
 
LWIP_DBG_OFF


	)

1969 #i‚de‡
TCP_RST_DEBUG


1970 
	#TCP_RST_DEBUG
 
LWIP_DBG_OFF


	)

1976 #i‚de‡
TCP_QLEN_DEBUG


1977 
	#TCP_QLEN_DEBUG
 
LWIP_DBG_OFF


	)

1983 #i‚de‡
UDP_DEBUG


1984 
	#UDP_DEBUG
 
LWIP_DBG_OFF


	)

1990 #i‚de‡
TCPIP_DEBUG


1991 
	#TCPIP_DEBUG
 
LWIP_DBG_OFF


	)

1997 #i‚de‡
PPP_DEBUG


1998 
	#PPP_DEBUG
 
LWIP_DBG_OFF


	)

2004 #i‚de‡
SLIP_DEBUG


2005 
	#SLIP_DEBUG
 
LWIP_DBG_OFF


	)

2011 #i‚de‡
DHCP_DEBUG


2012 
	#DHCP_DEBUG
 
LWIP_DBG_OFF


	)

2018 #i‚de‡
AUTOIP_DEBUG


2019 
	#AUTOIP_DEBUG
 
LWIP_DBG_OFF


	)

2025 #i‚de‡
SNMP_MSG_DEBUG


2026 
	#SNMP_MSG_DEBUG
 
LWIP_DBG_OFF


	)

2032 #i‚de‡
SNMP_MIB_DEBUG


2033 
	#SNMP_MIB_DEBUG
 
LWIP_DBG_OFF


	)

2039 #i‚de‡
DNS_DEBUG


2040 
	#DNS_DEBUG
 
LWIP_DBG_OFF


	)

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/pbuf.h

33 #i‚de‡
__LWIP_PBUF_H__


34 
	#__LWIP_PBUF_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/îr.h
"

38 
	~"lwù/t˝ù_thªad.h
"

40 #ifde‡
__˝lu•lus


46 
	#LWIP_SUPPORT_CUSTOM_PBUF
 (
IP_FRAG
 && !
IP_FRAG_USES_STATIC_BUF
 && !
LWIP_NETIF_TX_SINGLE_PBUF
)

	)

48 
	#PBUF_TRANSPORT_HLEN
 20

	)

49 
	#PBUF_IP_HLEN
 20

	)

52 
PBUF_TRANSPORT
,

53 
PBUF_IP
,

54 
PBUF_LINK
,

55 
PBUF_RAW


56 } 
	tpbuf_œyî
;

59 
PBUF_RAM
,

60 
PBUF_ROM
,

61 
PBUF_REF
,

62 
PBUF_POOL
,

63 
PBUF_POOL_RX
,

64 
PBUF_POOL_TX


65 } 
	tpbuf_ty≥
;

68 
	#PBUF_FLAG_PUSH
 0x01U

	)

71 
	#PBUF_FLAG_IS_CUSTOM
 0x02U

	)

73 
	#PBUF_FLAG_MCASTLOOP
 0x04U

	)

75 (*
pbuf_‰ì_cu°om_‚
)(
	tt˝ù_thªad
 *
	tt
, 
	tpbuf
 *
	tp
);

77 
	spbuf
 {

79 
pbuf
 *
√xt
;

82 *
∑ylﬂd
;

84 *
a˘uÆ_∑ylﬂd
;

93 
u16_t
 
tŸ_Àn
;

96 
u16_t
 
Àn
;

99 
u8_t
 
ty≥
;

102 
u8_t
 
Êags
;

103 
u32_t
 
sock_id
;

110 
u16_t
 
ªf
;

111 
pbuf_‰ì_cu°om_‚
 
cu°om_‰ì_fun˘i⁄
;

114 #i‡
LWIP_SUPPORT_CUSTOM_PBUF


116 (*
pbuf_‰ì_cu°om_‚
)(
	tpbuf
 *
	tp
);

119 
	spbuf_cu°om
 {

121 
pbuf
Öbuf;

123 
pbuf_‰ì_cu°om_‚
 
cu°om_‰ì_fun˘i⁄
;

128 
	#pbuf_öô
()

	)

130 
pbuf
 *
pbuf_Æloc
(
pbuf_œyî
 
l
, 
u16_t
 
Àngth
, 
pbuf_ty≥
 
ty≥
, 
t˝ù_thªad
 *
thªad
);

131 #i‡
LWIP_SUPPORT_CUSTOM_PBUF


132 
pbuf
 *
pbuf_Ælo˚d_cu°om
(
pbuf_œyî
 
l
, 
u16_t
 
Àngth
, 
pbuf_ty≥
 
ty≥
,

133 
pbuf_cu°om
 *
p
, *
∑ylﬂd_mem
,

134 
u16_t
 
∑ylﬂd_mem_Àn
);

136 
pbuf_ªÆloc
(
pbuf
 *
p
, 
u16_t
 
size
);

137 
u8_t
 
pbuf_hódî
(
pbuf
 *
p
, 
s16_t
 
hódî_size
);

138 
pbuf_ªf
(
pbuf
 *
p
);

139 
u8_t
 
pbuf_‰ì
(
pbuf
 *
p
, 
t˝ù_thªad
 *
thªad
);

140 
u8_t
 
pbuf_˛í
(
pbuf
 *
p
);

141 
pbuf_ˇt
(
pbuf
 *
hód
, pbu‡*
èû
);

142 
pbuf_chaö
(
pbuf
 *
hód
, pbu‡*
èû
);

143 
pbuf
 *
pbuf_dechaö
(pbu‡*
p
);

144 
îr_t
 
pbuf_c›y
(
pbuf
 *
p_to
, pbu‡*
p_‰om
);

145 
u16_t
 
pbuf_c›y_∑πül
(
pbuf
 *
p
, *
d©≠å
, u16_à
Àn
, u16_à
off£t
);

146 
îr_t
 
pbuf_èke
(
pbuf
 *
buf
, c⁄° *
d©≠å
, 
u16_t
 
Àn
);

147 
pbuf
 *
pbuf_cﬂÀs˚
(pbu‡*
p
, 
pbuf_œyî
 
œyî
);

148 #i‡
LWIP_CHECKSUM_ON_COPY


149 
îr_t
 
pbuf_fûl_chksum
(
pbuf
 *
p
, 
u16_t
 
°¨t_off£t
, c⁄° *
d©≠å
,

150 
u16_t
 
Àn
, u16_à*
chksum
);

153 
u8_t
 
pbuf_gë_©
(
pbuf
* 
p
, 
u16_t
 
off£t
);

154 
u16_t
 
pbuf_memcmp
(
pbuf
* 
p
, u16_à
off£t
, c⁄° * 
s2
, u16_à
n
);

155 
u16_t
 
pbuf_memföd
(
pbuf
* 
p
, c⁄° * 
mem
, u16_à
mem_Àn
, u16_à
°¨t_off£t
);

156 
u16_t
 
pbuf_°r°r
(
pbuf
* 
p
, c⁄° * 
sub°r
);

158 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/sample_tracepoint.c

2 
	#TRACEPOINT_CREATE_PROBES


	)

6 
	#TRACEPOINT_DEFINE


	)

7 
	~"ßm∂e_åa˚poöt.h
"

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/sample_tracepoint.h

2 #unde‡
TRACEPOINT_PROVIDER


3 
	#TRACEPOINT_PROVIDER
 
ßm∂e_åa˚poöt


	)

5 #unde‡
TRACEPOINT_INCLUDE


6 
	#TRACEPOINT_INCLUDE
 "./ßm∂e_åa˚poöt.h"

	)

8 #i‡!
deföed
(
SAMPLE_TRACEPOINT_H
Ë|| deföed(
TRACEPOINT_HEADER_MULTI_READ
)

9 
	#SAMPLE_TRACEPOINT_H


	)

11 
	~<…äg/åa˚poöt.h
>

13 
TRACEPOINT_EVENT
(

14 
ßm∂e_åa˚poöt
,

15 
mesßge
,

16 
TP_ARGS
(*, 
ãxt
),

17 
TP_FIELDS
(

18 
	$˘f_°rög
(
mesßge
, 
ãxt
)

24 
	$TRACEPOINT_LOGLEVEL
(

25 
ßm∂e_åa˚poöt
,

26 
mesßge
,

27 
TRACE_WARNING
)

31 
	~<…äg/åa˚poöt-evít.h
>

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/sio.h

35 #i‚de‡
__SIO_H__


36 
	#__SIO_H__


	)

38 
	~"lwù/¨ch.h
"

40 #ifde‡
__˝lu•lus


46 #i‚de‡
__sio_fd_t_deföed


47 * 
	tsio_fd_t
;

53 #i‚de‡
sio_›í


60 
sio_fd_t
 
sio_›í
(
u8_t
 
devnum
);

63 #i‚de‡
sio_£nd


72 
sio_£nd
(
u8_t
 
c
, 
sio_fd_t
 
fd
);

75 #i‚de‡
sio_ªcv


83 
u8_t
 
sio_ªcv
(
sio_fd_t
 
fd
);

86 #i‚de‡
sio_ªad


98 
u32_t
 
sio_ªad
(
sio_fd_t
 
fd
, 
u8_t
 *
d©a
, u32_à
Àn
);

101 #i‚de‡
sio_åyªad


111 
u32_t
 
sio_åyªad
(
sio_fd_t
 
fd
, 
u8_t
 *
d©a
, u32_à
Àn
);

114 #i‚de‡
sio_wrôe


125 
u32_t
 
sio_wrôe
(
sio_fd_t
 
fd
, 
u8_t
 *
d©a
, u32_à
Àn
);

128 #i‚de‡
sio_ªad_ab‹t


134 
sio_ªad_ab‹t
(
sio_fd_t
 
fd
);

137 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/snmp.h

33 #i‚de‡
__LWIP_SNMP_H__


34 
	#__LWIP_SNMP_H__


	)

36 
	~"lwù/›t.h
"

38 #ifde‡
__˝lu•lus


42 
	~"lwù/ù_addr.h
"

44 
udp_pcb
;

45 
√tif
;

50 
	e¢mp_ifTy≥
 {

51 
¢mp_ifTy≥_Ÿhî
=1,

52 
¢mp_ifTy≥_ªguœr1822
,

53 
¢mp_ifTy≥_hdh1822
,

54 
¢mp_ifTy≥_ddn_x25
,

55 
¢mp_ifTy≥_rfc877_x25
,

56 
¢mp_ifTy≥_ëhî√t_csmacd
,

57 
¢mp_ifTy≥_iso88023_csmacd
,

58 
¢mp_ifTy≥_iso88024_tokíBus
,

59 
¢mp_ifTy≥_iso88025_tokíRög
,

60 
¢mp_ifTy≥_iso88026_m™
,

61 
¢mp_ifTy≥_°¨L™
,

62 
¢mp_ifTy≥_¥Ÿe⁄_10Mbô
,

63 
¢mp_ifTy≥_¥Ÿe⁄_80Mbô
,

64 
¢mp_ifTy≥_hy≥rch™√l
,

65 
¢mp_ifTy≥_fddi
,

66 
¢mp_ifTy≥_œpb
,

67 
¢mp_ifTy≥_sdlc
,

68 
¢mp_ifTy≥_ds1
,

69 
¢mp_ifTy≥_e1
,

70 
¢mp_ifTy≥_basicISDN
,

71 
¢mp_ifTy≥_¥im¨yISDN
,

72 
¢mp_ifTy≥_¥›PoötToPoötSîül
,

73 
¢mp_ifTy≥_µp
,

74 
¢mp_ifTy≥_so·w¨eLo›back
,

75 
¢mp_ifTy≥_e⁄
,

76 
¢mp_ifTy≥_ëhî√t_3Mbô
,

77 
¢mp_ifTy≥_nsù
,

78 
¢mp_ifTy≥_¶ù
,

79 
¢mp_ifTy≥_u…ø
,

80 
¢mp_ifTy≥_ds3
,

81 
¢mp_ifTy≥_sù
,

82 
¢mp_ifTy≥_‰ame_ªœy


85 #i‡
LWIP_SNMP


88 
	#SNMP_SYSUPTIME_INTERVAL
 10

	)

91 
	#LWIP_SNMP_OBJ_ID_LEN
 32

	)

94 
	s¢mp_obj_id


96 
u8_t
 
Àn
;

97 
s32_t
 
id
[
LWIP_SNMP_OBJ_ID_LEN
];

101 
¢mp_£t_sysde§
(
u8_t
* 
°r
, u8_t* 
Àn
);

102 
¢mp_£t_sysobjid
(
¢mp_obj_id
 *
oid
);

103 
¢mp_gë_sysobjid_±r
(
¢mp_obj_id
 **
oid
);

104 
¢mp_öc_sysu±ime
();

105 
¢mp_add_sysu±ime
(
u32_t
 
vÆue
);

106 
¢mp_gë_sysu±ime
(
u32_t
 *
vÆue
);

107 
¢mp_£t_sysc⁄è˘
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

108 
¢mp_£t_sy¢ame
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

109 
¢mp_£t_sy¶oˇti⁄
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

112 
¢mp_add_iföo˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
);

113 
¢mp_öc_iföuˇ°pkts
(
√tif
 *
ni
);

114 
¢mp_öc_ifönuˇ°pkts
(
√tif
 *
ni
);

115 
¢mp_öc_ifödisˇrds
(
√tif
 *
ni
);

116 
¢mp_add_ifouto˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
);

117 
¢mp_öc_ifoutuˇ°pkts
(
√tif
 *
ni
);

118 
¢mp_öc_ifouäuˇ°pkts
(
√tif
 *
ni
);

119 
¢mp_öc_ifoutdisˇrds
(
√tif
 *
ni
);

120 
¢mp_öc_iÊi°
();

121 
¢mp_dec_iÊi°
();

124 
¢mp_ö£π_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr_t
 *
ù
);

125 
¢mp_dñëe_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr_t
 *
ù
);

128 
¢mp_öc_ùöª˚ives
();

129 
¢mp_öc_ùöhdªº‹s
();

130 
¢mp_öc_ùöaddªº‹s
();

131 
¢mp_öc_ùf‹wd©agøms
();

132 
¢mp_öc_ùöunknow≈rŸos
();

133 
¢mp_öc_ùödisˇrds
();

134 
¢mp_öc_ùödñivîs
();

135 
¢mp_öc_ùouåeque°s
();

136 
¢mp_öc_ùoutdisˇrds
();

137 
¢mp_öc_ùouä‹ouãs
();

138 
¢mp_öc_ùªasmªqds
();

139 
¢mp_öc_ùªasmoks
();

140 
¢mp_öc_ùªasmÁûs
();

141 
¢mp_öc_ù‰agoks
();

142 
¢mp_öc_ù‰agÁûs
();

143 
¢mp_öc_ù‰ag¸óãs
();

144 
¢mp_öc_ùroutögdisˇrds
();

145 
¢mp_ö£π_ùaddridx_åì
(
√tif
 *
ni
);

146 
¢mp_dñëe_ùaddridx_åì
(
√tif
 *
ni
);

147 
¢mp_ö£π_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
);

148 
¢mp_dñëe_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
);

151 
¢mp_öc_icmpömsgs
();

152 
¢mp_öc_icmpöîr‹s
();

153 
¢mp_öc_icmpöde°uƒóchs
();

154 
¢mp_öc_icmpötimìxcds
();

155 
¢mp_öc_icmpö∑rm¥obs
();

156 
¢mp_öc_icmpö§cquíchs
();

157 
¢mp_öc_icmpöªdúe˘s
();

158 
¢mp_öc_icmpöechos
();

159 
¢mp_öc_icmpöech‹ïs
();

160 
¢mp_öc_icmpötime°amps
();

161 
¢mp_öc_icmpötime°am¥ïs
();

162 
¢mp_öc_icmpöaddrmasks
();

163 
¢mp_öc_icmpöaddrmaskªps
();

164 
¢mp_öc_icmpoutmsgs
();

165 
¢mp_öc_icmpouãº‹s
();

166 
¢mp_öc_icmpoutde°uƒóchs
();

167 
¢mp_öc_icmpouâimìxcds
();

168 
¢mp_öc_icmpouç¨m¥obs
();

169 
¢mp_öc_icmpout§cquíchs
();

170 
¢mp_öc_icmpouåedúe˘s
();

171 
¢mp_öc_icmpouãchos
();

172 
¢mp_öc_icmpouãch‹ïs
();

173 
¢mp_öc_icmpouâime°amps
();

174 
¢mp_öc_icmpouâime°am¥ïs
();

175 
¢mp_öc_icmpouèddrmasks
();

176 
¢mp_öc_icmpouèddrmaskªps
();

179 
¢mp_öc_t˝a˘ive›ís
();

180 
¢mp_öc_t˝∑ssive›ís
();

181 
¢mp_öc_t˝©ãm±Áûs
();

182 
¢mp_öc_t˝e°abª£ts
();

183 
¢mp_öc_t˝ö£gs
();

184 
¢mp_öc_t˝out£gs
();

185 
¢mp_öc_t˝ªå™s£gs
();

186 
¢mp_öc_t˝öîrs
();

187 
¢mp_öc_t˝ouå°s
();

190 
¢mp_öc_udpöd©agøms
();

191 
¢mp_öc_ud≤›‹ts
();

192 
¢mp_öc_udpöîr‹s
();

193 
¢mp_öc_udpoutd©agøms
();

194 
¢mp_ö£π_udpidx_åì
(
udp_pcb
 *
pcb
);

195 
¢mp_dñëe_udpidx_åì
(
udp_pcb
 *
pcb
);

198 
¢mp_öc_¢mpöpkts
();

199 
¢mp_öc_¢mpouçkts
();

200 
¢mp_öc_¢mpöbadvîsi⁄s
();

201 
¢mp_öc_¢mpöbadcommunôy«mes
();

202 
¢mp_öc_¢mpöbadcommunôyu£s
();

203 
¢mp_öc_¢mpöa¢∑r£îrs
();

204 
¢mp_öc_¢mpötoobigs
();

205 
¢mp_öc_¢mpönosuch«mes
();

206 
¢mp_öc_¢mpöbadvÆues
();

207 
¢mp_öc_¢mpöªad⁄lys
();

208 
¢mp_öc_¢mpögíîrs
();

209 
¢mp_add_¢mpötŸÆªqv¨s
(
u8_t
 
vÆue
);

210 
¢mp_add_¢mpötŸÆ£tv¨s
(
u8_t
 
vÆue
);

211 
¢mp_öc_¢mpögëªque°s
();

212 
¢mp_öc_¢mpögë√xts
();

213 
¢mp_öc_¢mpö£åeque°s
();

214 
¢mp_öc_¢mpögëª•⁄£s
();

215 
¢mp_öc_¢mpöå≠s
();

216 
¢mp_öc_¢mpouâoobigs
();

217 
¢mp_öc_¢mpouäosuch«mes
();

218 
¢mp_öc_¢mpoutbadvÆues
();

219 
¢mp_öc_¢mpoutgíîrs
();

220 
¢mp_öc_¢mpoutgëªque°s
();

221 
¢mp_öc_¢mpoutgë√xts
();

222 
¢mp_öc_¢mpout£åeque°s
();

223 
¢mp_öc_¢mpoutgëª•⁄£s
();

224 
¢mp_öc_¢mpouâøps
();

225 
¢mp_gë_¢mpgΩid_±r
(
¢mp_obj_id
 **
oid
);

226 
¢mp_£t_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
);

227 
¢mp_gë_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
);

234 
	#¢mp_£t_sysde§
(
°r
, 
Àn
)

	)

235 
	#¢mp_£t_sysobjid
(
oid
);

	)

236 
	#¢mp_gë_sysobjid_±r
(
oid
)

	)

237 
	#¢mp_öc_sysu±ime
()

	)

238 
	#¢mp_add_sysu±ime
(
vÆue
)

	)

239 
	#¢mp_gë_sysu±ime
(
vÆue
)

	)

240 
	#¢mp_£t_sysc⁄è˘
(
oc°r
, 
oc°æí
);

	)

241 
	#¢mp_£t_sy¢ame
(
oc°r
, 
oc°æí
);

	)

242 
	#¢mp_£t_sy¶oˇti⁄
(
oc°r
, 
oc°æí
);

	)

245 
	#¢mp_add_iföo˘ës
(
ni
,
vÆue
)

	)

246 
	#¢mp_öc_iföuˇ°pkts
(
ni
)

	)

247 
	#¢mp_öc_ifönuˇ°pkts
(
ni
)

	)

248 
	#¢mp_öc_ifödisˇrds
(
ni
)

	)

249 
	#¢mp_add_ifouto˘ës
(
ni
,
vÆue
)

	)

250 
	#¢mp_öc_ifoutuˇ°pkts
(
ni
)

	)

251 
	#¢mp_öc_ifouäuˇ°pkts
(
ni
)

	)

252 
	#¢mp_öc_ifoutdisˇrds
(
ni
)

	)

253 
	#¢mp_öc_iÊi°
()

	)

254 
	#¢mp_dec_iÊi°
()

	)

257 
	#¢mp_ö£π_¨pidx_åì
(
ni
,
ù
)

	)

258 
	#¢mp_dñëe_¨pidx_åì
(
ni
,
ù
)

	)

261 
	#¢mp_öc_ùöª˚ives
()

	)

262 
	#¢mp_öc_ùöhdªº‹s
()

	)

263 
	#¢mp_öc_ùöaddªº‹s
()

	)

264 
	#¢mp_öc_ùf‹wd©agøms
()

	)

265 
	#¢mp_öc_ùöunknow≈rŸos
()

	)

266 
	#¢mp_öc_ùödisˇrds
()

	)

267 
	#¢mp_öc_ùödñivîs
()

	)

268 
	#¢mp_öc_ùouåeque°s
()

	)

269 
	#¢mp_öc_ùoutdisˇrds
()

	)

270 
	#¢mp_öc_ùouä‹ouãs
()

	)

271 
	#¢mp_öc_ùªasmªqds
()

	)

272 
	#¢mp_öc_ùªasmoks
()

	)

273 
	#¢mp_öc_ùªasmÁûs
()

	)

274 
	#¢mp_öc_ù‰agoks
()

	)

275 
	#¢mp_öc_ù‰agÁûs
()

	)

276 
	#¢mp_öc_ù‰ag¸óãs
()

	)

277 
	#¢mp_öc_ùroutögdisˇrds
()

	)

278 
	#¢mp_ö£π_ùaddridx_åì
(
ni
)

	)

279 
	#¢mp_dñëe_ùaddridx_åì
(
ni
)

	)

280 
	#¢mp_ö£π_ùπeidx_åì
(
dÊt
, 
ni
)

	)

281 
	#¢mp_dñëe_ùπeidx_åì
(
dÊt
, 
ni
)

	)

284 
	#¢mp_öc_icmpömsgs
()

	)

285 
	#¢mp_öc_icmpöîr‹s
()

	)

286 
	#¢mp_öc_icmpöde°uƒóchs
()

	)

287 
	#¢mp_öc_icmpötimìxcds
()

	)

288 
	#¢mp_öc_icmpö∑rm¥obs
()

	)

289 
	#¢mp_öc_icmpö§cquíchs
()

	)

290 
	#¢mp_öc_icmpöªdúe˘s
()

	)

291 
	#¢mp_öc_icmpöechos
()

	)

292 
	#¢mp_öc_icmpöech‹ïs
()

	)

293 
	#¢mp_öc_icmpötime°amps
()

	)

294 
	#¢mp_öc_icmpötime°am¥ïs
()

	)

295 
	#¢mp_öc_icmpöaddrmasks
()

	)

296 
	#¢mp_öc_icmpöaddrmaskªps
()

	)

297 
	#¢mp_öc_icmpoutmsgs
()

	)

298 
	#¢mp_öc_icmpouãº‹s
()

	)

299 
	#¢mp_öc_icmpoutde°uƒóchs
()

	)

300 
	#¢mp_öc_icmpouâimìxcds
()

	)

301 
	#¢mp_öc_icmpouç¨m¥obs
()

	)

302 
	#¢mp_öc_icmpout§cquíchs
()

	)

303 
	#¢mp_öc_icmpouåedúe˘s
()

	)

304 
	#¢mp_öc_icmpouãchos
()

	)

305 
	#¢mp_öc_icmpouãch‹ïs
()

	)

306 
	#¢mp_öc_icmpouâime°amps
()

	)

307 
	#¢mp_öc_icmpouâime°am¥ïs
()

	)

308 
	#¢mp_öc_icmpouèddrmasks
()

	)

309 
	#¢mp_öc_icmpouèddrmaskªps
()

	)

311 
	#¢mp_öc_t˝a˘ive›ís
()

	)

312 
	#¢mp_öc_t˝∑ssive›ís
()

	)

313 
	#¢mp_öc_t˝©ãm±Áûs
()

	)

314 
	#¢mp_öc_t˝e°abª£ts
()

	)

315 
	#¢mp_öc_t˝ö£gs
()

	)

316 
	#¢mp_öc_t˝out£gs
()

	)

317 
	#¢mp_öc_t˝ªå™s£gs
()

	)

318 
	#¢mp_öc_t˝öîrs
()

	)

319 
	#¢mp_öc_t˝ouå°s
()

	)

322 
	#¢mp_öc_udpöd©agøms
()

	)

323 
	#¢mp_öc_ud≤›‹ts
()

	)

324 
	#¢mp_öc_udpöîr‹s
()

	)

325 
	#¢mp_öc_udpoutd©agøms
()

	)

326 
	#¢mp_ö£π_udpidx_åì
(
pcb
)

	)

327 
	#¢mp_dñëe_udpidx_åì
(
pcb
)

	)

330 
	#¢mp_öc_¢mpöpkts
()

	)

331 
	#¢mp_öc_¢mpouçkts
()

	)

332 
	#¢mp_öc_¢mpöbadvîsi⁄s
()

	)

333 
	#¢mp_öc_¢mpöbadcommunôy«mes
()

	)

334 
	#¢mp_öc_¢mpöbadcommunôyu£s
()

	)

335 
	#¢mp_öc_¢mpöa¢∑r£îrs
()

	)

336 
	#¢mp_öc_¢mpötoobigs
()

	)

337 
	#¢mp_öc_¢mpönosuch«mes
()

	)

338 
	#¢mp_öc_¢mpöbadvÆues
()

	)

339 
	#¢mp_öc_¢mpöªad⁄lys
()

	)

340 
	#¢mp_öc_¢mpögíîrs
()

	)

341 
	#¢mp_add_¢mpötŸÆªqv¨s
(
vÆue
)

	)

342 
	#¢mp_add_¢mpötŸÆ£tv¨s
(
vÆue
)

	)

343 
	#¢mp_öc_¢mpögëªque°s
()

	)

344 
	#¢mp_öc_¢mpögë√xts
()

	)

345 
	#¢mp_öc_¢mpö£åeque°s
()

	)

346 
	#¢mp_öc_¢mpögëª•⁄£s
()

	)

347 
	#¢mp_öc_¢mpöå≠s
()

	)

348 
	#¢mp_öc_¢mpouâoobigs
()

	)

349 
	#¢mp_öc_¢mpouäosuch«mes
()

	)

350 
	#¢mp_öc_¢mpoutbadvÆues
()

	)

351 
	#¢mp_öc_¢mpoutgíîrs
()

	)

352 
	#¢mp_öc_¢mpoutgëªque°s
()

	)

353 
	#¢mp_öc_¢mpoutgë√xts
()

	)

354 
	#¢mp_öc_¢mpout£åeque°s
()

	)

355 
	#¢mp_öc_¢mpoutgëª•⁄£s
()

	)

356 
	#¢mp_öc_¢mpouâøps
()

	)

357 
	#¢mp_gë_¢mpgΩid_±r
(
oid
)

	)

358 
	#¢mp_£t_¢m≥«bÀauthíå≠s
(
vÆue
)

	)

359 
	#¢mp_gë_¢m≥«bÀauthíå≠s
(
vÆue
)

	)

363 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/snmp_asn1.h

35 #i‚de‡
__LWIP_SNMP_ASN1_H__


36 
	#__LWIP_SNMP_ASN1_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/îr.h
"

40 
	~"lwù/pbuf.h
"

41 
	~"lwù/¢mp.h
"

43 #i‡
LWIP_SNMP


45 #ifde‡
__˝lu•lus


49 
	#SNMP_ASN1_UNIV
 (0Ë

	)

50 
	#SNMP_ASN1_APPLIC
 (0x40Ë

	)

51 
	#SNMP_ASN1_CONTXT
 (0x80Ë

	)

53 
	#SNMP_ASN1_CONSTR
 (0x20Ë

	)

54 
	#SNMP_ASN1_PRIMIT
 (0Ë

	)

57 
	#SNMP_ASN1_INTEG
 2

	)

58 
	#SNMP_ASN1_OC_STR
 4

	)

59 
	#SNMP_ASN1_NUL
 5

	)

60 
	#SNMP_ASN1_OBJ_ID
 6

	)

61 
	#SNMP_ASN1_SEQ
 16

	)

64 
	#SNMP_ASN1_IPADDR
 0

	)

65 
	#SNMP_ASN1_COUNTER
 1

	)

66 
	#SNMP_ASN1_GAUGE
 2

	)

67 
	#SNMP_ASN1_TIMETICKS
 3

	)

68 
	#SNMP_ASN1_OPAQUE
 4

	)

71 
	#SNMP_ASN1_PDU_GET_REQ
 0

	)

72 
	#SNMP_ASN1_PDU_GET_NEXT_REQ
 1

	)

73 
	#SNMP_ASN1_PDU_GET_RESP
 2

	)

74 
	#SNMP_ASN1_PDU_SET_REQ
 3

	)

75 
	#SNMP_ASN1_PDU_TRAP
 4

	)

77 
îr_t
 
¢mp_a¢1_dec_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
ty≥
);

78 
îr_t
 
¢mp_a¢1_dec_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
o˘ës_u£d
, u16_à*
Àngth
);

79 
îr_t
 
¢mp_a¢1_dec_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
u32_t
 *
vÆue
);

80 
îr_t
 
¢mp_a¢1_dec_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
s32_t
 *
vÆue
);

81 
îr_t
 
¢mp_a¢1_dec_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
¢mp_obj_id
 *
oid
);

82 
îr_t
 
¢mp_a¢1_dec_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, u16_à
øw_Àn
, 
u8_t
 *
øw
);

84 
¢mp_a¢1_íc_Àngth_˙t
(
u16_t
 
Àngth
, 
u8_t
 *
o˘ës_√eded
);

85 
¢mp_a¢1_íc_u32t_˙t
(
u32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
);

86 
¢mp_a¢1_íc_s32t_˙t
(
s32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
);

87 
¢mp_a¢1_íc_oid_˙t
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
u16_t
 *
o˘ës_√eded
);

88 
îr_t
 
¢mp_a¢1_íc_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
ty≥
);

89 
îr_t
 
¢mp_a¢1_íc_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àngth
);

90 
îr_t
 
¢mp_a¢1_íc_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
o˘ës_√eded
, 
u32_t
 
vÆue
);

91 
îr_t
 
¢mp_a¢1_íc_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
o˘ës_√eded
, 
s32_t
 
vÆue
);

92 
îr_t
 
¢mp_a¢1_íc_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
);

93 
îr_t
 
¢mp_a¢1_íc_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
øw_Àn
, 
u8_t
 *
øw
);

95 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/snmp_msg.h

35 #i‚de‡
__LWIP_SNMP_MSG_H__


36 
	#__LWIP_SNMP_MSG_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/¢mp.h
"

40 
	~"lwù/¢mp_°ru˘s.h
"

41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/îr.h
"

44 #i‡
LWIP_SNMP


46 #i‡
SNMP_PRIVATE_MIB


49 
	~"¥iv©e_mib.h
"

52 #ifde‡
__˝lu•lus


58 #i‚de‡
SNMP_IN_PORT


59 
	#SNMP_IN_PORT
 161

	)

63 #i‚de‡
SNMP_TRAP_PORT


64 
	#SNMP_TRAP_PORT
 162

	)

67 
	#SNMP_ES_NOERROR
 0

	)

68 
	#SNMP_ES_TOOBIG
 1

	)

69 
	#SNMP_ES_NOSUCHNAME
 2

	)

70 
	#SNMP_ES_BADVALUE
 3

	)

71 
	#SNMP_ES_READONLY
 4

	)

72 
	#SNMP_ES_GENERROR
 5

	)

74 
	#SNMP_GENTRAP_COLDSTART
 0

	)

75 
	#SNMP_GENTRAP_WARMSTART
 1

	)

76 
	#SNMP_GENTRAP_AUTHFAIL
 4

	)

77 
	#SNMP_GENTRAP_ENTERPRISESPC
 6

	)

79 
	s¢mp_v¨böd


82 
¢mp_v¨böd
 *
√xt
;

84 
¢mp_v¨böd
 *
¥ev
;

87 
u8_t
 
idít_Àn
;

89 
s32_t
 *
idít
;

92 
u8_t
 
vÆue_ty≥
;

94 
u8_t
 
vÆue_Àn
;

96 *
vÆue
;

99 
u8_t
 
£qÀ∆í
;

101 
u8_t
 
ﬁíÀn
;

103 
u8_t
 
vÀ∆í
;

105 
u16_t
 
£qÀn
;

107 
u16_t
 
ﬁí
;

109 
u16_t
 
vÀn
;

112 
	s¢mp_v¨böd_roŸ


114 
¢mp_v¨böd
 *
hód
;

115 
¢mp_v¨böd
 *
èû
;

117 
u8_t
 
cou¡
;

119 
u8_t
 
£qÀ∆í
;

121 
u16_t
 
£qÀn
;

125 
	s¢mp_ª•_hódî_Àngths


128 
u8_t
 
îridxÀ∆í
;

130 
u8_t
 
îr°©À∆í
;

132 
u8_t
 
ridÀ∆í
;

134 
u8_t
 
pduÀ∆í
;

136 
u8_t
 
comÀ∆í
;

138 
u8_t
 
vîÀ∆í
;

140 
u8_t
 
£qÀ∆í
;

143 
u16_t
 
îridxÀn
;

145 
u16_t
 
îr°©Àn
;

147 
u16_t
 
ridÀn
;

149 
u16_t
 
pduÀn
;

151 
u16_t
 
comÀn
;

153 
u16_t
 
vîÀn
;

155 
u16_t
 
£qÀn
;

159 
	s¢mp_å≠_hódî_Àngths


162 
u8_t
 
t¶íÀn
;

164 
u8_t
 
°ΩÀ∆í
;

166 
u8_t
 
gå∂íÀn
;

168 
u8_t
 
ØddæíÀn
;

170 
u8_t
 
eidÀ∆í
;

172 
u8_t
 
pduÀ∆í
;

174 
u8_t
 
comÀ∆í
;

176 
u8_t
 
vîÀ∆í
;

178 
u8_t
 
£qÀ∆í
;

181 
u16_t
 
t¶í
;

183 
u16_t
 
°ΩÀn
;

185 
u16_t
 
gå∂í
;

187 
u16_t
 
Øddæí
;

189 
u16_t
 
eidÀn
;

191 
u16_t
 
pduÀn
;

193 
u16_t
 
comÀn
;

195 
u16_t
 
vîÀn
;

197 
u16_t
 
£qÀn
;

201 
	#SNMP_MSG_EMPTY
 0

	)

203 
	#SNMP_MSG_SEARCH_OBJ
 1

	)

206 
	#SNMP_MSG_INTERNAL_GET_OBJDEF
 2

	)

207 
	#SNMP_MSG_INTERNAL_GET_VALUE
 3

	)

208 
	#SNMP_MSG_INTERNAL_SET_TEST
 4

	)

209 
	#SNMP_MSG_INTERNAL_GET_OBJDEF_S
 5

	)

210 
	#SNMP_MSG_INTERNAL_SET_VALUE
 6

	)

214 
	#SNMP_MSG_EXTERNAL_GET_OBJDEF
 7

	)

215 
	#SNMP_MSG_EXTERNAL_GET_VALUE
 8

	)

216 
	#SNMP_MSG_EXTERNAL_SET_TEST
 9

	)

217 
	#SNMP_MSG_EXTERNAL_GET_OBJDEF_S
 10

	)

218 
	#SNMP_MSG_EXTERNAL_SET_VALUE
 11

	)

220 
	#SNMP_COMMUNITY_STR_LEN
 64

	)

221 
	s¢mp_msg_p°©


224 
udp_pcb
 *
pcb
;

226 
ù_addr_t
 
sù
;

228 
u16_t
 
•
;

230 
u8_t
 
π
;

232 
s32_t
 
rid
;

234 
s32_t
 
îr‹_°©us
;

236 
s32_t
 
îr‹_ödex
;

238 
u8_t
 
communôy
[
SNMP_COMMUNITY_STR_LEN
 + 1];

240 
u8_t
 
com_°æí
;

242 
u8_t
 
°©e
;

244 
mib_exã∫Æ_node
 *
ext_mib_node
;

245 
¢mp_«me_±r
 
ext_«me_±r
;

246 
obj_def
 
ext_obje˘_def
;

247 
¢mp_obj_id
 
ext_oid
;

249 
u8_t
 
vb_idx
;

251 
¢mp_v¨böd
 *
vb_±r
;

253 
¢mp_v¨böd_roŸ
 
övb
;

255 
¢mp_v¨böd_roŸ
 
outvb
;

257 
¢mp_ª•_hódî_Àngths
 
rhl
;

260 
	s¢mp_msg_å≠


263 
udp_pcb
 *
pcb
;

265 
ù_addr_t
 
dù
;

268 
¢mp_obj_id
 *
íãΩri£
;

270 
u8_t
 
sù_øw
[4];

272 
u32_t
 
gí_å≠
;

274 
u32_t
 
•c_å≠
;

276 
u32_t
 
ts
;

278 
¢mp_v¨böd_roŸ
 
outvb
;

280 
¢mp_å≠_hódî_Àngths
 
thl
;

284 c⁄° 
s32_t
 
¢mp_vîsi⁄
;

286 c⁄° 
¢mp_publiccommunôy
[7];

288 
¢mp_msg_å≠
 
å≠_msg
;

291 
¢mp_öô
();

292 
¢mp_å≠_d°_íabÀ
(
u8_t
 
d°_idx
, u8_à
íabÀ
);

293 
¢mp_å≠_d°_ù_£t
(
u8_t
 
d°_idx
, 
ù_addr_t
 *
d°
);

296 
¢mp_v¨böd
* 
¢mp_v¨böd_Æloc
(
¢mp_obj_id
 *
oid
, 
u8_t
 
ty≥
, u8_à
Àn
);

297 
¢mp_v¨böd_‰ì
(
¢mp_v¨böd
 *
vb
);

298 
¢mp_v¨böd_li°_‰ì
(
¢mp_v¨böd_roŸ
 *
roŸ
);

299 
¢mp_v¨böd_èû_add
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
¢mp_v¨böd
 *
vb
);

300 
¢mp_v¨böd
* 
¢mp_v¨böd_èû_ªmove
(
¢mp_v¨böd_roŸ
 *
roŸ
);

303 
¢mp_msg_evít
(
u8_t
 
ªque°_id
);

304 
îr_t
 
¢mp_£nd_ª•⁄£
(
¢mp_msg_p°©
 *
m_°©
);

305 
îr_t
 
¢mp_£nd_å≠
(
s8_t
 
gíîic_å≠
, 
¢mp_obj_id
 *
eoid
, 
s32_t
 
•ecific_å≠
);

306 
¢mp_cﬁd°¨t_å≠
();

307 
¢mp_authÁû_å≠
();

309 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/snmp_structs.h

37 #i‚de‡
__LWIP_SNMP_STRUCTS_H__


38 
	#__LWIP_SNMP_STRUCTS_H__


	)

40 
	~"lwù/›t.h
"

42 #i‡
LWIP_SNMP


44 
	~"lwù/¢mp.h
"

46 #i‡
SNMP_PRIVATE_MIB


49 
	~"¥iv©e_mib.h
"

52 #ifde‡
__˝lu•lus


57 
	#MIB_OBJECT_NONE
 0

	)

58 
	#MIB_OBJECT_SCALAR
 1

	)

59 
	#MIB_OBJECT_TAB
 2

	)

62 
	#MIB_ACCESS_READ
 1

	)

63 
	#MIB_ACCESS_WRITE
 2

	)

66 
	#MIB_OBJECT_READ_ONLY
 
MIB_ACCESS_READ


	)

67 
	#MIB_OBJECT_READ_WRITE
 (
MIB_ACCESS_READ
 | 
MIB_ACCESS_WRITE
)

	)

68 
	#MIB_OBJECT_WRITE_ONLY
 
MIB_ACCESS_WRITE


	)

69 
	#MIB_OBJECT_NOT_ACCESSIBLE
 0

	)

72 
	sobj_def


75 
u8_t
 
ö°™˚
;

77 
u8_t
 
ac˚ss
;

79 
u8_t
 
a¢_ty≥
;

81 
u16_t
 
v_Àn
;

83 
u8_t
 
id_ö°_Àn
;

85 
s32_t
 *
id_ö°_±r
;

88 
	s¢mp_«me_±r


90 
u8_t
 
idít_Àn
;

91 
s32_t
 *
idít
;

95 
	#MIB_NODE_SC
 0x01

	)

97 
	#MIB_NODE_AR
 0x02

	)

99 
	#MIB_NODE_RA
 0x03

	)

101 
	#MIB_NODE_LR
 0x04

	)

103 
	#MIB_NODE_EX
 0x05

	)

106 
	smib_node


109 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

112 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

114 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

116 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

118 
u8_t
 
node_ty≥
;

120 
u16_t
 
maxÀngth
;

124 
mib_node
 
	tmib_sˇœr_node
;

128 
	smib_¨øy_node


131 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

132 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

133 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

134 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

136 
u8_t
 
node_ty≥
;

137 
u16_t
 
maxÀngth
;

140 c⁄° 
s32_t
 *
objid
;

141 
mib_node
* c⁄° *
≈å
;

146 
	smib_øm_¨øy_node


149 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

150 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

151 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

152 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

154 
u8_t
 
node_ty≥
;

155 
u16_t
 
maxÀngth
;

158 
s32_t
 *
objid
;

159 
mib_node
 **
≈å
;

162 
	smib_li°_node


164 
mib_li°_node
 *
¥ev
;

165 
mib_li°_node
 *
√xt
;

166 
s32_t
 
objid
;

167 
mib_node
 *
≈å
;

172 
	smib_li°_roŸnode


175 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

176 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

177 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

178 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

180 
u8_t
 
node_ty≥
;

181 
u16_t
 
maxÀngth
;

184 
mib_li°_node
 *
hód
;

185 
mib_li°_node
 *
èû
;

187 
u16_t
 
cou¡
;

192 
	smib_exã∫Æ_node


195 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

196 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

197 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

198 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

200 
u8_t
 
node_ty≥
;

201 
u16_t
 
maxÀngth
;

206 * 
addr_öf
;

208 
u8_t
 
åì_Àvñs
;

210 
u16_t
 (*
Àvñ_Àngth
)(* 
addr_öf
, 
u8_t
 
Àvñ
);

213 
s32_t
 (*
idít_cmp
)(* 
addr_öf
, 
u8_t
 
Àvñ
, 
u16_t
 
idx
, s32_à
sub_id
);

214 (*
gë_objid
)(* 
addr_öf
, 
u8_t
 
Àvñ
, 
u16_t
 
idx
, 
s32_t
 *
sub_id
);

217 (*
gë_obje˘_def_q
)(* 
addr_öf
, 
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
);

218 (*
gë_vÆue_q
)(
u8_t
 
rid
, 
obj_def
 *
od
);

219 (*
£t_ã°_q
)(
u8_t
 
rid
, 
obj_def
 *
od
);

220 (*
£t_vÆue_q
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

222 (*
gë_obje˘_def_a
)(
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

223 (*
gë_vÆue_a
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

224 
u8_t
 (*
£t_ã°_a
)(u8_à
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

225 (*
£t_vÆue_a
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

228 (*
gë_obje˘_def_pc
)(
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
);

229 (*
gë_vÆue_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

230 (*
£t_ã°_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

231 (*
£t_vÆue_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

235 c⁄° 
mib_¨øy_node
 
öã∫ë
;

238 
nﬁófs_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

239 
nﬁófs_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

240 
u8_t
 
nﬁófs_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

241 
nﬁófs_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

243 
¢mp_oidtoù
(
s32_t
 *
idít
, 
ù_addr_t
 *
ù
);

244 
¢mp_ùtooid
(
ù_addr_t
 *
ù
, 
s32_t
 *
idít
);

245 
¢mp_ifödext⁄ëif
(
s32_t
 
ifödex
, 
√tif
 **netif);

246 
¢mp_√ti·oifödex
(
√tif
 *√tif, 
s32_t
 *
ifidx
);

248 
mib_li°_node
* 
¢mp_mib_ _Æloc
(
s32_t
 
id
);

249 
¢mp_mib_ _‰ì
(
mib_li°_node
 *
 
);

250 
mib_li°_roŸnode
* 
¢mp_mib_Ãn_Æloc
();

251 
¢mp_mib_Ãn_‰ì
(
mib_li°_roŸnode
 *
Ãn
);

253 
s8_t
 
¢mp_mib_node_ö£π
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
ö¢
);

254 
s8_t
 
¢mp_mib_node_föd
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
‚
);

255 
mib_li°_roŸnode
 *
¢mp_mib_node_dñëe
(mib_li°_roŸnodê*
∫
, 
mib_li°_node
 *
n
);

257 
mib_node
* 
¢mp_£¨ch_åì
(mib_nodê*
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_«me_±r
 *
≈
);

258 
mib_node
* 
¢mp_ex∑nd_åì
(mib_nodê*
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
);

259 
u8_t
 
¢mp_iso_¥efix_t°
(u8_à
idít_Àn
, 
s32_t
 *
idít
);

260 
u8_t
 
¢mp_iso_¥efix_ex∑nd
(u8_à
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
);

262 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/sockets.h

34 #i‚de‡
__LWIP_SOCKETS_H__


35 
	#__LWIP_SOCKETS_H__


	)

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_SOCKET


41 
	~<°ddef.h
>

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/öë.h
"

46 #ifde‡
__˝lu•lus


51 
	ssockaddr_ö
 {

52 
u8_t
 
sö_Àn
;

53 
u8_t
 
sö_Ámûy
;

54 
u16_t
 
sö_p‹t
;

55 
ö_addr
 
sö_addr
;

56 
sö_zîo
[8];

59 
	ssockaddr
 {

60 
u8_t
 
ß_Àn
;

61 
u8_t
 
ß_Ámûy
;

62 
ß_d©a
[14];

65 #i‚de‡
sockÀn_t


66 
	#sockÀn_t
 
u32_t


	)

70 
	#SOCK_STREAM
 1

	)

71 
	#SOCK_DGRAM
 2

	)

72 
	#SOCK_RAW
 3

	)

77 
	#SO_DEBUG
 0x0001

	)

78 
	#SO_ACCEPTCONN
 0x0002

	)

79 
	#SO_REUSEADDR
 0x0004

	)

80 
	#SO_KEEPALIVE
 0x0008

	)

81 
	#SO_DONTROUTE
 0x0010

	)

82 
	#SO_BROADCAST
 0x0020

	)

83 
	#SO_USELOOPBACK
 0x0040

	)

84 
	#SO_LINGER
 0x0080

	)

85 
	#SO_OOBINLINE
 0x0100

	)

86 
	#SO_REUSEPORT
 0x0200

	)

88 
	#SO_DONTLINGER
 (()(~
SO_LINGER
))

	)

93 
	#SO_SNDBUF
 0x1001

	)

94 
	#SO_RCVBUF
 0x1002

	)

95 
	#SO_SNDLOWAT
 0x1003

	)

96 
	#SO_RCVLOWAT
 0x1004

	)

97 
	#SO_SNDTIMEO
 0x1005

	)

98 
	#SO_RCVTIMEO
 0x1006

	)

99 
	#SO_ERROR
 0x1007

	)

100 
	#SO_TYPE
 0x1008

	)

101 
	#SO_CONTIMEO
 0x1009

	)

102 
	#SO_NO_CHECK
 0x100®

	)

108 
	slögî
 {

109 
l_⁄off
;

110 
l_lögî
;

116 
	#SOL_SOCKET
 0xff‡

	)

119 
	#AF_UNSPEC
 0

	)

120 
	#AF_INET
 2

	)

121 
	#PF_INET
 
AF_INET


	)

122 
	#PF_UNSPEC
 
AF_UNSPEC


	)

124 
	#IPPROTO_IP
 0

	)

125 
	#IPPROTO_TCP
 6

	)

126 
	#IPPROTO_UDP
 17

	)

127 
	#IPPROTO_UDPLITE
 136

	)

130 
	#MSG_PEEK
 0x01

	)

131 
	#MSG_WAITALL
 0x02

	)

132 
	#MSG_OOB
 0x04

	)

133 
	#MSG_DONTWAIT
 0x08

	)

134 
	#MSG_MORE
 0x10

	)

140 
	#IP_TOS
 1

	)

141 
	#IP_TTL
 2

	)

143 #i‡
LWIP_TCP


147 
	#TCP_NODELAY
 0x01

	)

148 
	#TCP_KEEPALIVE
 0x02

	)

149 
	#TCP_KEEPIDLE
 0x03

	)

150 
	#TCP_KEEPINTVL
 0x04

	)

151 
	#TCP_KEEPCNT
 0x05

	)

154 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


158 
	#UDPLITE_SEND_CSCOV
 0x01

	)

159 
	#UDPLITE_RECV_CSCOV
 0x02

	)

163 #i‡
LWIP_IGMP


167 
	#IP_ADD_MEMBERSHIP
 3

	)

168 
	#IP_DROP_MEMBERSHIP
 4

	)

169 
	#IP_MULTICAST_TTL
 5

	)

170 
	#IP_MULTICAST_IF
 6

	)

171 
	#IP_MULTICAST_LOOP
 7

	)

173 
	sù_mªq
 {

174 
ö_addr
 
imr_mu…üddr
;

175 
ö_addr
 
imr_öãrÁ˚
;

176 } 
	tù_mªq
;

195 
	#IPTOS_TOS_MASK
 0x1E

	)

196 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

197 
	#IPTOS_LOWDELAY
 0x10

	)

198 
	#IPTOS_THROUGHPUT
 0x08

	)

199 
	#IPTOS_RELIABILITY
 0x04

	)

200 
	#IPTOS_LOWCOST
 0x02

	)

201 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

212 
	#IPTOS_PREC_MASK
 0xe0

	)

213 
	#IPTOS_PREC
(
tos
Ë(—osË& 
IPTOS_PREC_MASK
)

	)

214 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

215 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

216 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

217 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

218 
	#IPTOS_PREC_FLASH
 0x60

	)

219 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

220 
	#IPTOS_PREC_PRIORITY
 0x20

	)

221 
	#IPTOS_PREC_ROUTINE
 0x00

	)

234 #i‡!
deföed
(
FIONREAD
Ë|| !deföed(
FIONBIO
)

235 
	#IOCPARM_MASK
 0x7fU

	)

236 
	#IOC_VOID
 0x20000000UL

	)

237 
	#IOC_OUT
 0x40000000UL

	)

238 
	#IOC_IN
 0x80000000UL

	)

239 
	#IOC_INOUT
 (
IOC_IN
|
IOC_OUT
)

	)

242 
	#_IO
(
x
,
y
Ë(
IOC_VOID
|((x)<<8)|(y))

	)

244 
	#_IOR
(
x
,
y
,
t
Ë(
IOC_OUT
|((()—)&
IOCPARM_MASK
)<<16)|((x)<<8)|(y))

	)

246 
	#_IOW
(
x
,
y
,
t
Ë(
IOC_IN
|((()—)&
IOCPARM_MASK
)<<16)|((x)<<8)|(y))

	)

249 #i‚de‡
FIONREAD


250 
	#FIONREAD
 
	`_IOR
('f', 127, Ë

	)

252 #i‚de‡
FIONBIO


253 
	#FIONBIO
 
	`_IOW
('f', 126, Ë

	)

257 #i‚de‡
SIOCSHIWAT


258 
	#SIOCSHIWAT
 
	`_IOW
('s', 0, Ë

	)

259 
	#SIOCGHIWAT
 
	`_IOR
('s', 1, Ë

	)

260 
	#SIOCSLOWAT
 
	`_IOW
('s', 2, Ë

	)

261 
	#SIOCGLOWAT
 
	`_IOR
('s', 3, Ë

	)

262 
	#SIOCATMARK
 
	`_IOR
('s', 7, Ë

	)

266 #i‚de‡
F_GETFL


267 
	#F_GETFL
 3

	)

269 #i‚de‡
F_SETFL


270 
	#F_SETFL
 4

	)

275 #i‚de‡
O_NONBLOCK


276 
	#O_NONBLOCK
 1

	)

278 #i‚de‡
O_NDELAY


279 
	#O_NDELAY
 1

	)

282 #i‚de‡
SHUT_RD


283 
	#SHUT_RD
 0

	)

284 
	#SHUT_WR
 1

	)

285 
	#SHUT_RDWR
 2

	)

289 #i‚de‡
FD_SET


290 #unde‡
FD_SETSIZE


292 
	#FD_SETSIZE
 
MEMP_NUM_NETCONN


	)

293 
	#FD_SET
(
n
, 
p
Ë(’)->
fd_bôs
[“)/8] |(1 << (“Ë& 7)))

	)

294 
	#FD_CLR
(
n
, 
p
Ë(’)->
fd_bôs
[“)/8] &~(1 << (“Ë& 7)))

	)

295 
	#FD_ISSET
(
n
,
p
Ë(’)->
fd_bôs
[“)/8] & (1 << (“Ë& 7)))

	)

296 
	#FD_ZERO
(
p
Ë
	`mem£t
((*)’),0,(*’)))

	)

298 
	sfd_£t
 {

299 
fd_bôs
 [(
FD_SETSIZE
+7)/8];

300 } 
	tfd_£t
;

306 #i‚de‡
LWIP_TIMEVAL_PRIVATE


307 
	#LWIP_TIMEVAL_PRIVATE
 1

	)

310 #i‡
LWIP_TIMEVAL_PRIVATE


311 
	stimevÆ
 {

312 
tv_£c
;

313 
tv_u£c
;

317 
lwù_sockë_öô
();

319 
lwù_ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
);

320 
lwù_böd
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

321 
lwù_shutdown
(
s
, 
how
);

322 
lwù_gë≥î«me
 (
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

323 
lwù_gësock«me
 (
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

324 
lwù_gësock›t
 (
s
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
sockÀn_t
 *
›éí
);

325 
lwù_£tsock›t
 (
s
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
);

326 
lwù_˛o£
(
s
);

327 
lwù_c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

328 
lwù_li°í
(
s
, 
backlog
);

329 
lwù_ªcv
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
);

330 
lwù_ªad
(
s
, *
mem
, 
size_t
 
Àn
);

331 
lwù_ªcv‰om
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
,

332 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
);

333 
lwù_£nd
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
, 
Êags
);

334 
lwù_£ndto
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
, 
Êags
,

335 c⁄° 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
);

336 
lwù_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

337 
lwù_wrôe
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
);

338 
lwù_£À˘
(
maxfdp1
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
,

339 
timevÆ
 *
timeout
);

340 
lwù_io˘l
(
s
, 
cmd
, *
¨gp
);

341 
lwù_f˙é
(
s
, 
cmd
, 
vÆ
);

342 
lwù_sock
 *
gë_sockë
(
s
);

344 
sock_ªad_u∆ock
();

346 #i‡
LWIP_COMPAT_SOCKETS


347 
	#ac˚±
(
a
,
b
,
c
Ë
	`lwù_ac˚±
◊,b,c)

	)

348 
	#böd
(
a
,
b
,
c
Ë
	`lwù_böd
◊,b,c)

	)

349 
	#shutdown
(
a
,
b
Ë
	`lwù_shutdown
◊,b)

	)

350 
	#˛o£sockë
(
s
Ë
	`lwù_˛o£
(s)

	)

351 
	#c⁄√˘
(
a
,
b
,
c
Ë
	`lwù_c⁄√˘
◊,b,c)

	)

352 
	#gësock«me
(
a
,
b
,
c
Ë
	`lwù_gësock«me
◊,b,c)

	)

353 
	#gë≥î«me
(
a
,
b
,
c
Ë
	`lwù_gë≥î«me
◊,b,c)

	)

354 
	#£tsock›t
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_£tsock›t
◊,b,c,d,e)

	)

355 
	#gësock›t
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_gësock›t
◊,b,c,d,e)

	)

356 
	#li°í
(
a
,
b
Ë
	`lwù_li°í
◊,b)

	)

357 
	#ªcv
(
a
,
b
,
c
,
d
Ë
	`lwù_ªcv
◊,b,c,d)

	)

358 
	#ªcv‰om
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`lwù_ªcv‰om
◊,b,c,d,e,f)

	)

359 
	#£nd
(
a
,
b
,
c
,
d
Ë
	`lwù_£nd
◊,b,c,d)

	)

360 
	#£ndto
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`lwù_£ndto
◊,b,c,d,e,f)

	)

361 
	#sockë
(
a
,
b
,
c
Ë
	`lwù_sockë
◊,b,c)

	)

362 
	#£À˘
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_£À˘
◊,b,c,d,e)

	)

363 
	#io˘lsockë
(
a
,
b
,
c
Ë
	`lwù_io˘l
◊,b,c)

	)

365 #i‡
LWIP_POSIX_SOCKETS_IO_NAMES


366 
	#ªad
(
a
,
b
,
c
Ë
	`lwù_ªad
◊,b,c)

	)

367 
	#wrôe
(
a
,
b
,
c
Ë
	`lwù_wrôe
◊,b,c)

	)

368 
	#˛o£
(
s
Ë
	`lwù_˛o£
(s)

	)

373 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/stats.h

32 #i‚de‡
__LWIP_STATS_H__


33 
	#__LWIP_STATS_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/mem.h
"

38 
	~"lwù/memp.h
"

40 #ifde‡
__˝lu•lus


44 #i‡
LWIP_STATS


46 #i‚de‡
LWIP_STATS_LARGE


47 
	#LWIP_STATS_LARGE
 0

	)

50 #i‡
LWIP_STATS_LARGE


51 
	#STAT_COUNTER
 
u32_t


	)

52 
	#STAT_COUNTER_F
 
U32_F


	)

54 
	#STAT_COUNTER
 
u16_t


	)

55 
	#STAT_COUNTER_F
 
U16_F


	)

58 
	s°©s_¥Ÿo
 {

59 
STAT_COUNTER
 
xmô
;

60 
STAT_COUNTER
 
ªcv
;

61 
STAT_COUNTER
 
fw
;

62 
STAT_COUNTER
 
dr›
;

63 
STAT_COUNTER
 
chkîr
;

64 
STAT_COUNTER
 
À√º
;

65 
STAT_COUNTER
 
memîr
;

66 
STAT_COUNTER
 
πîr
;

67 
STAT_COUNTER
 
¥Ÿîr
;

68 
STAT_COUNTER
 
›ãº
;

69 
STAT_COUNTER
 
îr
;

70 
STAT_COUNTER
 
ˇchehô
;

71 
STAT_COUNTER
 
ooo
;

72 
STAT_COUNTER
 
ªxmô
;

75 
	s°©s_igmp
 {

76 
STAT_COUNTER
 
	mxmô
;

77 
STAT_COUNTER
 
	mªcv
;

78 
STAT_COUNTER
 
	mdr›
;

79 
STAT_COUNTER
 
	mchkîr
;

80 
STAT_COUNTER
 
	mÀ√º
;

81 
STAT_COUNTER
 
	mmemîr
;

82 
STAT_COUNTER
 
	m¥Ÿîr
;

83 
STAT_COUNTER
 
	mrx_v1
;

84 
STAT_COUNTER
 
	mrx_group
;

85 
STAT_COUNTER
 
	mrx_gíîÆ
;

86 
STAT_COUNTER
 
	mrx_ªp‹t
;

87 
STAT_COUNTER
 
	mtx_joö
;

88 
STAT_COUNTER
 
	mtx_Àave
;

89 
STAT_COUNTER
 
	mtx_ªp‹t
;

92 
	s°©s_mem
 {

93 #ifde‡
LWIP_DEBUG


94 c⁄° *
	m«me
;

96 
mem_size_t
 
	mavaû
;

97 
mem_size_t
 
	mu£d
;

98 
mem_size_t
 
	mmax
;

99 
STAT_COUNTER
 
	mîr
;

100 
STAT_COUNTER
 
	mûÀgÆ
;

103 
	s°©s_sy£Àm
 {

104 
STAT_COUNTER
 
	mu£d
;

105 
STAT_COUNTER
 
	mmax
;

106 
STAT_COUNTER
 
	mîr
;

109 
	s°©s_sys
 {

110 
°©s_sy£Àm
 
	m£m
;

111 
°©s_sy£Àm
 
	mmuãx
;

112 
°©s_sy£Àm
 
	mmbox
;

115 
	s°©s_
 {

116 #i‡
LINK_STATS


117 
°©s_¥Ÿo
 
	mlök
;

119 #i‡
ETHARP_STATS


120 
°©s_¥Ÿo
 
	mëh¨p
;

122 #i‡
IPFRAG_STATS


123 
°©s_¥Ÿo
 
	mù_‰ag
;

125 #i‡
IP_STATS


126 
°©s_¥Ÿo
 
	mù
;

128 #i‡
ICMP_STATS


129 
°©s_¥Ÿo
 
	micmp
;

131 #i‡
IGMP_STATS


132 
°©s_igmp
 
	migmp
;

134 #i‡
UDP_STATS


135 
°©s_¥Ÿo
 
	mudp
;

137 #i‡
TCP_STATS


138 
°©s_¥Ÿo
 
	mt˝
;

140 #i‡
MEM_STATS


141 
°©s_mem
 
	mmem
;

143 #i‡
MEMP_STATS


144 
°©s_mem
 
	mmemp
[
MEMP_MAX
];

146 #i‡
SYS_STATS


147 
°©s_sys
 
	msys
;

151 
°©s_
 
lwù_°©s
;

153 
°©s_öô
();

155 
	#STATS_INC
(
x
Ë++
lwù_°©s
.
	)
x

156 
	#STATS_DEC
(
x
Ë--
lwù_°©s
.
	)
x

157 
	#STATS_INC_USED
(
x
, 
y
Ëdÿ{ 
lwù_°©s
.x.
u£d
 += y; \

158 i‡(
lwù_°©s
.
x
.
max
 <Üwù_°©s.x.
u£d
) { \

159 
lwù_°©s
.
x
.
max
 =Üwù_°©s.x.
u£d
; \

161 } 0)

	)

163 
	#°©s_öô
()

	)

164 
	#STATS_INC
(
x
)

	)

165 
	#STATS_DEC
(
x
)

	)

166 
	#STATS_INC_USED
(
x
)

	)

169 #i‡
TCP_STATS


170 
	#TCP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

171 
	#TCP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
t˝
, "TCP")

	)

173 
	#TCP_STATS_INC
(
x
)

	)

174 
	#TCP_STATS_DISPLAY
()

	)

177 #i‡
UDP_STATS


178 
	#UDP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

179 
	#UDP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
udp
, "UDP")

	)

181 
	#UDP_STATS_INC
(
x
)

	)

182 
	#UDP_STATS_DISPLAY
()

	)

185 #i‡
ICMP_STATS


186 
	#ICMP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

187 
	#ICMP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
icmp
, "ICMP")

	)

189 
	#ICMP_STATS_INC
(
x
)

	)

190 
	#ICMP_STATS_DISPLAY
()

	)

193 #i‡
IGMP_STATS


194 
	#IGMP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

195 
	#IGMP_STATS_DISPLAY
(Ë
	`°©s_di•œy_igmp
(&
lwù_°©s
.
igmp
)

	)

197 
	#IGMP_STATS_INC
(
x
)

	)

198 
	#IGMP_STATS_DISPLAY
()

	)

201 #i‡
IP_STATS


202 
	#IP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

203 
	#IP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù
, "IP")

	)

205 
	#IP_STATS_INC
(
x
)

	)

206 
	#IP_STATS_DISPLAY
()

	)

209 #i‡
IPFRAG_STATS


210 
	#IPFRAG_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

211 
	#IPFRAG_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù_‰ag
, "IP_FRAG")

	)

213 
	#IPFRAG_STATS_INC
(
x
)

	)

214 
	#IPFRAG_STATS_DISPLAY
()

	)

217 #i‡
ETHARP_STATS


218 
	#ETHARP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

219 
	#ETHARP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ëh¨p
, "ETHARP")

	)

221 
	#ETHARP_STATS_INC
(
x
)

	)

222 
	#ETHARP_STATS_DISPLAY
()

	)

225 #i‡
LINK_STATS


226 
	#LINK_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

227 
	#LINK_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
lök
, "LINK")

	)

229 
	#LINK_STATS_INC
(
x
)

	)

230 
	#LINK_STATS_DISPLAY
()

	)

233 #i‡
MEM_STATS


234 
	#MEM_STATS_AVAIL
(
x
, 
y
Ë
lwù_°©s
.
mem
.x = 
	)
y

235 
	#MEM_STATS_INC
(
x
Ë
	`STATS_INC
(
mem
.x)

	)

236 
	#MEM_STATS_INC_USED
(
x
, 
y
Ë
	`STATS_INC_USED
(
mem
, y)

	)

237 
	#MEM_STATS_DEC_USED
(
x
, 
y
Ë
lwù_°©s
.
mem
.x -
	)
y

238 
	#MEM_STATS_DISPLAY
(Ë
	`°©s_di•œy_mem
(&
lwù_°©s
.
mem
, "HEAP")

	)

240 
	#MEM_STATS_AVAIL
(
x
, 
y
)

	)

241 
	#MEM_STATS_INC
(
x
)

	)

242 
	#MEM_STATS_INC_USED
(
x
, 
y
)

	)

243 
	#MEM_STATS_DEC_USED
(
x
, 
y
)

	)

244 
	#MEM_STATS_DISPLAY
()

	)

247 #i‡
MEMP_STATS


248 
	#MEMP_STATS_AVAIL
(
x
, 
i
, 
y
Ë
lwù_°©s
.
memp
[i].x = 
	)
y

249 
	#MEMP_STATS_INC
(
x
, 
i
Ë
	`STATS_INC
(
memp
[i].x)

	)

250 
	#MEMP_STATS_DEC
(
x
, 
i
Ë
	`STATS_DEC
(
memp
[i].x)

	)

251 
	#MEMP_STATS_INC_USED
(
x
, 
i
Ë
	`STATS_INC_USED
(
memp
[i], 1)

	)

252 
	#MEMP_STATS_DISPLAY
(
i
Ë
	`°©s_di•œy_memp
(&
lwù_°©s
.
memp
[i], i)

	)

254 
	#MEMP_STATS_AVAIL
(
x
, 
i
, 
y
)

	)

255 
	#MEMP_STATS_INC
(
x
, 
i
)

	)

256 
	#MEMP_STATS_DEC
(
x
, 
i
)

	)

257 
	#MEMP_STATS_INC_USED
(
x
, 
i
)

	)

258 
	#MEMP_STATS_DISPLAY
(
i
)

	)

261 #i‡
SYS_STATS


262 
	#SYS_STATS_INC
(
x
Ë
	`STATS_INC
(
sys
.x)

	)

263 
	#SYS_STATS_DEC
(
x
Ë
	`STATS_DEC
(
sys
.x)

	)

264 
	#SYS_STATS_INC_USED
(
x
Ë
	`STATS_INC_USED
(
sys
.x, 1)

	)

265 
	#SYS_STATS_DISPLAY
(Ë
	`°©s_di•œy_sys
(&
lwù_°©s
.
sys
)

	)

267 
	#SYS_STATS_INC
(
x
)

	)

268 
	#SYS_STATS_DEC
(
x
)

	)

269 
	#SYS_STATS_INC_USED
(
x
)

	)

270 
	#SYS_STATS_DISPLAY
()

	)

274 #i‡
LWIP_STATS_DISPLAY


275 
°©s_di•œy
();

276 
°©s_di•œy_¥Ÿo
(
°©s_¥Ÿo
 *
¥Ÿo
, *
«me
);

277 
°©s_di•œy_igmp
(
°©s_igmp
 *
igmp
);

278 
°©s_di•œy_mem
(
°©s_mem
 *
mem
, *
«me
);

279 
°©s_di•œy_memp
(
°©s_mem
 *
mem
, 
ödex
);

280 
°©s_di•œy_sys
(
°©s_sys
 *
sys
);

282 
	#°©s_di•œy
()

	)

283 
	#°©s_di•œy_¥Ÿo
(
¥Ÿo
, 
«me
)

	)

284 
	#°©s_di•œy_igmp
(
igmp
)

	)

285 
	#°©s_di•œy_mem
(
mem
, 
«me
)

	)

286 
	#°©s_di•œy_memp
(
mem
, 
ödex
)

	)

287 
	#°©s_di•œy_sys
(
sys
)

	)

290 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/sys.h

32 #i‚de‡
__LWIP_SYS_H__


33 
	#__LWIP_SYS_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 #i‡
NO_SYS


45 
u8_t
 
	tsys_£m_t
;

46 
u8_t
 
	tsys_muãx_t
;

47 
u8_t
 
	tsys_mbox_t
;

49 
	#sys_£m_√w
(
s
, 
c
Ë
ERR_OK


	)

50 
	#sys_£m_sig«l
(
s
)

	)

51 
	#sys_£m_waô
(
s
)

	)

52 
	#sys_¨ch_£m_waô
(
s
,
t
)

	)

53 
	#sys_£m_‰ì
(
s
)

	)

54 
	#sys_muãx_√w
(
mu
Ë
ERR_OK


	)

55 
	#sys_muãx_lock
(
mu
)

	)

56 
	#sys_muãx_u∆ock
(
mu
)

	)

57 
	#sys_muãx_‰ì
(
mu
)

	)

58 
	#sys_mbox_√w
(
m
, 
s
Ë
ERR_OK


	)

59 
	#sys_mbox_„tch
(
m
,
d
)

	)

60 
	#sys_mbox_åy„tch
(
m
,
d
)

	)

61 
	#sys_mbox_po°
(
m
,
d
)

	)

62 
	#sys_mbox_åypo°
(
m
,
d
)

	)

63 
	#sys_mbox_‰ì
(
m
)

	)

65 
	#sys_thªad_√w
(
n
,
t
,
a
,
s
,
p
)

	)

67 
	#sys_m¶ìp
(
t
)

	)

72 
	#SYS_ARCH_TIMEOUT
 0xffffffffUL

	)

77 
	#SYS_MBOX_EMPTY
 
SYS_ARCH_TIMEOUT


	)

79 
	~"lwù/îr.h
"

80 
	~"¨ch/sys_¨ch.h
"

83 (*
	tlwù_thªad_‚
)(*
	t¨g
);

92 #i‡
LWIP_COMPAT_MUTEX


94 
	#sys_muãx_t
 
sys_£m_t


	)

95 
	#sys_muãx_√w
(
muãx
Ë
	`sys_£m_√w
(muãx, 1)

	)

96 
	#sys_muãx_lock
(
muãx
Ë
	`sys_£m_waô
(muãx)

	)

97 
	#sys_muãx_u∆ock
(
muãx
Ë
	`sys_£m_sig«l
(muãx)

	)

98 
	#sys_muãx_‰ì
(
muãx
Ë
	`sys_£m_‰ì
(muãx)

	)

99 
	#sys_muãx_vÆid
(
muãx
Ë
	`sys_£m_vÆid
(muãx)

	)

100 
	#sys_muãx_£t_övÆid
(
muãx
Ë
	`sys_£m_£t_övÆid
(muãx)

	)

107 
îr_t
 
	`sys_muãx_√w
(
sys_muãx_t
 *
muãx
);

110 
	`sys_muãx_lock
(
sys_muãx_t
 *
muãx
);

113 
	`sys_muãx_u∆ock
(
sys_muãx_t
 *
muãx
);

116 
	`sys_muãx_‰ì
(
sys_muãx_t
 *
muãx
);

117 #i‚de‡
sys_muãx_vÆid


119 
	`sys_muãx_vÆid
(
sys_muãx_t
 *
muãx
);

121 #i‚de‡
sys_muãx_£t_övÆid


123 
	`sys_muãx_£t_övÆid
(
sys_muãx_t
 *
muãx
);

133 
îr_t
 
	`sys_£m_√w
(
sys_£m_t
 *
£m
, 
u8_t
 
cou¡
);

136 
	`sys_£m_sig«l
(
sys_£m_t
 *
£m
);

142 
u32_t
 
	`sys_¨ch_£m_waô
(
sys_£m_t
 *
£m
, u32_à
timeout
);

145 
	`sys_£m_‰ì
(
sys_£m_t
 *
£m
);

147 
	#sys_£m_waô
(
£m
Ë
	`sys_¨ch_£m_waô
(£m, 0)

	)

148 #i‚de‡
sys_£m_vÆid


150 
	`sys_£m_vÆid
(
sys_£m_t
 *
£m
);

152 #i‚de‡
sys_£m_£t_övÆid


154 
	`sys_£m_£t_övÆid
(
sys_£m_t
 *
£m
);

158 #i‚de‡
sys_m¶ìp


159 
	`sys_m¶ìp
(
u32_t
 
ms
);

168 
îr_t
 
	`sys_mbox_√w
(
sys_mbox_t
 *
mbox
, 
size
);

169 
îr_t
 
	`sys_lwù_mbox_√w
(
lwù_mbox_t
 *
mbox
, 
size
);

174 
	`sys_mbox_po°
(
sys_mbox_t
 *
mbox
, *
msg
);

175 
	`sys_lwù_mbox_po°
(
lwù_mbox_t
 *
mbox
, *
msg
);

179 
îr_t
 
	`sys_mbox_åypo°
(
sys_mbox_t
 *
mbox
, *
msg
);

180 
îr_t
 
	`sys_lwù_mbox_åypo°
(
lwù_mbox_t
 *
mbox
, *
msg
);

188 
u32_t
 
	`sys_¨ch_mbox_„tch
(
sys_mbox_t
 *
mbox
, **
msg
, u32_à
timeout
, 
u8_t
 
t˝t
);

189 
u32_t
 
	`sys_lwù_¨ch_mbox_check
(
sys_lwù_mbox
 **
mb
, **
msg
);

190 
u32_t
 
	`sys_lwù_¨ch_mbox_„tch
(
lwù_mbox_t
 *
mbox
, **
msg
, u32_à
timeout
, 
u8_t
 
t˝t
);

192 #i‚de‡
sys_¨ch_mbox_åy„tch


199 
u32_t
 
	`sys_¨ch_mbox_åy„tch
(
sys_mbox_t
 *
mbox
, **
msg
);

200 
u32_t
 
	`sys_lwù_¨ch_mbox_åy„tch
(
lwù_mbox_t
 *
mbox
, **
msg
);

203 
	#sys_mbox_åy„tch
(
mbox
, 
msg
Ë
	`sys_¨ch_mbox_åy„tch
(mbox, msg)

	)

204 
	#sys_lwù_mbox_åy„tch
(
mbox
, 
msg
Ë
	`sys_lwù_¨ch_mbox_åy„tch
(mbox, msg)

	)

207 
	`sys_mbox_‰ì
(
sys_mbox_t
 *
mbox
);

208 
	`sys_lwù_mbox_‰ì
(
lwù_mbox_t
 *
mbox
);

209 
	#sys_mbox_„tch
(
mbox
, 
msg
Ë
	`sys_¨ch_mbox_„tch
(mbox, msg, 0, 0)

	)

210 #i‚de‡
sys_mbox_vÆid


212 
	`sys_mbox_vÆid
(
sys_mbox_t
 *
mbox
);

214 #i‚de‡
sys_mbox_£t_övÆid


216 
	`sys_mbox_£t_övÆid
(
sys_mbox_t
 *
mbox
);

226 
sys_thªad_t
 
	`sys_thªad_√w
(c⁄° *
«me
, 
lwù_thªad_‚
 
thªad
, *
¨g
, 
°acksize
, 
¥io
);

231 
	`sys_öô
();

233 #i‚de‡
sys_jiffõs


235 
u32_t
 
	`sys_jiffõs
();

240 
u32_t
 
	`sys_now
();

247 #i‚de‡
SYS_ARCH_PROTECT


253 #i‡
SYS_LIGHTWEIGHT_PROT


260 
	#SYS_ARCH_DECL_PROTECT
(
Àv
Ë
sys_¥Ÿ_t
 
	)
lev

270 
	#SYS_ARCH_PROTECT
(
Àv
ËÀv = 
	`sys_¨ch_¥Ÿe˘
()

	)

279 
	#SYS_ARCH_UNPROTECT
(
Àv
Ë
	`sys_¨ch_u≈rŸe˘
÷ev)

	)

280 
sys_¥Ÿ_t
 
	`sys_¨ch_¥Ÿe˘
();

281 
	`sys_¨ch_u≈rŸe˘
(
sys_¥Ÿ_t
 
pvÆ
);

285 
	#SYS_ARCH_DECL_PROTECT
(
Àv
)

	)

286 
	#SYS_ARCH_PROTECT
(
Àv
)

	)

287 
	#SYS_ARCH_UNPROTECT
(
Àv
)

	)

298 #i‚de‡
SYS_ARCH_INC


299 
	#SYS_ARCH_INC
(
v¨
, 
vÆ
) do { \

300 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

301 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

302 
v¨
 +
vÆ
; \

303 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

304 } 0)

	)

307 #i‚de‡
SYS_ARCH_DEC


308 
	#SYS_ARCH_DEC
(
v¨
, 
vÆ
) do { \

309 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

310 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

311 
v¨
 -
vÆ
; \

312 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

313 } 0)

	)

316 #i‚de‡
SYS_ARCH_GET


317 
	#SYS_ARCH_GET
(
v¨
, 
ªt
) do { \

318 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

319 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

320 
ªt
 = 
v¨
; \

321 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

322 } 0)

	)

325 #i‚de‡
SYS_ARCH_SET


326 
	#SYS_ARCH_SET
(
v¨
, 
vÆ
) do { \

327 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

328 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

329 
v¨
 = 
vÆ
; \

330 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

331 } 0)

	)

334 
	`lwù_thªad_aff
(
˝u
);

336 #ifde‡
__˝lu•lus


337 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/tcp.h

32 #i‚de‡
__LWIP_TCP_H__


33 
	#__LWIP_TCP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_TCP


39 
	~"lwù/sys.h
"

40 
	~"lwù/mem.h
"

41 
	~"lwù/pbuf.h
"

42 
	~"lwù/t˝ù_thªad.h
"

43 
	~"lwù/ù.h
"

44 
	~"lwù/icmp.h
"

45 
	~"lwù/îr.h
"

47 #ifde‡
__˝lu•lus


51 
t˝_pcb
;

61 #i‡
LWIP_EVENT_API


63 
	elwù_evít
 {

64 
LWIP_EVENT_ACCEPT
,

65 
LWIP_EVENT_SENT
,

66 
LWIP_EVENT_RECV
,

67 
LWIP_EVENT_CONNECTED
,

68 
LWIP_EVENT_POLL
,

69 
LWIP_EVENT_ERR


72 
îr_t
 
lwù_t˝_evít
(*
¨g
, 
t˝_pcb
 *
pcb
,

73 
lwù_evít
,

74 
pbuf
 *
p
,

75 
u16_t
 
size
,

76 
îr_t
 
îr
);

81 
t˝_pcb
 * 
t˝_√w
 ();

83 
t˝_¨g
 (
t˝_pcb
 *
pcb
, *
¨g
);

84 
t˝_ac˚±
 (
t˝_pcb
 *
pcb
, 
t˝_ac˚±_‚
 
ac˚±
);

85 
t˝_ªcv
 (
t˝_pcb
 *
pcb
, 
t˝_ªcv_‚
 
ªcv
);

86 
t˝_£¡
 (
t˝_pcb
 *
pcb
, 
t˝_£¡_‚
 
£¡
);

87 
t˝_pﬁl
 (
t˝_pcb
 *
pcb
, 
t˝_pﬁl_‚
 
pﬁl
, 
u8_t
 
öãrvÆ
);

88 
t˝_îr
 (
t˝_pcb
 *
pcb
, 
t˝_îr_‚
 
îr
);

90 
	#t˝_mss
(
pcb
Ë((’cb)->
Êags
 & 
TF_TIMESTAMP
Ë? (’cb)->
mss
 - 12Ë: (pcb)->mss)

	)

91 
	#t˝_¢dbuf
(
pcb
Ë(’cb)->
¢d_buf
)

	)

92 
	#t˝_¢dqueuñí
(
pcb
Ë(’cb)->
¢d_queuñí
)

	)

93 
	#t˝_«gÀ_dißbÀ
(
pcb
Ë(’cb)->
Êags
 |
TF_NODELAY
)

	)

94 
	#t˝_«gÀ_íabÀ
(
pcb
Ë(’cb)->
Êags
 &~
TF_NODELAY
)

	)

95 
	#t˝_«gÀ_dißbÀd
(
pcb
Ë((’cb)->
Êags
 & 
TF_NODELAY
Ë!0)

	)

97 #i‡
TCP_LISTEN_BACKLOG


98 
	#t˝_ac˚±ed
(
pcb
) do { \

99 
	`LWIP_ASSERT
("pcb->°©ê=LISTEN (ˇŒed f‹ wr⁄gÖcb?)", 
pcb
->
°©e
 =
LISTEN
); \

100 (((
t˝_pcb_li°í
 *)(
pcb
))->
ac˚±s_≥ndög
--); } 0)

	)

102 
	#t˝_ac˚±ed
(
pcb
Ë
	`LWIP_ASSERT
("pcb->state == LISTEN (called for wrongÖcb?)", \

103 
pcb
->
°©e
 =
LISTEN
)

	)

106 
t˝_ªcved
 (
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
);

107 
îr_t
 
t˝_böd
 (
t˝_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
,

108 
u16_t
 
p‹t
);

109 
îr_t
 
t˝_c⁄√˘
 (
t˝_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
,

110 
u16_t
 
p‹t
, 
t˝_c⁄√˘ed_‚
 
c⁄√˘ed
);

112 
t˝_pcb
 * 
t˝_li°í_wôh_backlog
(t˝_pcb *
pcb
, 
u8_t
 
backlog
);

113 
	#t˝_li°í
(
pcb
Ë
	`t˝_li°í_wôh_backlog
’cb, 
TCP_DEFAULT_LISTEN_BACKLOG
)

	)

115 
t˝_ab‹t
 (
t˝_pcb
 *
pcb
);

116 
îr_t
 
t˝_˛o£
 (
t˝_pcb
 *
pcb
);

117 
îr_t
 
t˝_shutdown
(
t˝_pcb
 *
pcb
, 
shut_rx
, 
shut_tx
);

120 
	#TCP_WRITE_FLAG_COPY
 0x01

	)

121 
	#TCP_WRITE_FLAG_MORE
 0x02

	)

123 
îr_t
 
t˝_wrôe
 (
t˝_pcb
 *
pcb
, c⁄° *
d©≠å
, 
u16_t
 
Àn
,

124 
u8_t
 
≠iÊags
);

126 
t˝_£çrio
 (
t˝_pcb
 *
pcb
, 
u8_t
 
¥io
);

128 
	#TCP_PRIO_MIN
 1

	)

129 
	#TCP_PRIO_NORMAL
 64

	)

130 
	#TCP_PRIO_MAX
 127

	)

132 
îr_t
 
t˝_ouçut
 (
t˝_pcb
 *
pcb
);

135 c⁄° * 
t˝_debug_°©e_°r
(
t˝_°©e
 
s
);

138 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/tcp_impl.h

32 #i‚de‡
__LWIP_TCP_IMPL_H__


33 
	#__LWIP_TCP_IMPL_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_TCP


39 
	~"lwù/t˝.h
"

40 
	~"lwù/sys.h
"

41 
	~"lwù/mem.h
"

42 
	~"lwù/pbuf.h
"

43 
	~"lwù/ù.h
"

44 
	~"lwù/icmp.h
"

45 
	~"lwù/îr.h
"

47 #ifde‡
__˝lu•lus


54 
	#t˝_öô
(Ë

	)

55 
t˝_tmr
 (
t˝ù_thªad
 *
thªad
);

60 
t˝_¶owtmr
 ();

61 
t˝_Á°tmr
 ();

65 
t˝_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

67 
t˝_pcb
 * 
t˝_Æloc
 (
u8_t
 
¥io
);

68 
t˝_ab™d⁄
 (
t˝_pcb
 *
pcb
, 
ª£t
);

69 
îr_t
 
t˝_£nd_em±y_ack
(
t˝_pcb
 *
pcb
);

70 
t˝_ªxmô
 (
t˝_pcb
 *
pcb
);

71 
t˝_ªxmô_πo
 (
t˝_pcb
 *
pcb
);

72 
t˝_ªxmô_Á°
 (
t˝_pcb
 *
pcb
);

73 
u32_t
 
t˝_upd©e_rcv_™n_wnd
(
t˝_pcb
 *
pcb
);

84 
	#t˝_do_ouçut_«gÀ
(
çcb
Ë(((—pcb)->
u«cked
 =
NULL
) || \

85 ((
çcb
)->
Êags
 & (
TF_NODELAY
 | 
TF_INFR
)) || \

86 (((
çcb
)->
un£¡
 !
NULL
Ë&& ((—pcb)->un£¡->
√xt
 != NULL) || \

87 ((
çcb
)->
un£¡
->
Àn
 >—pcb)->
mss
))) \

88 Ë? 1 : 0)

	)

89 
	#t˝_ouçut_«gÀ
(
çcb
Ë(
	`t˝_do_ouçut_«gÀ
—pcbË? 
	`t˝_ouçut
—pcbË: 
ERR_OK
)

	)

92 
	#TCP_SEQ_LT
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë< 0)

	)

93 
	#TCP_SEQ_LEQ
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë<0)

	)

94 
	#TCP_SEQ_GT
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë> 0)

	)

95 
	#TCP_SEQ_GEQ
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë>0)

	)

98 
	#TCP_SEQ_BETWEEN
(
a
,
b
,
c
Ë((c)-(bË>◊)-(b))

	)

100 
	#TCP_SEQ_BETWEEN
(
a
,
b
,
c
Ë(
	`TCP_SEQ_GEQ
◊,bË&& 
	`TCP_SEQ_LEQ
◊,c))

	)

101 
	#TCP_FIN
 0x01U

	)

102 
	#TCP_SYN
 0x02U

	)

103 
	#TCP_RST
 0x04U

	)

104 
	#TCP_PSH
 0x08U

	)

105 
	#TCP_ACK
 0x10U

	)

106 
	#TCP_URG
 0x20U

	)

107 
	#TCP_ECE
 0x40U

	)

108 
	#TCP_CWR
 0x80U

	)

110 
	#TCP_FLAGS
 0x3fU

	)

113 
	#TCP_HLEN
 20

	)

115 #i‚de‡
TCP_TMR_INTERVAL


116 
	#TCP_TMR_INTERVAL
 250

	)

119 #i‚de‡
TCP_FAST_INTERVAL


120 
	#TCP_FAST_INTERVAL
 
TCP_TMR_INTERVAL


	)

123 #i‚de‡
TCP_SLOW_INTERVAL


124 
	#TCP_SLOW_INTERVAL
 (2*
TCP_TMR_INTERVAL
Ë

	)

127 
	#TCP_FIN_WAIT_TIMEOUT
 20000

	)

128 
	#TCP_SYN_RCVD_TIMEOUT
 20000

	)

130 
	#TCP_OOSEQ_TIMEOUT
 6U

	)

132 #i‚de‡
TCP_MSL


133 
	#TCP_MSL
 60000UL

	)

137 #i‚de‡ 
TCP_KEEPIDLE_DEFAULT


138 
	#TCP_KEEPIDLE_DEFAULT
 7200000UL

	)

141 #i‚de‡ 
TCP_KEEPINTVL_DEFAULT


142 
	#TCP_KEEPINTVL_DEFAULT
 75000UL

	)

145 #i‚de‡ 
TCP_KEEPCNT_DEFAULT


146 
	#TCP_KEEPCNT_DEFAULT
 9U

	)

149 
	#TCP_MAXIDLE
 
TCP_KEEPCNT_DEFAULT
 * 
TCP_KEEPINTVL_DEFAULT


	)

154 #ifde‡
PACK_STRUCT_USE_INCLUDES


155 
	~"¨ch/bp°ru˘.h
"

157 #ifde‡
PACK_STRUCT_USE_INCLUDES


158 
	~"¨ch/ï°ru˘.h
"

161 
	#TCPH_OFFSET
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë>> 8)

	)

162 
	#TCPH_HDRLEN
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë>> 12)

	)

163 
	#TCPH_FLAGS
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë& 
TCP_FLAGS
)

	)

165 
	#TCPH_OFFSET_SET
(
phdr
, 
off£t
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(((off£tË<< 8Ë| 
	`TCPH_FLAGS
’hdr))

	)

166 
	#TCPH_HDRLEN_SET
(
phdr
, 
Àn
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
((÷íË<< 12Ë| 
	`TCPH_FLAGS
’hdr))

	)

167 
	#TCPH_FLAGS_SET
(
phdr
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = ((’hdr)->_hdæí_rsvd_Êag†& 
	`PP_HTONS
((
u16_t
)(~(u16_t)(
TCP_FLAGS
)))Ë| 
	`ht⁄s
(Êags))

	)

168 
	#TCPH_HDRLEN_FLAGS_SET
(
phdr
, 
Àn
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
((÷íË<< 12Ë| (Êags))

	)

170 
	#TCPH_SET_FLAG
(
phdr
, 
Êags
 ) (phdr)->
_hdæí_rsvd_Êags
 = (’hdr)->_hdæí_rsvd_Êag†| 
	`ht⁄s
(Êags))

	)

171 
	#TCPH_UNSET_FLAG
(
phdr
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(
	`¡ohs
(’hdr)->_hdæí_rsvd_ÊagsË| (
	`TCPH_FLAGS
’hdrË& ~(Êags)Ë)

	)

173 
	#TCP_TCPLEN
(
£g
Ë((£g)->
Àn
 + ((
	`TCPH_FLAGS
((£g)->
t˝hdr
Ë& (
TCP_FIN
 | 
TCP_SYN
)Ë!0))

	)

177 
	#TF_RESET
 (
u8_t
)0x08U

	)

178 
	#TF_CLOSED
 (
u8_t
)0x10U

	)

179 
	#TF_GOT_FIN
 (
u8_t
)0x20U

	)

182 #i‡
LWIP_EVENT_API


184 
	#TCP_EVENT_ACCEPT
(
pcb
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

185 
LWIP_EVENT_ACCEPT
, 
NULL
, 0, 
îr
)

	)

186 
	#TCP_EVENT_SENT
(
pcb
,
•a˚
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

187 
LWIP_EVENT_SENT
, 
NULL
, 
•a˚
, 
ERR_OK
)

	)

188 
	#TCP_EVENT_RECV
(
pcb
,
p
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

189 
LWIP_EVENT_RECV
, (
p
), 0, (
îr
))

	)

190 
	#TCP_EVENT_CLOSED
(
pcb
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

191 
LWIP_EVENT_RECV
, 
NULL
, 0, 
ERR_OK
)

	)

192 
	#TCP_EVENT_CONNECTED
(
pcb
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

193 
LWIP_EVENT_CONNECTED
, 
NULL
, 0, (
îr
))

	)

194 
	#TCP_EVENT_POLL
(
pcb
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

195 
LWIP_EVENT_POLL
, 
NULL
, 0, 
ERR_OK
)

	)

196 
	#TCP_EVENT_ERR
(
îrf
,
¨g
,
îr
Ë
	`lwù_t˝_evít
(◊rg), 
NULL
, \

197 
LWIP_EVENT_ERR
, 
NULL
, 0, (
îr
))

	)

201 
	#TCP_EVENT_ACCEPT
(
pcb
,
îr
,
ªt
) \

203 if((
pcb
)->
ac˚±
 !
NULL
) \

204 (
ªt
Ë(
pcb
)->
	`ac˚±
(’cb)->
ˇŒback_¨g
,’cb),(
îr
)); \

205 (
ªt
Ë
ERR_ARG
; \

206 } 0)

	)

208 
	#TCP_EVENT_SENT
(
pcb
,
•a˚
,
ªt
) \

210 if((
pcb
)->
£¡
 !
NULL
) \

211 (
ªt
Ë(
pcb
)->
	`£¡
(’cb)->
ˇŒback_¨g
,’cb),(
•a˚
)); \

212 (
ªt
Ë
ERR_OK
; \

213 } 0)

	)

215 
	#TCP_EVENT_RECV
(
pcb
,
p
,
îr
,
ªt
) \

217 if((
pcb
)->
ªcv
 !
NULL
) { \

218 (
ªt
Ë(
pcb
)->
	`ªcv
(’cb)->
ˇŒback_¨g
,’cb),(
p
),(
îr
));\

220 (
ªt
Ë
	`t˝_ªcv_nuŒ
(
NULL
, (
pcb
), (
p
), (
îr
)); \

222 } 0)

	)

224 
	#TCP_EVENT_CLOSED
(
pcb
,
ªt
) \

226 if(((
pcb
)->
ªcv
 !
NULL
)) { \

227 (
ªt
Ë(
pcb
)->
	`ªcv
(’cb)->
ˇŒback_¨g
,’cb),
NULL
,
ERR_OK
);\

229 (
ªt
Ë
ERR_OK
; \

231 } 0)

	)

233 
	#TCP_EVENT_CONNECTED
(
pcb
,
îr
,
ªt
) \

235 if((
pcb
)->
c⁄√˘ed
 !
NULL
) \

236 (
ªt
Ë(
pcb
)->
	`c⁄√˘ed
(’cb)->
ˇŒback_¨g
,’cb),(
îr
)); \

237 (
ªt
Ë
ERR_OK
; \

238 } 0)

	)

240 
	#TCP_EVENT_POLL
(
pcb
,
ªt
) \

242 if((
pcb
)->
pﬁl
 !
NULL
) \

243 (
ªt
Ë(
pcb
)->
	`pﬁl
(’cb)->
ˇŒback_¨g
,(pcb)); \

244 (
ªt
Ë
ERR_OK
; \

245 } 0)

	)

247 
	#TCP_EVENT_ERR
(
îrf
,
¨g
,
îr
) \

249 if((
îrf
Ë!
NULL
) \

250 (
îrf
)((
¨g
),(
îr
)); \

251 } 0)

	)

256 #i‡
TCP_OVERSIZE
 && 
deföed
(
LWIP_DEBUG
)

257 
	#TCP_OVERSIZE_DBGCHECK
 1

	)

259 
	#TCP_OVERSIZE_DBGCHECK
 0

	)

263 
	#TCP_CHECKSUM_ON_COPY
 (
LWIP_CHECKSUM_ON_COPY
 && 
CHECKSUM_GEN_TCP
)

	)

265 
	#LWIP_TCP_OPT_LENGTH
(
Êags
) \

266 (
Êags
 & 
TF_SEG_OPTS_MSS
 ? 4 : 0) + \

267 (
Êags
 & 
TF_SEG_OPTS_TS
 ? 12 : 0)

	)

270 
	#TCP_BUILD_MSS_OPTION
(
x
Ë(xË
	`PP_HTONL
(((
u32_t
)2 << 24) | \

271 ((
u32_t
)4 << 16) | \

272 (((
u32_t
)
TCP_MSS
 / 256) << 8) | \

273 (
TCP_MSS
 & 255))

	)

283 #i‚de‡
TCP_DEBUG_PCB_LISTS


284 
	#TCP_DEBUG_PCB_LISTS
 0

	)

286 #i‡
TCP_DEBUG_PCB_LISTS


287 
	#TCP_REG
(
pcbs
, 
≈cb
) do {\

288 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_REG %∞loˇ»p‹à%d\n", (
≈cb
), (≈cb)->
loˇl_p‹t
)); \

289 
t˝_tmp_pcb
 = *(
pcbs
); \

290 
t˝_tmp_pcb
 !
NULL
; \

291 
t˝_tmp_pcb
 =Å˝_tmp_pcb->
√xt
) { \

292 
	`LWIP_ASSERT
("TCP_REG:áÃódyÑegi°îed\n", 
t˝_tmp_pcb
 !(
≈cb
)); \

294 
	`LWIP_ASSERT
("TCP_REG:Öcb->°©ê!CLOSED", ((
pcbs
Ë=&
t˝_bound_pcbs
Ë|| ((
≈cb
)->
°©e
 !
CLOSED
)); \

295 (
≈cb
)->
√xt
 = *(
pcbs
); \

296 
	`LWIP_ASSERT
("TCP_REG:Çpcb->√xà!≈cb", (
≈cb
)->
√xt
 != (npcb)); \

297 *(
pcbs
Ë(
≈cb
); \

298 
	`LWIP_ASSERT
("TCP_RMV:Å˝_pcb†ß√", 
	`t˝_pcbs_ß√
()); \

299 
	`t˝_timî_√eded
(); \

300 } 0)

	)

301 
	#TCP_RMV
(
pcbs
, 
≈cb
) do { \

302 
	`LWIP_ASSERT
("TCP_RMV:Öcb†!NULL", *(
pcbs
Ë!
NULL
); \

303 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_RMV:Ñemovög %∞‰om %p\n", (
≈cb
), *(
pcbs
))); \

304 if(*(
pcbs
Ë=(
≈cb
)) { \

305 *(
pcbs
Ë(*pcbs)->
√xt
; \

306 } 
t˝_tmp_pcb
 = *(
pcbs
);Å˝_tmp_pcb !
NULL
;Å˝_tmp_pcb =Å˝_tmp_pcb->
√xt
) { \

307 if(
t˝_tmp_pcb
->
√xt
 =(
≈cb
)) { \

308 
t˝_tmp_pcb
->
√xt
 = (
≈cb
)->next; \

312 (
≈cb
)->
√xt
 = 
NULL
; \

313 
	`LWIP_ASSERT
("TCP_RMV:Å˝_pcb†ß√", 
	`t˝_pcbs_ß√
()); \

314 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_RMV:Ñemoved %∞‰om %p\n", (
≈cb
), *(
pcbs
))); \

315 } 0)

	)

319 
	#TCP_REG
(
pcbs
, 
≈cb
) \

321 (
≈cb
)->
√xt
 = *
pcbs
; \

322 *(
pcbs
Ë(
≈cb
); \

323 
	`t˝_timî_√eded
(); \

324 } 0)

	)

326 
	#TCP_RMV
(
pcbs
, 
≈cb
, 
t˝_tmp_pcb
) \

328 if(*(
pcbs
Ë=(
≈cb
)) { \

329 (*(
pcbs
)Ë(*pcbs)->
√xt
; \

332 
t˝_tmp_pcb
 = *
pcbs
; \

333 
t˝_tmp_pcb
 !
NULL
; \

334 
t˝_tmp_pcb
 =Å˝_tmp_pcb->
√xt
) { \

335 if(
t˝_tmp_pcb
->
√xt
 =(
≈cb
)) { \

336 
t˝_tmp_pcb
->
√xt
 = (
≈cb
)->next; \

341 (
≈cb
)->
√xt
 = 
NULL
; \

342 } 0)

	)

348 
t˝_pcb
 *
t˝_pcb_c›y
(t˝_pcb *
pcb
);

349 
t˝_pcb_purge
(
t˝_pcb
 *
pcb
);

350 
t˝_pcb_ªmove
(
t˝_pcb
 **
pcbli°
, t˝_pcb *
pcb
);

352 
t˝_£gs_‰ì
(
t˝_£g
 *
£g
);

353 
t˝_£g_‰ì
(
t˝_£g
 *
£g
);

354 
t˝_£g
 *
t˝_£g_c›y
(t˝_£g *
£g
);

356 
	#t˝_ack
(
pcb
) \

358 if((
pcb
)->
Êags
 & 
TF_ACK_DELAY
) { \

359 (
pcb
)->
Êags
 &~
TF_ACK_DELAY
; \

360 (
pcb
)->
Êags
 |
TF_ACK_NOW
; \

363 (
pcb
)->
Êags
 |
TF_ACK_DELAY
; \

365 } 0)

	)

367 
	#t˝_ack_now
(
pcb
) \

369 (
pcb
)->
Êags
 |
TF_ACK_NOW
; \

370 } 0)

	)

372 
îr_t
 
t˝_£nd_fö
(
t˝_pcb
 *
pcb
);

373 
îr_t
 
t˝_íqueue_Êags
(
t˝_pcb
 *
pcb
, 
u8_t
 
Êags
);

375 
t˝_ªxmô_£g
(
t˝_pcb
 *
pcb
, 
t˝_£g
 *
£g
);

377 
t˝_r°
(
u32_t
 
£qno
, u32_à
ackno
,

378 
ù_addr_t
 *
loˇl_ù
, ip_addr_à*
ªmŸe_ù
,

379 
u16_t
 
loˇl_p‹t
, u16_à
ªmŸe_p‹t
);

381 
u32_t
 
t˝_√xt_iss
(
t˝ù_thªad
 *
thªad
);

383 
t˝_kì∑live
(
t˝_pcb
 *
pcb
);

384 
t˝_zîo_wödow_¥obe
(
t˝_pcb
 *
pcb
);

386 #i‡
TCP_CALCULATE_EFF_SEND_MSS


387 
u16_t
 
t˝_eff_£nd_mss
(u16_à
£ndmss
, 
ù_addr_t
 *
addr
);

390 #i‡
LWIP_CALLBACK_API


391 
îr_t
 
t˝_ªcv_nuŒ
(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
,Éº_à
îr
);

394 #i‡
TCP_DEBUG
 || 
TCP_INPUT_DEBUG
 || 
TCP_OUTPUT_DEBUG


395 
t˝_debug_¥öt
(
t˝_hdr
 *
t˝hdr
);

396 
t˝_debug_¥öt_Êags
(
u8_t
 
Êags
);

397 
t˝_debug_¥öt_°©e
(
t˝_°©e
 
s
);

398 
t˝_debug_¥öt_pcbs
();

399 
s16_t
 
t˝_pcbs_ß√
();

401 
	#t˝_debug_¥öt
(
t˝hdr
)

	)

402 
	#t˝_debug_¥öt_Êags
(
Êags
)

	)

403 
	#t˝_debug_¥öt_°©e
(
s
)

	)

404 
	#t˝_debug_¥öt_pcbs
()

	)

405 
	#t˝_pcbs_ß√
(Ë1

	)

410 
t˝_timî_√eded
();

413 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/tcpip.h

32 #i‚de‡
__LWIP_TCPIP_H__


33 
	#__LWIP_TCPIP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡!
NO_SYS


39 
	~"lwù/≠i_msg.h
"

40 
	~"lwù/√tiÁpi.h
"

41 
	~"lwù/pbuf.h
"

42 
	~"lwù/≠i.h
"

43 
	~"lwù/sys.h
"

44 
	~"lwù/timîs.h
"

45 
	~"lwù/√tif.h
"

46 
	~"lwù/t˝ù_thªad.h
"

48 #ifde‡
__˝lu•lus


54 #i‚de‡
LWIP_TCPIP_THREAD_ALIVE


55 
	#LWIP_TCPIP_THREAD_ALIVE
()

	)

58 
	#LOCK_TCPIP_CORE
()

	)

59 
	#UNLOCK_TCPIP_CORE
()

	)

60 
	#TCPIP_APIMSG
(
m
Ë
	`t˝ù_≠imsg
(m)

	)

61 
	#TCPIP_APIMSG_NO
(
m
Ë
	`t˝ù_≠imsg_no_waô
(m)

	)

62 
	#TCPIP_APIMSG_ACK
(
m
Ë
	`sys_£m_sig«l
(&m->
c⁄n
->
›_com∂ëed
)

	)

63 
	#TCPIP_NETIFAPI
(
m
Ë
	`t˝ù_√tiÁpi
(m)

	)

64 
	#TCPIP_NETIFAPI_ACK
(
m
Ë
	`sys_£m_sig«l
(&m->
£m
)

	)

67 (*
t˝ù_öô_d⁄e_‚
)(*
	t¨g
);

69 (*
t˝ù_ˇŒback_‚
)(*
	t˘x
);

71 
t˝ù_öô
(
t˝ù_öô_d⁄e_‚
 
t˝ù_öô_d⁄e
, *
¨g
);

73 #i‡
LWIP_NETCONN


74 
îr_t
 
t˝ù_≠imsg
(
≠i_msg
 *
≠imsg
);

75 #i‡
LWIP_TCPIP_CORE_LOCKING


76 
îr_t
 
t˝ù_≠imsg_lock
(
≠i_msg
 *
≠imsg
);

80 
îr_t
 
t˝ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

82 #i‡
LWIP_NETIF_API


83 
îr_t
 
t˝ù_√tiÁpi
(
√tiÁpi_msg
 *
√tiÁpimsg
);

84 #i‡
LWIP_TCPIP_CORE_LOCKING


85 
îr_t
 
t˝ù_√tiÁpi_lock
(
√tiÁpi_msg
 *
√tiÁpimsg
);

89 
îr_t
 
t˝ù_ˇŒback_wôh_block
(
t˝ù_ˇŒback_‚
 
fun˘i⁄
, *
˘x
, 
u8_t
 
block
);

90 
	#t˝ù_ˇŒback
(
f
, 
˘x
Ë
	`t˝ù_ˇŒback_wôh_block
(f, ctx, 1)

	)

93 
îr_t
 
pbuf_‰ì_ˇŒback
(
pbuf
 *
p
);

94 
îr_t
 
mem_‰ì_ˇŒback
(*
m
);

96 #i‡
LWIP_TCPIP_TIMEOUT


97 
îr_t
 
t˝ù_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
);

98 
îr_t
 
t˝ù_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
);

101 
	et˝ù_msg_ty≥
 {

102 #i‡
LWIP_NETCONN


103 
TCPIP_MSG_API
,

105 
TCPIP_MSG_INPKT
,

106 #i‡
LWIP_NETIF_API


107 
TCPIP_MSG_NETIFAPI
,

109 #i‡
LWIP_TCPIP_TIMEOUT


110 
TCPIP_MSG_TIMEOUT
,

111 
TCPIP_MSG_UNTIMEOUT
,

113 
TCPIP_MSG_CALLBACK


116 
	st˝ù_msg
 {

117 
t˝ù_msg_ty≥
 
ty≥
;

118 
sys_£m_t
 *
£m
;

120 #i‡
LWIP_NETCONN


121 
≠i_msg
 
≠imsg
;

123 #i‡
LWIP_NETIF_API


124 
√tiÁpi_msg
 *
√tiÁpimsg
;

127 
pbuf
 *
p
;

128 
√tif
 *netif;

129 } 
öp
;

131 
t˝ù_ˇŒback_‚
 
fun˘i⁄
;

132 *
˘x
;

133 } 
cb
;

134 #i‡
LWIP_TCPIP_TIMEOUT


136 
u32_t
 
m£cs
;

137 
sys_timeout_h™dÀr
 
h
;

138 *
¨g
;

139 } 
tmo
;

141 } 
msg
;

144 
ölöe
 
lwù_sched_gë˝u
()

149 
	#INITIAL_APIC_ID_BITS
 0xFF000000

	)

152 
Regebx
 = 0;

154 
__asm__
 
__vﬁ©ûe__
 (

157 :"=b" (
Regebx
)

160 (()((
Regebx
 & 
INITIAL_APIC_ID_BITS
) >> 24));

161 #unde‡
INITIAL_APIC_ID_BITS


164 
	#NUM_CPU
 1

	)

165 
	#CPU_MOD
 12

	)

166 
t˝ù_thªad
 *
lwù_t˝ù_thªad
[12];

168 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/tcpip_thread.h

5 #i‚de‡
__LWIP_TCPIP_THREAD_H__


6 
	#__LWIP_TCPIP_THREAD_H__


	)

8 
	~"lwù/›t.h
"

9 
	~"lwù/sys.h
"

10 
	~<°dlib.h
>

11 
	~<uni°d.h
>

12 
	~<±hªad.h
>

14 
	gt˝ù_thªad
;

15 
	g√tif
;

16 
	gt˝_pcb
;

27 
	$îr_t
 (*
	tt˝_ac˚±_‚
)(*
	t¨g
, 
	tt˝_pcb
 *
	t√wpcb
, 
	tîr_t
 
	tîr
);

29 #i‡
LWIP_NETIF_HWADDRHINT


30 
	#IP_PCB_ADDRHINT
 ;
u8_t
 
addr_höt


	)

32 
	#IP_PCB_ADDRHINT


	)

39 
	#IP_PCB
 \

41 
ù_addr_t
 
loˇl_ù
; \

42 
ù_addr_t
 
ªmŸe_ù
; \

44 
u8_t
 
so_›ti⁄s
; \

46 
u8_t
 
tos
; \

48 
u8_t
 
âl
 \

50 
IP_PCB_ADDRHINT


	)

52 
	smemp
 {

53 
memp
 *
√xt
;

56 
	et˝_°©e
 {

57 
CLOSED
 = 0,

58 
LISTEN
 = 1,

59 
SYN_SENT
 = 2,

60 
SYN_RCVD
 = 3,

61 
ESTABLISHED
 = 4,

62 
FIN_WAIT_1
 = 5,

63 
FIN_WAIT_2
 = 6,

64 
CLOSE_WAIT
 = 7,

65 
CLOSING
 = 8,

66 
LAST_ACK
 = 9,

67 
TIME_WAIT
 = 10

73 
	#TCP_PCB_COMMON
(
ty≥
) \

74 
ty≥
 *
√xt
; \

75 
t˝_°©e
 
°©e
; \

76 
u8_t
 
¥io
; \

77 *
ˇŒback_¨g
; \

79 
t˝_ac˚±_‚
 
ac˚±
; \

81 
u16_t
 
loˇl_p‹t


	)

83 
	#ETHARP_HWADDR_LEN
 6

	)

84 
	#NETIF_MAX_HWADDR_LEN
 6U

	)

86 
PACK_STRUCT_BEGIN


87 
	sëh_addr
 {

88 
	`PACK_STRUCT_FIELD
(
u8_t
 
addr
[
ETHARP_HWADDR_LEN
]);

89 } 
PACK_STRUCT_STRUCT
;

90 
PACK_STRUCT_END


92 
	sù_addr
 {

93 
u32_t
 
addr
;

96 
ù_addr
 
	tù_addr_t
;

98 
	sëh¨p_íåy
 {

100 
pbuf
 *
q
;

101 
ù_addr_t
 
ùaddr
;

102 
u32_t
 
r1
;

103 
ëh_addr
 
ëhaddr
;

104 #i‡
LWIP_SNMP


105 
√tif
 *netif;

107 
u8_t
 
°©e
;

108 
u8_t
 
˘ime
;

109 
u8_t
 
°©ic_íåy
;

110 
u8_t
 
r2
[5];

119 
	$îr_t
 (*
	t√tif_öput_‚
)(
	tpbuf
 *
	tp
, 
	t√tif
 *
	töp
);

129 
	$îr_t
 (*
	t√tif_ouçut_‚
)(
	t√tif
 *√tif, 
	tpbuf
 *
	tp
,

130 
	tù_addr_t
 *
	tùaddr
);

138 
	$îr_t
 (*
	t√tif_lökouçut_‚
)(
	t√tif
 *√tif, 
	tpbuf
 *
	tp
);

145 
	$îr_t
 (*
	t√tif_lököput_‚
)(
	t√tif
 *netif);

148 
	s√tif
 {

150 
√tif
 *
√xt
;

152 
t˝ù_thªad
 *
¥Ÿ_thªad
;

155 
ù_addr_t
 
ù_addr
;

156 
ù_addr_t
 
√tmask
;

157 
ù_addr_t
 
gw
;

158 
ù_addr_t
 
fûÀr
;

162 
√tif_öput_‚
 
öput
;

166 
√tif_ouçut_‚
 
ouçut
;

170 
√tif_lökouçut_‚
 
lökouçut
;

173 
√tif_lököput_‚
 
lököput
;

176 *
°©e
;

178 
u16_t
 
mtu
;

180 
u8_t
 
hwaddr_Àn
;

182 
u8_t
 
hwaddr
[
NETIF_MAX_HWADDR_LEN
];

184 
u8_t
 
Êags
;

186 
«me
[2];

188 
u8_t
 
num
;

191 
PACK_STRUCT_BEGIN


192 
	st˝_hdr
 {

193 
	`PACK_STRUCT_FIELD
(
u16_t
 
§c
);

194 
	`PACK_STRUCT_FIELD
(
u16_t
 
de°
);

195 
	`PACK_STRUCT_FIELD
(
u32_t
 
£qno
);

196 
	`PACK_STRUCT_FIELD
(
u32_t
 
ackno
);

197 
	`PACK_STRUCT_FIELD
(
u16_t
 
_hdæí_rsvd_Êags
);

198 
	`PACK_STRUCT_FIELD
(
u16_t
 
wnd
);

199 
	`PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

200 
	`PACK_STRUCT_FIELD
(
u16_t
 
urgp
);

201 } 
PACK_STRUCT_STRUCT
;

202 
PACK_STRUCT_END


205 
	st˝_£g
 {

206 
t˝_£g
 *
√xt
;

207 
pbuf
 *
p
;

208 
u16_t
 
Àn
;

209 
u16_t
 
ovîsize_À·
;

212 
u16_t
 
chksum
;

213 
u8_t
 
chksum_sw≠≥d
;

214 
u8_t
 
Êags
;

215 
	#TF_SEG_OPTS_MSS
 (
u8_t
)0x01U

	)

216 
	#TF_SEG_OPTS_TS
 (
u8_t
)0x02U

	)

217 
	#TF_SEG_DATA_CHECKSUMMED
 (
u8_t
)0x04U

	)

219 
t˝_hdr
 *
t˝hdr
;

232 
	$îr_t
 (*
	tt˝_ªcv_‚
)(*
	t¨g
, 
	tt˝_pcb
 *
	tçcb
,

233 
	tpbuf
 *
	tp
, 
	tîr_t
 
	tîr
);

246 
	$îr_t
 (*
	tt˝_£¡_‚
)(*
	t¨g
, 
	tt˝_pcb
 *
	tçcb
,

247 
	tu16_t
 
	tÀn
);

258 
	$îr_t
 (*
	tt˝_pﬁl_‚
)(*
	t¨g
, 
	tt˝_pcb
 *
	tçcb
);

270 (*
	tt˝_îr_‚
)(*
	t¨g
, 
	tîr_t
 
	tîr
);

284 
	$îr_t
 (*
	tt˝_c⁄√˘ed_‚
)(*
	t¨g
, 
	tt˝_pcb
 *
	tçcb
, 
	tîr_t
 
	tîr
);

287 
	st˝_pcb
 {

289 
IP_PCB
;

291 
	`TCP_PCB_COMMON
(
t˝_pcb
);

294 
u16_t
 
ªmŸe_p‹t
;

296 
u8_t
 
Êags
;

297 
u8_t
 
fûÀr
[5];

298 
	#TF_ACK_DELAY
 ((
u8_t
)0x01UË

	)

299 
	#TF_ACK_NOW
 ((
u8_t
)0x02UË

	)

300 
	#TF_INFR
 ((
u8_t
)0x04UË

	)

301 
	#TF_TIMESTAMP
 ((
u8_t
)0x08UË

	)

302 
	#TF_RXCLOSED
 ((
u8_t
)0x10UË

	)

303 
	#TF_FIN
 ((
u8_t
)0x20UË

	)

304 
	#TF_NODELAY
 ((
u8_t
)0x40UË

	)

305 
	#TF_NAGLEMEMERR
 ((
u8_t
)0x80UË

	)

310 
u32_t
 
rcv_nxt
;

311 
u16_t
 
rcv_wnd
;

312 
u16_t
 
rcv_™n_wnd
;

313 
u32_t
 
rcv_™n_right_edge
;

316 
u32_t
 
tmr
;

317 
u8_t
 
pﬁ…mr
, 
pﬁlöãrvÆ
;

320 
s16_t
 
πime
;

322 
u16_t
 
mss
;

325 
u32_t
 
πã°
;

326 
u32_t
 
π£q
;

327 
s16_t
 
ß
, 
sv
;

329 
s16_t
 
πo
;

330 
u8_t
 
ƒtx
;

333 
u32_t
 
œ°ack
;

334 
u8_t
 
du∑cks
;

337 
u16_t
 
cwnd
;

338 
u16_t
 
s°hªsh
;

341 
u32_t
 
¢d_nxt
;

342 
u16_t
 
¢d_wnd
;

343 
u32_t
 
¢d_wl1
, 
¢d_wl2
;

345 
u32_t
 
¢d_lbb
;

347 
u16_t
 
acked
;

349 
u16_t
 
¢d_buf
;

350 
	#TCP_SNDQUEUELEN_OVERFLOW
 (0xffffU-3)

	)

351 
u16_t
 
¢d_queuñí
;

353 #i‡
TCP_OVERSIZE


355 
u16_t
 
un£¡_ovîsize
;

359 
t˝_£g
 *
un£¡
;

360 
t˝_£g
 *
u«cked
;

361 #i‡
TCP_QUEUE_OOSEQ


362 
t˝_£g
 *
oo£q
;

365 
pbuf
 *
ªfu£d_d©a
;

366 #i‡
LWIP_CALLBACK_API


368 
t˝_£¡_‚
 
£¡
;

370 
t˝_ªcv_‚
 
ªcv
;

372 
t˝_c⁄√˘ed_‚
 
c⁄√˘ed
;

374 
t˝_pﬁl_‚
 
pﬁl
;

376 
t˝_îr_‚
 
îrf
;

379 #i‡
LWIP_TCP_TIMESTAMPS


380 
u32_t
 
ts_œ°ack£¡
;

381 
u32_t
 
ts_ª˚¡
;

385 
u32_t
 
kìp_idÀ
;

386 #i‡
LWIP_TCP_KEEPALIVE


387 
u32_t
 
kìp_ötvl
;

388 
u32_t
 
kìp_˙t
;

392 
u32_t
 
≥rsi°_˙t
;

394 
u8_t
 
≥rsi°_backoff
;

397 
u8_t
 
kìp_˙t_£¡
;

398 
˝u
;

401 
	st˝_pcb_li°í
 {

403 
IP_PCB
;

405 
	`TCP_PCB_COMMON
(
t˝_pcb_li°í
);

407 #i‡
TCP_LISTEN_BACKLOG


408 
u8_t
 
backlog
;

409 
u8_t
 
ac˚±s_≥ndög
;

413 
	#NUM_SOCKETS
 
MEMP_NUM_NETCONN


	)

414 
	#NUM_EPOLL
 1

	)

417 
	slwù_sock
 {

419 
√tc⁄n
 *
c⁄n
;

421 *
œ°d©a
;

423 
u16_t
 
œ°off£t
;

426 
s16_t
 
rcvevít
;

429 
u16_t
 
£ndevít
;

431 
u16_t
 
îªvít
;

433 
îr
;

435 
£À˘_waôög
;

436 
˝u
;

439 
	slwù_ïﬁl
 {

440 
t˝ù_thªad
 *
thªad
;

441 
˝u
;

442 
lwù_mbox_t
 
li°íî_mbox
;

443 
lwù_mbox_t
 
Ÿhî_mbox
;

447 
	slwù_£À˘_cb
 {

449 
lwù_£À˘_cb
 *
√xt
;

451 
lwù_£À˘_cb
 *
¥ev
;

453 
fd_£t
 *
ªad£t
;

455 
fd_£t
 *
wrôe£t
;

457 
fd_£t
 *
ex˚±£t
;

459 
£m_sig«Œed
;

461 
sys_£m_t
 
£m
;

465 
	ut˝_li°í_pcbs_t
 {

466 
t˝_pcb_li°í
 *
li°í_pcbs
;

467 
t˝_pcb
 *
pcbs
;

470 
	#NUM_FLOWS
 
MEMP_NUM_NETCONN


	)

472 
	slwù_t˝ù_d©a
 {

479 
t˝_pcb
 *
t˝_bound_pcbs
;

480 
t˝_li°í_pcbs_t
 
t˝_li°í_pcbs
;

481 
t˝_pcb
 *
t˝_pcbs
[
NUM_FLOWS
];

482 
t˝_pcb
 *
t˝_a˘ive_pcbs
;

485 
t˝_pcb
 *
t˝_tw_pcbs
;

487 
t˝_pcb
 *
t˝_tmp_pcb
;

488 
t˝_pcb
 *
t˝_öput_pcb
;

489 
t˝_pcb
 **
t˝_pcb_li°s
[4];

490 
u32_t
 
t˝_ticks
;

491 
t˝ù_t˝_timî_a˘ive
;

492 
u16_t
 
p‹t
;

493 
u16_t
 
ª£rved
[3];

496 
	spbuf_h™dÀ
 {

497 
u16_t
 
˙t
;

498 
u16_t
 
√xt_to_u£
;

499 
u16_t
 
√xt_to_£nd
;

500 
u32_t
 
√xt_off£t
;

502 *
lock
;

503 
pbuf
 *
öfo
;

504 *
buf
;

507 
	st˝ù_msg_h™dÀ
 {

508 
u16_t
 
˙t
;

509 
u16_t
 
√xt_to_u£
;

510 
u16_t
 
√xt_to_£nd
;

511 
u32_t
 
√xt_off£t
;

513 *
lock
;

514 
t˝ù_msg
 *
öfo
;

517 
	#MAX_MEM_TAB
 24

	)

519 
	st˝ù_thªad
 {

520 
lwù_mbox_t
 
mbox
;

522 
memp
 *
memp_èb
[
MAX_MEM_TAB
];

524 
ëh¨p_íåy
 
¨p_èbÀ
[
ARP_TABLE_SIZE
];

526 
lwù_t˝ù_d©a
 
t˝ù_d©a
;

527 
√tif
Çetif;

528 
lwù_sock
 
sockës
[
NUM_SOCKETS
];

529 
lwù_ïﬁl
 
ïﬁl
[
NUM_EPOLL
];

531 
˝u
;

532 
öô_d⁄e
;

533 
£À˘_cb_˘r
;

534 
r1
;

535 
±hªad_t
 
thªad
;

536 
u32_t
 
iss
;

537 
u8_t
 
t˝_timî
;

538 
u16_t
 
ù_id
;

539 
u8_t
 
fûÀr
;

542 
√tif
 *
√tif_li°
;

543 
√tif
 *
√tif_deÁu…
;

545 
sys_timeo
 *
√xt_timeout
;

547 
lwù_£À˘_cb
 *
£À˘_cb_li°
;

548 
pbuf_h™dÀ
 
pbuf_rx_h™dÀ
;

549 
pbuf_h™dÀ
 
pbuf_tx_h™dÀ
;

550 
t˝ù_msg_h™dÀ
 
msg_h™dÀ
;

551 
ù_addr_t
 
cuºít_ùhdr_§c
;

552 
ù_addr_t
 
cuºít_ùhdr_de°
;

555 
±hªad_muãx_t
 
mem_muãx
[
MAX_MEM_TAB
];

556 
±hªad_muãx_t
 
pbuf_muãx
;

557 
±hªad_muãx_t
 
evt_muãx
;

558 
±hªad_muãx_t
 
sock_Æloc
;

559 
±hªad_muãx_t
 
sock_‰ì
;

560 
±hªad_muãx_t
 
sock_ac˚±
;

561 
±hªad_muãx_t
 
sock_£lsˇn
;

562 
±hªad_muãx_t
 
sock_£À˘
;

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/timers.h

33 #i‚de‡
__LWIP_TIMERS_H__


34 
	#__LWIP_TIMERS_H__


	)

36 
	~"lwù/›t.h
"

39 
	#LWIP_TIMERS
 (!
NO_SYS
 || (NO_SYS && !
NO_SYS_NO_TIMERS
))

	)

41 #i‡
LWIP_TIMERS


43 
	~"lwù/îr.h
"

44 
	~"lwù/sys.h
"

46 #ifde‡
__˝lu•lus


50 #i‚de‡
LWIP_DEBUG_TIMERNAMES


51 #ifde‡
LWIP_DEBUG


52 
	#LWIP_DEBUG_TIMERNAMES
 
SYS_DEBUG


	)

54 
	#LWIP_DEBUG_TIMERNAMES
 0

	)

63 (* 
sys_timeout_h™dÀr
)(*
	t¨g
);

65 
	ssys_timeo
 {

66 
sys_timeo
 *
√xt
;

67 
u32_t
 
time
;

68 
sys_timeout_h™dÀr
 
h
;

69 *
¨g
;

70 #i‡
LWIP_DEBUG_TIMERNAMES


71 c⁄° * 
h™dÀr_«me
;

75 
sys_timeouts_öô
();

77 #i‡
LWIP_DEBUG_TIMERNAMES


78 
sys_timeout_debug
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h™dÀr
, *
¨g
, c⁄° * 
h™dÀr_«me
);

79 
	#sys_timeout
(
m£cs
, 
h™dÀr
, 
¨g
Ë
	`sys_timeout_debug
(m£cs, h™dÀr,árg, #h™dÀr)

	)

81 
sys_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h™dÀr
, *
¨g
);

84 
sys_u¡imeout
(
sys_timeout_h™dÀr
 
h™dÀr
, *
¨g
);

85 #i‡
NO_SYS


86 
sys_check_timeouts
();

87 
sys_ª°¨t_timeouts
();

89 
sys_timeouts_mbox_„tch
(
lwù_mbox_t
 *
mbox
, **
msg
);

93 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/netif/etharp.h

35 #i‚de‡
__NETIF_ETHARP_H__


36 
	#__NETIF_ETHARP_H__


	)

38 
	~"lwù/›t.h
"

40 #i‡
LWIP_ARP
 || 
LWIP_ETHERNET


42 
	~"lwù/pbuf.h
"

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/√tif.h
"

45 
	~"lwù/ù.h
"

47 #ifde‡
__˝lu•lus


51 #ifde‡
PACK_STRUCT_USE_INCLUDES


52 
	~"¨ch/bp°ru˘.h
"

54 #ifde‡
PACK_STRUCT_USE_INCLUDES


55 
	~"¨ch/ï°ru˘.h
"

58 #ifde‡
PACK_STRUCT_USE_INCLUDES


59 
	~"¨ch/bp°ru˘.h
"

61 
PACK_STRUCT_BEGIN


63 
	sëh_hdr
 {

64 #i‡
ETH_PAD_SIZE


65 
PACK_STRUCT_FIELD
(
u8_t
 
∑ddög
[
ETH_PAD_SIZE
]);

67 
PACK_STRUCT_FIELD
(
ëh_addr
 
de°
);

68 
PACK_STRUCT_FIELD
(
ëh_addr
 
§c
);

69 
PACK_STRUCT_FIELD
(
u16_t
 
ty≥
);

70 } 
PACK_STRUCT_STRUCT
;

71 
PACK_STRUCT_END


72 #ifde‡
PACK_STRUCT_USE_INCLUDES


73 
	~"¨ch/ï°ru˘.h
"

76 
	#SIZEOF_ETH_HDR
 (14 + 
ETH_PAD_SIZE
)

	)

78 #i‡
ETHARP_SUPPORT_VLAN


80 #ifde‡
PACK_STRUCT_USE_INCLUDES


81 
	~"¨ch/bp°ru˘.h
"

83 
PACK_STRUCT_BEGIN


87 
	sëh_vœn_hdr
 {

88 
PACK_STRUCT_FIELD
(
u16_t
 
¥io_vid
);

89 
PACK_STRUCT_FIELD
(
u16_t
 
çid
);

90 } 
PACK_STRUCT_STRUCT
;

91 
PACK_STRUCT_END


92 #ifde‡
PACK_STRUCT_USE_INCLUDES


93 
	~"¨ch/ï°ru˘.h
"

96 
	#SIZEOF_VLAN_HDR
 4

	)

97 
	#VLAN_ID
(
vœn_hdr
Ë(
	`ht⁄s
((vœn_hdr)->
¥io_vid
Ë& 0xFFF)

	)

101 #ifde‡
PACK_STRUCT_USE_INCLUDES


102 
	~"¨ch/bp°ru˘.h
"

104 
PACK_STRUCT_BEGIN


106 
	sëh¨p_hdr
 {

107 
PACK_STRUCT_FIELD
(
u16_t
 
hwty≥
);

108 
PACK_STRUCT_FIELD
(
u16_t
 
¥Ÿo
);

109 
PACK_STRUCT_FIELD
(
u8_t
 
hwÀn
);

110 
PACK_STRUCT_FIELD
(
u8_t
 
¥Ÿﬁí
);

111 
PACK_STRUCT_FIELD
(
u16_t
 
›code
);

112 
PACK_STRUCT_FIELD
(
ëh_addr
 
shwaddr
);

113 
PACK_STRUCT_FIELD
(
ù_addr2
 
sùaddr
);

114 
PACK_STRUCT_FIELD
(
ëh_addr
 
dhwaddr
);

115 
PACK_STRUCT_FIELD
(
ù_addr2
 
dùaddr
);

116 } 
PACK_STRUCT_STRUCT
;

117 
PACK_STRUCT_END


118 #ifde‡
PACK_STRUCT_USE_INCLUDES


119 
	~"¨ch/ï°ru˘.h
"

122 
	#SIZEOF_ETHARP_HDR
 28

	)

123 
	#SIZEOF_ETHARP_PACKET
 (
SIZEOF_ETH_HDR
 + 
SIZEOF_ETHARP_HDR
)

	)

126 
	#ARP_TMR_INTERVAL
 1

	)

128 
	#ETHTYPE_ARP
 0x0806U

	)

129 
	#ETHTYPE_IP
 0x0800U

	)

130 
	#ETHTYPE_VLAN
 0x8100U

	)

131 
	#ETHTYPE_PPPOEDISC
 0x8863U

	)

132 
	#ETHTYPE_PPPOE
 0x8864U

	)

136 #i‚de‡
ETHADDR32_COPY


137 
	#ETHADDR32_COPY
(
§c
, 
d°
Ë
	`SMEMCPY
(§c, d°, 
ETHARP_HWADDR_LEN
)

	)

142 #i‚de‡
ETHADDR16_COPY


143 
	#ETHADDR16_COPY
(
§c
, 
d°
Ë
	`SMEMCPY
(§c, d°, 
ETHARP_HWADDR_LEN
)

	)

146 #i‡
LWIP_ARP


149 
	#ARP_REQUEST
 1

	)

150 
	#ARP_REPLY
 2

	)

158 #i‚de‡
LWIP_ARP_FILTER_NETIF


159 
	#LWIP_ARP_FILTER_NETIF
 0

	)

162 #i‡
ARP_QUEUEING


166 
	sëh¨p_q_íåy
 {

167 
ëh¨p_q_íåy
 *
√xt
;

168 
pbuf
 *
p
;

172 
ëh¨p_öô_add
(
˝u
);

173 
ëh¨p_tmr
();

174 
s8_t
 
ëh¨p_föd_addr
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
,

175 
ëh_addr
 **
ëh_ªt
, 
ù_addr_t
 **
ù_ªt
);

176 
îr_t
 
ëh¨p_ouçut
(
√tif
 *√tif, 
pbuf
 *
q
, 
ù_addr_t
 *
ùaddr
);

177 
îr_t
 
ëh¨p_quîy
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
, 
pbuf
 *
q
);

178 
îr_t
 
ëh¨p_ªque°
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
);

183 
	#ëh¨p_gøtuôous
(
√tif
Ë
	`ëh¨p_ªque°
(“ëif), &“ëif)->
ù_addr
)

	)

185 #i‡
ETHARP_SUPPORT_STATIC_ENTRIES


186 
îr_t
 
ëh¨p_add_°©ic_íåy
(
ù_addr_t
 *
ùaddr
, 
ëh_addr
 *
ëhaddr
, 
˝u
);

187 
îr_t
 
ëh¨p_ªmove_°©ic_íåy
(
ù_addr_t
 *
ùaddr
);

190 #i‡
LWIP_AUTOIP


191 
îr_t
 
ëh¨p_øw
(
√tif
 *√tif, c⁄° 
ëh_addr
 *
ëh§c_addr
,

192 c⁄° 
ëh_addr
 *
ëhd°_addr
,

193 c⁄° 
ëh_addr
 *
hw§c_addr
, c⁄° 
ù_addr_t
 *
ù§c_addr
,

194 c⁄° 
ëh_addr
 *
hwd°_addr
, c⁄° 
ù_addr_t
 *
ùd°_addr
,

195 c⁄° 
u16_t
 
›code
);

200 
îr_t
 
ëhî√t_öput
(
pbuf
 *
p
, 
√tif
 *netif);

202 
	#ëh_addr_cmp
(
addr1
, 
addr2
Ë(
	`memcmp
(◊ddr1)->
addr
, (addr2)->addr, 
ETHARP_HWADDR_LEN
Ë=0)

	)

204 c⁄° 
ëh_addr
 
ëhbrﬂdˇ°
, 
ëhzîo
;

208 #ifde‡
__˝lu•lus


	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/netif/etharp.c

46 
	~"lwù/›t.h
"

48 #i‡
LWIP_ARP
 || 
LWIP_ETHERNET


50 
	~"lwù/ù_addr.h
"

51 
	~"lwù/def.h
"

52 
	~"lwù/ù.h
"

53 
	~"lwù/°©s.h
"

54 
	~"lwù/¢mp.h
"

55 
	~"lwù/autoù.h
"

56 
	~"lwù/t˝ù.h
"

57 
	~"√tif/ëh¨p.h
"

59 
	~<°rög.h
>

60 
	~<time.h
>

61 
	~<sys/time.h
>

63 c⁄° 
ëh_addr
 
	gëhbrﬂdˇ°
 = {{0xff,0xff,0xff,0xff,0xff,0xff}};

64 c⁄° 
ëh_addr
 
	gëhzîo
 = {{0,0,0,0,0,0}};

66 #i‡
LWIP_ARP


72 
	#ARP_MAXAGE
 240

	)

80 
	#ARP_MAXPENDING
 2

	)

82 
	#HWTYPE_ETHERNET
 1

	)

84 
	eëh¨p_°©e
 {

85 
	mETHARP_STATE_EMPTY
 = 0,

86 
	mETHARP_STATE_PENDING
,

87 
	mETHARP_STATE_STABLE


90 #i‡!
LWIP_NETIF_HWADDRHINT


91 
u8_t
 
	gëh¨p_ˇched_íåy
;

96 
	#ETHARP_FLAG_TRY_HARD
 1

	)

97 
	#ETHARP_FLAG_FIND_ONLY
 2

	)

98 
	#ETHARP_FLAG_STATIC_ENTRY
 4

	)

100 #i‡
LWIP_NETIF_HWADDRHINT


101 
	#ETHARP_SET_HINT
(
√tif
, 
höt
Ëi‡((“ëifË!
NULL
Ë&& (“ëif)->
addr_höt
 != NULL)) \

102 *((
√tif
)->
addr_höt
Ë(
höt
);

	)

104 
	#ETHARP_SET_HINT
(
√tif
, 
höt
Ë(
ëh¨p_ˇched_íåy
 = (höt))

	)

107 
îr_t
 
upd©e_¨p_íåy
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
, 
ëh_addr
 *
ëhaddr
, 
u8_t
 
Êags
);

111 #i‡(
LWIP_ARP
 && (
ARP_TABLE_SIZE
 > 0x7f))

116 #i‡
ARP_QUEUEING


123 
	$‰ì_ëh¨p_q
(
ëh¨p_q_íåy
 *
q
)

125 
ëh¨p_q_íåy
 *
r
;

126 
	`LWIP_ASSERT
("q !NULL", 
q
 !
NULL
);

127 
	`LWIP_ASSERT
("q->∞!NULL", 
q
->
p
 !
NULL
);

128 
q
) {

129 
r
 = 
q
;

130 
q
 = q->
√xt
;

131 
	`LWIP_ASSERT
("r->∞!NULL", (
r
->
p
 !
NULL
));

132 
	`pbuf_‰ì
(
r
->
p
, 
NULL
);

133 
	`memp_‰ì
(
MEMP_ARP_QUEUE
, 
r
, 
NULL
);

135 
	}
}

139 
	#‰ì_ëh¨p_q
(
q
Ë
	`pbuf_‰ì
(q, 
NULL
)

	)

145 
	$‰ì_íåy
(
i
)

147 
ëh¨p_íåy
 *
¨p_èbÀ
 = 
lwù_t˝ù_thªad
[
	`sched_gë˝u
()]->arp_table;

150 
	`¢mp_dñëe_¨pidx_åì
(
¨p_èbÀ
[
i
].
√tif
, &¨p_èbÀ[i].
ùaddr
);

152 i‡(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

154 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("ëh¨p_timî: fªeögÉ¡ry %"
U16_F
",Öackë queuê%p.\n", (
u16_t
)
i
, (*)(
¨p_èbÀ
[i].
q
)));

155 
	`‰ì_ëh¨p_q
(
¨p_èbÀ
[
i
].
q
);

156 
¨p_èbÀ
[
i
].
q
 = 
NULL
;

159 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_EMPTY
;

160 #i‡
ETHARP_SUPPORT_STATIC_ENTRIES


161 
¨p_èbÀ
[
i
].
°©ic_íåy
 = 0;

163 #ifde‡
LWIP_DEBUG


165 
¨p_èbÀ
[
i
].
˘ime
 = 0;

166 #i‡
LWIP_SNMP


167 
¨p_èbÀ
[
i
].
√tif
 = 
NULL
;

169 
	`ù_addr_£t_zîo
(&
¨p_èbÀ
[
i
].
ùaddr
);

170 
¨p_èbÀ
[
i
].
ëhaddr
 = 
ëhzîo
;

172 
	}
}

181 
	$ëh¨p_tmr
()

183 
u8_t
 
i
;

184 
ëh¨p_íåy
 *
¨p_èbÀ
 = 
lwù_t˝ù_thªad
[
	`sched_gë˝u
()]->arp_table;

186 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("etharp_timer\n"));

188 
i
 = 0; i < 
ARP_TABLE_SIZE
; ++i) {

189 
u8_t
 
°©e
 = 
¨p_èbÀ
[
i
].state;

190 i‡(
°©e
 !
ETHARP_STATE_EMPTY


191 #i‡
ETHARP_SUPPORT_STATIC_ENTRIES


192 && (
¨p_èbÀ
[
i
].
°©ic_íåy
 == 0)

195 
¨p_èbÀ
[
i
].
˘ime
++;

196 i‡((
¨p_èbÀ
[
i
].
˘ime
 >
ARP_MAXAGE
) ||

197 ((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) &&

198 (
¨p_èbÀ
[
i
].
˘ime
 >
ARP_MAXPENDING
))) {

200 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("ëh¨p_timî:Éxpúed %†íåy %"
U16_F
".\n",

201 
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
 ? "°abÀ" : "≥ndög", (
u16_t
)i));

203 
	`‰ì_íåy
(
i
);

205 #i‡
ARP_QUEUEING


207 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) {

213 
	}
}

236 
s8_t


237 
	$föd_íåy
(
ù_addr_t
 *
ùaddr
, 
u8_t
 
Êags
, 
t˝ù_thªad
 *
thªad
)

239 
s8_t
 
ﬁd_≥ndög
 = 
ARP_TABLE_SIZE
, 
ﬁd_°abÀ
 = ARP_TABLE_SIZE;

240 
s8_t
 
em±y
 = 
ARP_TABLE_SIZE
;

241 
u8_t
 
i
 = 0, 
age_≥ndög
 = 0, 
age_°abÀ
 = 0;

243 
s8_t
 
ﬁd_queue
 = 
ARP_TABLE_SIZE
;

245 
u8_t
 
age_queue
 = 0;

246 
ëh¨p_íåy
 *
¨p_èbÀ
 = 
thªad
->arp_table;

263 
i
 = 0; i < 
ARP_TABLE_SIZE
; ++i) {

264 
u8_t
 
°©e
 = 
¨p_èbÀ
[
i
].state;

266 i‡((
em±y
 =
ARP_TABLE_SIZE
Ë&& (
°©e
 =
ETHARP_STATE_EMPTY
)) {

267 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("föd_íåy: foundÉm±yÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

269 
em±y
 = 
i
;

270 } i‡(
°©e
 !
ETHARP_STATE_EMPTY
) {

271 
	`LWIP_ASSERT
("state == ETHARP_STATE_PENDING || state == ETHARP_STATE_STABLE",

272 
°©e
 =
ETHARP_STATE_PENDING
 || sèã =
ETHARP_STATE_STABLE
);

274 i‡(
ùaddr
 && 
	`ù_addr_cmp
(ùaddr, &
¨p_èbÀ
[
i
].ipaddr)) {

275 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: found m©chögÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

277  
i
;

280 i‡(
°©e
 =
ETHARP_STATE_PENDING
) {

282 i‡(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

283 i‡(
¨p_èbÀ
[
i
].
˘ime
 >
age_queue
) {

284 
ﬁd_queue
 = 
i
;

285 
age_queue
 = 
¨p_èbÀ
[
i
].
˘ime
;

290 i‡(
¨p_èbÀ
[
i
].
˘ime
 >
age_≥ndög
) {

291 
ﬁd_≥ndög
 = 
i
;

292 
age_≥ndög
 = 
¨p_èbÀ
[
i
].
˘ime
;

296 } i‡(
°©e
 =
ETHARP_STATE_STABLE
) {

297 #i‡
ETHARP_SUPPORT_STATIC_ENTRIES


299 i‡(
¨p_èbÀ
[
i
].
°©ic_íåy
 == 0)

303 i‡(
¨p_èbÀ
[
i
].
˘ime
 >
age_°abÀ
) {

304 
ﬁd_°abÀ
 = 
i
;

305 
age_°abÀ
 = 
¨p_èbÀ
[
i
].
˘ime
;

314 i‡(((
Êags
 & 
ETHARP_FLAG_FIND_ONLY
) != 0) ||

316 ((
em±y
 =
ARP_TABLE_SIZE
Ë&& ((
Êags
 & 
ETHARP_FLAG_TRY_HARD
) == 0))) {

317 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("find_entry:ÇoÉmptyÉntry foundándÇotállowedÅoÑecycle\n"));

318  (
s8_t
)
ERR_MEM
;

331 i‡(
em±y
 < 
ARP_TABLE_SIZE
) {

332 
i
 = 
em±y
;

333 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ögÉm±yÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

336 i‡(
ﬁd_°abÀ
 < 
ARP_TABLE_SIZE
) {

338 
i
 = 
ﬁd_°abÀ
;

339 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ög olde° sèbÀÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

341 
	`LWIP_ASSERT
("¨p_èbÀ[i].q =NULL", 
¨p_èbÀ
[
i
].
q
 =
NULL
);

343 } i‡(
ﬁd_≥ndög
 < 
ARP_TABLE_SIZE
) {

345 
i
 = 
ﬁd_≥ndög
;

346 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ög olde°ÖídögÉ¡ry %"
U16_F
" (wôhouàqueue)\n", (
u16_t
)
i
));

348 } i‡(
ﬁd_queue
 < 
ARP_TABLE_SIZE
) {

350 
i
 = 
ﬁd_queue
;

351 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ög olde°ÖídögÉ¡ry %"
U16_F
", fªeögÖackë queuê%p\n", (
u16_t
)
i
, (*)(
¨p_èbÀ
[i].
q
)));

354 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("find_entry:ÇoÉmpty orÑecyclableÉntries found\n"));

355  (
s8_t
)
ERR_MEM
;

359 
	`LWIP_ASSERT
("ò< ARP_TABLE_SIZE", 
i
 < 
ARP_TABLE_SIZE
);

360 
	`‰ì_íåy
(
i
);

363 
	`LWIP_ASSERT
("ò< ARP_TABLE_SIZE", 
i
 < 
ARP_TABLE_SIZE
);

364 
	`LWIP_ASSERT
("arp_table[i].state == ETHARP_STATE_EMPTY",

365 
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_EMPTY
);

368 i‡(
ùaddr
 !
NULL
) {

370 
	`ù_addr_c›y
(
¨p_èbÀ
[
i
].
ùaddr
, *ipaddr);

372 
¨p_èbÀ
[
i
].
˘ime
 = 0;

373 #i‡
ETHARP_SUPPORT_STATIC_ENTRIES


374 
¨p_èbÀ
[
i
].
°©ic_íåy
 = 0;

376  (
îr_t
)
i
;

377 
	}
}

389 
îr_t


390 
	$ëh¨p_£nd_ù
(
√tif
 *√tif, 
pbuf
 *
p
, 
ëh_addr
 *
§c
, ëh_add∏*
d°
)

392 
ëh_hdr
 *
ëhhdr
 = (ëh_hd∏*)
p
->
∑ylﬂd
;

394 
	`LWIP_ASSERT
("netif->hwaddr_len must beÅhe sameás ETHARP_HWADDR_LEN forÉtharp!",

395 (
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
));

396 
	`ETHADDR32_COPY
(&
ëhhdr
->
de°
, 
d°
);

397 
	`ETHADDR16_COPY
(&
ëhhdr
->
§c
, src);

398 
ëhhdr
->
ty≥
 = 
	`PP_HTONS
(
ETHTYPE_IP
);

399 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_£nd_ù: sídögÖackë %p\n", (*)
p
));

401  
√tif
->
	`lökouçut
“ëif, 
p
);

402 
	}
}

422 
îr_t


423 
	$upd©e_¨p_íåy
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
, 
ëh_addr
 *
ëhaddr
, 
u8_t
 
Êags
)

425 
s8_t
 
i
;

426 
ëh¨p_íåy
 *
¨p_èbÀ
 = 
√tif
->
¥Ÿ_thªad
->arp_table;

428 
	`LWIP_ASSERT
("√tif->hwaddr_À¿=ETHARP_HWADDR_LEN", 
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
);

429 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("upd©e_¨p_íåy: %"
U16_F
".%"U16_F".%"U16_F".%"U16_F" - %02"
X16_F
":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",

430 
	`ù4_addr1_16
(
ùaddr
), 
	`ù4_addr2_16
(ùaddr), 
	`ù4_addr3_16
(ùaddr), 
	`ù4_addr4_16
(ipaddr),

431 
ëhaddr
->
addr
[0],Éthaddr->addr[1],Éthaddr->addr[2],

432 
ëhaddr
->
addr
[3],Éthaddr->addr[4],Éthaddr->addr[5]));

434 i‡(
	`ù_addr_ißny
(
ùaddr
) ||

435 
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
) ||

436 
	`ù_addr_ismu…iˇ°
(
ùaddr
)) {

437 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("update_arp_entry: willÇotáddÇon-unicast IPáddressÅo ARP cache\n"));

438  
ERR_ARG
;

441 
i
 = 
	`föd_íåy
(
ùaddr
, 
Êags
, 
√tif
->
¥Ÿ_thªad
);

443 i‡(
i
 < 0) {

444  (
îr_t
)
i
;

447 #i‡
ETHARP_SUPPORT_STATIC_ENTRIES


448 i‡(
Êags
 & 
ETHARP_FLAG_STATIC_ENTRY
) {

450 
¨p_èbÀ
[
i
].
°©ic_íåy
 = 1;

455 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_STABLE
;

457 #i‡
LWIP_SNMP


459 
¨p_èbÀ
[
i
].
√tif
 =Çetif;

462 
	`¢mp_ö£π_¨pidx_åì
(
√tif
, &
¨p_èbÀ
[
i
].
ùaddr
);

464 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("upd©e_¨p_íåy: upd©ög sèbÀÉ¡ry %"
S16_F
"\n", (
s16_t
)
i
));

466 
	`ETHADDR32_COPY
(&
¨p_èbÀ
[
i
].
ëhaddr
,Éthaddr);

468 
¨p_èbÀ
[
i
].
˘ime
 = 0;

470 #i‡
ARP_QUEUEING


471 
¨p_èbÀ
[
i
].
q
 !
NULL
) {

472 
pbuf
 *
p
;

474 
ëh¨p_q_íåy
 *
q
 = 
¨p_èbÀ
[
i
].q;

476 
¨p_èbÀ
[
i
].
q
 = q->
√xt
;

478 
p
 = 
q
->p;

480 
	`memp_‰ì
(
MEMP_ARP_QUEUE
, 
q
, 
√tif
->
¥Ÿ_thªad
);

482 i‡(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

483 
pbuf
 *
p
 = 
¨p_èbÀ
[
i
].
q
;

484 
¨p_èbÀ
[
i
].
q
 = 
NULL
;

487 
	`ëh¨p_£nd_ù
(
√tif
, 
p
, (
ëh_addr
*)“ëif->
hwaddr
), 
ëhaddr
);

489 
	`pbuf_‰ì
(
p
, 
√tif
->
¥Ÿ_thªad
);

491  
ERR_OK
;

492 
	}
}

494 #i‡
ETHARP_SUPPORT_STATIC_ENTRIES


503 
îr_t


504 
	$ëh¨p_add_°©ic_íåy
(
ù_addr_t
 *
ùaddr
, 
ëh_addr
 *
ëhaddr
, 
˝u
)

506 
√tif
 *netif;

508 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_add_°©ic_íåy: %"
U16_F
".%"U16_F".%"U16_F".%"U16_F" - %02"
X16_F
":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",

509 
	`ù4_addr1_16
(
ùaddr
), 
	`ù4_addr2_16
(ùaddr), 
	`ù4_addr3_16
(ùaddr), 
	`ù4_addr4_16
(ipaddr),

510 
ëhaddr
->
addr
[0],Éthaddr->addr[1],Éthaddr->addr[2],

511 
ëhaddr
->
addr
[3],Éthaddr->addr[4],Éthaddr->addr[5]));

513 
√tif
 = 
	`ù_rouã
(
ùaddr
, 
˝u
);

514 i‡(
√tif
 =
NULL
) {

515  
ERR_RTE
;

518  
	`upd©e_¨p_íåy
(
√tif
, 
ùaddr
, 
ëhaddr
, 
ETHARP_FLAG_TRY_HARD
 | 
ETHARP_FLAG_STATIC_ENTRY
);

519 
	}
}

521 
	$ëh¨p_öô_add
(
˝u
)

523 
ëh_addr
 
de°_ëh
 = {0x00, 0x02, 0xc9, 0xa4, 0x59, 0x41};

524 
ù_addr
 
de°_ù
;

525 
	`IP4_ADDR
(&
de°_ù
, 10,0,0,1);

526 
	`ëh¨p_add_°©ic_íåy
(&
de°_ù
,&
de°_ëh
,
˝u
);

527 
	}
}

537 
îr_t


538 
	$ëh¨p_ªmove_°©ic_íåy
(
ù_addr_t
 *
ùaddr
)

540 
s8_t
 
i
;

541 
t˝ù_thªad
 *
thªad
 = 
lwù_t˝ù_thªad
[
	`sched_gë˝u
()];

542 
ëh¨p_íåy
 *
¨p_èbÀ
 = 
thªad
->arp_table;

544 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_ªmove_°©ic_íåy: %"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

545 
	`ù4_addr1_16
(
ùaddr
), 
	`ù4_addr2_16
(ùaddr), 
	`ù4_addr3_16
(ùaddr), 
	`ù4_addr4_16
(ipaddr)));

548 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_FLAG_FIND_ONLY
, 
thªad
);

550 i‡(
i
 < 0) {

551  (
îr_t
)
i
;

554 i‡((
¨p_èbÀ
[
i
].
°©e
 !
ETHARP_STATE_STABLE
) ||

555 (
¨p_èbÀ
[
i
].
°©ic_íåy
 == 0)) {

557  
ERR_ARG
;

560 
	`‰ì_íåy
(
i
);

561  
ERR_OK
;

562 
	}
}

576 
s8_t


577 
	$ëh¨p_föd_addr
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
,

578 
ëh_addr
 **
ëh_ªt
, 
ù_addr_t
 **
ù_ªt
)

580 
s8_t
 
i
;

581 
ëh¨p_íåy
 *
¨p_èbÀ
 = 
√tif
->
¥Ÿ_thªad
->arp_table;

583 
	`LWIP_ASSERT
("eth_ret != NULL && ip_ret != NULL",

584 
ëh_ªt
 !
NULL
 && 
ù_ªt
 != NULL);

586 
	`LWIP_UNUSED_ARG
(
√tif
);

588 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_FLAG_FIND_ONLY
, 
√tif
->
¥Ÿ_thªad
);

589 if((
i
 >0Ë&& 
¨p_èbÀ
[i].
°©e
 =
ETHARP_STATE_STABLE
) {

590 *
ëh_ªt
 = &
¨p_èbÀ
[
i
].
ëhaddr
;

591 *
ù_ªt
 = &
¨p_èbÀ
[
i
].
ùaddr
;

592  
i
;

595 
	}
}

613 
	$ëh¨p_ù_öput
(
√tif
 *√tif, 
pbuf
 *
p
)

615 
ëh_hdr
 *
ëhhdr
;

616 
ù_hdr
 *
ùhdr
;

617 
ù_addr_t
 
ùhdr_§c
;

618 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
), ;);

622 
ëhhdr
 = (
ëh_hdr
 *)
p
->
∑ylﬂd
;

623 
ùhdr
 = (
ù_hdr
 *)((
u8_t
*)
ëhhdr
 + 
SIZEOF_ETH_HDR
);

625 
	`ù_addr_c›y
(
ùhdr_§c
, 
ùhdr
->
§c
);

628 i‡(!
	`ù_addr_√tcmp
(&
ùhdr_§c
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

633 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_ip_input: updating ETHARPÅable.\n"));

637 
	`upd©e_¨p_íåy
(
√tif
, &
ùhdr_§c
, &(
ëhhdr
->
§c
), 
ETHARP_FLAG_FIND_ONLY
);

638 
	}
}

656 
	$ëh¨p_¨p_öput
(
√tif
 *√tif, 
ëh_addr
 *
ëhaddr
, 
pbuf
 *
p
)

658 
ëh¨p_hdr
 *
hdr
;

659 
ëh_hdr
 *
ëhhdr
;

661 
ù_addr_t
 
sùaddr
, 
dùaddr
;

662 
u8_t
 
f‹_us
;

663 #i‡
LWIP_AUTOIP


664 c⁄° 
u8_t
 * 
ëhd°_hwaddr
;

667 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
), ;);

671 i‡(
p
->
Àn
 < 
SIZEOF_ETHARP_PACKET
) {

672 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_WARNING
,

673 ("ëh¨p_¨p_öput:Öackë dr›≥d,Åoÿsh‹à(%"
S16_F
"/%"S16_F")\n", 
p
->
tŸ_Àn
,

674 (
s16_t
)
SIZEOF_ETHARP_PACKET
));

675 
	`pbuf_‰ì
(
p
, 
√tif
->
¥Ÿ_thªad
);

679 
ëhhdr
 = (
ëh_hdr
 *)
p
->
∑ylﬂd
;

680 
hdr
 = (
ëh¨p_hdr
 *)((
u8_t
*)
ëhhdr
 + 
SIZEOF_ETH_HDR
);

681 #i‡
ETHARP_SUPPORT_VLAN


682 i‡(
ëhhdr
->
ty≥
 =
	`PP_HTONS
(
ETHTYPE_VLAN
)) {

683 
hdr
 = (
ëh¨p_hdr
 *)(((
u8_t
*)
ëhhdr
Ë+ 
SIZEOF_ETH_HDR
 + 
SIZEOF_VLAN_HDR
);

688 i‡((
hdr
->
hwty≥
 !
	`PP_HTONS
(
HWTYPE_ETHERNET
)) ||

689 (
hdr
->
hwÀn
 !
ETHARP_HWADDR_LEN
) ||

690 (
hdr
->
¥Ÿﬁí
 !(
ù_addr_t
)) ||

691 (
hdr
->
¥Ÿo
 !
	`PP_HTONS
(
ETHTYPE_IP
))) {

692 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_WARNING
,

693 ("ëh¨p_¨p_öput:Öackë dr›≥d, wr⁄g hwÅy≥, hwÀn,ÖrŸo,ÖrŸﬁí o∏ëhî√àty≥ (%"
U16_F
"/%"U16_F"/%"U16_F"/%"U16_F")\n",

694 
hdr
->
hwty≥
, hdr->
hwÀn
, hdr->
¥Ÿo
, hdr->
¥Ÿﬁí
));

695 
	`pbuf_‰ì
(
p
, 
√tif
->
¥Ÿ_thªad
);

699 #i‡
LWIP_AUTOIP


703 
	`autoù_¨p_ª∂y
(
√tif
, 
hdr
);

708 
	`IPADDR2_COPY
(&
sùaddr
, &
hdr
->sipaddr);

709 
	`IPADDR2_COPY
(&
dùaddr
, &
hdr
->dipaddr);

712 i‡(
	`ù_addr_ißny
(&
√tif
->
ù_addr
)) {

713 
f‹_us
 = 0;

716 
f‹_us
 = (
u8_t
)
	`ù_addr_cmp
(&
dùaddr
, &(
√tif
->
ù_addr
));

724 
	`upd©e_¨p_íåy
(
√tif
, &
sùaddr
, &(
hdr
->
shwaddr
),

725 
f‹_us
 ? 
ETHARP_FLAG_TRY_HARD
 : 
ETHARP_FLAG_FIND_ONLY
);

728 
hdr
->
›code
) {

730 
	`PP_HTONS
(
ARP_REQUEST
):

735 
	`LWIP_DEBUGF
 (
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: incoming ARPÑequest\n"));

737 i‡(
f‹_us
) {

739 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input:ÑeplyingÅo ARPÑequest for our IPáddress\n"));

743 
hdr
->
›code
 = 
	`ht⁄s
(
ARP_REPLY
);

745 
	`IPADDR2_COPY
(&
hdr
->
dùaddr
, &hdr->
sùaddr
);

746 
	`IPADDR2_COPY
(&
hdr
->
sùaddr
, &
√tif
->
ù_addr
);

748 
	`LWIP_ASSERT
("netif->hwaddr_len must beÅhe sameás ETHARP_HWADDR_LEN forÉtharp!",

749 (
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
));

750 #i‡
LWIP_AUTOIP


754 
ëhd°_hwaddr
 = 
	`ù_addr_i¶ökloˇl
(&
√tif
->
ù_addr
Ë? (
u8_t
*)(
ëhbrﬂdˇ°
.
addr
Ë: 
hdr
->
shwaddr
.addr;

757 
	`ETHADDR16_COPY
(&
hdr
->
dhwaddr
, &hdr->
shwaddr
);

758 #i‡
LWIP_AUTOIP


759 
	`ETHADDR16_COPY
(&
ëhhdr
->
de°
, 
ëhd°_hwaddr
);

761 
	`ETHADDR16_COPY
(&
ëhhdr
->
de°
, &
hdr
->
shwaddr
);

763 
	`ETHADDR16_COPY
(&
hdr
->
shwaddr
, 
ëhaddr
);

764 
	`ETHADDR16_COPY
(&
ëhhdr
->
§c
, 
ëhaddr
);

770 
√tif
->
	`lökouçut
“ëif, 
p
);

772 } i‡(
	`ù_addr_ißny
(&
√tif
->
ù_addr
)) {

774 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: weáre unconfigured, ARPÑequest ignored.\n"));

778 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: ARPÑequest wasÇot for us.\n"));

781 
	`PP_HTONS
(
ARP_REPLY
):

783 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: incoming ARPÑeply\n"));

784 #i‡(
LWIP_DHCP
 && 
DHCP_DOES_ARP_CHECK
)

789 
	`dh˝_¨p_ª∂y
(
√tif
, &
sùaddr
);

793 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_¨p_öput: ARP unknow¿›codêty≥ %"
S16_F
"\n", 
	`ht⁄s
(
hdr
->
›code
)));

794 
	`ETHARP_STATS_INC
(
ëh¨p
.
îr
);

798 
	`pbuf_‰ì
(
p
, 
√tif
->
¥Ÿ_thªad
);

799 
	}
}

819 
îr_t


820 
	$ëh¨p_ouçut
(
√tif
 *√tif, 
pbuf
 *
q
, 
ù_addr_t
 *
ùaddr
)

822 
ëh_addr
 *
de°
, 
mˇ°addr
;

823 
ëh¨p_íåy
 *
¨p_èbÀ
 = 
√tif
->
¥Ÿ_thªad
->arp_table;

826 i‡(
	`pbuf_hódî
(
q
, (
ëh_hdr
)) != 0) {

828 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_SERIOUS
,

830 
	`LINK_STATS_INC
(
lök
.
À√º
);

831  
ERR_BUF
;

835 
de°
 = 
NULL
;

840 i‡(
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
)) {

842 
de°
 = (
ëh_addr
 *)&
ëhbrﬂdˇ°
;

844 } i‡(
	`ù_addr_ismu…iˇ°
(
ùaddr
)) {

846 
mˇ°addr
.
addr
[0] = 0x01;

847 
mˇ°addr
.
addr
[1] = 0x00;

848 
mˇ°addr
.
addr
[2] = 0x5e;

849 
mˇ°addr
.
addr
[3] = 
	`ù4_addr2
(
ùaddr
) & 0x7f;

850 
mˇ°addr
.
addr
[4] = 
	`ù4_addr3
(
ùaddr
);

851 
mˇ°addr
.
addr
[5] = 
	`ù4_addr4
(
ùaddr
);

853 
de°
 = &
mˇ°addr
;

857 i‡(!
	`ù_addr_√tcmp
(
ùaddr
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
)) &&

858 !
	`ù_addr_i¶ökloˇl
(
ùaddr
)) {

859 #i‡
LWIP_AUTOIP


860 
ù_hdr
 *
ùhdr
 = (ù_hdr*)((
u8_t
*)
q
->
∑ylﬂd
 +

861 (
ëh_hdr
));

866 i‡(!
	`ù_addr_i¶ökloˇl
(&
ùhdr
->
§c
))

870 i‡(!
	`ù_addr_ißny
(&
√tif
->
gw
)) {

872 
ùaddr
 = &(
√tif
->
gw
);

876  
ERR_RTE
;

880 #i‡
LWIP_NETIF_HWADDRHINT


881 i‡(
√tif
->
addr_höt
 !
NULL
) {

883 
u8_t
 
ëh¨p_ˇched_íåy
 = *(
√tif
->
addr_höt
);

884 i‡(
ëh¨p_ˇched_íåy
 < 
ARP_TABLE_SIZE
) {

886 i‡((
¨p_èbÀ
[
ëh¨p_ˇched_íåy
].
°©e
 =
ETHARP_STATE_STABLE
) &&

887 (
	`ù_addr_cmp
(
ùaddr
, &
¨p_èbÀ
[
ëh¨p_ˇched_íåy
].ipaddr))) {

889 
	`ETHARP_STATS_INC
(
ëh¨p
.
ˇchehô
);

890  
	`ëh¨p_£nd_ù
(
√tif
, 
q
, (
ëh_addr
*)“ëif->
hwaddr
),

891 &
¨p_èbÀ
[
ëh¨p_ˇched_íåy
].
ëhaddr
);

893 #i‡
LWIP_NETIF_HWADDRHINT


898  
	`ëh¨p_quîy
(
√tif
, 
ùaddr
, 
q
);

904  
	`ëh¨p_£nd_ù
(
√tif
, 
q
, (
ëh_addr
*)“ëif->
hwaddr
), 
de°
);

905 
	}
}

940 
îr_t


941 
	$ëh¨p_quîy
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
, 
pbuf
 *
q
)

943 
ëh_addr
 * 
§ˇddr
 = (ëh_add∏*)
√tif
->
hwaddr
;

944 
îr_t
 
ªsu…
 = 
ERR_MEM
;

945 
s8_t
 
i
;

946 
ëh¨p_íåy
 *
¨p_èbÀ
 = 
√tif
->
¥Ÿ_thªad
->arp_table;

949 i‡(
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
) ||

950 
	`ù_addr_ismu…iˇ°
(
ùaddr
) ||

951 
	`ù_addr_ißny
(
ùaddr
)) {

952 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_query: willÇotáddÇon-unicast IPáddressÅo ARP cache\n"));

953  
ERR_ARG
;

957 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_FLAG_TRY_HARD
, 
√tif
->
¥Ÿ_thªad
);

960 i‡(
i
 < 0) {

961 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_query: couldÇot create ARPÉntry\n"));

962 i‡(
q
) {

963 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_query:Öacket dropped\n"));

964 
	`ETHARP_STATS_INC
(
ëh¨p
.
memîr
);

966  (
îr_t
)
i
;

970 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_EMPTY
) {

971 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_PENDING
;

975 
	`LWIP_ASSERT
("arp_table[i].state == PENDING or STABLE",

976 ((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) ||

977 (
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
)));

980 i‡((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
Ë|| (
q
 =
NULL
)) {

982 
ªsu…
 = 
	`ëh¨p_ªque°
(
√tif
, 
ùaddr
);

983 i‡(
ªsu…
 !
ERR_OK
) {

989 i‡(
q
 =
NULL
) {

990  
ªsu…
;

995 
	`LWIP_ASSERT
("q !NULL", 
q
 !
NULL
);

997 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
) {

999 
	`ETHARP_SET_HINT
(
√tif
, 
i
);

1001 
ªsu…
 = 
	`ëh¨p_£nd_ù
(
√tif
, 
q
, 
§ˇddr
, &(
¨p_èbÀ
[
i
].
ëhaddr
));

1003 } i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) {

1005 
pbuf
 *
p
;

1006 
c›y_√eded
 = 0;

1010 
p
 = 
q
;

1011 
p
) {

1012 
	`LWIP_ASSERT
("nÿ∑ckë queue†Ælowed!", (
p
->
Àn
 !p->
tŸ_Àn
Ë|| (p->
√xt
 == 0));

1013 if(
p
->
ty≥
 !
PBUF_ROM
) {

1014 
c›y_√eded
 = 1;

1017 
p
 =Ö->
√xt
;

1019 if(
c›y_√eded
) {

1021 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
,Ö->
tŸ_Àn
, 
PBUF_POOL
, 
√tif
->
¥Ÿ_thªad
);

1022 if(
p
 !
NULL
) {

1023 i‡(
	`pbuf_c›y
(
p
, 
q
Ë!
ERR_OK
) {

1024 
	`pbuf_‰ì
(
p
, 
√tif
->
¥Ÿ_thªad
);

1025 
p
 = 
NULL
;

1030 
p
 = 
q
;

1031 
	`pbuf_ªf
(
p
);

1034 i‡(
p
 !
NULL
) {

1036 #i‡
ARP_QUEUEING


1037 
ëh¨p_q_íåy
 *
√w_íåy
;

1039 
√w_íåy
 = (
ëh¨p_q_íåy
 *)
	`memp_mÆloc
(
MEMP_ARP_QUEUE
, 
√tif
->
¥Ÿ_thªad
);

1040 i‡(
√w_íåy
 !
NULL
) {

1041 
√w_íåy
->
√xt
 = 0;

1042 
√w_íåy
->
p
 =Ö;

1043 if(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

1045 
ëh¨p_q_íåy
 *
r
;

1046 
r
 = 
¨p_èbÀ
[
i
].
q
;

1047 
r
->
√xt
 !
NULL
) {

1048 
r
 =Ñ->
√xt
;

1050 
r
->
√xt
 = 
√w_íåy
;

1053 
¨p_èbÀ
[
i
].
q
 = 
√w_íåy
;

1055 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: queuedÖackë %∞⁄ ARPÉ¡ry %"
S16_F
"\n", (*)
q
, (
s16_t
)
i
));

1056 
ªsu…
 = 
ERR_OK
;

1059 
	`pbuf_‰ì
(
p
, 
√tif
->
¥Ÿ_thªad
);

1060 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: couldÇŸ queuê®c›y o‡PBUF_REFÖackë %∞(ouào‡mem‹y)\n", (*)
q
));

1061 
ªsu…
 = 
ERR_MEM
;

1065 i‡(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

1066 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: dr›≥dÖªviou¶y queuedÖackë %∞f‹ ARPÉ¡ry %"
S16_F
"\n", (*)
q
, (
s16_t
)
i
));

1067 
	`pbuf_‰ì
(
¨p_èbÀ
[
i
].
q
, 
√tif
->
¥Ÿ_thªad
);

1069 
¨p_èbÀ
[
i
].
q
 = 
p
;

1070 
ªsu…
 = 
ERR_OK
;

1071 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: queuedÖackë %∞⁄ ARPÉ¡ry %"
S16_F
"\n", (*)
q
, (
s16_t
)
i
));

1074 
	`ETHARP_STATS_INC
(
ëh¨p
.
memîr
);

1075 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: couldÇŸ queuê®c›y o‡PBUF_REFÖackë %∞(ouào‡mem‹y)\n", (*)
q
));

1076 
ªsu…
 = 
ERR_MEM
;

1079  
ªsu…
;

1080 
	}
}

1097 #i‡!
LWIP_AUTOIP


1100 
îr_t


1101 
	$ëh¨p_øw
(
√tif
 *√tif, c⁄° 
ëh_addr
 *
ëh§c_addr
,

1102 c⁄° 
ëh_addr
 *
ëhd°_addr
,

1103 c⁄° 
ëh_addr
 *
hw§c_addr
, c⁄° 
ù_addr_t
 *
ù§c_addr
,

1104 c⁄° 
ëh_addr
 *
hwd°_addr
, c⁄° 
ù_addr_t
 *
ùd°_addr
,

1105 c⁄° 
u16_t
 
›code
)

1107 
pbuf
 *
p
;

1108 
îr_t
 
ªsu…
 = 
ERR_OK
;

1109 
ëh_hdr
 *
ëhhdr
;

1110 
ëh¨p_hdr
 *
hdr
;

1111 #i‡
LWIP_AUTOIP


1112 c⁄° 
u8_t
 * 
ëhd°_hwaddr
;

1116 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
SIZEOF_ETHARP_PACKET
, 
PBUF_POOL
, 
√tif
->
¥Ÿ_thªad
);

1118 i‡(
p
 =
NULL
) {

1119 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_LEVEL_SERIOUS
,

1121 
	`ETHARP_STATS_INC
(
ëh¨p
.
memîr
);

1122  
ERR_MEM
;

1124 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÉtharp_hdr",

1125 (
p
->
Àn
 >
SIZEOF_ETHARP_PACKET
));

1127 
ëhhdr
 = (
ëh_hdr
 *)
p
->
∑ylﬂd
;

1128 
hdr
 = (
ëh¨p_hdr
 *)((
u8_t
*)
ëhhdr
 + 
SIZEOF_ETH_HDR
);

1129 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_raw: sendingÑaw ARPÖacket.\n"));

1130 
hdr
->
›code
 = 
	`ht⁄s
(opcode);

1132 
	`LWIP_ASSERT
("netif->hwaddr_len must beÅhe sameás ETHARP_HWADDR_LEN forÉtharp!",

1133 (
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
));

1134 #i‡
LWIP_AUTOIP


1138 
ëhd°_hwaddr
 = 
	`ù_addr_i¶ökloˇl
(
ù§c_addr
Ë? (
u8_t
*)(
ëhbrﬂdˇ°
.
addr
Ë: 
ëhd°_addr
->addr;

1141 
	`ETHADDR16_COPY
(&
hdr
->
shwaddr
, 
hw§c_addr
);

1142 
	`ETHADDR16_COPY
(&
hdr
->
dhwaddr
, 
hwd°_addr
);

1144 #i‡
LWIP_AUTOIP


1145 
	`ETHADDR16_COPY
(&
ëhhdr
->
de°
, 
ëhd°_hwaddr
);

1147 
	`ETHADDR16_COPY
(&
ëhhdr
->
de°
, 
ëhd°_addr
);

1149 
	`ETHADDR16_COPY
(&
ëhhdr
->
§c
, 
ëh§c_addr
);

1152 
	`IPADDR2_COPY
(&
hdr
->
sùaddr
, 
ù§c_addr
);

1153 
	`IPADDR2_COPY
(&
hdr
->
dùaddr
, 
ùd°_addr
);

1155 
hdr
->
hwty≥
 = 
	`PP_HTONS
(
HWTYPE_ETHERNET
);

1156 
hdr
->
¥Ÿo
 = 
	`PP_HTONS
(
ETHTYPE_IP
);

1158 
hdr
->
hwÀn
 = 
ETHARP_HWADDR_LEN
;

1159 
hdr
->
¥Ÿﬁí
 = (
ù_addr_t
);

1161 
ëhhdr
->
ty≥
 = 
	`PP_HTONS
(
ETHTYPE_ARP
);

1163 
ªsu…
 = 
√tif
->
	`lökouçut
“ëif, 
p
);

1164 
	`ETHARP_STATS_INC
(
ëh¨p
.
xmô
);

1166 
	`pbuf_‰ì
(
p
, 
√tif
->
¥Ÿ_thªad
);

1167 
p
 = 
NULL
;

1170  
ªsu…
;

1171 
	}
}

1182 
îr_t


1183 
	$ëh¨p_ªque°
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
)

1185 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_request: sending ARPÑequest.\n"));

1186  
	`ëh¨p_øw
(
√tif
, (
ëh_addr
 *Íëif->
hwaddr
, &
ëhbrﬂdˇ°
,

1187 (
ëh_addr
 *)
√tif
->
hwaddr
, &√tif->
ù_addr
, &
ëhzîo
,

1188 
ùaddr
, 
ARP_REQUEST
);

1189 
	}
}

1200 
îr_t


1201 
	$ëhî√t_öput
(
pbuf
 *
p
, 
√tif
 *netif)

1203 
ëh_hdr
* 
ëhhdr
;

1204 
u16_t
 
ty≥
;

1205 
s16_t
 
ù_hdr_off£t
 = 
SIZEOF_ETH_HDR
;

1206 
time•ec
 
°¨t
;

1208 i‡(
p
->
Àn
 <
SIZEOF_ETH_HDR
) {

1209 
‰ì_™d_ªtu∫
;

1213 
ëhhdr
 = (
ëh_hdr
 *)
p
->
∑ylﬂd
;

1214 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
,

1215 ("ëhî√t_öput: de°:%"
X8_F
":%"X8_F":%"X8_F":%"X8_F":%"X8_F":%"X8_F", src:%"X8_F":%"X8_F":%"X8_F":%"X8_F":%"X8_F":%"X8_F",Åy≥:%"
X16_F
"\n",

1216 ()
ëhhdr
->
de°
.
addr
[0], ()ethhdr->dest.addr[1], ()ethhdr->dest.addr[2],

1217 ()
ëhhdr
->
de°
.
addr
[3], ()ethhdr->dest.addr[4], ()ethhdr->dest.addr[5],

1218 ()
ëhhdr
->
§c
.
addr
[0], ()ethhdr->src.addr[1], ()ethhdr->src.addr[2],

1219 ()
ëhhdr
->
§c
.
addr
[3], ()ethhdr->src.addr[4], ()ethhdr->src.addr[5],

1220 ()
	`ht⁄s
(
ëhhdr
->
ty≥
)));

1222 
ty≥
 = 
ëhhdr
->type;

1224 
ty≥
) {

1225 #i‡
LWIP_ARP


1227 
	`PP_HTONS
(
ETHTYPE_IP
):

1228 i‡(!(
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
)) {

1229 
‰ì_™d_ªtu∫
;

1232 
	`ëh¨p_ù_öput
(
√tif
, 
p
);

1234 if(
	`pbuf_hódî
(
p
, -
ù_hdr_off£t
)) {

1235 
‰ì_™d_ªtu∫
;

1238 
	`ù_öput
(
p
, 
√tif
);

1242 
	`PP_HTONS
(
ETHTYPE_ARP
):

1243 i‡(!(
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
)) {

1244 
‰ì_™d_ªtu∫
;

1247 
	`ëh¨p_¨p_öput
(
√tif
, (
ëh_addr
*)“ëif->
hwaddr
), 
p
);

1252 
	`ETHARP_STATS_INC
(
ëh¨p
.
¥Ÿîr
);

1253 
	`ETHARP_STATS_INC
(
ëh¨p
.
dr›
);

1254 
‰ì_™d_ªtu∫
;

1259  
ERR_OK
;

1261 
‰ì_™d_ªtu∫
:

1262 
	`pbuf_‰ì
(
p
, 
√tif
->
¥Ÿ_thªad
);

1263  
ERR_OK
;

1264 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/core/test_mem.c

1 
	~"ã°_mem.h
"

3 
	~"lwù/mem.h
"

4 
	~"lwù/°©s.h
"

6 #i‡!
LWIP_STATS
 || !
MEM_STATS


9 #i‡
LWIP_DNS


16 
	$mem_£tup
()

18 
	}
}

21 
	$mem_ã¨down
()

23 
	}
}

29 
	$START_TEST
(
ã°_mem_⁄e
)

31 
	#SIZE1
 16

	)

32 
	#SIZE1_2
 12

	)

33 
	#SIZE2
 16

	)

34 *
p1
, *
p2
;

35 
mem_size_t
 
s1
, 
s2
;

36 
	`LWIP_UNUSED_ARG
(
_i
);

38 #i‡
LWIP_DNS


39 
	`Áû
("ThisÅestÇeeds DNSÅurned off (as it mallocs on init)");

42 
	`Áû_u∆ess
(
lwù_°©s
.
mem
.
u£d
 == 0);

44 
p1
 = 
	`mem_mÆloc
(
SIZE1
);

45 
	`Áû_u∆ess
(
p1
 !
NULL
);

46 
	`Áû_u∆ess
(
lwù_°©s
.
mem
.
u£d
 >
SIZE1
);

47 
s1
 = 
lwù_°©s
.
mem
.
u£d
;

49 
p2
 = 
	`mem_mÆloc
(
SIZE2
);

50 
	`Áû_u∆ess
(
p2
 !
NULL
);

51 
	`Áû_u∆ess
(
lwù_°©s
.
mem
.
u£d
 >
SIZE2
 + 
s1
);

52 
s2
 = 
lwù_°©s
.
mem
.
u£d
;

54 
	`mem_åim
(
p1
, 
SIZE1_2
);

56 
	`mem_‰ì
(
p2
);

57 
	`Áû_u∆ess
(
lwù_°©s
.
mem
.
u£d
 <
s2
 - 
SIZE2
);

59 
	`mem_‰ì
(
p1
);

60 
	`Áû_u∆ess
(
lwù_°©s
.
mem
.
u£d
 == 0);

61 
	}
}

62 
END_TEST


66 
Suôe
 *

67 
	$mem_suôe
()

69 
TFun
 
ã°s
[] = {

70 
ã°_mem_⁄e
,

72  
	`¸óã_suôe
("MEM", 
ã°s
, —e°s)/(
TFun
), 
mem_£tup
, 
mem_ã¨down
);

73 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/core/test_mem.h

1 #i‚de‡
__TEST_MEM_H__


2 
	#__TEST_MEM_H__


	)

4 
	~"../lwù_check.h
"

6 
Suôe
 *
mem_suôe
();

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/etharp/test_etharp.c

1 
	~"ã°_ëh¨p.h
"

3 
	~"lwù/udp.h
"

4 
	~"√tif/ëh¨p.h
"

5 
	~"lwù/°©s.h
"

7 #i‡!
LWIP_STATS
 || !
UDP_STATS
 || !
MEMP_STATS
 || !
ETHARP_STATS


10 #i‡!
ETHARP_SUPPORT_STATIC_ENTRIES


14 
√tif
 
	gã°_√tif
;

15 
ù_addr_t
 
	gã°_ùaddr
, 
	gã°_√tmask
, 
	gã°_gw
;

16 
ëh_addr
 
	gã°_ëhaddr
 = {1,1,1,1,1,1};

17 
ëh_addr
 
	gã°_ëhaddr2
 = {1,1,1,1,1,2};

18 
ëh_addr
 
	gã°_ëhaddr3
 = {1,1,1,1,1,3};

19 
ëh_addr
 
	gã°_ëhaddr4
 = {1,1,1,1,1,4};

20 
	glökouçut_˘r
;

24 
	$ëh¨p_ªmove_Æl
()

26 
i
;

28 
i
 = 0; i < 0xff; i++) {

29 
	`ëh¨p_tmr
();

31 
	}
}

33 
îr_t


34 
	$deÁu…_√tif_lökouçut
(
√tif
 *√tif, 
pbuf
 *
p
)

36 
	`Áû_u∆ess
(
√tif
 =&
ã°_√tif
);

37 
	`Áû_u∆ess
(
p
 !
NULL
);

38 
lökouçut_˘r
++;

39  
ERR_OK
;

40 
	}
}

42 
îr_t


43 
	$deÁu…_√tif_öô
(
√tif
 *netif)

45 
	`Áû_u∆ess
(
√tif
 !
NULL
);

46 
√tif
->
lökouçut
 = 
deÁu…_√tif_lökouçut
;

47 
√tif
->
ouçut
 = 
ëh¨p_ouçut
;

48 
√tif
->
mtu
 = 1500;

49 
√tif
->
Êags
 = 
NETIF_FLAG_BROADCAST
 | 
NETIF_FLAG_ETHARP
 | 
NETIF_FLAG_LINK_UP
;

50 
√tif
->
hwaddr_Àn
 = 
ETHARP_HWADDR_LEN
;

51  
ERR_OK
;

52 
	}
}

55 
	$deÁu…_√tif_add
()

57 
	`IP4_ADDR
(&
ã°_gw
, 192,168,0,1);

58 
	`IP4_ADDR
(&
ã°_ùaddr
, 192,168,0,1);

59 
	`IP4_ADDR
(&
ã°_√tmask
, 255,255,0,0);

61 
	`Áû_u∆ess
(
√tif_deÁu…
 =
NULL
);

62 
	`√tif_£t_deÁu…
(
	`√tif_add
(&
ã°_√tif
, &
ã°_ùaddr
, &
ã°_√tmask
,

63 &
ã°_gw
, 
NULL
, 
deÁu…_√tif_öô
, NULL));

64 
	`√tif_£t_up
(&
ã°_√tif
);

65 
	}
}

68 
	$deÁu…_√tif_ªmove
()

70 
	`Áû_u∆ess
(
√tif_deÁu…
 =&
ã°_√tif
);

71 
	`√tif_ªmove
(&
ã°_√tif
);

72 
	}
}

75 
	$¸óã_¨p_ª•⁄£
(
ù_addr_t
 *
adr
)

77 
k
;

78 
ëh_hdr
 *
ëhhdr
;

79 
ëh¨p_hdr
 *
ëh¨phdr
;

80 
pbuf
 *
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, (
ëh_hdr
Ë+ (
ëh¨p_hdr
), 
PBUF_RAM
, 
NULL
);

81 if(
p
 =
NULL
) {

82 
	`FAIL_RET
();

84 
ëhhdr
 = (
ëh_hdr
*)
p
->
∑ylﬂd
;

85 
ëh¨phdr
 = (
ëh¨p_hdr
*)(
ëhhdr
 + 1);

87 
ëhhdr
->
de°
 = 
ã°_ëhaddr
;

88 
ëhhdr
->
§c
 = 
ã°_ëhaddr2
;

89 
ëhhdr
->
ty≥
 = 
	`ht⁄s
(
ETHTYPE_ARP
);

91 
ëh¨phdr
->
hwty≥
 = 
	`ht⁄s
( 1);

92 
ëh¨phdr
->
¥Ÿo
 = 
	`ht⁄s
(
ETHTYPE_IP
);

93 
ëh¨phdr
->
hwÀn
 = 
ETHARP_HWADDR_LEN
;

94 
ëh¨phdr
->
¥Ÿﬁí
 = (
ù_addr_t
);

95 
ëh¨phdr
->
›code
 = 
	`ht⁄s
(
ARP_REPLY
);

97 
	`SMEMCPY
(&
ëh¨phdr
->
sùaddr
, 
adr
, (
ù_addr_t
));

98 
	`SMEMCPY
(&
ëh¨phdr
->
dùaddr
, &
ã°_ùaddr
, (
ù_addr_t
));

100 
k
 = 6;

101 
k
 > 0) {

102 
k
--;

104 
ëh¨phdr
->
shwaddr
.
addr
[
k
] = 
ã°_ëhaddr2
.addr[k];

105 
ëh¨phdr
->
dhwaddr
.
addr
[
k
] = 
ã°_ëhaddr
.addr[k];

107 
ëhhdr
->
de°
.
addr
[
k
] = 
ã°_ëhaddr
.addr[k];

108 
ëhhdr
->
§c
.
addr
[
k
] = 
ã°_ëhaddr2
.addr[k];

111 
	`ëhî√t_öput
(
p
, &
ã°_√tif
);

112 
	}
}

117 
	$ëh¨p_£tup
()

119 
	`ëh¨p_ªmove_Æl
();

120 
	`deÁu…_√tif_add
();

121 
	}
}

124 
	$ëh¨p_ã¨down
()

126 
	`ëh¨p_ªmove_Æl
();

127 
	`deÁu…_√tif_ªmove
();

128 
	}
}

133 
	$START_TEST
(
ã°_ëh¨p_èbÀ
)

135 #i‡
ETHARP_SUPPORT_STATIC_ENTRIES


136 
îr_t
 
îr
;

138 
s8_t
 
idx
;

139 
ù_addr_t
 *
unu£d_ùaddr
;

140 
ëh_addr
 *
unu£d_ëhaddr
;

141 
udp_pcb
* 
pcb
;

142 
	`LWIP_UNUSED_ARG
(
_i
);

144 i‡(
√tif_deÁu…
 !&
ã°_√tif
) {

145 
	`Áû
("ThisÅestÇeedsá defaultÇetif");

148 
lökouçut_˘r
 = 0;

150 
pcb
 = 
	`udp_√w
();

151 
	`Áû_u∆ess
(
pcb
 !
NULL
);

152 i‡(
pcb
 !
NULL
) {

153 
ù_addr_t
 
adrs
[
ARP_TABLE_SIZE
 + 2];

154 
i
;

155 
i
 = 0; i < 
ARP_TABLE_SIZE
 + 2; i++) {

156 
	`IP4_ADDR
(&
adrs
[
i
], 192,168,0,i+2);

159 
i
 = 0; i < 
ARP_TABLE_SIZE
; i++) {

160 
pbuf
 *
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 10, 
PBUF_RAM
, 
NULL
);

161 
	`Áû_u∆ess
(
p
 !
NULL
);

162 i‡(
p
 !
NULL
) {

163 
îr_t
 
îr
 = 
	`udp_£ndto
(
pcb
, 
p
, &
adrs
[
i
], 123);

164 
	`Áû_u∆ess
(
îr
 =
ERR_OK
);

166 
	`Áû_u∆ess
(
lökouçut_˘r
 =(2*
i
) + 1);

167 
	`pbuf_‰ì
(
p
, 
NULL
);

170 
	`¸óã_¨p_ª•⁄£
(&
adrs
[
i
]);

172 
	`Áû_u∆ess
(
lökouçut_˘r
 =(2*
i
) + 2);

174 
idx
 = 
	`ëh¨p_föd_addr
(
NULL
, &
adrs
[
i
], &
unu£d_ëhaddr
, &
unu£d_ùaddr
);

175 
	`Áû_u∆ess
(
idx
 =
i
);

176 
	`ëh¨p_tmr
();

179 
lökouçut_˘r
 = 0;

180 #i‡
ETHARP_SUPPORT_STATIC_ENTRIES


182 
îr
 = 
	`ëh¨p_add_°©ic_íåy
(&
adrs
[
ARP_TABLE_SIZE
], &
ã°_ëhaddr3
);

183 
	`Áû_u∆ess
(
îr
 =
ERR_OK
);

184 
idx
 = 
	`ëh¨p_föd_addr
(
NULL
, &
adrs
[
ARP_TABLE_SIZE
], &
unu£d_ëhaddr
, &
unu£d_ùaddr
);

185 
	`Áû_u∆ess
(
idx
 == 0);

186 
	`Áû_u∆ess
(
lökouçut_˘r
 == 0);

189 
lökouçut_˘r
 = 0;

191 
i
 = 0; i < 
ARP_TABLE_SIZE
; i++) {

192 
pbuf
 *
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 10, 
PBUF_RAM
, 
NULL
);

193 
	`Áû_u∆ess
(
p
 !
NULL
);

194 i‡(
p
 !
NULL
) {

195 
îr_t
 
îr
 = 
	`udp_£ndto
(
pcb
, 
p
, &
adrs
[
i
], 123);

196 
	`Áû_u∆ess
(
îr
 =
ERR_OK
);

198 
	`Áû_u∆ess
(
lökouçut_˘r
 =(2*
i
) + 1);

199 
	`pbuf_‰ì
(
p
, 
NULL
);

202 
	`¸óã_¨p_ª•⁄£
(&
adrs
[
i
]);

204 
	`Áû_u∆ess
(
lökouçut_˘r
 =(2*
i
) + 2);

206 
idx
 = 
	`ëh¨p_föd_addr
(
NULL
, &
adrs
[
i
], &
unu£d_ëhaddr
, &
unu£d_ùaddr
);

207 i‡(
i
 < 
ARP_TABLE_SIZE
 - 1) {

208 
	`Áû_u∆ess
(
idx
 =
i
+1);

211 
	`Áû_u∆ess
(
idx
 == 1);

213 
	`ëh¨p_tmr
();

216 #i‡
ETHARP_SUPPORT_STATIC_ENTRIES


218 
îr
 = 
	`ëh¨p_add_°©ic_íåy
(&
adrs
[
ARP_TABLE_SIZE
+1], &
ã°_ëhaddr4
);

219 
	`Áû_u∆ess
(
îr
 =
ERR_OK
);

220 
idx
 = 
	`ëh¨p_föd_addr
(
NULL
, &
adrs
[
ARP_TABLE_SIZE
], &
unu£d_ëhaddr
, &
unu£d_ùaddr
);

221 
	`Áû_u∆ess
(
idx
 == 0);

222 
idx
 = 
	`ëh¨p_föd_addr
(
NULL
, &
adrs
[
ARP_TABLE_SIZE
+1], &
unu£d_ëhaddr
, &
unu£d_ùaddr
);

223 
	`Áû_u∆ess
(
idx
 == 2);

225 
îr
 = 
	`ëh¨p_ªmove_°©ic_íåy
(&
adrs
[
ARP_TABLE_SIZE
+1]);

226 
	`Áû_u∆ess
(
îr
 =
ERR_OK
);

227 
idx
 = 
	`ëh¨p_föd_addr
(
NULL
, &
adrs
[
ARP_TABLE_SIZE
], &
unu£d_ëhaddr
, &
unu£d_ùaddr
);

228 
	`Áû_u∆ess
(
idx
 == 0);

229 
idx
 = 
	`ëh¨p_föd_addr
(
NULL
, &
adrs
[
ARP_TABLE_SIZE
+1], &
unu£d_ëhaddr
, &
unu£d_ùaddr
);

230 
	`Áû_u∆ess
(
idx
 == -1);

234 
	`ëh¨p_ªmove_Æl
();

235 
idx
 = 
	`ëh¨p_föd_addr
(
NULL
, &
adrs
[
ARP_TABLE_SIZE
], &
unu£d_ëhaddr
, &
unu£d_ùaddr
);

236 
	`Áû_u∆ess
(
idx
 == 0);

238 #i‡
ETHARP_SUPPORT_STATIC_ENTRIES


240 
îr
 = 
	`ëh¨p_ªmove_°©ic_íåy
(&
adrs
[
ARP_TABLE_SIZE
]);

241 
	`Áû_u∆ess
(
îr
 =
ERR_OK
);

242 
idx
 = 
	`ëh¨p_föd_addr
(
NULL
, &
adrs
[
ARP_TABLE_SIZE
], &
unu£d_ëhaddr
, &
unu£d_ùaddr
);

243 
	`Áû_u∆ess
(
idx
 == -1);

244 
idx
 = 
	`ëh¨p_föd_addr
(
NULL
, &
adrs
[
ARP_TABLE_SIZE
+1], &
unu£d_ëhaddr
, &
unu£d_ùaddr
);

245 
	`Áû_u∆ess
(
idx
 == -1);

248 
	`udp_ªmove
(
pcb
);

250 
	}
}

251 
END_TEST


255 
Suôe
 *

256 
	$ëh¨p_suôe
()

258 
TFun
 
ã°s
[] = {

259 
ã°_ëh¨p_èbÀ
,

261  
	`¸óã_suôe
("ETHARP", 
ã°s
, —e°s)/(
TFun
), 
ëh¨p_£tup
, 
ëh¨p_ã¨down
);

262 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/etharp/test_etharp.h

1 #i‚de‡
__TEST_ETHARP_H__


2 
	#__TEST_ETHARP_H__


	)

4 
	~"../lwù_check.h
"

6 
Suôe
* 
ëh¨p_suôe
();

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/lwip_check.h

1 #i‚de‡
__LWIP_CHECK_H__


2 
	#__LWIP_CHECK_H__


	)

6 
	~<c⁄fig.h
>

7 
	~<check.h
>

8 
	~<°dlib.h
>

10 
	#FAIL_RET
(Ëdÿ{ 
	`Áû
(); ; } 0)

	)

11 
	#EXPECT
(
x
Ë
	`Áû_u∆ess
(x)

	)

12 
	#EXPECT_RET
(
x
Ëdÿ{ 
	`Áû_u∆ess
(x); if(!(x)Ë{ ; }} 0)

	)

13 
	#EXPECT_RETX
(
x
, 
y
Ëdÿ{ 
	`Áû_u∆ess
(x); if(!(x)Ë{  y; }} 0)

	)

14 
	#EXPECT_RETNULL
(
x
Ë
	`EXPECT_RETX
(x, 
NULL
)

	)

17 
	gSuôe
* (
	tsuôe_gëãr_‚
)();

20 
Suôe
* 
	$¸óã_suôe
(c⁄° * 
«me
, 
TFun
 *
ã°s
, 
size_t
 
num_ã°s
, 
SFun
 
£tup
, SFu¿
ã¨down
)

22 
size_t
 
i
;

23 
Suôe
 *
s
 = 
	`suôe_¸óã
(
«me
);

25 
i
 = 0; i < 
num_ã°s
; i++) {

27 
TCa£
 *
tc_c‹e
 = 
	`tˇ£_¸óã
("Core");

28 i‡((
£tup
 !
NULL
Ë|| (
ã¨down
 != NULL)) {

29 
	`tˇ£_add_checked_fixtuª
(
tc_c‹e
, 
£tup
, 
ã¨down
);

31 
	`tˇ£_add_ã°
(
tc_c‹e
, 
ã°s
[
i
]);

32 
	`suôe_add_tˇ£
(
s
, 
tc_c‹e
);

34  
s
;

35 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/lwip_unittests.c

1 
	~"lwù_check.h
"

3 
	~"udp/ã°_udp.h
"

4 
	~"t˝/ã°_t˝.h
"

5 
	~"t˝/ã°_t˝_oos.h
"

6 
	~"c‹e/ã°_mem.h
"

7 
	~"ëh¨p/ã°_ëh¨p.h
"

9 
	~"lwù/öô.h
"

12 
	$maö
()

14 
numbî_Áûed
;

15 
SRu¬î
 *
§
;

16 
size_t
 
i
;

17 
suôe_gëãr_‚
* 
suôes
[] = {

18 
udp_suôe
,

19 
t˝_suôe
,

20 
t˝_oos_suôe
,

21 
mem_suôe
,

22 
ëh¨p_suôe
,

24 
size_t
 
num
 = (
suôes
)/(*);

25 
	`LWIP_ASSERT
("Nÿsuôe†deföed", 
num
 > 0);

27 
	`lwù_öô
();

29 
§
 = 
	`§u¬î_¸óã
((
suôes
[0])());

30 
i
 = 1; i < 
num
; i++) {

31 
	`§u¬î_add_suôe
(
§
, ((
suôe_gëãr_‚
*)
suôes
[
i
])());

34 #ifde‡
LWIP_UNITTESTS_NOFORK


35 
	`§u¬î_£t_f‹k_°©us
(
§
, 
CK_NOFORK
);

37 #ifde‡
LWIP_UNITTESTS_FORK


38 
	`§u¬î_£t_f‹k_°©us
(
§
, 
CK_FORK
);

41 
	`§u¬î_run_Æl
(
§
, 
CK_NORMAL
);

42 
numbî_Áûed
 = 
	`§u¬î_¡e°s_Áûed
(
§
);

43 
	`§u¬î_‰ì
(
§
);

44  (
numbî_Áûed
 =0Ë? 
EXIT_SUCCESS
 : 
EXIT_FAILURE
;

45 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/tcp/tcp_helper.c

1 
	~"t˝_hñ≥r.h
"

3 
	~"lwù/t˝_im∂.h
"

4 
	~"lwù/°©s.h
"

5 
	~"lwù/pbuf.h
"

6 
	~"lwù/öë_chksum.h
"

8 #i‡!
LWIP_STATS
 || !
TCP_STATS
 || !
MEMP_STATS


14 
	$t˝_ªmove
(
t˝_pcb
* 
pcb_li°
)

16 
t˝_pcb
 *
pcb
 = 
pcb_li°
;

17 
t˝_pcb
 *
pcb2
;

19 
pcb
 !
NULL
) {

20 
pcb2
 = 
pcb
;

21 
pcb
 =Öcb->
√xt
;

22 
	`t˝_ab‹t
(
pcb2
);

24 
	}
}

28 
	$t˝_ªmove_Æl
()

30 
	`t˝_ªmove
(
t˝_li°í_pcbs
.
pcbs
);

31 
	`t˝_ªmove
(
t˝_a˘ive_pcbs
);

32 
	`t˝_ªmove
(
t˝_tw_pcbs
);

33 
	`Áû_u∆ess
(
lwù_°©s
.
memp
[
MEMP_TCP_PCB
].
u£d
 == 0);

34 
	`Áû_u∆ess
(
lwù_°©s
.
memp
[
MEMP_TCP_PCB_LISTEN
].
u£d
 == 0);

35 
	`Áû_u∆ess
(
lwù_°©s
.
memp
[
MEMP_TCP_SEG
].
u£d
 == 0);

36 
	`Áû_u∆ess
(
lwù_°©s
.
memp
[
MEMP_PBUF_POOL
].
u£d
 == 0);

37 
	}
}

43 
pbuf
*

44 
	$t˝_¸óã_rx_£gmít
(
t˝_pcb
* 
pcb
, * 
d©a
, 
size_t
 
d©a_Àn
, 
u32_t
 
£qno_off£t
,

45 
u32_t
 
ackno_off£t
, 
u8_t
 
hódîÊags
)

47  
	`t˝_¸óã_£gmít
(&
pcb
->
ªmŸe_ù
, &pcb->
loˇl_ù
,Öcb->
ªmŸe_p‹t
,Öcb->
loˇl_p‹t
,

48 
d©a
, 
d©a_Àn
, 
pcb
->
rcv_nxt
 + 
£qno_off£t
,Öcb->
¢d_nxt
 + 
ackno_off£t
, 
hódîÊags
);

49 
	}
}

52 
pbuf
*

53 
	$t˝_¸óã_£gmít
(
ù_addr_t
* 
§c_ù
, ip_addr_t* 
d°_ù
,

54 
u16_t
 
§c_p‹t
, u16_à
d°_p‹t
, * 
d©a
, 
size_t
 
d©a_Àn
,

55 
u32_t
 
£qno
, u32_à
ackno
, 
u8_t
 
hódîÊags
)

57 
pbuf
* 
p
;

58 
ù_hdr
* 
ùhdr
;

59 
t˝_hdr
* 
t˝hdr
;

60 
u16_t
 
pbuf_Àn
 = (u16_t)((
ù_hdr
Ë+ (
t˝_hdr
Ë+ 
d©a_Àn
);

62 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
pbuf_Àn
, 
PBUF_POOL
, 
NULL
);

63 
	`EXPECT_RETNULL
(
p
 !
NULL
);

64 
	`EXPECT_RETNULL
(
p
->
√xt
 =
NULL
);

66 
	`mem£t
(
p
->
∑ylﬂd
, 0,Ö->
Àn
);

68 
ùhdr
 = 
p
->
∑ylﬂd
;

70 
ùhdr
->
de°
.
addr
 = 
d°_ù
->addr;

71 
ùhdr
->
§c
.
addr
 = 
§c_ù
->addr;

72 
	`IPH_VHLTOS_SET
(
ùhdr
, 4, 
IP_HLEN
 / 4, 0);

73 
	`IPH_LEN_SET
(
ùhdr
, 
	`ht⁄s
(
p
->
tŸ_Àn
));

74 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
IP_HLEN
));

76 
	`pbuf_hódî
(
p
, -(
s16_t
)(
ù_hdr
));

78 
t˝hdr
 = 
p
->
∑ylﬂd
;

79 
t˝hdr
->
§c
 = 
	`ht⁄s
(
§c_p‹t
);

80 
t˝hdr
->
de°
 = 
	`ht⁄s
(
d°_p‹t
);

81 
t˝hdr
->
£qno
 = 
	`ht⁄l
(seqno);

82 
t˝hdr
->
ackno
 = 
	`ht⁄l
(ackno);

83 
	`TCPH_HDRLEN_SET
(
t˝hdr
, (
t˝_hdr
)/4);

84 
	`TCPH_FLAGS_SET
(
t˝hdr
, 
hódîÊags
);

85 
t˝hdr
->
wnd
 = 
	`ht⁄s
(
TCP_WND
);

88 
	`mem˝y
((*)
t˝hdr
 + (
t˝_hdr
), 
d©a
, 
d©a_Àn
);

92 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, 
§c_ù
, 
d°_ù
,

93 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

95 
	`pbuf_hódî
(
p
, (
ù_hdr
));

97  
p
;

98 
	}
}

102 
	$t˝_£t_°©e
(
t˝_pcb
* 
pcb
, 
t˝_°©e
 
°©e
, 
ù_addr_t
* 
loˇl_ù
,

103 
ù_addr_t
* 
ªmŸe_ù
, 
u16_t
 
loˇl_p‹t
, u16_à
ªmŸe_p‹t
)

107 
pcb
->
°©e
 = state;

108 i‡(
°©e
 =
ESTABLISHED
) {

109 
	`TCP_REG
(&
t˝_a˘ive_pcbs
, 
pcb
);

110 
pcb
->
loˇl_ù
.
addr
 =Üocal_ip->addr;

111 
pcb
->
loˇl_p‹t
 =Üocal_port;

112 
pcb
->
ªmŸe_ù
.
addr
 =Ñemote_ip->addr;

113 
pcb
->
ªmŸe_p‹t
 =Ñemote_port;

114 } if(
°©e
 =
LISTEN
) {

115 
	`TCP_REG
(&
t˝_li°í_pcbs
.
pcbs
, 
pcb
);

116 
pcb
->
loˇl_ù
.
addr
 =Üocal_ip->addr;

117 
pcb
->
loˇl_p‹t
 =Üocal_port;

118 } if(
°©e
 =
TIME_WAIT
) {

119 
	`TCP_REG
(&
t˝_tw_pcbs
, 
pcb
);

120 
pcb
->
loˇl_ù
.
addr
 =Üocal_ip->addr;

121 
pcb
->
loˇl_p‹t
 =Üocal_port;

122 
pcb
->
ªmŸe_ù
.
addr
 =Ñemote_ip->addr;

123 
pcb
->
ªmŸe_p‹t
 =Ñemote_port;

125 
	`Áû
();

127 
	}
}

130 
	$ã°_t˝_cou¡îs_îr
(* 
¨g
, 
îr_t
 
îr
)

132 
ã°_t˝_cou¡îs
* 
cou¡îs
 = 
¨g
;

133 
	`EXPECT_RET
(
¨g
 !
NULL
);

134 
cou¡îs
->
îr_ˇŒs
++;

135 
cou¡îs
->
œ°_îr
 = 
îr
;

136 
	}
}

139 
	$ã°_t˝_cou¡îs_check_rxd©a
(
ã°_t˝_cou¡îs
* 
cou¡îs
, 
pbuf
* 
p
)

141 
pbuf
* 
q
;

142 
u32_t
 
i
, 
ª˚ived
;

143 if(
cou¡îs
->
ex≥˘ed_d©a
 =
NULL
) {

147 
	`EXPECT_RET
(
cou¡îs
->
ªcved_byãs
 + 
p
->
tŸ_Àn
 <cou¡îs->
ex≥˘ed_d©a_Àn
);

148 
ª˚ived
 = 
cou¡îs
->
ªcved_byãs
;

149 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

150 *
d©a
 = 
q
->
∑ylﬂd
;

151 
i
 = 0; i < 
q
->
Àn
; i++) {

152 
	`EXPECT_RET
(
d©a
[
i
] =
cou¡îs
->
ex≥˘ed_d©a
[
ª˚ived
]);

153 
ª˚ived
++;

156 
	`EXPECT
(
ª˚ived
 =
cou¡îs
->
ªcved_byãs
 + 
p
->
tŸ_Àn
);

157 
	}
}

159 
îr_t


160 
	$ã°_t˝_cou¡îs_ªcv
(* 
¨g
, 
t˝_pcb
* 
pcb
, 
pbuf
* 
p
, 
îr_t
 
îr
)

162 
ã°_t˝_cou¡îs
* 
cou¡îs
 = 
¨g
;

163 
	`EXPECT_RETX
(
¨g
 !
NULL
, 
ERR_OK
);

164 
	`EXPECT_RETX
(
pcb
 !
NULL
, 
ERR_OK
);

165 
	`EXPECT_RETX
(
îr
 =
ERR_OK
, ERR_OK);

167 i‡(
p
 !
NULL
) {

168 i‡(
cou¡îs
->
˛o£_ˇŒs
 == 0) {

169 
cou¡îs
->
ªcv_ˇŒs
++;

170 
	`ã°_t˝_cou¡îs_check_rxd©a
(
cou¡îs
, 
p
);

171 
cou¡îs
->
ªcved_byãs
 +
p
->
tŸ_Àn
;

173 
cou¡îs
->
ªcv_ˇŒs_a·î_˛o£
++;

174 
cou¡îs
->
ªcved_byãs_a·î_˛o£
 +
p
->
tŸ_Àn
;

176 
	`pbuf_‰ì
(
p
, 
NULL
);

178 
cou¡îs
->
˛o£_ˇŒs
++;

180 
	`EXPECT
(
cou¡îs
->
ªcv_ˇŒs_a·î_˛o£
 =0 && cou¡îs->
ªcved_byãs_a·î_˛o£
 == 0);

181  
ERR_OK
;

182 
	}
}

185 
t˝_pcb
*

186 
	$ã°_t˝_√w_cou¡îs_pcb
(
ã°_t˝_cou¡îs
* 
cou¡îs
)

188 
t˝_pcb
* 
pcb
 = 
	`t˝_√w
();

189 i‡(
pcb
 !
NULL
) {

191 
	`t˝_¨g
(
pcb
, 
cou¡îs
);

192 
	`t˝_ªcv
(
pcb
, 
ã°_t˝_cou¡îs_ªcv
);

193 
	`t˝_îr
(
pcb
, 
ã°_t˝_cou¡îs_îr
);

195  
pcb
;

196 
	}
}

199 
	$ã°_t˝_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

201 
ù_hdr
 *
ùhdr
 = (ù_hdr*)
p
->
∑ylﬂd
;

202 
	`ù_addr_c›y
(
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
, 
ùhdr
->
de°
);

203 
	`ù_addr_c›y
(
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_§c
, 
ùhdr
->
§c
);

205 
	`t˝_öput
(
p
, 
öp
);

207 
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_de°
.
addr
 = 0;

208 
öp
->
¥Ÿ_thªad
->
cuºít_ùhdr_§c
.
addr
 = 0;

209 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/tcp/tcp_helper.h

1 #i‚de‡
__TCP_HELPER_H__


2 
	#__TCP_HELPER_H__


	)

4 
	~"../lwù_check.h
"

5 
	~"lwù/¨ch.h
"

6 
	~"lwù/t˝.h
"

9 
	sã°_t˝_cou¡îs
 {

10 
u32_t
 
	mªcv_ˇŒs
;

11 
u32_t
 
	mªcved_byãs
;

12 
u32_t
 
	mªcv_ˇŒs_a·î_˛o£
;

13 
u32_t
 
	mªcved_byãs_a·î_˛o£
;

14 
u32_t
 
	m˛o£_ˇŒs
;

15 
u32_t
 
	mîr_ˇŒs
;

16 
îr_t
 
	mœ°_îr
;

17 * 
	mex≥˘ed_d©a
;

18 
u32_t
 
	mex≥˘ed_d©a_Àn
;

22 
t˝_ªmove_Æl
();

24 
pbuf
* 
t˝_¸óã_£gmít
(
ù_addr_t
* 
§c_ù
, ip_addr_t* 
d°_ù
,

25 
u16_t
 
§c_p‹t
, u16_à
d°_p‹t
, * 
d©a
, 
size_t
 
d©a_Àn
,

26 
u32_t
 
£qno
, u32_à
ackno
, 
u8_t
 
hódîÊags
);

27 
pbuf
* 
t˝_¸óã_rx_£gmít
(
t˝_pcb
* 
pcb
, * 
d©a
, 
size_t
 
d©a_Àn
,

28 
u32_t
 
£qno_off£t
, u32_à
ackno_off£t
, 
u8_t
 
hódîÊags
);

29 
t˝_£t_°©e
(
t˝_pcb
* 
pcb
, 
t˝_°©e
 
°©e
, 
ù_addr_t
* 
loˇl_ù
,

30 
ù_addr_t
* 
ªmŸe_ù
, 
u16_t
 
loˇl_p‹t
, u16_à
ªmŸe_p‹t
);

31 
ã°_t˝_cou¡îs_îr
(* 
¨g
, 
îr_t
 
îr
);

32 
îr_t
 
ã°_t˝_cou¡îs_ªcv
(* 
¨g
, 
t˝_pcb
* 
pcb
, 
pbuf
* 
p
,Éº_à
îr
);

34 
t˝_pcb
* 
ã°_t˝_√w_cou¡îs_pcb
(
ã°_t˝_cou¡îs
* 
cou¡îs
);

36 
ã°_t˝_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/tcp/test_tcp.c

1 
	~"ã°_t˝.h
"

3 
	~"lwù/t˝_im∂.h
"

4 
	~"lwù/°©s.h
"

5 
	~"t˝_hñ≥r.h
"

7 #i‡!
LWIP_STATS
 || !
TCP_STATS
 || !
MEMP_STATS


14 
	$t˝_£tup
()

16 
	`t˝_ªmove_Æl
();

17 
	}
}

20 
	$t˝_ã¨down
()

22 
	`t˝_ªmove_Æl
();

23 
	}
}

29 
	$START_TEST
(
ã°_t˝_√w_ab‹t
)

31 
t˝_pcb
* 
pcb
;

32 
	`LWIP_UNUSED_ARG
(
_i
);

34 
	`Áû_u∆ess
(
lwù_°©s
.
memp
[
MEMP_TCP_PCB
].
u£d
 == 0);

36 
pcb
 = 
	`t˝_√w
();

37 
	`Áû_u∆ess
(
pcb
 !
NULL
);

38 i‡(
pcb
 !
NULL
) {

39 
	`Áû_u∆ess
(
lwù_°©s
.
memp
[
MEMP_TCP_PCB
].
u£d
 == 1);

40 
	`t˝_ab‹t
(
pcb
);

41 
	`Áû_u∆ess
(
lwù_°©s
.
memp
[
MEMP_TCP_PCB
].
u£d
 == 0);

43 
	}
}

44 
END_TEST


47 
	$START_TEST
(
ã°_t˝_ªcv_ö£q
)

49 
ã°_t˝_cou¡îs
 
cou¡îs
;

50 
t˝_pcb
* 
pcb
;

51 
pbuf
* 
p
;

52 
d©a
[] = {1, 2, 3, 4};

53 
ù_addr_t
 
ªmŸe_ù
, 
loˇl_ù
;

54 
u16_t
 
d©a_Àn
;

55 
u16_t
 
ªmŸe_p‹t
 = 0x100, 
loˇl_p‹t
 = 0x101;

56 
√tif
Çetif;

57 
	`LWIP_UNUSED_ARG
(
_i
);

60 
	`mem£t
(&
√tif
, 0, (netif));

61 
	`IP4_ADDR
(&
loˇl_ù
, 192, 168, 1, 1);

62 
	`IP4_ADDR
(&
ªmŸe_ù
, 192, 168, 1, 2);

63 
d©a_Àn
 = (
d©a
);

65 
	`mem£t
(&
cou¡îs
, 0, (counters));

66 
cou¡îs
.
ex≥˘ed_d©a_Àn
 = 
d©a_Àn
;

67 
cou¡îs
.
ex≥˘ed_d©a
 = 
d©a
;

70 
pcb
 = 
	`ã°_t˝_√w_cou¡îs_pcb
(&
cou¡îs
);

71 
	`EXPECT_RET
(
pcb
 !
NULL
);

72 
	`t˝_£t_°©e
(
pcb
, 
ESTABLISHED
, &
loˇl_ù
, &
ªmŸe_ù
, 
loˇl_p‹t
, 
ªmŸe_p‹t
);

75 
p
 = 
	`t˝_¸óã_rx_£gmít
(
pcb
, 
cou¡îs
.
ex≥˘ed_d©a
, 
d©a_Àn
, 0, 0, 0);

76 
	`EXPECT
(
p
 !
NULL
);

77 i‡(
p
 !
NULL
) {

79 
	`ã°_t˝_öput
(
p
, &
√tif
);

81 
	`EXPECT
(
cou¡îs
.
˛o£_ˇŒs
 == 0);

82 
	`EXPECT
(
cou¡îs
.
ªcv_ˇŒs
 == 1);

83 
	`EXPECT
(
cou¡îs
.
ªcved_byãs
 =
d©a_Àn
);

84 
	`EXPECT
(
cou¡îs
.
îr_ˇŒs
 == 0);

88 
	`EXPECT
(
lwù_°©s
.
memp
[
MEMP_TCP_PCB
].
u£d
 == 1);

89 
	`t˝_ab‹t
(
pcb
);

90 
	`EXPECT
(
lwù_°©s
.
memp
[
MEMP_TCP_PCB
].
u£d
 == 0);

91 
	}
}

92 
END_TEST


96 
Suôe
 *

97 
	$t˝_suôe
()

99 
TFun
 
ã°s
[] = {

100 
ã°_t˝_√w_ab‹t
,

101 
ã°_t˝_ªcv_ö£q
,

103  
	`¸óã_suôe
("TCP", 
ã°s
, —e°s)/(
TFun
), 
t˝_£tup
, 
t˝_ã¨down
);

104 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/tcp/test_tcp.h

1 #i‚de‡
__TEST_TCP_H__


2 
	#__TEST_TCP_H__


	)

4 
	~"../lwù_check.h
"

6 
Suôe
 *
t˝_suôe
();

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/tcp/test_tcp_oos.c

1 
	~"ã°_t˝_oos.h
"

3 
	~"lwù/t˝_im∂.h
"

4 
	~"lwù/°©s.h
"

5 
	~"t˝_hñ≥r.h
"

7 #i‡!
LWIP_STATS
 || !
TCP_STATS
 || !
MEMP_STATS


10 #i‡!
TCP_QUEUE_OOSEQ


17 
	#CHECK_SEGMENTS_ON_OOSEQ
 1

	)

19 #i‡
CHECK_SEGMENTS_ON_OOSEQ


20 
	#EXPECT_OOSEQ
(
x
Ë
	`EXPECT
(x)

	)

22 
	#EXPECT_OOSEQ
(
x
)

	)

28 
	$t˝_oos_cou¡
(
t˝_pcb
* 
pcb
)

30 
num
 = 0;

31 
t˝_£g
* 
£g
 = 
pcb
->
oo£q
;

32 
£g
 !
NULL
) {

33 
num
++;

34 
£g
 = seg->
√xt
;

36  
num
;

37 
	}
}

45 
u32_t


46 
	$t˝_oos_£g_£qno
(
t˝_pcb
* 
pcb
, 
£g_ödex
)

48 
num
 = 0;

49 
t˝_£g
* 
£g
 = 
pcb
->
oo£q
;

52 
£g
 !
NULL
) {

53 if(
num
 =
£g_ödex
) {

54  
£g
->
t˝hdr
->
£qno
;

56 
num
++;

57 
£g
 = seg->
√xt
;

59 
	`Áû
();

61 
	}
}

70 
	$t˝_oos_£g_t˝Àn
(
t˝_pcb
* 
pcb
, 
£g_ödex
)

72 
num
 = 0;

73 
t˝_£g
* 
£g
 = 
pcb
->
oo£q
;

76 
£g
 !
NULL
) {

77 if(
num
 =
£g_ödex
) {

78  
	`TCP_TCPLEN
(
£g
);

80 
num
++;

81 
£g
 = seg->
√xt
;

83 
	`Áû
();

85 
	}
}

93 
	$t˝_oos_t˝Àn
(
t˝_pcb
* 
pcb
)

95 
Àn
 = 0;

96 
t˝_£g
* 
£g
 = 
pcb
->
oo£q
;

99 
£g
 !
NULL
) {

100 
Àn
 +
	`TCP_TCPLEN
(
£g
);

101 
£g
 = seg->
√xt
;

103  
Àn
;

104 
	}
}

109 
	$t˝_oos_£tup
()

111 
	`t˝_ªmove_Æl
();

112 
	}
}

115 
	$t˝_oos_ã¨down
()

117 
	`t˝_ªmove_Æl
();

118 
	}
}

127 
	$START_TEST
(
ã°_t˝_ªcv_oo£q_FIN_OOSEQ
)

129 
ã°_t˝_cou¡îs
 
cou¡îs
;

130 
t˝_pcb
* 
pcb
;

131 
pbuf
 *
p_8_9
, *
p_4_8
, *
p_4_10
, *
p_2_14
, *
p_fö
, *
pö£q
;

132 
d©a
[] = {

137 
ù_addr_t
 
ªmŸe_ù
, 
loˇl_ù
;

138 
u16_t
 
d©a_Àn
;

139 
u16_t
 
ªmŸe_p‹t
 = 0x100, 
loˇl_p‹t
 = 0x101;

140 
√tif
Çetif;

141 
	`LWIP_UNUSED_ARG
(
_i
);

144 
	`mem£t
(&
√tif
, 0, (netif));

145 
	`IP4_ADDR
(&
loˇl_ù
, 192, 168, 1, 1);

146 
	`IP4_ADDR
(&
ªmŸe_ù
, 192, 168, 1, 2);

147 
d©a_Àn
 = (
d©a
);

149 
	`mem£t
(&
cou¡îs
, 0, (counters));

150 
cou¡îs
.
ex≥˘ed_d©a_Àn
 = 
d©a_Àn
;

151 
cou¡îs
.
ex≥˘ed_d©a
 = 
d©a
;

154 
pcb
 = 
	`ã°_t˝_√w_cou¡îs_pcb
(&
cou¡îs
);

155 
	`EXPECT_RET
(
pcb
 !
NULL
);

156 
	`t˝_£t_°©e
(
pcb
, 
ESTABLISHED
, &
loˇl_ù
, &
ªmŸe_ù
, 
loˇl_p‹t
, 
ªmŸe_p‹t
);

160 
pö£q
 = 
	`t˝_¸óã_rx_£gmít
(
pcb
, &
d©a
[0], 4, 0, 0, 
TCP_ACK
);

163 
p_8_9
 = 
	`t˝_¸óã_rx_£gmít
(
pcb
, &
d©a
[8], 8, 8, 0, 
TCP_ACK
|
TCP_FIN
);

166 
p_4_8
 = 
	`t˝_¸óã_rx_£gmít
(
pcb
, &
d©a
[4], 8, 4, 0, 
TCP_ACK
);

169 
p_4_10
 = 
	`t˝_¸óã_rx_£gmít
(
pcb
, &
d©a
[4], 10, 4, 0, 
TCP_ACK
);

172 
p_2_14
 = 
	`t˝_¸óã_rx_£gmít
(
pcb
, &
d©a
[2], 14, 2, 0, 
TCP_ACK
);

174 
p_fö
 = 
	`t˝_¸óã_rx_£gmít
(
pcb
, 
NULL
, 0,16, 0, 
TCP_ACK
|
TCP_FIN
);

175 
	`EXPECT
(
pö£q
 !
NULL
);

176 
	`EXPECT
(
p_8_9
 !
NULL
);

177 
	`EXPECT
(
p_4_8
 !
NULL
);

178 
	`EXPECT
(
p_4_10
 !
NULL
);

179 
	`EXPECT
(
p_2_14
 !
NULL
);

180 
	`EXPECT
(
p_fö
 !
NULL
);

181 i‡((
pö£q
 !
NULL
Ë&& (
p_8_9
 !NULLË&& (
p_4_8
 !NULLË&& (
p_4_10
 !NULLË&& (
p_2_14
 !NULLË&& (
p_fö
 != NULL)) {

183 
	`ã°_t˝_öput
(
p_8_9
, &
√tif
);

185 
	`EXPECT
(
cou¡îs
.
˛o£_ˇŒs
 == 0);

186 
	`EXPECT
(
cou¡îs
.
ªcv_ˇŒs
 == 0);

187 
	`EXPECT
(
cou¡îs
.
ªcved_byãs
 == 0);

188 
	`EXPECT
(
cou¡îs
.
îr_ˇŒs
 == 0);

190 
	`EXPECT_OOSEQ
(
	`t˝_oos_cou¡
(
pcb
) == 1);

191 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_£qno
(
pcb
, 0) == 8);

192 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_t˝Àn
(
pcb
, 0) == 9);

195 
	`ã°_t˝_öput
(
p_4_8
, &
√tif
);

197 
	`EXPECT
(
cou¡îs
.
˛o£_ˇŒs
 == 0);

198 
	`EXPECT
(
cou¡îs
.
ªcv_ˇŒs
 == 0);

199 
	`EXPECT
(
cou¡îs
.
ªcved_byãs
 == 0);

200 
	`EXPECT
(
cou¡îs
.
îr_ˇŒs
 == 0);

202 
	`EXPECT_OOSEQ
(
	`t˝_oos_cou¡
(
pcb
) == 2);

203 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_£qno
(
pcb
, 0) == 4);

204 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_t˝Àn
(
pcb
, 0) == 4);

205 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_£qno
(
pcb
, 1) == 8);

206 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_t˝Àn
(
pcb
, 1) == 9);

209 
	`ã°_t˝_öput
(
p_4_10
, &
√tif
);

211 
	`EXPECT
(
cou¡îs
.
˛o£_ˇŒs
 == 0);

212 
	`EXPECT
(
cou¡îs
.
ªcv_ˇŒs
 == 0);

213 
	`EXPECT
(
cou¡îs
.
ªcved_byãs
 == 0);

214 
	`EXPECT
(
cou¡îs
.
îr_ˇŒs
 == 0);

216 
	`EXPECT_OOSEQ
(
	`t˝_oos_cou¡
(
pcb
) == 2);

217 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_£qno
(
pcb
, 0) == 4);

218 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_t˝Àn
(
pcb
, 0) == 4);

219 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_£qno
(
pcb
, 1) == 8);

220 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_t˝Àn
(
pcb
, 1) == 9);

223 
	`ã°_t˝_öput
(
p_2_14
, &
√tif
);

225 
	`EXPECT
(
cou¡îs
.
˛o£_ˇŒs
 == 0);

226 
	`EXPECT
(
cou¡îs
.
ªcv_ˇŒs
 == 0);

227 
	`EXPECT
(
cou¡îs
.
ªcved_byãs
 == 0);

228 
	`EXPECT
(
cou¡îs
.
îr_ˇŒs
 == 0);

230 
	`EXPECT_OOSEQ
(
	`t˝_oos_cou¡
(
pcb
) == 1);

231 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_£qno
(
pcb
, 0) == 2);

232 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_t˝Àn
(
pcb
, 0) == 15);

235 
	`ã°_t˝_öput
(
p_fö
, &
√tif
);

237 
	`EXPECT
(
cou¡îs
.
˛o£_ˇŒs
 == 0);

238 
	`EXPECT
(
cou¡îs
.
ªcv_ˇŒs
 == 0);

239 
	`EXPECT
(
cou¡îs
.
ªcved_byãs
 == 0);

240 
	`EXPECT
(
cou¡îs
.
îr_ˇŒs
 == 0);

242 
	`EXPECT_OOSEQ
(
	`t˝_oos_cou¡
(
pcb
) == 1);

243 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_£qno
(
pcb
, 0) == 2);

244 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_t˝Àn
(
pcb
, 0) == 15);

247 
	`ã°_t˝_öput
(
pö£q
, &
√tif
);

249 
	`EXPECT
(
cou¡îs
.
˛o£_ˇŒs
 == 1);

250 
	`EXPECT
(
cou¡îs
.
ªcv_ˇŒs
 == 1);

251 
	`EXPECT
(
cou¡îs
.
ªcved_byãs
 =
d©a_Àn
);

252 
	`EXPECT
(
cou¡îs
.
îr_ˇŒs
 == 0);

253 
	`EXPECT
(
pcb
->
oo£q
 =
NULL
);

257 
	`EXPECT
(
lwù_°©s
.
memp
[
MEMP_TCP_PCB
].
u£d
 == 1);

258 
	`t˝_ab‹t
(
pcb
);

259 
	`EXPECT
(
lwù_°©s
.
memp
[
MEMP_TCP_PCB
].
u£d
 == 0);

260 
	}
}

261 
END_TEST


267 
	$START_TEST
(
ã°_t˝_ªcv_oo£q_FIN_INSEQ
)

269 
ã°_t˝_cou¡îs
 
cou¡îs
;

270 
t˝_pcb
* 
pcb
;

271 
pbuf
 *
p_1_2
, *
p_4_8
, *
p_3_11
, *
p_2_12
, *
p_15_1
, *
p_15_1a
, *
pö£q
, *
pö£qFIN
;

272 
d©a
[] = {

277 
ù_addr_t
 
ªmŸe_ù
, 
loˇl_ù
;

278 
u16_t
 
d©a_Àn
;

279 
u16_t
 
ªmŸe_p‹t
 = 0x100, 
loˇl_p‹t
 = 0x101;

280 
√tif
Çetif;

281 
	`LWIP_UNUSED_ARG
(
_i
);

284 
	`mem£t
(&
√tif
, 0, (netif));

285 
	`IP4_ADDR
(&
loˇl_ù
, 192, 168, 1, 1);

286 
	`IP4_ADDR
(&
ªmŸe_ù
, 192, 168, 1, 2);

287 
d©a_Àn
 = (
d©a
);

289 
	`mem£t
(&
cou¡îs
, 0, (counters));

290 
cou¡îs
.
ex≥˘ed_d©a_Àn
 = 
d©a_Àn
;

291 
cou¡îs
.
ex≥˘ed_d©a
 = 
d©a
;

294 
pcb
 = 
	`ã°_t˝_√w_cou¡îs_pcb
(&
cou¡îs
);

295 
	`EXPECT_RET
(
pcb
 !
NULL
);

296 
	`t˝_£t_°©e
(
pcb
, 
ESTABLISHED
, &
loˇl_ù
, &
ªmŸe_ù
, 
loˇl_p‹t
, 
ªmŸe_p‹t
);

301 
p_1_2
 = 
	`t˝_¸óã_rx_£gmít
(
pcb
, &
d©a
[1], 2, 1, 0, 
TCP_ACK
);

304 
p_4_8
 = 
	`t˝_¸óã_rx_£gmít
(
pcb
, &
d©a
[4], 8, 4, 0, 
TCP_ACK
);

307 
p_3_11
 = 
	`t˝_¸óã_rx_£gmít
(
pcb
, &
d©a
[3], 11, 3, 0, 
TCP_ACK
);

310 
p_2_12
 = 
	`t˝_¸óã_rx_£gmít
(
pcb
, &
d©a
[2], 12, 2, 0, 
TCP_ACK
);

313 
pö£q
 = 
	`t˝_¸óã_rx_£gmít
(
pcb
, &
d©a
[0], 4, 0, 0, 
TCP_ACK
);

316 
p_15_1
 = 
	`t˝_¸óã_rx_£gmít
(
pcb
, &
d©a
[15], 1, 15, 0, 
TCP_ACK
);

318 
p_15_1a

	`t˝_¸óã_rx_£gmít
(
pcb
, &
d©a
[15], 1, 15, 0, 
TCP_ACK
);

321 
pö£qFIN
 = 
	`t˝_¸óã_rx_£gmít
(
pcb
, &
d©a
[14], 2, 14, 0, 
TCP_ACK
|
TCP_FIN
);

322 
	`EXPECT
(
pö£q
 !
NULL
);

323 
	`EXPECT
(
p_1_2
 !
NULL
);

324 
	`EXPECT
(
p_4_8
 !
NULL
);

325 
	`EXPECT
(
p_3_11
 !
NULL
);

326 
	`EXPECT
(
p_2_12
 !
NULL
);

327 
	`EXPECT
(
p_15_1
 !
NULL
);

328 
	`EXPECT
(
p_15_1a
 !
NULL
);

329 
	`EXPECT
(
pö£qFIN
 !
NULL
);

330 i‡((
pö£q
 !
NULL
Ë&& (
p_1_2
 !NULLË&& (
p_4_8
 !NULLË&& (
p_3_11
 !NULLË&& (
p_2_12
 != NULL)

331 && (
p_15_1
 !
NULL
Ë&& (
p_15_1a
 !NULLË&& (
pö£qFIN
 != NULL)) {

333 
	`ã°_t˝_öput
(
p_1_2
, &
√tif
);

335 
	`EXPECT
(
cou¡îs
.
˛o£_ˇŒs
 == 0);

336 
	`EXPECT
(
cou¡îs
.
ªcv_ˇŒs
 == 0);

337 
	`EXPECT
(
cou¡îs
.
ªcved_byãs
 == 0);

338 
	`EXPECT
(
cou¡îs
.
îr_ˇŒs
 == 0);

340 
	`EXPECT_OOSEQ
(
	`t˝_oos_cou¡
(
pcb
) == 1);

341 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_£qno
(
pcb
, 0) == 1);

342 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_t˝Àn
(
pcb
, 0) == 2);

345 
	`ã°_t˝_öput
(
p_4_8
, &
√tif
);

347 
	`EXPECT
(
cou¡îs
.
˛o£_ˇŒs
 == 0);

348 
	`EXPECT
(
cou¡îs
.
ªcv_ˇŒs
 == 0);

349 
	`EXPECT
(
cou¡îs
.
ªcved_byãs
 == 0);

350 
	`EXPECT
(
cou¡îs
.
îr_ˇŒs
 == 0);

352 
	`EXPECT_OOSEQ
(
	`t˝_oos_cou¡
(
pcb
) == 2);

353 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_£qno
(
pcb
, 0) == 1);

354 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_t˝Àn
(
pcb
, 0) == 2);

355 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_£qno
(
pcb
, 1) == 4);

356 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_t˝Àn
(
pcb
, 1) == 8);

359 
	`ã°_t˝_öput
(
p_3_11
, &
√tif
);

361 
	`EXPECT
(
cou¡îs
.
˛o£_ˇŒs
 == 0);

362 
	`EXPECT
(
cou¡îs
.
ªcv_ˇŒs
 == 0);

363 
	`EXPECT
(
cou¡îs
.
ªcved_byãs
 == 0);

364 
	`EXPECT
(
cou¡îs
.
îr_ˇŒs
 == 0);

366 
	`EXPECT_OOSEQ
(
	`t˝_oos_cou¡
(
pcb
) == 2);

367 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_£qno
(
pcb
, 0) == 1);

368 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_t˝Àn
(
pcb
, 0) == 2);

370 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_£qno
(
pcb
, 1) == 3);

371 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_t˝Àn
(
pcb
, 1) == 11);

374 
	`ã°_t˝_öput
(
p_2_12
, &
√tif
);

376 
	`EXPECT
(
cou¡îs
.
˛o£_ˇŒs
 == 0);

377 
	`EXPECT
(
cou¡îs
.
ªcv_ˇŒs
 == 0);

378 
	`EXPECT
(
cou¡îs
.
ªcved_byãs
 == 0);

379 
	`EXPECT
(
cou¡îs
.
îr_ˇŒs
 == 0);

381 
	`EXPECT_OOSEQ
(
	`t˝_oos_cou¡
(
pcb
) == 2);

382 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_£qno
(
pcb
, 0) == 1);

383 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_t˝Àn
(
pcb
, 0) == 1);

384 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_£qno
(
pcb
, 1) == 2);

385 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_t˝Àn
(
pcb
, 1) == 12);

388 
	`ã°_t˝_öput
(
pö£q
, &
√tif
);

390 
	`EXPECT
(
cou¡îs
.
˛o£_ˇŒs
 == 0);

391 
	`EXPECT
(
cou¡îs
.
ªcv_ˇŒs
 == 1);

392 
	`EXPECT
(
cou¡îs
.
ªcved_byãs
 == 14);

393 
	`EXPECT
(
cou¡îs
.
îr_ˇŒs
 == 0);

394 
	`EXPECT
(
pcb
->
oo£q
 =
NULL
);

397 
	`ã°_t˝_öput
(
p_15_1
, &
√tif
);

399 
	`EXPECT
(
cou¡îs
.
˛o£_ˇŒs
 == 0);

400 
	`EXPECT
(
cou¡îs
.
ªcv_ˇŒs
 == 1);

401 
	`EXPECT
(
cou¡îs
.
ªcved_byãs
 == 14);

402 
	`EXPECT
(
cou¡îs
.
îr_ˇŒs
 == 0);

404 
	`EXPECT_OOSEQ
(
	`t˝_oos_cou¡
(
pcb
) == 1);

405 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_£qno
(
pcb
, 0) == 15);

406 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_t˝Àn
(
pcb
, 0) == 1);

409 
	`ã°_t˝_öput
(
p_15_1a
, &
√tif
);

411 
	`EXPECT
(
cou¡îs
.
˛o£_ˇŒs
 == 0);

412 
	`EXPECT
(
cou¡îs
.
ªcv_ˇŒs
 == 1);

413 
	`EXPECT
(
cou¡îs
.
ªcved_byãs
 == 14);

414 
	`EXPECT
(
cou¡îs
.
îr_ˇŒs
 == 0);

416 
	`EXPECT_OOSEQ
(
	`t˝_oos_cou¡
(
pcb
) == 1);

417 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_£qno
(
pcb
, 0) == 15);

418 
	`EXPECT_OOSEQ
(
	`t˝_oos_£g_t˝Àn
(
pcb
, 0) == 1);

421 
	`ã°_t˝_öput
(
pö£qFIN
, &
√tif
);

423 
	`EXPECT
(
cou¡îs
.
˛o£_ˇŒs
 == 1);

424 
	`EXPECT
(
cou¡îs
.
ªcv_ˇŒs
 == 2);

425 
	`EXPECT
(
cou¡îs
.
ªcved_byãs
 =
d©a_Àn
);

426 
	`EXPECT
(
cou¡îs
.
îr_ˇŒs
 == 0);

427 
	`EXPECT
(
pcb
->
oo£q
 =
NULL
);

431 
	`EXPECT
(
lwù_°©s
.
memp
[
MEMP_TCP_PCB
].
u£d
 == 1);

432 
	`t˝_ab‹t
(
pcb
);

433 
	`EXPECT
(
lwù_°©s
.
memp
[
MEMP_TCP_PCB
].
u£d
 == 0);

434 
	}
}

435 
END_TEST


437 
	gd©a_fuŒ_wnd
[
TCP_WND
];

441 
	$START_TEST
(
ã°_t˝_ªcv_oo£q_ovîrun_rxwö
)

443 
i
, 
k
;

444 
ã°_t˝_cou¡îs
 
cou¡îs
;

445 
t˝_pcb
* 
pcb
;

446 
pbuf
 *
pö£q
, *
p_ovr
;

447 
ù_addr_t
 
ªmŸe_ù
, 
loˇl_ù
;

448 
u16_t
 
ªmŸe_p‹t
 = 0x100, 
loˇl_p‹t
 = 0x101;

449 
√tif
Çetif;

450 
d©Æí
 = 0;

451 
d©Æí2
;

452 
	`LWIP_UNUSED_ARG
(
_i
);

454 
i
 = 0; i < (
d©a_fuŒ_wnd
); i++) {

455 
d©a_fuŒ_wnd
[
i
] = ()i;

459 
	`mem£t
(&
√tif
, 0, (netif));

460 
	`IP4_ADDR
(&
loˇl_ù
, 192, 168, 1, 1);

461 
	`IP4_ADDR
(&
ªmŸe_ù
, 192, 168, 1, 2);

463 
	`mem£t
(&
cou¡îs
, 0, (counters));

464 
cou¡îs
.
ex≥˘ed_d©a_Àn
 = 
TCP_WND
;

465 
cou¡îs
.
ex≥˘ed_d©a
 = 
d©a_fuŒ_wnd
;

468 
pcb
 = 
	`ã°_t˝_√w_cou¡îs_pcb
(&
cou¡îs
);

469 
	`EXPECT_RET
(
pcb
 !
NULL
);

470 
	`t˝_£t_°©e
(
pcb
, 
ESTABLISHED
, &
loˇl_ù
, &
ªmŸe_ù
, 
loˇl_p‹t
, 
ªmŸe_p‹t
);

471 
pcb
->
rcv_nxt
 = 0x8000;

475 
pö£q
 = 
	`t˝_¸óã_rx_£gmít
(
pcb
, &
d©a_fuŒ_wnd
[0], 
TCP_MSS
, 0, 0, 
TCP_ACK
);

477 
i
 = 
TCP_MSS
, 
k
 = 0; i < 
TCP_WND
; i += TCP_MSS, k++) {

478 
cou¡
, 
ex≥˘ed_d©Æí
;

479 
pbuf
 *
p
 = 
	`t˝_¸óã_rx_£gmít
(
pcb
, &
d©a_fuŒ_wnd
[
TCP_MSS
*(
k
+1)],

480 
TCP_MSS
, TCP_MSS*(
k
+1), 0, 
TCP_ACK
);

481 
	`EXPECT
(
p
 !
NULL
);

483 
	`ã°_t˝_öput
(
p
, &
√tif
);

485 
	`EXPECT
(
cou¡îs
.
˛o£_ˇŒs
 == 0);

486 
	`EXPECT
(
cou¡îs
.
ªcv_ˇŒs
 == 0);

487 
	`EXPECT
(
cou¡îs
.
ªcved_byãs
 == 0);

488 
	`EXPECT
(
cou¡îs
.
îr_ˇŒs
 == 0);

490 
cou¡
 = 
	`t˝_oos_cou¡
(
pcb
);

491 
	`EXPECT_OOSEQ
(
cou¡
 =
k
+1);

492 
d©Æí
 = 
	`t˝_oos_t˝Àn
(
pcb
);

493 i‡(
i
 + 
TCP_MSS
 < 
TCP_WND
) {

494 
ex≥˘ed_d©Æí
 = (
k
+1)*
TCP_MSS
;

496 
ex≥˘ed_d©Æí
 = 
TCP_WND
 - 
TCP_MSS
;

498 i‡(
d©Æí
 !
ex≥˘ed_d©Æí
) {

499 
	`EXPECT_OOSEQ
(
d©Æí
 =
ex≥˘ed_d©Æí
);

504 
p_ovr
 = 
	`t˝_¸óã_rx_£gmít
(
pcb
, &
d©a_fuŒ_wnd
[
TCP_MSS
*(
k
+1)], TCP_MSS, TCP_MSS*(k+1), 0, 
TCP_ACK
);

505 
	`EXPECT
(
p_ovr
 !
NULL
);

507 
	`ã°_t˝_öput
(
p_ovr
, &
√tif
);

509 
	`EXPECT
(
cou¡îs
.
˛o£_ˇŒs
 == 0);

510 
	`EXPECT
(
cou¡îs
.
ªcv_ˇŒs
 == 0);

511 
	`EXPECT
(
cou¡îs
.
ªcved_byãs
 == 0);

512 
	`EXPECT
(
cou¡îs
.
îr_ˇŒs
 == 0);

514 
	`EXPECT_OOSEQ
(
	`t˝_oos_cou¡
(
pcb
Ë=
k
);

515 
d©Æí2
 = 
	`t˝_oos_t˝Àn
(
pcb
);

516 
	`EXPECT_OOSEQ
(
d©Æí
 =
d©Æí2
);

519 
	`ã°_t˝_öput
(
pö£q
, &
√tif
);

520 
	`EXPECT
(
pcb
->
oo£q
 =
NULL
);

523 
	`EXPECT
(
lwù_°©s
.
memp
[
MEMP_TCP_PCB
].
u£d
 == 1);

524 
	`t˝_ab‹t
(
pcb
);

525 
	`EXPECT
(
lwù_°©s
.
memp
[
MEMP_TCP_PCB
].
u£d
 == 0);

526 
	}
}

527 
END_TEST


531 
Suôe
 *

532 
	$t˝_oos_suôe
()

534 
TFun
 
ã°s
[] = {

535 
ã°_t˝_ªcv_oo£q_FIN_OOSEQ
,

536 
ã°_t˝_ªcv_oo£q_FIN_INSEQ
,

537 
ã°_t˝_ªcv_oo£q_ovîrun_rxwö
,

539  
	`¸óã_suôe
("TCP_OOS", 
ã°s
, —e°s)/(
TFun
), 
t˝_oos_£tup
, 
t˝_oos_ã¨down
);

540 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/tcp/test_tcp_oos.h

1 #i‚de‡
__TEST_TCP_OOS_H__


2 
	#__TEST_TCP_OOS_H__


	)

4 
	~"../lwù_check.h
"

6 
Suôe
 *
t˝_oos_suôe
();

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/udp/test_udp.c

1 
	~"ã°_udp.h
"

3 
	~"lwù/udp.h
"

4 
	~"lwù/°©s.h
"

6 #i‡!
LWIP_STATS
 || !
UDP_STATS
 || !
MEMP_STATS


12 
	$udp_ªmove_Æl
()

14 
udp_pcb
 *
pcb
 = 
udp_pcbs
;

15 
udp_pcb
 *
pcb2
;

17 
pcb
 !
NULL
) {

18 
pcb2
 = 
pcb
;

19 
pcb
 =Öcb->
√xt
;

20 
	`udp_ªmove
(
pcb2
);

22 
	`Áû_u∆ess
(
lwù_°©s
.
memp
[
MEMP_UDP_PCB
].
u£d
 == 0);

23 
	}
}

28 
	$udp_£tup
()

30 
	`udp_ªmove_Æl
();

31 
	}
}

34 
	$udp_ã¨down
()

36 
	`udp_ªmove_Æl
();

37 
	}
}

42 
	$START_TEST
(
ã°_udp_√w_ªmove
)

44 
udp_pcb
* 
pcb
;

45 
	`LWIP_UNUSED_ARG
(
_i
);

47 
	`Áû_u∆ess
(
lwù_°©s
.
memp
[
MEMP_UDP_PCB
].
u£d
 == 0);

49 
pcb
 = 
	`udp_√w
();

50 
	`Áû_u∆ess
(
pcb
 !
NULL
);

51 i‡(
pcb
 !
NULL
) {

52 
	`Áû_u∆ess
(
lwù_°©s
.
memp
[
MEMP_UDP_PCB
].
u£d
 == 1);

53 
	`udp_ªmove
(
pcb
);

54 
	`Áû_u∆ess
(
lwù_°©s
.
memp
[
MEMP_UDP_PCB
].
u£d
 == 0);

56 
	}
}

57 
END_TEST


61 
Suôe
 *

62 
	$udp_suôe
()

64 
TFun
 
ã°s
[] = {

65 
ã°_udp_√w_ªmove
,

67  
	`¸óã_suôe
("UDP", 
ã°s
, —e°s)/(
TFun
), 
udp_£tup
, 
udp_ã¨down
);

68 
	}
}

	@/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/udp/test_udp.h

1 #i‚de‡
__TEST_UDP_H__


2 
	#__TEST_UDP_H__


	)

4 
	~"../lwù_check.h
"

6 
Suôe
* 
udp_suôe
();

	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

70 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

75 
__löe
,

76 
__c⁄°
 *
__fun˘i⁄
)

77 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

82 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

83 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

86 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/byteswap.h

19 #i‚de‡
_BYTESWAP_H


20 
	#_BYTESWAP_H
 1

	)

23 
	~<bôs/byãsw≠.h
>

30 
	#bsw≠_16
(
x
Ë
	`__bsw≠_16
 (x)

	)

33 
	#bsw≠_32
(
x
Ë
	`__bsw≠_32
 (x)

	)

35 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

37 
	#bsw≠_64
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/infiniband/verbs.h

36 #i‚de‡
INFINIBAND_VERBS_H


37 
	#INFINIBAND_VERBS_H


	)

39 
	~<°döt.h
>

40 
	~<±hªad.h
>

41 
	~<°ddef.h
>

42 
	~<î∫o.h
>

43 
	~<öföib™d/oÁ_vîbs.h
>

45 #ifde‡
__˝lu•lus


46 
	#BEGIN_C_DECLS
 "C" {

	)

47 
	#END_C_DECLS
 }

	)

49 
	#BEGIN_C_DECLS


	)

50 
	#END_C_DECLS


	)

53 #i‡
__GNUC__
 >= 3

54 
	#__©åibuã_c⁄°
 
	`__©åibuã__
((c⁄°))

	)

56 
	#__©åibuã_c⁄°


	)

59 
BEGIN_C_DECLS


61 
	uibv_gid
 {

62 
uöt8_t
 
øw
[16];

64 
uöt64_t
 
sub√t_¥efix
;

65 
uöt64_t
 
öãrÁ˚_id
;

66 } 
globÆ
;

69 #i‚de‡
c⁄èöî_of


77 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) \

78 ((
ty≥
 *Ë((
uöt8_t
 *)(
±r
Ë- 
	`off£tof
—y≥, 
membî
)))

	)

81 
	#vext_fõld_avaû
(
ty≥
, 
Êd
, 
sz
Ë(
	`off£tof
—y≥, fldË< (sz))

	)

83 *
	g__VERBS_ABI_IS_EXTENDED
 = ((
uöt8_t
 *)
NULL
) - 1;

85 
	eibv_node_ty≥
 {

86 
	mIBV_NODE_UNKNOWN
 = -1,

87 
	mIBV_NODE_CA
 = 1,

88 
	mIBV_NODE_SWITCH
,

89 
	mIBV_NODE_ROUTER
,

90 
	mIBV_NODE_RNIC
,

95 
	mIBV_EXP_NODE_TYPE_START
 = 32,

96 
	mIBV_EXP_NODE_MIC
 = 
IBV_EXP_NODE_TYPE_START


99 
	eibv_å™•‹t_ty≥
 {

100 
	mIBV_TRANSPORT_UNKNOWN
 = -1,

101 
	mIBV_TRANSPORT_IB
 = 0,

102 
	mIBV_TRANSPORT_IWARP
,

107 
	mIBV_EXP_TRANSPORT_TYPE_START
 = 32,

108 
	mIBV_EXP_TRANSPORT_SCIF
 = 
IBV_EXP_TRANSPORT_TYPE_START


111 
	eibv_devi˚_ˇp_Êags
 {

112 
	mIBV_DEVICE_RESIZE_MAX_WR
 = 1,

113 
	mIBV_DEVICE_BAD_PKEY_CNTR
 = 1 << 1,

114 
	mIBV_DEVICE_BAD_QKEY_CNTR
 = 1 << 2,

115 
	mIBV_DEVICE_RAW_MULTI
 = 1 << 3,

116 
	mIBV_DEVICE_AUTO_PATH_MIG
 = 1 << 4,

117 
	mIBV_DEVICE_CHANGE_PHY_PORT
 = 1 << 5,

118 
	mIBV_DEVICE_UD_AV_PORT_ENFORCE
 = 1 << 6,

119 
	mIBV_DEVICE_CURR_QP_STATE_MOD
 = 1 << 7,

120 
	mIBV_DEVICE_SHUTDOWN_PORT
 = 1 << 8,

121 
	mIBV_DEVICE_INIT_TYPE
 = 1 << 9,

122 
	mIBV_DEVICE_PORT_ACTIVE_EVENT
 = 1 << 10,

123 
	mIBV_DEVICE_SYS_IMAGE_GUID
 = 1 << 11,

124 
	mIBV_DEVICE_RC_RNR_NAK_GEN
 = 1 << 12,

125 
	mIBV_DEVICE_SRQ_RESIZE
 = 1 << 13,

126 
	mIBV_DEVICE_N_NOTIFY_CQ
 = 1 << 14,

127 
	mIBV_DEVICE_XRC
 = 1 << 20,

130 
	eibv_©omic_ˇp
 {

131 
	mIBV_ATOMIC_NONE
,

132 
	mIBV_ATOMIC_HCA
,

133 
	mIBV_ATOMIC_GLOB


136 
	sibv_devi˚_©å
 {

137 
	mfw_vî
[64];

138 
uöt64_t
 
	mnode_guid
;

139 
uöt64_t
 
	msys_image_guid
;

140 
uöt64_t
 
	mmax_mr_size
;

141 
uöt64_t
 
	m∑ge_size_ˇp
;

142 
uöt32_t
 
	mvíd‹_id
;

143 
uöt32_t
 
	mvíd‹_∑π_id
;

144 
uöt32_t
 
	mhw_vî
;

145 
	mmax_qp
;

146 
	mmax_qp_wr
;

147 
	mdevi˚_ˇp_Êags
;

148 
	mmax_sge
;

149 
	mmax_sge_rd
;

150 
	mmax_cq
;

151 
	mmax_cqe
;

152 
	mmax_mr
;

153 
	mmax_pd
;

154 
	mmax_qp_rd_©om
;

155 
	mmax_ì_rd_©om
;

156 
	mmax_ªs_rd_©om
;

157 
	mmax_qp_öô_rd_©om
;

158 
	mmax_ì_öô_rd_©om
;

159 
ibv_©omic_ˇp
 
	m©omic_ˇp
;

160 
	mmax_ì
;

161 
	mmax_rdd
;

162 
	mmax_mw
;

163 
	mmax_øw_ùv6_qp
;

164 
	mmax_øw_ëhy_qp
;

165 
	mmax_mˇ°_gΩ
;

166 
	mmax_mˇ°_qp_©èch
;

167 
	mmax_tŸÆ_mˇ°_qp_©èch
;

168 
	mmax_ah
;

169 
	mmax_fmr
;

170 
	mmax_m≠_≥r_fmr
;

171 
	mmax_§q
;

172 
	mmax_§q_wr
;

173 
	mmax_§q_sge
;

174 
uöt16_t
 
	mmax_pkeys
;

175 
uöt8_t
 
	mloˇl_ˇ_ack_dñay
;

176 
uöt8_t
 
	mphys_p‹t_˙t
;

179 
	eibv_mtu
 {

180 
	mIBV_MTU_256
 = 1,

181 
	mIBV_MTU_512
 = 2,

182 
	mIBV_MTU_1024
 = 3,

183 
	mIBV_MTU_2048
 = 4,

184 
	mIBV_MTU_4096
 = 5

187 
	eibv_p‹t_°©e
 {

188 
	mIBV_PORT_NOP
 = 0,

189 
	mIBV_PORT_DOWN
 = 1,

190 
	mIBV_PORT_INIT
 = 2,

191 
	mIBV_PORT_ARMED
 = 3,

192 
	mIBV_PORT_ACTIVE
 = 4,

193 
	mIBV_PORT_ACTIVE_DEFER
 = 5

197 
	mIBV_LINK_LAYER_UNSPECIFIED
,

198 
	mIBV_LINK_LAYER_INFINIBAND
,

199 
	mIBV_LINK_LAYER_ETHERNET
,

204 
	mIBV_EXP_LINK_LAYER_START
 = 32,

205 
	mIBV_EXP_LINK_LAYER_SCIF
 = 
IBV_EXP_LINK_LAYER_START


208 
	eibv_p‹t_ˇp_Êags
 {

209 
	mIBV_PORT_SM
 = 1 << 1,

210 
	mIBV_PORT_NOTICE_SUP
 = 1 << 2,

211 
	mIBV_PORT_TRAP_SUP
 = 1 << 3,

212 
	mIBV_PORT_OPT_IPD_SUP
 = 1 << 4,

213 
	mIBV_PORT_AUTO_MIGR_SUP
 = 1 << 5,

214 
	mIBV_PORT_SL_MAP_SUP
 = 1 << 6,

215 
	mIBV_PORT_MKEY_NVRAM
 = 1 << 7,

216 
	mIBV_PORT_PKEY_NVRAM
 = 1 << 8,

217 
	mIBV_PORT_LED_INFO_SUP
 = 1 << 9,

218 
	mIBV_PORT_SYS_IMAGE_GUID_SUP
 = 1 << 11,

219 
	mIBV_PORT_PKEY_SW_EXT_PORT_TRAP_SUP
 = 1 << 12,

220 
	mIBV_PORT_EXTENDED_SPEEDS_SUP
 = 1 << 14,

221 
	mIBV_PORT_CM_SUP
 = 1 << 16,

222 
	mIBV_PORT_SNMP_TUNNEL_SUP
 = 1 << 17,

223 
	mIBV_PORT_REINIT_SUP
 = 1 << 18,

224 
	mIBV_PORT_DEVICE_MGMT_SUP
 = 1 << 19,

225 
	mIBV_PORT_VENDOR_CLASS
 = 1 << 24,

226 
	mIBV_PORT_CLIENT_REG_SUP
 = 1 << 25,

227 
	mIBV_PORT_IP_BASED_GIDS
 = 1 << 26,

230 
	sibv_p‹t_©å
 {

231 
ibv_p‹t_°©e
 
	m°©e
;

232 
ibv_mtu
 
	mmax_mtu
;

233 
ibv_mtu
 
	ma˘ive_mtu
;

234 
	mgid_tbl_Àn
;

235 
uöt32_t
 
	mp‹t_ˇp_Êags
;

236 
uöt32_t
 
	mmax_msg_sz
;

237 
uöt32_t
 
	mbad_pkey_˙å
;

238 
uöt32_t
 
	mqkey_viﬁ_˙å
;

239 
uöt16_t
 
	mpkey_tbl_Àn
;

240 
uöt16_t
 
	mlid
;

241 
uöt16_t
 
	msm_lid
;

242 
uöt8_t
 
	mlmc
;

243 
uöt8_t
 
	mmax_vl_num
;

244 
uöt8_t
 
	msm_¶
;

245 
uöt8_t
 
	msub√t_timeout
;

246 
uöt8_t
 
	möô_ty≥_ª∂y
;

247 
uöt8_t
 
	ma˘ive_width
;

248 
uöt8_t
 
	ma˘ive_•ìd
;

249 
uöt8_t
 
	mphys_°©e
;

250 
uöt8_t
 
	mlök_œyî
;

251 
uöt8_t
 
	mª£rved
;

254 
	eibv_evít_ty≥
 {

255 
	mIBV_EVENT_CQ_ERR
,

256 
	mIBV_EVENT_QP_FATAL
,

257 
	mIBV_EVENT_QP_REQ_ERR
,

258 
	mIBV_EVENT_QP_ACCESS_ERR
,

259 
	mIBV_EVENT_COMM_EST
,

260 
	mIBV_EVENT_SQ_DRAINED
,

261 
	mIBV_EVENT_PATH_MIG
,

262 
	mIBV_EVENT_PATH_MIG_ERR
,

263 
	mIBV_EVENT_DEVICE_FATAL
,

264 
	mIBV_EVENT_PORT_ACTIVE
,

265 
	mIBV_EVENT_PORT_ERR
,

266 
	mIBV_EVENT_LID_CHANGE
,

267 
	mIBV_EVENT_PKEY_CHANGE
,

268 
	mIBV_EVENT_SM_CHANGE
,

269 
	mIBV_EVENT_SRQ_ERR
,

270 
	mIBV_EVENT_SRQ_LIMIT_REACHED
,

271 
	mIBV_EVENT_QP_LAST_WQE_REACHED
,

272 
	mIBV_EVENT_CLIENT_REREGISTER
,

273 
	mIBV_EVENT_GID_CHANGE
,

278 
	mIBV_EXP_EVENT_DCT_KEY_VIOLATION
 = 32,

279 
	mIBV_EXP_EVENT_DCT_ACCESS_ERR
,

280 
	mIBV_EXP_EVENT_DCT_REQ_ERR
,

283 
	sibv_async_evít
 {

285 
ibv_cq
 *
	mcq
;

286 
ibv_qp
 *
	mqp
;

287 
ibv_§q
 *
	m§q
;

288 
ibv_exp_d˘
 *
	md˘
;

289 
	mp‹t_num
;

291 
uöt32_t
 
	mxrc_qp_num
;

292 } 
	mñemít
;

293 
ibv_evít_ty≥
 
	mevít_ty≥
;

296 
	eibv_wc_°©us
 {

297 
	mIBV_WC_SUCCESS
,

298 
	mIBV_WC_LOC_LEN_ERR
,

299 
	mIBV_WC_LOC_QP_OP_ERR
,

300 
	mIBV_WC_LOC_EEC_OP_ERR
,

301 
	mIBV_WC_LOC_PROT_ERR
,

302 
	mIBV_WC_WR_FLUSH_ERR
,

303 
	mIBV_WC_MW_BIND_ERR
,

304 
	mIBV_WC_BAD_RESP_ERR
,

305 
	mIBV_WC_LOC_ACCESS_ERR
,

306 
	mIBV_WC_REM_INV_REQ_ERR
,

307 
	mIBV_WC_REM_ACCESS_ERR
,

308 
	mIBV_WC_REM_OP_ERR
,

309 
	mIBV_WC_RETRY_EXC_ERR
,

310 
	mIBV_WC_RNR_RETRY_EXC_ERR
,

311 
	mIBV_WC_LOC_RDD_VIOL_ERR
,

312 
	mIBV_WC_REM_INV_RD_REQ_ERR
,

313 
	mIBV_WC_REM_ABORT_ERR
,

314 
	mIBV_WC_INV_EECN_ERR
,

315 
	mIBV_WC_INV_EEC_STATE_ERR
,

316 
	mIBV_WC_FATAL_ERR
,

317 
	mIBV_WC_RESP_TIMEOUT_ERR
,

318 
	mIBV_WC_GENERAL_ERR


320 c⁄° *
ibv_wc_°©us_°r
(
ibv_wc_°©us
 
°©us
);

322 
	eibv_wc_›code
 {

323 
	mIBV_WC_SEND
,

324 
	mIBV_WC_RDMA_WRITE
,

325 
	mIBV_WC_RDMA_READ
,

326 
	mIBV_WC_COMP_SWAP
,

327 
	mIBV_WC_FETCH_ADD
,

328 
	mIBV_WC_BIND_MW
,

333 
	mIBV_WC_RECV
 = 1 << 7,

334 
	mIBV_WC_RECV_RDMA_WITH_IMM


337 
	eibv_wc_Êags
 {

338 
	mIBV_WC_GRH
 = 1 << 0,

339 
	mIBV_WC_WITH_IMM
 = 1 << 1

342 
	sibv_wc
 {

343 
uöt64_t
 
	mwr_id
;

344 
ibv_wc_°©us
 
	m°©us
;

345 
ibv_wc_›code
 
	m›code
;

346 
uöt32_t
 
	mvíd‹_îr
;

347 
uöt32_t
 
	mbyã_Àn
;

348 
uöt32_t
 
	mimm_d©a
;

349 
uöt32_t
 
	mqp_num
;

350 
uöt32_t
 
	m§c_qp
;

351 
	mwc_Êags
;

352 
uöt16_t
 
	mpkey_ödex
;

353 
uöt16_t
 
	m¶id
;

354 
uöt8_t
 
	m¶
;

355 
uöt8_t
 
	mdlid_∑th_bôs
;

358 
	eibv_ac˚ss_Êags
 {

359 
	mIBV_ACCESS_LOCAL_WRITE
 = 1,

360 
	mIBV_ACCESS_REMOTE_WRITE
 = (1<<1),

361 
	mIBV_ACCESS_REMOTE_READ
 = (1<<2),

362 
	mIBV_ACCESS_REMOTE_ATOMIC
 = (1<<3),

363 
	mIBV_ACCESS_MW_BIND
 = (1<<4)

366 
	sibv_pd
 {

367 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

368 
uöt32_t
 
	mh™dÀ
;

371 
	eibv_xrcd_öô_©å_mask
 {

372 
	mIBV_XRCD_INIT_ATTR_FD
 = 1 << 0,

373 
	mIBV_XRCD_INIT_ATTR_OFLAGS
 = 1 << 1,

374 
	mIBV_XRCD_INIT_ATTR_RESERVED
 = 1 << 2

377 
	sibv_xrcd_öô_©å
 {

378 
uöt32_t
 
	mcomp_mask
;

379 
	mfd
;

380 
	moÊags
;

383 
	sibv_xrcd
 {

384 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

387 
	eibv_ªªg_mr_Êags
 {

388 
	mIBV_REREG_MR_CHANGE_TRANSLATION
 = (1 << 0),

389 
	mIBV_REREG_MR_CHANGE_PD
 = (1 << 1),

390 
	mIBV_REREG_MR_CHANGE_ACCESS
 = (1 << 2),

391 
	mIBV_REREG_MR_KEEP_VALID
 = (1 << 3)

394 
	sibv_mr
 {

395 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

396 
ibv_pd
 *
	mpd
;

397 *
	maddr
;

398 
size_t
 
	mÀngth
;

399 
uöt32_t
 
	mh™dÀ
;

400 
uöt32_t
 
	mlkey
;

401 
uöt32_t
 
	mrkey
;

404 
	eibv_mw_ty≥
 {

405 
	mIBV_MW_TYPE_1
 = 1,

406 
	mIBV_MW_TYPE_2
 = 2

409 
	sibv_mw
 {

410 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

411 
ibv_pd
 *
	mpd
;

412 
uöt32_t
 
	mrkey
;

415 
	sibv_globÆ_rouã
 {

416 
ibv_gid
 
	mdgid
;

417 
uöt32_t
 
	mÊow_œbñ
;

418 
uöt8_t
 
	msgid_ödex
;

419 
uöt8_t
 
	mh›_limô
;

420 
uöt8_t
 
	måaffic_˛ass
;

423 
	sibv_grh
 {

424 
uöt32_t
 
	mvîsi⁄_t˛ass_Êow
;

425 
uöt16_t
 
	m∑yÀn
;

426 
uöt8_t
 
	m√xt_hdr
;

427 
uöt8_t
 
	mh›_limô
;

428 
ibv_gid
 
	msgid
;

429 
ibv_gid
 
	mdgid
;

432 
	eibv_øã
 {

433 
	mIBV_RATE_MAX
 = 0,

434 
	mIBV_RATE_2_5_GBPS
 = 2,

435 
	mIBV_RATE_5_GBPS
 = 5,

436 
	mIBV_RATE_10_GBPS
 = 3,

437 
	mIBV_RATE_20_GBPS
 = 6,

438 
	mIBV_RATE_30_GBPS
 = 4,

439 
	mIBV_RATE_40_GBPS
 = 7,

440 
	mIBV_RATE_60_GBPS
 = 8,

441 
	mIBV_RATE_80_GBPS
 = 9,

442 
	mIBV_RATE_120_GBPS
 = 10,

443 
	mIBV_RATE_14_GBPS
 = 11,

444 
	mIBV_RATE_56_GBPS
 = 12,

445 
	mIBV_RATE_112_GBPS
 = 13,

446 
	mIBV_RATE_168_GBPS
 = 14,

447 
	mIBV_RATE_25_GBPS
 = 15,

448 
	mIBV_RATE_100_GBPS
 = 16,

449 
	mIBV_RATE_200_GBPS
 = 17,

450 
	mIBV_RATE_300_GBPS
 = 18

459 
	$ibv_øã_to_mu…
(
ibv_øã
 
øã
Ë
__©åibuã_c⁄°
;

465 
ibv_øã
 
	$mu…_to_ibv_øã
(
mu…
Ë
__©åibuã_c⁄°
;

472 
	$ibv_øã_to_mbps
(
ibv_øã
 
øã
Ë
__©åibuã_c⁄°
;

478 
ibv_øã
 
	$mbps_to_ibv_øã
(
mbps
Ë
__©åibuã_c⁄°
;

480 
	sibv_ah_©å
 {

481 
ibv_globÆ_rouã
 
grh
;

482 
uöt16_t
 
dlid
;

483 
uöt8_t
 
¶
;

484 
uöt8_t
 
§c_∑th_bôs
;

485 
uöt8_t
 
°©ic_øã
;

486 
uöt8_t
 
is_globÆ
;

487 
uöt8_t
 
p‹t_num
;

490 
	eibv_§q_©å_mask
 {

491 
IBV_SRQ_MAX_WR
 = 1 << 0,

492 
IBV_SRQ_LIMIT
 = 1 << 1

495 
	sibv_§q_©å
 {

496 
uöt32_t
 
max_wr
;

497 
uöt32_t
 
max_sge
;

498 
uöt32_t
 
§q_limô
;

501 
	sibv_§q_öô_©å
 {

502 *
§q_c⁄ãxt
;

503 
ibv_§q_©å
 
©å
;

506 
	eibv_§q_ty≥
 {

507 
IBV_SRQT_BASIC
,

508 
IBV_SRQT_XRC


511 
	eibv_§q_öô_©å_mask
 {

512 
IBV_SRQ_INIT_ATTR_TYPE
 = 1 << 0,

513 
IBV_SRQ_INIT_ATTR_PD
 = 1 << 1,

514 
IBV_SRQ_INIT_ATTR_XRCD
 = 1 << 2,

515 
IBV_SRQ_INIT_ATTR_CQ
 = 1 << 3,

516 
IBV_SRQ_INIT_ATTR_RESERVED
 = 1 << 4

519 
	sibv_§q_öô_©å_ex
 {

520 *
§q_c⁄ãxt
;

521 
ibv_§q_©å
 
©å
;

523 
uöt32_t
 
comp_mask
;

524 
ibv_§q_ty≥
 
§q_ty≥
;

525 
ibv_pd
 *
pd
;

526 
ibv_xrcd
 *
xrcd
;

527 
ibv_cq
 *
cq
;

530 
	eibv_qp_ty≥
 {

531 
IBV_QPT_RC
 = 2,

532 
IBV_QPT_UC
,

533 
IBV_QPT_UD
,

535 
IBV_QPT_XRC
,

536 
IBV_QPT_RAW_PACKET
 = 8,

537 
IBV_QPT_RAW_ETH
 = 8,

538 
IBV_QPT_XRC_SEND
 = 9,

539 
IBV_QPT_XRC_RECV
,

544 
IBV_EXP_QP_TYPE_START
 = 32,

545 
IBV_EXP_QPT_DC_INI
 = 
IBV_EXP_QP_TYPE_START


548 
	sibv_qp_ˇp
 {

549 
uöt32_t
 
max_£nd_wr
;

550 
uöt32_t
 
max_ªcv_wr
;

551 
uöt32_t
 
max_£nd_sge
;

552 
uöt32_t
 
max_ªcv_sge
;

553 
uöt32_t
 
max_ölöe_d©a
;

556 
	sibv_qp_öô_©å
 {

557 *
qp_c⁄ãxt
;

558 
ibv_cq
 *
£nd_cq
;

559 
ibv_cq
 *
ªcv_cq
;

560 
ibv_§q
 *
§q
;

561 
ibv_qp_ˇp
 
ˇp
;

562 
ibv_qp_ty≥
 
qp_ty≥
;

563 
sq_sig_Æl
;

565 
ibv_xrc_domaö
 *
xrc_domaö
;

568 
	eibv_qp_öô_©å_mask
 {

569 
IBV_QP_INIT_ATTR_PD
 = 1 << 0,

570 
IBV_QP_INIT_ATTR_XRCD
 = 1 << 1,

571 
IBV_QP_INIT_ATTR_RESERVED
 = 1 << 2

574 
	sibv_qp_öô_©å_ex
 {

575 *
qp_c⁄ãxt
;

576 
ibv_cq
 *
£nd_cq
;

577 
ibv_cq
 *
ªcv_cq
;

578 
ibv_§q
 *
§q
;

579 
ibv_qp_ˇp
 
ˇp
;

580 
ibv_qp_ty≥
 
qp_ty≥
;

581 
sq_sig_Æl
;

583 
uöt32_t
 
comp_mask
;

584 
ibv_pd
 *
pd
;

585 
ibv_xrcd
 *
xrcd
;

588 
	eibv_qp_›í_©å_mask
 {

589 
IBV_QP_OPEN_ATTR_NUM
 = 1 << 0,

590 
IBV_QP_OPEN_ATTR_XRCD
 = 1 << 1,

591 
IBV_QP_OPEN_ATTR_CONTEXT
 = 1 << 2,

592 
IBV_QP_OPEN_ATTR_TYPE
 = 1 << 3,

593 
IBV_QP_OPEN_ATTR_RESERVED
 = 1 << 4

596 
	sibv_qp_›í_©å
 {

597 
uöt32_t
 
comp_mask
;

598 
uöt32_t
 
qp_num
;

599 
ibv_xrcd
 *
xrcd
;

600 *
qp_c⁄ãxt
;

601 
ibv_qp_ty≥
 
qp_ty≥
;

604 
	eibv_qp_©å_mask
 {

605 
IBV_QP_STATE
 = 1 << 0,

606 
IBV_QP_CUR_STATE
 = 1 << 1,

607 
IBV_QP_EN_SQD_ASYNC_NOTIFY
 = 1 << 2,

608 
IBV_QP_ACCESS_FLAGS
 = 1 << 3,

609 
IBV_QP_PKEY_INDEX
 = 1 << 4,

610 
IBV_QP_PORT
 = 1 << 5,

611 
IBV_QP_QKEY
 = 1 << 6,

612 
IBV_QP_AV
 = 1 << 7,

613 
IBV_QP_PATH_MTU
 = 1 << 8,

614 
IBV_QP_TIMEOUT
 = 1 << 9,

615 
IBV_QP_RETRY_CNT
 = 1 << 10,

616 
IBV_QP_RNR_RETRY
 = 1 << 11,

617 
IBV_QP_RQ_PSN
 = 1 << 12,

618 
IBV_QP_MAX_QP_RD_ATOMIC
 = 1 << 13,

619 
IBV_QP_ALT_PATH
 = 1 << 14,

620 
IBV_QP_MIN_RNR_TIMER
 = 1 << 15,

621 
IBV_QP_SQ_PSN
 = 1 << 16,

622 
IBV_QP_MAX_DEST_RD_ATOMIC
 = 1 << 17,

623 
IBV_QP_PATH_MIG_STATE
 = 1 << 18,

624 
IBV_QP_CAP
 = 1 << 19,

625 
IBV_QP_DEST_QPN
 = 1 << 20

628 
	eibv_qp_°©e
 {

629 
IBV_QPS_RESET
,

630 
IBV_QPS_INIT
,

631 
IBV_QPS_RTR
,

632 
IBV_QPS_RTS
,

633 
IBV_QPS_SQD
,

634 
IBV_QPS_SQE
,

635 
IBV_QPS_ERR
,

636 
IBV_QPS_UNKNOWN


639 
	eibv_mig_°©e
 {

640 
IBV_MIG_MIGRATED
,

641 
IBV_MIG_REARM
,

642 
IBV_MIG_ARMED


645 
	sibv_qp_©å
 {

646 
ibv_qp_°©e
 
qp_°©e
;

647 
ibv_qp_°©e
 
cur_qp_°©e
;

648 
ibv_mtu
 
∑th_mtu
;

649 
ibv_mig_°©e
 
∑th_mig_°©e
;

650 
uöt32_t
 
qkey
;

651 
uöt32_t
 
rq_p¢
;

652 
uöt32_t
 
sq_p¢
;

653 
uöt32_t
 
de°_qp_num
;

654 
qp_ac˚ss_Êags
;

655 
ibv_qp_ˇp
 
ˇp
;

656 
ibv_ah_©å
 
ah_©å
;

657 
ibv_ah_©å
 
Æt_ah_©å
;

658 
uöt16_t
 
pkey_ödex
;

659 
uöt16_t
 
Æt_pkey_ödex
;

660 
uöt8_t
 
í_sqd_async_nŸify
;

661 
uöt8_t
 
sq_døöög
;

662 
uöt8_t
 
max_rd_©omic
;

663 
uöt8_t
 
max_de°_rd_©omic
;

664 
uöt8_t
 
mö_∫r_timî
;

665 
uöt8_t
 
p‹t_num
;

666 
uöt8_t
 
timeout
;

667 
uöt8_t
 
ªåy_˙t
;

668 
uöt8_t
 
∫r_ªåy
;

669 
uöt8_t
 
Æt_p‹t_num
;

670 
uöt8_t
 
Æt_timeout
;

673 
	eibv_wr_›code
 {

674 
IBV_WR_RDMA_WRITE
,

675 
IBV_WR_RDMA_WRITE_WITH_IMM
,

676 
IBV_WR_SEND
,

677 
IBV_WR_SEND_WITH_IMM
,

678 
IBV_WR_RDMA_READ
,

679 
IBV_WR_ATOMIC_CMP_AND_SWP
,

680 
IBV_WR_ATOMIC_FETCH_AND_ADD


683 
	eibv_£nd_Êags
 {

684 
IBV_SEND_FENCE
 = 1 << 0,

685 
IBV_SEND_SIGNALED
 = 1 << 1,

686 
IBV_SEND_SOLICITED
 = 1 << 2,

687 
IBV_SEND_INLINE
 = 1 << 3

690 
	sibv_sge
 {

691 
uöt64_t
 
addr
;

692 
uöt32_t
 
Àngth
;

693 
uöt32_t
 
lkey
;

696 
	sibv_£nd_wr
 {

697 
uöt64_t
 
wr_id
;

698 
ibv_£nd_wr
 *
√xt
;

699 
ibv_sge
 *
sg_li°
;

700 
num_sge
;

701 
ibv_wr_›code
 
›code
;

702 
£nd_Êags
;

703 
uöt32_t
 
imm_d©a
;

706 
uöt64_t
 
ªmŸe_addr
;

707 
uöt32_t
 
rkey
;

708 } 
rdma
;

710 
uöt64_t
 
ªmŸe_addr
;

711 
uöt64_t
 
com∑ª_add
;

712 
uöt64_t
 
sw≠
;

713 
uöt32_t
 
rkey
;

714 } 
©omic
;

716 
ibv_ah
 *
ah
;

717 
uöt32_t
 
ªmŸe_q≤
;

718 
uöt32_t
 
ªmŸe_qkey
;

719 } 
ud
;

720 } 
wr
;

724 
uöt32_t
 
ªmŸe_§qn
;

725 } 
xrc
;

726 } 
qp_ty≥
;

728 
uöt32_t
 
xrc_ªmŸe_§q_num
;

732 
	sibv_ªcv_wr
 {

733 
uöt64_t
 
wr_id
;

734 
ibv_ªcv_wr
 *
√xt
;

735 
ibv_sge
 *
sg_li°
;

736 
num_sge
;

739 
	sibv_mw_böd
 {

740 
uöt64_t
 
wr_id
;

741 
ibv_mr
 *
mr
;

742 *
addr
;

743 
size_t
 
Àngth
;

744 
£nd_Êags
;

745 
mw_ac˚ss_Êags
;

748 
	sibv_§q
 {

749 
ibv_c⁄ãxt
 *
c⁄ãxt
;

750 *
§q_c⁄ãxt
;

751 
ibv_pd
 *
pd
;

752 
uöt32_t
 
h™dÀ
;

754 
±hªad_muãx_t
 
muãx
;

755 
±hªad_c⁄d_t
 
c⁄d
;

756 
uöt32_t
 
evíts_com∂ëed
;

761 
uöt32_t
 
xrc_§q_num_bö_com∑t_∑ddög
;

762 
ibv_xrc_domaö
 *
xrc_domaö_bö_com∑t_∑ddög
;

763 
ibv_cq
 *
xrc_cq_bö_com∑t_∑ddög
;

764 *
ibv_§q_∑ddög
;

767 
uöt32_t
 
xrc_§q_num
;

768 
ibv_xrc_domaö
 *
xrc_domaö
;

769 
ibv_cq
 *
xrc_cq
;

773 
	eibv_evít_Êags
 {

774 
IBV_XRC_QP_EVENT_FLAG
 = 0x80000000,

779 
	sibv_qp
 {

780 
ibv_c⁄ãxt
 *
c⁄ãxt
;

781 *
qp_c⁄ãxt
;

782 
ibv_pd
 *
pd
;

783 
ibv_cq
 *
£nd_cq
;

784 
ibv_cq
 *
ªcv_cq
;

785 
ibv_§q
 *
§q
;

786 
uöt32_t
 
h™dÀ
;

787 
uöt32_t
 
qp_num
;

788 
ibv_qp_°©e
 
°©e
;

789 
ibv_qp_ty≥
 
qp_ty≥
;

791 
±hªad_muãx_t
 
muãx
;

792 
±hªad_c⁄d_t
 
c⁄d
;

793 
uöt32_t
 
evíts_com∂ëed
;

796 
	sibv_comp_ch™√l
 {

797 
ibv_c⁄ãxt
 *
c⁄ãxt
;

798 
fd
;

799 
ªf˙t
;

802 
	sibv_cq
 {

803 
ibv_c⁄ãxt
 *
c⁄ãxt
;

804 
ibv_comp_ch™√l
 *
ch™√l
;

805 *
cq_c⁄ãxt
;

806 
uöt32_t
 
h™dÀ
;

807 
cqe
;

809 
±hªad_muãx_t
 
muãx
;

810 
±hªad_c⁄d_t
 
c⁄d
;

811 
uöt32_t
 
comp_evíts_com∂ëed
;

812 
uöt32_t
 
async_evíts_com∂ëed
;

815 
	sibv_ah
 {

816 
ibv_c⁄ãxt
 *
c⁄ãxt
;

817 
ibv_pd
 *
pd
;

818 
uöt32_t
 
h™dÀ
;

821 
ibv_devi˚
;

822 
ibv_c⁄ãxt
;

824 
	sibv_devi˚_›s
 {

825 
ibv_c⁄ãxt
 * (*
Æloc_c⁄ãxt
)(
ibv_devi˚
 *
devi˚
, 
cmd_fd
);

826 (*
‰ì_c⁄ãxt
)(
ibv_c⁄ãxt
 *
c⁄ãxt
);

830 
IBV_SYSFS_NAME_MAX
 = 64,

831 
IBV_SYSFS_PATH_MAX
 = 256

834 
	sibv_devi˚
 {

835 
ibv_devi˚_›s
 
›s
;

836 
ibv_node_ty≥
 
node_ty≥
;

837 
ibv_å™•‹t_ty≥
 
å™•‹t_ty≥
;

839 
«me
[
IBV_SYSFS_NAME_MAX
];

841 
dev_«me
[
IBV_SYSFS_NAME_MAX
];

843 
dev_∑th
[
IBV_SYSFS_PATH_MAX
];

845 
ibdev_∑th
[
IBV_SYSFS_PATH_MAX
];

848 
	svîbs_devi˚
 {

849 
ibv_devi˚
 
devi˚
;

850 
size_t
 
sz
;

851 
size_t
 
size_of_c⁄ãxt
;

852 (*
öô_c⁄ãxt
)(
vîbs_devi˚
 *
devi˚
,

853 
ibv_c⁄ãxt
 *
˘x
, 
cmd_fd
);

854 (*
unöô_c⁄ãxt
)(
vîbs_devi˚
 *
devi˚
,

855 
ibv_c⁄ãxt
 *
˘x
);

859 
	sibv_c⁄ãxt_›s
 {

860 (*
quîy_devi˚
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

861 
ibv_devi˚_©å
 *
devi˚_©å
);

862 (*
quîy_p‹t
)(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

863 
ibv_p‹t_©å
 *
p‹t_©å
);

864 
ibv_pd
 * (*
Æloc_pd
)(
ibv_c⁄ãxt
 *
c⁄ãxt
);

865 (*
dóŒoc_pd
)(
ibv_pd
 *
pd
);

866 
ibv_mr
 * (*
ªg_mr
)(
ibv_pd
 *
pd
, *
addr
, 
size_t
 
Àngth
,

867 
ac˚ss
);

868 
ibv_mr
 * (*
ªªg_mr
)(ibv_m∏*
mr
,

869 
Êags
,

870 
ibv_pd
 *
pd
, *
addr
,

871 
size_t
 
Àngth
,

872 
ac˚ss
);

873 (*
dîeg_mr
)(
ibv_mr
 *
mr
);

874 
ibv_mw
 * (*
Æloc_mw
)(
ibv_pd
 *
pd
, 
ibv_mw_ty≥
 
ty≥
);

875 (*
böd_mw
)(
ibv_qp
 *
qp
, 
ibv_mw
 *
mw
,

876 
ibv_mw_böd
 *
mw_böd
);

877 (*
dóŒoc_mw
)(
ibv_mw
 *
mw
);

878 
ibv_cq
 * (*
¸óã_cq
)(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
cqe
,

879 
ibv_comp_ch™√l
 *
ch™√l
,

880 
comp_ve˘‹
);

881 (*
pﬁl_cq
)(
ibv_cq
 *
cq
, 
num_íåõs
, 
ibv_wc
 *
wc
);

882 (*
ªq_nŸify_cq
)(
ibv_cq
 *
cq
, 
sﬁicôed_⁄ly
);

883 (*
cq_evít
)(
ibv_cq
 *
cq
);

884 (*
ªsize_cq
)(
ibv_cq
 *
cq
, 
cqe
);

885 (*
de°roy_cq
)(
ibv_cq
 *
cq
);

886 
ibv_§q
 * (*
¸óã_§q
)(
ibv_pd
 *
pd
,

887 
ibv_§q_öô_©å
 *
§q_öô_©å
);

888 (*
modify_§q
)(
ibv_§q
 *
§q
,

889 
ibv_§q_©å
 *
§q_©å
,

890 
§q_©å_mask
);

891 (*
quîy_§q
)(
ibv_§q
 *
§q
,

892 
ibv_§q_©å
 *
§q_©å
);

893 (*
de°roy_§q
)(
ibv_§q
 *
§q
);

894 (*
po°_§q_ªcv
)(
ibv_§q
 *
§q
,

895 
ibv_ªcv_wr
 *
ªcv_wr
,

896 
ibv_ªcv_wr
 **
bad_ªcv_wr
);

897 
ibv_qp
 * (*
¸óã_qp
)(
ibv_pd
 *
pd
, 
ibv_qp_öô_©å
 *
©å
);

898 (*
quîy_qp
)(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

899 
©å_mask
,

900 
ibv_qp_öô_©å
 *
öô_©å
);

901 (*
modify_qp
)(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

902 
©å_mask
);

903 (*
de°roy_qp
)(
ibv_qp
 *
qp
);

904 (*
po°_£nd
)(
ibv_qp
 *
qp
, 
ibv_£nd_wr
 *
wr
,

905 
ibv_£nd_wr
 **
bad_wr
);

906 (*
po°_ªcv
)(
ibv_qp
 *
qp
, 
ibv_ªcv_wr
 *
wr
,

907 
ibv_ªcv_wr
 **
bad_wr
);

908 
ibv_ah
 * (*
¸óã_ah
)(
ibv_pd
 *
pd
, 
ibv_ah_©å
 *
©å
);

909 (*
de°roy_ah
)(
ibv_ah
 *
ah
);

910 (*
©èch_mˇ°
)(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
,

911 
uöt16_t
 
lid
);

912 (*
dëach_mˇ°
)(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
,

913 
uöt16_t
 
lid
);

914 (*
async_evít
)(
ibv_async_evít
 *
evít
);

917 
	sibv_c⁄ãxt
 {

918 
ibv_devi˚
 *
devi˚
;

919 
ibv_c⁄ãxt_›s
 
›s
;

920 
cmd_fd
;

921 
async_fd
;

922 
num_comp_ve˘‹s
;

923 
±hªad_muãx_t
 
muãx
;

924 *
abi_com∑t
;

927 
	evîbs_c⁄ãxt_mask
 {

928 
VERBS_CONTEXT_XRCD
 = (
uöt64_t
)1 << 0,

929 
VERBS_CONTEXT_SRQ
 = (
uöt64_t
)1 << 1,

930 
VERBS_CONTEXT_QP
 = (
uöt64_t
)1 << 2,

931 
VERBS_CONTEXT_RESERVED
 = (
uöt64_t
)1 << 3,

932 
VERBS_CONTEXT_EXP
 = (
uöt64_t
)1 << 62

935 
	svîbs_c⁄ãxt
 {

937 
ibv_qp
 * (*
›í_qp
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

938 
ibv_qp_›í_©å
 *
©å
);

939 
ibv_qp
 * (*
¸óã_qp_ex
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

940 
ibv_qp_öô_©å_ex
 *
qp_öô_©å_ex
);

941 (*
gë_§q_num
)(
ibv_§q
 *
§q
, 
uöt32_t
 *
§q_num
);

942 
ibv_§q
 * (*
¸óã_§q_ex
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

943 
ibv_§q_öô_©å_ex
 *
§q_öô_©å_ex
);

944 
ibv_xrcd
 * (*
›í_xrcd
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

945 
ibv_xrcd_öô_©å
 *
xrcd_öô_©å
);

946 (*
˛o£_xrcd
)(
ibv_xrcd
 *
xrcd
);

947 
uöt64_t
 
has_comp_mask
;

948 
size_t
 
sz
;

949 
ibv_c⁄ãxt
 
c⁄ãxt
;

952 
ölöe
 
vîbs_c⁄ãxt
 *
	$vîbs_gë_˘x
(
ibv_c⁄ãxt
 *
˘x
)

954  (!
˘x
 || (˘x->
abi_com∑t
 !
__VERBS_ABI_IS_EXTENDED
)) ?

955 
NULL
 : 
	`c⁄èöî_of
(
˘x
, 
vîbs_c⁄ãxt
, 
c⁄ãxt
);

956 
	}
}

958 
	#vîbs_gë_˘x_›
(
˘x
, 
›
) ({ \

959 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x
(
˘x
); \

960 (!
v˘x
 || (v˘x->
sz
 < (*v˘xË- 
	`off£tof
(
vîbs_c⁄ãxt
, 
›
)) || \

961 !
v˘x
->
›
Ë? 
NULL
 : v˘x; })

	)

963 
	#vîbs_£t_˘x_›
(
_v˘x
, 
›
, 
±r
) ({ \

964 
vîbs_c⁄ãxt
 *
v˘x
 = 
_v˘x
; \

965 i‡(
v˘x
 && (v˘x->
sz
 >(*v˘xË- 
	`off£tof
(
vîbs_c⁄ãxt
, 
›
))) \

966 
v˘x
->
›
 = 
±r
; })

	)

968 
ölöe
 
vîbs_devi˚
 *
	$vîbs_gë_devi˚
(

969 c⁄° 
ibv_devi˚
 *
dev
)

971  (
dev
->
›s
.
Æloc_c⁄ãxt
) ?

972 
NULL
 : 
	`c⁄èöî_of
(
dev
, 
vîbs_devi˚
, 
devi˚
);

973 
	}
}

983 
ibv_devi˚
 **
ibv_gë_devi˚_li°
(*
num_devi˚s
);

993 
ibv_‰ì_devi˚_li°
(
ibv_devi˚
 **
li°
);

998 c⁄° *
ibv_gë_devi˚_«me
(
ibv_devi˚
 *
devi˚
);

1003 
uöt64_t
 
ibv_gë_devi˚_guid
(
ibv_devi˚
 *
devi˚
);

1008 
ibv_c⁄ãxt
 *
ibv_›í_devi˚
(
ibv_devi˚
 *
devi˚
);

1013 
ibv_˛o£_devi˚
(
ibv_c⁄ãxt
 *
c⁄ãxt
);

1022 
ibv_gë_async_evít
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1023 
ibv_async_evít
 *
evít
);

1035 
ibv_ack_async_evít
(
ibv_async_evít
 *
evít
);

1040 
ibv_quîy_devi˚
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1041 
ibv_devi˚_©å
 *
devi˚_©å
);

1046 
ibv_quîy_p‹t
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

1047 
ibv_p‹t_©å
 *
p‹t_©å
);

1049 
ölöe
 
	$___ibv_quîy_p‹t
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1050 
uöt8_t
 
p‹t_num
,

1051 
ibv_p‹t_©å
 *
p‹t_©å
)

1054 
p‹t_©å
->
lök_œyî
 = 
IBV_LINK_LAYER_UNSPECIFIED
;

1055 
p‹t_©å
->
ª£rved
 = 0;

1057  
	`ibv_quîy_p‹t
(
c⁄ãxt
, 
p‹t_num
, 
p‹t_©å
);

1058 
	}
}

1060 
	#ibv_quîy_p‹t
(
c⁄ãxt
, 
p‹t_num
, 
p‹t_©å
) \

1061 
	`___ibv_quîy_p‹t
(
c⁄ãxt
, 
p‹t_num
, 
p‹t_©å
)

	)

1066 
ibv_quîy_gid
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

1067 
ödex
, 
ibv_gid
 *
gid
);

1072 
ibv_quîy_pkey
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

1073 
ödex
, 
uöt16_t
 *
pkey
);

1078 
ibv_pd
 *
ibv_Æloc_pd
(
ibv_c⁄ãxt
 *
c⁄ãxt
);

1083 
ibv_dóŒoc_pd
(
ibv_pd
 *
pd
);

1088 
ölöe
 
ibv_xrcd
 *

1089 
	$ibv_›í_xrcd
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
ibv_xrcd_öô_©å
 *
xrcd_öô_©å
)

1091 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x_›
(
c⁄ãxt
, 
›í_xrcd
);

1092 i‡(!
v˘x
) {

1093 
î∫o
 = 
ENOSYS
;

1094  
NULL
;

1096  
v˘x
->
	`›í_xrcd
(
c⁄ãxt
, 
xrcd_öô_©å
);

1097 
	}
}

1102 
ölöe
 
	$ibv_˛o£_xrcd
(
ibv_xrcd
 *
xrcd
)

1104 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x
(
xrcd
->
c⁄ãxt
);

1105  
v˘x
->
	`˛o£_xrcd
(
xrcd
);

1106 
	}
}

1111 
ibv_mr
 *
ibv_ªg_mr
(
ibv_pd
 *
pd
, *
addr
,

1112 
size_t
 
Àngth
, 
ac˚ss
);

1117 
ibv_dîeg_mr
(
ibv_mr
 *
mr
);

1122 
ölöe
 
ibv_mw
 *
	$ibv_Æloc_mw
(
ibv_pd
 *
pd
,

1123 
ibv_mw_ty≥
 
ty≥
)

1125 i‡(!
pd
->
c⁄ãxt
->
›s
.
Æloc_mw
) {

1126 
î∫o
 = 
ENOSYS
;

1127  
NULL
;

1130 
ibv_mw
 *
mw
 = 
pd
->
c⁄ãxt
->
›s
.
	`Æloc_mw
’d, 
ty≥
);

1131 i‡(
mw
) {

1132 
mw
->
c⁄ãxt
 = 
pd
->context;

1133 
mw
->
pd
 =Öd;

1135  
mw
;

1136 
	}
}

1141 
ölöe
 
	$ibv_dóŒoc_mw
(
ibv_mw
 *
mw
)

1143  
mw
->
c⁄ãxt
->
›s
.
	`dóŒoc_mw
(mw);

1144 
	}
}

1149 
ölöe
 
uöt32_t
 
	$ibv_öc_rkey
(
uöt32_t
 
rkey
)

1151 c⁄° 
uöt32_t
 
mask
 = 0x000000ff;

1152 
uöt8_t
 
√wèg
 = (uöt8_tË((
rkey
 + 1Ë& 
mask
);

1153  (
rkey
 & ~
mask
Ë| 
√wèg
;

1154 
	}
}

1159 
ibv_comp_ch™√l
 *
ibv_¸óã_comp_ch™√l
(
ibv_c⁄ãxt
 *
c⁄ãxt
);

1164 
ibv_de°roy_comp_ch™√l
(
ibv_comp_ch™√l
 *
ch™√l
);

1176 
ibv_cq
 *
ibv_¸óã_cq
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
cqe
,

1177 *
cq_c⁄ãxt
,

1178 
ibv_comp_ch™√l
 *
ch™√l
,

1179 
comp_ve˘‹
);

1188 
ibv_ªsize_cq
(
ibv_cq
 *
cq
, 
cqe
);

1193 
ibv_de°roy_cq
(
ibv_cq
 *
cq
);

1204 
ibv_gë_cq_evít
(
ibv_comp_ch™√l
 *
ch™√l
,

1205 
ibv_cq
 **
cq
, **
cq_c⁄ãxt
);

1220 
ibv_ack_cq_evíts
(
ibv_cq
 *
cq
, 
√víts
);

1235 
ölöe
 
	$ibv_pﬁl_cq
(
ibv_cq
 *
cq
, 
num_íåõs
, 
ibv_wc
 *
wc
)

1237  
cq
->
c⁄ãxt
->
›s
.
	`pﬁl_cq
(cq, 
num_íåõs
, 
wc
);

1238 
	}
}

1249 
ölöe
 
	$ibv_ªq_nŸify_cq
(
ibv_cq
 *
cq
, 
sﬁicôed_⁄ly
)

1251  
cq
->
c⁄ãxt
->
›s
.
	`ªq_nŸify_cq
(cq, 
sﬁicôed_⁄ly
);

1252 
	}
}

1265 
ibv_§q
 *
ibv_¸óã_§q
(
ibv_pd
 *
pd
,

1266 
ibv_§q_öô_©å
 *
§q_öô_©å
);

1268 
ölöe
 
ibv_§q
 *

1269 
	$ibv_¸óã_§q_ex
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1270 
ibv_§q_öô_©å_ex
 *
§q_öô_©å_ex
)

1272 
vîbs_c⁄ãxt
 *
v˘x
;

1273 
uöt32_t
 
mask
 = 
§q_öô_©å_ex
->
comp_mask
;

1275 i‡(!(
mask
 & ~(
IBV_SRQ_INIT_ATTR_PD
 | 
IBV_SRQ_INIT_ATTR_TYPE
)) &&

1276 (
mask
 & 
IBV_SRQ_INIT_ATTR_PD
) &&

1277 (!(
mask
 & 
IBV_SRQ_INIT_ATTR_TYPE
) ||

1278 (
§q_öô_©å_ex
->
§q_ty≥
 =
IBV_SRQT_BASIC
)))

1279  
	`ibv_¸óã_§q
(
§q_öô_©å_ex
->
pd
,

1280 (
ibv_§q_öô_©å
 *Ë
§q_öô_©å_ex
);

1282 
v˘x
 = 
	`vîbs_gë_˘x_›
(
c⁄ãxt
, 
¸óã_§q_ex
);

1283 i‡(!
v˘x
) {

1284 
î∫o
 = 
ENOSYS
;

1285  
NULL
;

1287  
v˘x
->
	`¸óã_§q_ex
(
c⁄ãxt
, 
§q_öô_©å_ex
);

1288 
	}
}

1302 
ibv_modify_§q
(
ibv_§q
 *
§q
,

1303 
ibv_§q_©å
 *
§q_©å
,

1304 
§q_©å_mask
);

1312 
ibv_quîy_§q
(
ibv_§q
 *
§q
, 
ibv_§q_©å
 *
§q_©å
);

1314 
ölöe
 
	$ibv_gë_§q_num
(
ibv_§q
 *
§q
, 
uöt32_t
 *
§q_num
)

1316 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x_›
(
§q
->
c⁄ãxt
, 
gë_§q_num
);

1318 i‡(!
v˘x
)

1319  
ENOSYS
;

1321  
v˘x
->
	`gë_§q_num
(
§q
, 
§q_num
);

1322 
	}
}

1328 
ibv_de°roy_§q
(
ibv_§q
 *
§q
);

1337 
ölöe
 
	$ibv_po°_§q_ªcv
(
ibv_§q
 *
§q
,

1338 
ibv_ªcv_wr
 *
ªcv_wr
,

1339 
ibv_ªcv_wr
 **
bad_ªcv_wr
)

1341  
§q
->
c⁄ãxt
->
›s
.
	`po°_§q_ªcv
(§q, 
ªcv_wr
, 
bad_ªcv_wr
);

1342 
	}
}

1347 
ibv_qp
 *
ibv_¸óã_qp
(
ibv_pd
 *
pd
,

1348 
ibv_qp_öô_©å
 *
qp_öô_©å
);

1350 
ölöe
 
ibv_qp
 *

1351 
	$ibv_¸óã_qp_ex
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
ibv_qp_öô_©å_ex
 *
qp_öô_©å_ex
)

1353 
vîbs_c⁄ãxt
 *
v˘x
;

1354 
uöt32_t
 
mask
 = 
qp_öô_©å_ex
->
comp_mask
;

1356 i‡(
mask
 =
IBV_QP_INIT_ATTR_PD
)

1357  
	`ibv_¸óã_qp
(
qp_öô_©å_ex
->
pd
,

1358 (
ibv_qp_öô_©å
 *Ë
qp_öô_©å_ex
);

1360 
v˘x
 = 
	`vîbs_gë_˘x_›
(
c⁄ãxt
, 
¸óã_qp_ex
);

1361 i‡(!
v˘x
) {

1362 
î∫o
 = 
ENOSYS
;

1363  
NULL
;

1365  
v˘x
->
	`¸óã_qp_ex
(
c⁄ãxt
, 
qp_öô_©å_ex
);

1366 
	}
}

1371 
ölöe
 
ibv_qp
 *

1372 
	$ibv_›í_qp
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
ibv_qp_›í_©å
 *
qp_›í_©å
)

1374 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x_›
(
c⁄ãxt
, 
›í_qp
);

1375 i‡(!
v˘x
) {

1376 
î∫o
 = 
ENOSYS
;

1377  
NULL
;

1379  
v˘x
->
	`›í_qp
(
c⁄ãxt
, 
qp_›í_©å
);

1380 
	}
}

1385 
ibv_modify_qp
(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

1386 
©å_mask
);

1399 
ibv_quîy_qp
(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

1400 
©å_mask
,

1401 
ibv_qp_öô_©å
 *
öô_©å
);

1406 
ibv_de°roy_qp
(
ibv_qp
 *
qp
);

1414 
ölöe
 
	$ibv_po°_£nd
(
ibv_qp
 *
qp
, 
ibv_£nd_wr
 *
wr
,

1415 
ibv_£nd_wr
 **
bad_wr
)

1417  
qp
->
c⁄ãxt
->
›s
.
	`po°_£nd
(qp, 
wr
, 
bad_wr
);

1418 
	}
}

1423 
ölöe
 
	$ibv_po°_ªcv
(
ibv_qp
 *
qp
, 
ibv_ªcv_wr
 *
wr
,

1424 
ibv_ªcv_wr
 **
bad_wr
)

1426  
qp
->
c⁄ãxt
->
›s
.
	`po°_ªcv
(qp, 
wr
, 
bad_wr
);

1427 
	}
}

1432 
ibv_ah
 *
ibv_¸óã_ah
(
ibv_pd
 *
pd
, 
ibv_ah_©å
 *
©å
);

1445 
ibv_öô_ah_‰om_wc
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

1446 
ibv_wc
 *
wc
, 
ibv_grh
 *
grh
,

1447 
ibv_ah_©å
 *
ah_©å
);

1461 
ibv_ah
 *
ibv_¸óã_ah_‰om_wc
(
ibv_pd
 *
pd
, 
ibv_wc
 *
wc
,

1462 
ibv_grh
 *
grh
, 
uöt8_t
 
p‹t_num
);

1467 
ibv_de°roy_ah
(
ibv_ah
 *
ah
);

1480 
ibv_©èch_mˇ°
(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
, 
uöt16_t
 
lid
);

1488 
ibv_dëach_mˇ°
(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
, 
uöt16_t
 
lid
);

1496 
ibv_f‹k_öô
();

1501 c⁄° *
ibv_node_ty≥_°r
(
ibv_node_ty≥
 
node_ty≥
);

1506 c⁄° *
ibv_p‹t_°©e_°r
(
ibv_p‹t_°©e
 
p‹t_°©e
);

1511 c⁄° *
ibv_evít_ty≥_°r
(
ibv_evít_ty≥
 
evít
);

1513 
	gEND_C_DECLS


1515 #unde‡
__©åibuã_c⁄°


1517 
	~<öföib™d/vîbs_exp.h
>

	@/usr/include/numa.h

17 #i‚de‡
_NUMA_H


18 
	#_NUMA_H
 1

	)

21 
	#LIBNUMA_API_VERSION
 2

	)

25 
	~<°ddef.h
>

26 
	~<°rög.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<°dlib.h
>

30 #i‡
deföed
(
__x86_64__
Ë|| deföed(
__i386__
)

31 
	#NUMA_NUM_NODES
 128

	)

33 
	#NUMA_NUM_NODES
 2048

	)

36 #ifde‡
__˝lu•lus


41 
n
[
NUMA_NUM_NODES
/(()*8)];

42 } 
	tnodemask_t
;

44 
	sbômask
 {

45 
size
;

46 *
maskp
;

50 
numa_bômask_isbô£t
(c⁄° 
bômask
 *, );

51 
bômask
 *
numa_bômask_£èŒ
(bitmask *);

52 
bômask
 *
numa_bômask_˛óøŒ
(bitmask *);

53 
bômask
 *
numa_bômask_£tbô
(bitmask *, );

54 
bômask
 *
numa_bômask_˛órbô
(bitmask *, );

55 
numa_bômask_nbyãs
(
bômask
 *);

56 
bômask
 *
numa_bômask_Æloc
();

57 
numa_bômask_‰ì
(
bômask
 *);

58 
numa_bômask_equÆ
(c⁄° 
bômask
 *, const bitmask *);

59 
c›y_nodemask_to_bômask
(
nodemask_t
 *, 
bômask
 *);

60 
c›y_bômask_to_nodemask
(
bômask
 *, 
nodemask_t
 *);

61 
c›y_bômask_to_bômask
(
bômask
 *, bitmask *);

65 
ölöe
 
nodemask_zîo
(
nodemask_t
 *
mask
)

67 
bômask
 
tmp
;

69 
tmp
.
maskp
 = (*)
mask
;

70 
tmp
.
size
 = (
nodemask_t
) * 8;

71 
numa_bômask_˛óøŒ
(&
tmp
);

74 
ölöe
 
nodemask_zîo_com∑t
(
nodemask_t
 *
mask
)

76 
bômask
 
tmp
;

78 
tmp
.
maskp
 = (*)
mask
;

79 
tmp
.
size
 = (
nodemask_t
) * 8;

80 
numa_bômask_˛óøŒ
(&
tmp
);

83 
ölöe
 
nodemask_£t_com∑t
(
nodemask_t
 *
mask
, 
node
)

85 
mask
->
n
[
node
 / (8*())] |=

86 (1UL<<(
node
%(8*())));

89 
ölöe
 
nodemask_˛r_com∑t
(
nodemask_t
 *
mask
, 
node
)

91 
mask
->
n
[
node
 / (8*())] &=

92 ~(1UL<<(
node
%(8*())));

95 
ölöe
 
nodemask_is£t_com∑t
(c⁄° 
nodemask_t
 *
mask
, 
node
)

97 i‡(()
node
 >
NUMA_NUM_NODES
)

99 i‡(
mask
->
n
[
node
 / (8*())] &

100 (1UL<<(
node
%(8*()))))

105 
ölöe
 
nodemask_equÆ
(c⁄° 
nodemask_t
 *
a
, c⁄°Çodemask_à*
b
)

107 
bômask
 
tmp_a
, 
tmp_b
;

109 
tmp_a
.
maskp
 = (*)
a
;

110 
tmp_a
.
size
 = (
nodemask_t
) * 8;

112 
tmp_b
.
maskp
 = (*)
b
;

113 
tmp_b
.
size
 = (
nodemask_t
) * 8;

115  
numa_bômask_equÆ
(&
tmp_a
, &
tmp_b
);

118 
ölöe
 
nodemask_equÆ_com∑t
(c⁄° 
nodemask_t
 *
a
, c⁄°Çodemask_à*
b
)

120 
bômask
 
tmp_a
, 
tmp_b
;

122 
tmp_a
.
maskp
 = (*)
a
;

123 
tmp_a
.
size
 = (
nodemask_t
) * 8;

125 
tmp_b
.
maskp
 = (*)
b
;

126 
tmp_b
.
size
 = (
nodemask_t
) * 8;

128  
numa_bômask_equÆ
(&
tmp_a
, &
tmp_b
);

133 
numa_avaûabÀ
();

138 
numa_max_node
();

139 
numa_max_possibÀ_node
();

141 
numa_¥e„ºed
();

144 
numa_node_size64
(
node
, *
‰ìp
);

145 
numa_node_size
(
node
, *
‰ìp
);

147 
numa_∑gesize
();

151 
bômask
 *
numa_Æl_nodes_±r
;

154 
bômask
 *
numa_nodes_±r
;

157 
nodemask_t
 
numa_Æl_nodes
;

160 
bômask
 *
numa_Æl_˝us_±r
;

163 
bômask
 *
numa_no_nodes_±r
;

166 
nodemask_t
 
numa_no_nodes
;

169 
numa_böd
(
bômask
 *
nodes
);

172 
numa_£t_öãæóve_mask
(
bômask
 *
nodemask
);

175 
bômask
 *
numa_gë_öãæóve_mask
();

178 
bômask
 *
numa_Æloˇã_nodemask
();

180 
ölöe
 
numa_‰ì_nodemask
(
bômask
 *
b
)

182 
numa_bômask_‰ì
(
b
);

186 
numa_£t_¥e„ºed
(
node
);

189 
numa_£t_loˇœŒoc
();

192 
numa_£t_memböd
(
bômask
 *
nodemask
);

195 
bômask
 *
numa_gë_memböd
();

198 
bômask
 *
numa_gë_mems_Ælowed
();

200 
numa_gë_öãæóve_node
();

206 *
numa_Æloc_öãæóved_sub£t
(
size_t
 
size
, 
bômask
 *
nodemask
);

208 *
numa_Æloc_öãæóved
(
size_t
 
size
);

210 *
numa_Æloc_⁄node
(
size_t
 
size
, 
node
);

212 *
numa_Æloc_loˇl
(
size_t
 
size
);

214 *
numa_Æloc
(
size_t
 
size
);

216 *
numa_ªÆloc
(*
ﬁd_addr
, 
size_t
 
ﬁd_size
, size_à
√w_size
);

218 
numa_‰ì
(*
mem
, 
size_t
 
size
);

224 
numa_öãæóve_mem‹y
(*
mem
, 
size_t
 
size
, 
bômask
 *
mask
);

227 
numa_t⁄ode_mem‹y
(*
°¨t
, 
size_t
 
size
, 
node
);

230 
numa_t⁄odemask_mem‹y
(*
mem
, 
size_t
 
size
, 
bômask
 *
mask
);

233 
numa_£éoˇl_mem‹y
(*
°¨t
, 
size_t
 
size
);

236 
numa_pﬁi˚_mem‹y
(*
°¨t
, 
size_t
 
size
);

239 
numa_run_⁄_node_mask
(
bômask
 *
mask
);

241 
numa_run_⁄_node
(
node
);

243 
bômask
 * 
numa_gë_run_node_mask
();

246 
numa_£t_böd_pﬁicy
(
°ri˘
);

249 
numa_£t_°ri˘
(
Êag
);

252 
numa_num_possibÀ_nodes
();

255 
numa_num_possibÀ_˝us
();

258 
numa_num_c⁄figuªd_nodes
();

261 
numa_num_c⁄figuªd_˝us
();

264 
numa_num_èsk_˝us
();

265 
numa_num_thªad_˝us
();

268 
numa_num_èsk_nodes
();

269 
numa_num_thªad_nodes
();

272 
bômask
 *
numa_Æloˇã_˝umask
();

274 
ölöe
 
numa_‰ì_˝umask
(
bômask
 *
b
)

276 
numa_bômask_‰ì
(
b
);

280 
numa_node_to_˝us
(, 
bômask
 *);

283 
numa_node_of_˝u
(
˝u
);

286 
numa_di°™˚
(
node1
, 
node2
);

292 
numa_îr‹
(*
whîe
);

296 
numa_exô_⁄_îr‹
;

299 
numa_w¨n
(
num
, *
fmt
, ...);

302 
numa_exô_⁄_w¨n
;

304 
numa_migøã_∑ges
(
pid
, 
bômask
 *
‰om
, bômask *
to
);

306 
numa_move_∑ges
(
pid
, 
cou¡
, **
∑ges
,

307 c⁄° *
nodes
, *
°©us
, 
Êags
);

309 
numa_sched_gëafföôy
(
pid_t
, 
bômask
 *);

310 
numa_sched_£èfföôy
(
pid_t
, 
bômask
 *);

313 
bômask
 *
numa_∑r£_node°rög
(*);

316 
bômask
 *
numa_∑r£_˝u°rög
(*);

324 
ölöe
 
numa_£t_öãæóve_mask_com∑t
(
nodemask_t
 *
nodemask
)

326 
bômask
 
	gtmp
;

328 
	gtmp
.
	gmaskp
 = (*)
nodemask
;

329 
	gtmp
.
	gsize
 = (
nodemask_t
) * 8;

330 
numa_£t_öãæóve_mask
(&
tmp
);

333 
ölöe
 
nodemask_t
 
numa_gë_öãæóve_mask_com∑t
()

335 
bômask
 *
	gç
;

336 
nodemask_t
 
	gmask
;

338 
	gç
 = 
numa_gë_öãæóve_mask
();

339 
c›y_bômask_to_nodemask
(
ç
, &
mask
);

340 
numa_bômask_‰ì
(
ç
);

341  
	gmask
;

344 
ölöe
 
numa_böd_com∑t
(
nodemask_t
 *
mask
)

346 
bômask
 *
	gç
;

348 
	gç
 = 
numa_Æloˇã_nodemask
();

349 
c›y_nodemask_to_bômask
(
mask
, 
ç
);

350 
numa_böd
(
ç
);

351 
numa_bômask_‰ì
(
ç
);

354 
ölöe
 
numa_£t_memböd_com∑t
(
nodemask_t
 *
mask
)

356 
bômask
 
	gtmp
;

358 
	gtmp
.
	gmaskp
 = (*)
mask
;

359 
	gtmp
.
	gsize
 = (
nodemask_t
) * 8;

360 
numa_£t_memböd
(&
tmp
);

363 
ölöe
 
nodemask_t
 
numa_gë_memböd_com∑t
()

365 
bômask
 *
	gç
;

366 
nodemask_t
 
	gmask
;

368 
	gç
 = 
numa_gë_memböd
();

369 
c›y_bômask_to_nodemask
(
ç
, &
mask
);

370 
numa_bômask_‰ì
(
ç
);

371  
	gmask
;

374 
ölöe
 *
numa_Æloc_öãæóved_sub£t_com∑t
(
size_t
 
size
,

375 c⁄° 
nodemask_t
 *
mask
)

377 
bômask
 
	gtmp
;

379 
	gtmp
.
	gmaskp
 = (*)
mask
;

380 
	gtmp
.
	gsize
 = (
nodemask_t
) * 8;

381  
numa_Æloc_öãæóved_sub£t
(
size
, &
tmp
);

384 
ölöe
 
numa_run_⁄_node_mask_com∑t
(c⁄° 
nodemask_t
 *
mask
)

386 
bômask
 
	gtmp
;

388 
	gtmp
.
	gmaskp
 = (*)
mask
;

389 
	gtmp
.
	gsize
 = (
nodemask_t
) * 8;

390  
numa_run_⁄_node_mask
(&
tmp
);

393 
ölöe
 
nodemask_t
 
numa_gë_run_node_mask_com∑t
()

395 
bômask
 *
	gç
;

396 
nodemask_t
 
	gmask
;

398 
	gç
 = 
numa_gë_run_node_mask
();

399 
c›y_bômask_to_nodemask
(
ç
, &
mask
);

400 
numa_bômask_‰ì
(
ç
);

401  
	gmask
;

404 
ölöe
 
numa_öãæóve_mem‹y_com∑t
(*
mem
, 
size_t
 
size
,

405 c⁄° 
nodemask_t
 *
mask
)

407 
bômask
 
	gtmp
;

409 
	gtmp
.
	gmaskp
 = (*)
mask
;

410 
	gtmp
.
	gsize
 = (
nodemask_t
) * 8;

411 
numa_öãæóve_mem‹y
(
mem
, 
size
, &
tmp
);

414 
ölöe
 
numa_t⁄odemask_mem‹y_com∑t
(*
mem
, 
size_t
 
size
,

415 c⁄° 
nodemask_t
 *
mask
)

417 
bômask
 
	gtmp
;

419 
	gtmp
.
	gmaskp
 = (*)
mask
;

420 
	gtmp
.
	gsize
 = (
nodemask_t
) * 8;

421 
numa_t⁄odemask_mem‹y
(
mem
, 
size
, &
tmp
);

424 
ölöe
 
numa_sched_gëafföôy_com∑t
(
pid_t
 
pid
, 
Àn
,

425 *
mask
)

427 
bômask
 
	gtmp
;

429 
	gtmp
.
	gmaskp
 = (*)
mask
;

430 
	gtmp
.
	gsize
 = 
Àn
 * 8;

431  
numa_sched_gëafföôy
(
pid
, &
tmp
);

434 
ölöe
 
numa_sched_£èfföôy_com∑t
(
pid_t
 
pid
, 
Àn
,

435 *
mask
)

437 
bômask
 
	gtmp
;

439 
	gtmp
.
	gmaskp
 = (*)
mask
;

440 
	gtmp
.
	gsize
 = 
Àn
 * 8;

441  
numa_sched_£èfföôy
(
pid
, &
tmp
);

444 
ölöe
 
numa_node_to_˝us_com∑t
(
node
, *
buf„r
,

445 
buf„r_Àn
)

447 
bômask
 
	gtmp
;

449 
	gtmp
.
	gmaskp
 = (*)
buf„r
;

450 
	gtmp
.
	gsize
 = 
buf„r_Àn
 * 8;

451  
numa_node_to_˝us
(
node
, &
tmp
);

460 #ifde‡
NUMA_VERSION1_COMPATIBILITY


461 
	~<numacom∑t1.h
>

464 #ifde‡
__˝lu•lus


	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROW
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROW
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROW
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROW
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

168 #ifde‡
__STDC__


170 
	#°dö
 
°dö


	)

171 
	#°dout
 
°dout


	)

172 
	#°dîr
 
°dîr


	)

175 
__BEGIN_NAMESPACE_STD


177 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

179 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

180 
__END_NAMESPACE_STD


182 #ifde‡
__USE_ATFILE


184 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

185 
__c⁄°
 *
__√w
Ë
__THROW
;

188 
__BEGIN_NAMESPACE_STD


193 #i‚de‡
__USE_FILE_OFFSET64


194 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

196 #ifde‡
__REDIRECT


197 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

199 
	#tmpfûe
 
tmpfûe64


	)

203 #ifde‡
__USE_LARGEFILE64


204 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

208 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

209 
__END_NAMESPACE_STD


211 #ifde‡
__USE_MISC


214 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

218 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


226 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

227 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

231 
__BEGIN_NAMESPACE_STD


236 
	`f˛o£
 (
FILE
 *
__°ªam
);

241 
	`fÊush
 (
FILE
 *
__°ªam
);

242 
__END_NAMESPACE_STD


244 #ifde‡
__USE_MISC


251 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

254 #ifde‡
__USE_GNU


261 
	`f˛o£Æl
 ();

265 
__BEGIN_NAMESPACE_STD


266 #i‚de‡
__USE_FILE_OFFSET64


271 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

272 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

277 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

278 
__c⁄°
 *
__ª°ri˘
 
__modes
,

279 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifde‡
__REDIRECT


282 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

283 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

284 
__wur
;

285 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

286 
__c⁄°
 *
__ª°ri˘
 
__modes
,

287 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

288 
__wur
;

290 
	#f›í
 
f›í64


	)

291 
	#‰e›í
 
‰e›í64


	)

294 
__END_NAMESPACE_STD


295 #ifde‡
__USE_LARGEFILE64


296 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

298 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
,

300 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

303 #ifdef 
__USE_POSIX


305 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

308 #ifdef 
__USE_GNU


311 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

312 
__c⁄°
 *
__ª°ri˘
 
__modes
,

313 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

316 #ifde‡
__USE_XOPEN2K8


318 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

319 
__THROW
 
__wur
;

324 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

328 
__BEGIN_NAMESPACE_STD


331 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

335 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

336 
__modes
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifdef 
__USE_BSD


342 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

343 
size_t
 
__size
Ë
__THROW
;

346 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

350 
__BEGIN_NAMESPACE_STD


355 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

356 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	$•rötf
 (*
__ª°ri˘
 
__s
,

364 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

370 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

371 
_G_va_li°
 
__¨g
);

376 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

378 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

379 
_G_va_li°
 
__¨g
Ë
__THROW
;

380 
__END_NAMESPACE_STD


382 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


383 
__BEGIN_NAMESPACE_C99


385 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

386 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

387 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

389 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

390 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

391 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

392 
__END_NAMESPACE_C99


395 #ifde‡
__USE_GNU


398 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

399 
_G_va_li°
 
__¨g
)

400 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

401 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

402 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

403 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

404 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

405 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

406 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

409 #ifde‡
__USE_XOPEN2K8


416 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

417 
_G_va_li°
 
__¨g
)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

419 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

424 
__BEGIN_NAMESPACE_STD


429 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

430 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

438 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

440 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

441 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

442 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

443 #ifde‡
__REDIRECT


447 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

448 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_fsˇnf
Ë
__wur
;

450 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_sˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

453 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

454 
__isoc99_ssˇnf
Ë
__THROW
;

456 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

457 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

458 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

459 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

460 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

461 
	#fsˇnf
 
__isoc99_fsˇnf


	)

462 
	#sˇnf
 
__isoc99_sˇnf


	)

463 
	#ssˇnf
 
__isoc99_ssˇnf


	)

467 
__END_NAMESPACE_STD


469 #ifdef 
__USE_ISOC99


470 
__BEGIN_NAMESPACE_C99


475 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

476 
_G_va_li°
 
__¨g
)

477 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

483 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

484 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

487 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

488 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

489 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

491 #i‡!
deföed
 
__USE_GNU
 \

492 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

493 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

494 #ifde‡
__REDIRECT


498 
	`__REDIRECT
 (
vfsˇnf
,

499 (
FILE
 *
__ª°ri˘
 
__s
,

500 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

501 
__isoc99_vfsˇnf
)

502 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

503 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

504 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

505 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

506 
	`__REDIRECT
 (
vssˇnf
,

507 (
__c⁄°
 *
__ª°ri˘
 
__s
,

508 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

509 
__isoc99_vssˇnf
)

510 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

512 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

513 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

518 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

519 
_G_va_li°
 
__¨g
Ë
__THROW
;

520 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

521 
	#vsˇnf
 
__isoc99_vsˇnf


	)

522 
	#vssˇnf
 
__isoc99_vssˇnf


	)

526 
__END_NAMESPACE_C99


530 
__BEGIN_NAMESPACE_STD


535 
	`fgëc
 (
FILE
 *
__°ªam
);

536 
	`gëc
 (
FILE
 *
__°ªam
);

542 
	`gëch¨
 ();

543 
__END_NAMESPACE_STD


547 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

549 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


554 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

555 
	`gëch¨_u∆ocked
 ();

558 #ifde‡
__USE_MISC


565 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

569 
__BEGIN_NAMESPACE_STD


577 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

578 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

584 
	`putch¨
 (
__c
);

585 
__END_NAMESPACE_STD


589 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

591 #ifde‡
__USE_MISC


598 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

601 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


606 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

607 
	`putch¨_u∆ocked
 (
__c
);

611 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

612 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

614 
	`gëw
 (
FILE
 *
__°ªam
);

617 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

621 
__BEGIN_NAMESPACE_STD


626 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

627 
__wur
;

634 *
	$gës
 (*
__s
Ë
__wur
;

635 
__END_NAMESPACE_STD


637 #ifde‡
__USE_GNU


644 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

645 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

649 #ifdef 
__USE_XOPEN2K8


660 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

661 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

662 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

663 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

664 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

665 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

673 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

674 
size_t
 *
__ª°ri˘
 
__n
,

675 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

679 
__BEGIN_NAMESPACE_STD


684 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

690 
	`puts
 (
__c⁄°
 *
__s
);

697 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

704 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

705 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

710 
size_t
 
	$fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

711 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
__wur
;

712 
__END_NAMESPACE_STD


714 #ifde‡
__USE_GNU


721 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

722 
FILE
 *
__ª°ri˘
 
__°ªam
);

725 #ifde‡
__USE_MISC


732 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

734 
size_t
 
	$fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
__BEGIN_NAMESPACE_STD


744 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

749 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

754 
	`ªwöd
 (
FILE
 *
__°ªam
);

755 
__END_NAMESPACE_STD


762 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


763 #i‚de‡
__USE_FILE_OFFSET64


768 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

773 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

775 #ifde‡
__REDIRECT


776 
	`__REDIRECT
 (
f£eko
,

777 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

778 
f£eko64
);

779 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

781 
	#f£eko
 
f£eko64


	)

782 
	#·ñlo
 
·ñlo64


	)

787 
__BEGIN_NAMESPACE_STD


788 #i‚de‡
__USE_FILE_OFFSET64


793 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

798 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

800 #ifde‡
__REDIRECT


801 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

802 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

803 
	`__REDIRECT
 (
f£ços
,

804 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

806 
	#fgëpos
 
fgëpos64


	)

807 
	#f£ços
 
f£ços64


	)

810 
__END_NAMESPACE_STD


812 #ifde‡
__USE_LARGEFILE64


813 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

814 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

815 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

816 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

819 
__BEGIN_NAMESPACE_STD


821 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

823 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

825 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

826 
__END_NAMESPACE_STD


828 #ifde‡
__USE_MISC


830 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

831 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

832 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

836 
__BEGIN_NAMESPACE_STD


841 
	`≥º‹
 (
__c⁄°
 *
__s
);

842 
__END_NAMESPACE_STD


848 
	~<bôs/sys_îæi°.h
>

851 #ifdef 
__USE_POSIX


853 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

856 #ifde‡
__USE_MISC


858 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

862 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

863 
deföed
 
__USE_MISC
)

868 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

874 
	`p˛o£
 (
FILE
 *
__°ªam
);

878 #ifdef 
__USE_POSIX


880 *
	$˘îmid
 (*
__s
Ë
__THROW
;

884 #ifde‡
__USE_XOPEN


886 *
	`cu£rid
 (*
__s
);

890 #ifdef 
__USE_GNU


891 
ob°ack
;

894 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

895 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

896 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

897 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

898 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

899 
_G_va_li°
 
__¨gs
)

900 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

904 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


908 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

912 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

915 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

918 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


922 
	#__√ed_gë›t


	)

923 
	~<gë›t.h
>

928 #ifde‡
__USE_EXTERN_INLINES


929 
	~<bôs/°dio.h
>

931 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


932 
	~<bôs/°dio2.h
>

934 #ifde‡
__LDBL_COMPAT


935 
	~<bôs/°dio-ldbl.h
>

938 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/sys/ipc.h

19 #i‚de‡
_SYS_IPC_H


20 
	#_SYS_IPC_H
 1

	)

22 
	~<„©uªs.h
>

24 #i‡!
deföed
 
__USE_SVID
 && !deföed 
__USE_XOPEN
 && 
__GNUC__
 >= 2

29 
	~<bôs/ù˘y≥s.h
>

30 
	~<bôs/ùc.h
>

32 #i‚de‡
__uid_t_deföed


33 
__uid_t
 
	tuid_t
;

34 
	#__uid_t_deföed


	)

37 #i‚de‡
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

42 #i‚de‡
__mode_t_deföed


43 
__mode_t
 
	tmode_t
;

44 
	#__mode_t_deföed


	)

47 #i‚de‡
__key_t_deföed


48 
__key_t
 
	tkey_t
;

49 
	#__key_t_deföed


	)

52 
__BEGIN_DECLS


55 
key_t
 
	$·ok
 (
__c⁄°
 *
__∑th«me
, 
__¥oj_id
Ë
__THROW
;

57 
__END_DECLS


	@/usr/include/sys/mman.h

20 #i‚def 
_SYS_MMAN_H


21 
	#_SYS_MMAN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

28 #i‚de‡
__off_t_deföed


29 #i‚de‡
__USE_FILE_OFFSET64


30 
__off_t
 
	toff_t
;

32 
__off64_t
 
	toff_t
;

34 
	#__off_t_deföed


	)

37 #i‚de‡
__mode_t_deföed


38 
__mode_t
 
	tmode_t
;

39 
	#__mode_t_deföed


	)

42 
	~<bôs/mm™.h
>

45 
	#MAP_FAILED
 ((*Ë-1)

	)

47 
	g__BEGIN_DECLS


57 #i‚de‡
__USE_FILE_OFFSET64


58 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

59 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

61 #ifde‡
__REDIRECT_NTH


62 * 
	`__REDIRECT_NTH
 (
mm≠
,

63 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

64 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

65 
mm≠64
);

67 
	#mm≠
 
mm≠64


	)

70 #ifde‡
__USE_LARGEFILE64


71 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

72 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

77 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

82 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

90 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

92 #ifde‡
__USE_BSD


95 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

97 #ifde‡
__USE_XOPEN2K


99 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

104 
	$mlock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

107 
	$mu∆ock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

112 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

116 
	$mu∆ockÆl
 (Ë
__THROW
;

118 #ifde‡
__USE_MISC


124 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

125 
__THROW
;

128 #ifde‡
__USE_GNU


134 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

135 
__Êags
, ...Ë
__THROW
;

139 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

140 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

145 
	`shm_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

148 
	`shm_u∆ök
 (
__c⁄°
 *
__«me
);

150 
__END_DECLS


	@/usr/include/sys/shm.h

19 #i‚de‡
_SYS_SHM_H


20 
	#_SYS_SHM_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

28 
	~<sys/ùc.h
>

31 
	~<bôs/shm.h
>

34 
	#__√ed_time_t


	)

35 
	~<time.h
>

37 #ifde‡
__USE_XOPEN


38 #i‚de‡
__pid_t_deföed


39 
__pid_t
 
	tpid_t
;

40 
	#__pid_t_deföed


	)

45 
__BEGIN_DECLS


51 
	$shm˘l
 (
__shmid
, 
__cmd
, 
shmid_ds
 *
__buf
Ë
__THROW
;

54 
	$shmgë
 (
key_t
 
__key
, 
size_t
 
__size
, 
__shmÊg
Ë
__THROW
;

57 *
	$shm©
 (
__shmid
, 
__c⁄°
 *
__shmaddr
, 
__shmÊg
)

58 
__THROW
;

61 
	$shmdt
 (
__c⁄°
 *
__shmaddr
Ë
__THROW
;

63 
__END_DECLS


	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

149 #ñi‡
deföed
 
__USE_XOPEN2K


150 
	#S_ISSOCK
(
mode
Ë0

	)

157 #ifdef 
__USE_POSIX199309


158 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

159 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

160 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

166 
	#S_ISUID
 
__S_ISUID


	)

167 
	#S_ISGID
 
__S_ISGID


	)

169 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


171 
	#S_ISVTX
 
__S_ISVTX


	)

174 
	#S_IRUSR
 
__S_IREAD


	)

175 
	#S_IWUSR
 
__S_IWRITE


	)

176 
	#S_IXUSR
 
__S_IEXEC


	)

178 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

180 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


181 
	#S_IREAD
 
S_IRUSR


	)

182 
	#S_IWRITE
 
S_IWUSR


	)

183 
	#S_IEXEC
 
S_IXUSR


	)

186 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

187 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

188 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

190 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

192 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

193 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

194 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

196 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

199 #ifdef 
__USE_BSD


201 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

202 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

203 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

205 
	#S_BLKSIZE
 512

	)

209 #i‚de‡
__USE_FILE_OFFSET64


211 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

212 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

216 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

218 #ifde‡
__REDIRECT_NTH


219 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

220 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

221 
	`__n⁄nuŒ
 ((1, 2));

222 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

223 
	`__n⁄nuŒ
 ((2));

225 
	#°©
 
°©64


	)

226 
	#f°©
 
f°©64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

231 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

232 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

235 #ifde‡
__USE_ATFILE


239 #i‚de‡
__USE_FILE_OFFSET64


240 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

241 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

242 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

244 #ifde‡
__REDIRECT_NTH


245 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

246 
°©
 *
__ª°ri˘
 
__buf
,

247 
__Êag
),

248 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

250 
	#f°©©
 
f°©©64


	)

254 #ifde‡
__USE_LARGEFILE64


255 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

256 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

257 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

261 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


262 #i‚de‡
__USE_FILE_OFFSET64


265 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

266 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

268 #ifde‡
__REDIRECT_NTH


269 
	`__REDIRECT_NTH
 (
l°©
,

270 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

271 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 
	#l°©
 
l°©64


	)

277 #ifde‡
__USE_LARGEFILE64


278 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

279 
°©64
 *
__ª°ri˘
 
__buf
)

280 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

286 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_BSD


293 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


299 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

302 #ifde‡
__USE_ATFILE


305 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
,

306 
__Êag
)

307 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

314 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

316 #ifdef 
__USE_GNU


319 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

323 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

326 #ifde‡
__USE_ATFILE


330 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

331 
__THROW
 
	`__n⁄nuŒ
 ((2));

337 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


338 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1));

341 #ifde‡
__USE_ATFILE


345 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

346 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

352 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 #ifde‡
__USE_ATFILE


359 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

360 
__THROW
 
	`__n⁄nuŒ
 ((2));

363 #ifde‡
__USE_ATFILE


366 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

367 
__c⁄°
 
time•ec
 
__times
[2],

368 
__Êags
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2));

372 #ifde‡
__USE_XOPEN2K8


374 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

392 #i‚de‡
_STAT_VER


393 
	#_STAT_VER
 0

	)

395 #i‚de‡
_MKNOD_VER


396 
	#_MKNOD_VER
 0

	)

400 #i‚de‡
__USE_FILE_OFFSET64


401 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

402 
__THROW
 
	`__n⁄nuŒ
 ((3));

403 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

406 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

407 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

408 
°©
 *
__°©_buf
, 
__Êag
)

409 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

411 #ifde‡
__REDIRECT_NTH


412 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

413 
°©
 *
__°©_buf
), 
__fx°©64
)

414 
	`__n⁄nuŒ
 ((3));

415 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

416 
°©
 *
__°©_buf
), 
__x°©64
)

417 
	`__n⁄nuŒ
 ((2, 3));

418 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

419 
°©
 *
__°©_buf
), 
__lx°©64
)

420 
	`__n⁄nuŒ
 ((2, 3));

421 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

422 
__c⁄°
 *
__fûíame
,

423 
°©
 *
__°©_buf
, 
__Êag
),

424 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

427 
	#__fx°©
 
__fx°©64


	)

428 
	#__x°©
 
__x°©64


	)

429 
	#__lx°©
 
__lx°©64


	)

433 #ifde‡
__USE_LARGEFILE64


434 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

435 
__THROW
 
	`__n⁄nuŒ
 ((3));

436 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

439 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

441 
°©64
 *
__°©_buf
, 
__Êag
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

444 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

445 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

447 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

448 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

449 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

451 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


454 
__exã∫_ölöe
 

455 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

457  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

458 
	}
}

460 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


461 
__exã∫_ölöe
 

462 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

464  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

465 
	}
}

468 
__exã∫_ölöe
 

469 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

471  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

472 
	}
}

474 #ifde‡
__USE_ATFILE


475 
__exã∫_ölöe
 

476 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

477 
__Êag
))

479  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

480 
	}
}

483 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


484 
__exã∫_ölöe
 

485 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

487  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

488 
	}
}

491 #ifde‡
__USE_ATFILE


492 
__exã∫_ölöe
 

493 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

494 
__dev_t
 
__dev
))

496  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

497 
	}
}

500 #i‡
deföed
 
__USE_LARGEFILE64
 \

501 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

502 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

503 
__exã∫_ölöe
 

504 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

506  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

507 
	}
}

509 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


510 
__exã∫_ölöe
 

511 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

513  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

514 
	}
}

517 
__exã∫_ölöe
 

518 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

520  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

521 
	}
}

523 #ifde‡
__USE_ATFILE


524 
__exã∫_ölöe
 

525 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

526 
__Êag
))

528  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

529 
	}
}

536 
	g__END_DECLS


	@/usr/include/sys/syscall.h

19 #i‚de‡
_SYSCALL_H


20 
	#_SYSCALL_H
 1

	)

25 
	~<asm/uni°d.h
>

27 #i‚de‡
_LIBC


32 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_GNU


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/times.h

23 #i‚def 
_SYS_TIMES_H


24 
	#_SYS_TIMES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	#__√ed_˛ock_t


	)

29 
	~<time.h
>

32 
__BEGIN_DECLS


35 
	stms


37 
˛ock_t
 
	mtms_utime
;

38 
˛ock_t
 
	mtms_°ime
;

40 
˛ock_t
 
	mtms_cutime
;

41 
˛ock_t
 
	mtms_c°ime
;

49 
˛ock_t
 
	$times
 (
tms
 *
__buf„r
Ë
__THROW
;

51 
__END_DECLS


	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
	$ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

41 
__wur
;

51 
ssize_t
 
	$wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

52 
__wur
;

55 #ifde‡
__USE_BSD


56 #i‚de‡
__USE_FILE_OFFSET64


66 
ssize_t
 
	$¥ódv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

67 
__off_t
 
__off£t
Ë
__wur
;

78 
ssize_t
 
	$pwrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

79 
__off_t
 
__off£t
Ë
__wur
;

81 #ifde‡
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

83 
__cou¡
, 
__off64_t
 
__off£t
),

84 
¥ódv64
Ë
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

86 
__cou¡
, 
__off64_t
 
__off£t
),

87 
pwrôev64
Ë
__wur
;

89 
	#¥ódv
 
¥ódv64


	)

90 
	#pwrôev
 
pwrôev64


	)

94 #ifde‡
__USE_LARGEFILE64


104 
ssize_t
 
	$¥ódv64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

105 
__off64_t
 
__off£t
Ë
__wur
;

116 
ssize_t
 
	$pwrôev64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

117 
__off64_t
 
__off£t
Ë
__wur
;

121 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

444 || 
deföed
 
__USE_BSD


449 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

450 
__THROW
;

457 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

466 
	`∑u£
 ();

470 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

471 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

473 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


475 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

480 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

481 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

485 #ifde‡
__USE_ATFILE


488 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

489 
__gid_t
 
__group
, 
__Êag
)

490 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

494 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

508 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

510 #ifdef 
__USE_GNU


514 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

517 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

518 || 
deföed
 
__USE_BSD


522 *
	$gëwd
 (*
__buf
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

528 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

531 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

533 #ifde‡
__USE_GNU


536 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

540 **
__ívú⁄
;

541 #ifde‡
__USE_GNU


542 **
ívú⁄
;

548 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

549 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 #ifde‡
__USE_XOPEN2K8


554 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

555 
__THROW
 
	`__n⁄nuŒ
 ((2));

560 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

570 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifde‡
__USE_GNU


587 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

588 *
__c⁄°
 
__ívp
[])

589 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

593 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


595 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

600 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

606 
	~<bôs/c⁄‚ame.h
>

609 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

610 
__THROW
 
	`__n⁄nuŒ
 ((1));

613 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

616 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

618 #ifdef 
__USE_POSIX2


620 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

625 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

628 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

632 #i‚de‡
__FAVOR_BSD


633 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

635 #ifde‡
__REDIRECT_NTH


636 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

638 
	#gëpgΩ
 
__gëpgid


	)

643 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

644 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


645 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

652 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

654 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


665 #i‚de‡
__FAVOR_BSD


669 
	$£çgΩ
 (Ë
__THROW
;

674 #ifde‡
__REDIRECT_NTH


675 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

677 
	#£çgΩ
 
£çgid


	)

686 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

688 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


690 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

694 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

697 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

700 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

708 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

710 #ifdef 
__USE_GNU


712 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

719 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

721 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


724 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


729 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

736 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

738 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


741 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

744 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


746 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

749 #ifde‡
__USE_GNU


752 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

753 
__THROW
;

757 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

758 
__THROW
;

762 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

763 
__THROW
;

767 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

768 
__THROW
;

775 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

777 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

778 || 
deföed
 
__USE_BSD


783 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 *
	$ây«me
 (
__fd
Ë
__THROW
;

793 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

794 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

798 
	$ißây
 (
__fd
Ë
__THROW
;

800 #i‡
deföed
 
__USE_BSD
 \

801 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

804 
	$ây¶Ÿ
 (Ë
__THROW
;

809 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 #ifde‡
__USE_ATFILE


815 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

816 
__c⁄°
 *
__to
, 
__Êags
)

817 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

820 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


822 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

828 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

829 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

833 #ifde‡
__USE_ATFILE


835 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

836 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

839 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

840 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

841 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

845 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

847 #ifde‡
__USE_ATFILE


849 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

850 
__THROW
 
	`__n⁄nuŒ
 ((2));

854 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

858 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

861 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

868 *
	`gëlogö
 ();

869 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


876 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

879 #ifdef 
__USE_BSD


881 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #ifdef 
__USE_POSIX2


889 
	#__√ed_gë›t


	)

890 
	~<gë›t.h
>

894 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


898 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

902 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

905 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

906 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

910 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

916 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

925 
	$vh™gup
 (Ë
__THROW
;

928 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

936 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

937 
size_t
 
__off£t
, 
__sˇÀ
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

948 *
	$gëu£rshñl
 (Ë
__THROW
;

949 
	$ídu£rshñl
 (Ë
__THROW
;

950 
	$£tu£rshñl
 (Ë
__THROW
;

956 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

960 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

963 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

967 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

971 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


976 
	`fsync
 (
__fd
);

980 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


983 
	`gëho°id
 ();

986 
	$sync
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


992 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

997 
	$gëdèbÀsize
 (Ë
__THROW
;

1003 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1006 #i‚de‡
__USE_FILE_OFFSET64


1007 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1010 #ifde‡
__REDIRECT_NTH


1011 
	`__REDIRECT_NTH
 (
åunˇã
,

1012 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1013 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1015 
	#åunˇã
 
åunˇã64


	)

1018 #ifde‡
__USE_LARGEFILE64


1019 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1025 #i‚de‡
__USE_FILE_OFFSET64


1026 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1028 #ifde‡
__REDIRECT_NTH


1029 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1030 
·runˇã64
Ë
__wur
;

1032 
	#·runˇã
 
·runˇã64


	)

1035 #ifde‡
__USE_LARGEFILE64


1036 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1043 || 
deföed
 
__USE_MISC


1047 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1053 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1057 #ifde‡
__USE_MISC


1068 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1073 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1085 
	#F_ULOCK
 0

	)

1086 
	#F_LOCK
 1

	)

1087 
	#F_TLOCK
 2

	)

1088 
	#F_TEST
 3

	)

1090 #i‚de‡
__USE_FILE_OFFSET64


1091 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1093 #ifde‡
__REDIRECT


1094 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1095 
lockf64
Ë
__wur
;

1097 
	#lockf
 
lockf64


	)

1100 #ifde‡
__USE_LARGEFILE64


1101 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1106 #ifde‡
__USE_GNU


1111 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1112 (
__exãnsi⁄__
 \

1113 ({ 
__ªsu…
; \

1114 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1115 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1116 
__ªsu…
; 
	}
}))

	)

1119 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1122 
fd©async
 (
__fûdes
);

1128 #ifdef 
__USE_XOPEN


1130 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1131 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1135 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1142 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1143 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1151 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1156 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1157 
	~<bôs/uni°d.h
>

1160 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/asm/unistd.h

1 #ifde‡
__i386__


2 
	~"uni°d_32.h
"

4 
	~"uni°d_64.h
"

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

673 
	m_CS_V6_ENV
,

674 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

675 
	m_CS_V7_ENV


676 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
ERFKILL


42 
	#ERFKILL
 132

	)

45 #i‚de‡
__ASSEMBLER__


47 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

49 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


51 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

56 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


60 
	#EDOM
 33

	)

61 
	#EILSEQ
 84

	)

62 
	#ERANGE
 34

	)

	@/usr/include/bits/ipc.h

19 #i‚de‡
_SYS_IPC_H


23 
	~<bôs/ty≥s.h
>

26 
	#IPC_CREAT
 01000

	)

27 
	#IPC_EXCL
 02000

	)

28 
	#IPC_NOWAIT
 04000

	)

31 
	#IPC_RMID
 0

	)

32 
	#IPC_SET
 1

	)

33 
	#IPC_STAT
 2

	)

34 #ifde‡
__USE_GNU


35 
	#IPC_INFO
 3

	)

39 
	#IPC_PRIVATE
 ((
__key_t
Ë0Ë

	)

43 
	sùc_≥rm


45 
__key_t
 
	m__key
;

46 
__uid_t
 
	muid
;

47 
__gid_t
 
	mgid
;

48 
__uid_t
 
	mcuid
;

49 
__gid_t
 
	mcgid
;

50 
	mmode
;

51 
	m__∑d1
;

52 
	m__£q
;

53 
	m__∑d2
;

54 
	m__unu£d1
;

55 
	m__unu£d2
;

	@/usr/include/bits/ipctypes.h

24 #i‚de‡
_BITS_IPCTYPES_H


25 
	#_BITS_IPCTYPES_H
 1

	)

27 
	~<bôs/ty≥s.h
>

30 #i‡
__WORDSIZE
 == 32

31 
	t__ùc_pid_t
;

33 
	t__ùc_pid_t
;

	@/usr/include/bits/mman.h

20 #i‚de‡
_SYS_MMAN_H


33 
	#PROT_READ
 0x1

	)

34 
	#PROT_WRITE
 0x2

	)

35 
	#PROT_EXEC
 0x4

	)

36 
	#PROT_NONE
 0x0

	)

37 
	#PROT_GROWSDOWN
 0x01000000

	)

39 
	#PROT_GROWSUP
 0x02000000

	)

43 
	#MAP_SHARED
 0x01

	)

44 
	#MAP_PRIVATE
 0x02

	)

45 #ifde‡
__USE_MISC


46 
	#MAP_TYPE
 0x0‡

	)

50 
	#MAP_FIXED
 0x10

	)

51 #ifde‡
__USE_MISC


52 
	#MAP_FILE
 0

	)

53 
	#MAP_ANONYMOUS
 0x20

	)

54 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

55 
	#MAP_32BIT
 0x40

	)

59 #ifde‡
__USE_MISC


60 
	#MAP_GROWSDOWN
 0x00100

	)

61 
	#MAP_DENYWRITE
 0x00800

	)

62 
	#MAP_EXECUTABLE
 0x01000

	)

63 
	#MAP_LOCKED
 0x02000

	)

64 
	#MAP_NORESERVE
 0x04000

	)

65 
	#MAP_POPULATE
 0x08000

	)

66 
	#MAP_NONBLOCK
 0x10000

	)

67 
	#MAP_STACK
 0x20000

	)

68 
	#MAP_HUGETLB
 0x40000

	)

72 
	#MS_ASYNC
 1

	)

73 
	#MS_SYNC
 4

	)

74 
	#MS_INVALIDATE
 2

	)

77 
	#MCL_CURRENT
 1

	)

78 
	#MCL_FUTURE
 2

	)

82 #ifde‡
__USE_GNU


83 
	#MREMAP_MAYMOVE
 1

	)

84 
	#MREMAP_FIXED
 2

	)

88 #ifde‡
__USE_BSD


89 
	#MADV_NORMAL
 0

	)

90 
	#MADV_RANDOM
 1

	)

91 
	#MADV_SEQUENTIAL
 2

	)

92 
	#MADV_WILLNEED
 3

	)

93 
	#MADV_DONTNEED
 4

	)

94 
	#MADV_REMOVE
 9

	)

95 
	#MADV_DONTFORK
 10

	)

96 
	#MADV_DOFORK
 11

	)

97 
	#MADV_MERGEABLE
 12

	)

98 
	#MADV_UNMERGEABLE
 13

	)

99 
	#MADV_DONTDUMP
 16

	)

101 
	#MADV_DODUMP
 17

	)

102 
	#MADV_HWPOISON
 100

	)

106 #ifde‡
__USE_XOPEN2K


107 
	#POSIX_MADV_NORMAL
 0

	)

108 
	#POSIX_MADV_RANDOM
 1

	)

109 
	#POSIX_MADV_SEQUENTIAL
 2

	)

110 
	#POSIX_MADV_WILLNEED
 3

	)

111 
	#POSIX_MADV_DONTNEED
 4

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

193 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

35 
	#SCHED_IDLE
 5

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_MISC


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWUTS
 0x04000000

	)

66 
	#CLONE_NEWIPC
 0x08000000

	)

67 
	#CLONE_NEWUSER
 0x10000000

	)

68 
	#CLONE_NEWPID
 0x20000000

	)

69 
	#CLONE_NEWNET
 0x40000000

	)

70 
	#CLONE_IO
 0x80000000

	)

74 
	ssched_∑øm


76 
	m__sched_¥i‹ôy
;

79 
	g__BEGIN_DECLS


81 #ifde‡
__USE_MISC


83 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

84 
__Êags
, *
__¨g
, ...Ë
__THROW
;

87 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

90 
	$sched_gë˝u
 (Ë
__THROW
;

93 
__END_DECLS


97 #i‡!
deföed
 
__deföed_sched∑øm
 \

98 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

99 
	#__deföed_sched∑øm
 1

	)

101 
	s__sched_∑øm


103 
__sched_¥i‹ôy
;

105 #unde‡
__√ed_sched∑øm


109 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


110 
	#__˝u_£t_t_deföed


	)

112 
	#__CPU_SETSIZE
 1024

	)

113 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

116 
	t__˝u_mask
;

119 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

120 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

125 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

126 } 
	t˝u_£t_t
;

129 #i‡
	`__GNUC_PREREQ
 (2, 91)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

131 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

135 
size_t
 
__i
; \

136 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

137 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

138 
__i
 = 0; __ò< 
__imax
; ++__i) \

139 
__bôs
[
__i
] = 0; \

140 
	}
} 0)

	)

142 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

143 (
__exãnsi⁄__
 \

144 ({ 
size_t
 
__˝u
 = (
˝u
); \

145 
__˝u
 < 8 * (
£tsize
) \

146 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

147 |
	`__CPUMASK
 (
__˝u
)) \

148 : 0; }))

	)

149 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

150 (
__exãnsi⁄__
 \

151 ({ 
size_t
 
__˝u
 = (
˝u
); \

152 
__˝u
 < 8 * (
£tsize
) \

153 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

154 &~
	`__CPUMASK
 (
__˝u
)) \

155 : 0; }))

	)

156 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

157 (
__exãnsi⁄__
 \

158 ({ 
size_t
 
__˝u
 = (
˝u
); \

159 
__˝u
 < 8 * (
£tsize
) \

160 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

161 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

162 : 0; }))

	)

164 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

165 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

167 #i‡
__GNUC_PREREQ
 (2, 91)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
__exãnsi⁄__
 \

173 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

174 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

175 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

176 
size_t
 
__i
; \

177 
__i
 = 0; __ò< 
__imax
; ++__i) \

178 i‡(
__bôs
[
__i
] != __bits[__i]) \

180 
__i
 =
__imax
; }))

	)

183 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

184 (
__exãnsi⁄__
 \

185 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

186 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

187 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

188 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

189 
size_t
 
__i
; \

190 
__i
 = 0; __ò< 
__imax
; ++__i) \

191 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

192 
__de°
; }))

	)

194 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

195 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

196 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

197 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

199 
__BEGIN_DECLS


201 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

202 
__THROW
;

203 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

204 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

206 
__END_DECLS


	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/shm.h

20 #i‚de‡
_SYS_SHM_H


24 
	~<bôs/ty≥s.h
>

27 
	#SHM_R
 0400

	)

28 
	#SHM_W
 0200

	)

31 
	#SHM_RDONLY
 010000

	)

32 
	#SHM_RND
 020000

	)

33 
	#SHM_REMAP
 040000

	)

34 
	#SHM_EXEC
 0100000

	)

37 
	#SHM_LOCK
 11

	)

38 
	#SHM_UNLOCK
 12

	)

40 
	g__BEGIN_DECLS


43 
	#SHMLBA
 (
	`__gë∑gesize
 ())

	)

44 
	$__gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

48 
	tshm©t_t
;

51 
	sshmid_ds


53 
ùc_≥rm
 
shm_≥rm
;

54 
size_t
 
shm_£gsz
;

55 
__time_t
 
shm_©ime
;

56 #i‡
__WORDSIZE
 == 32

57 
__unu£d1
;

59 
__time_t
 
shm_dtime
;

60 #i‡
__WORDSIZE
 == 32

61 
__unu£d2
;

63 
__time_t
 
shm_˘ime
;

64 #i‡
__WORDSIZE
 == 32

65 
__unu£d3
;

67 
__pid_t
 
shm_˝id
;

68 
__pid_t
 
shm_Õid
;

69 
shm©t_t
 
shm_«âch
;

70 
__unu£d4
;

71 
__unu£d5
;

74 #ifde‡
__USE_MISC


77 
	#SHM_STAT
 13

	)

78 
	#SHM_INFO
 14

	)

81 
	#SHM_DEST
 01000

	)

82 
	#SHM_LOCKED
 02000

	)

83 
	#SHM_HUGETLB
 04000

	)

84 
	#SHM_NORESERVE
 010000

	)

86 
	sshmöfo


88 
shmmax
;

89 
shmmö
;

90 
shmmni
;

91 
shm£g
;

92 
shmÆl
;

93 
__unu£d1
;

94 
__unu£d2
;

95 
__unu£d3
;

96 
__unu£d4
;

99 
	sshm_öfo


101 
u£d_ids
;

102 
shm_tŸ
;

103 
shm_rss
;

104 
shm_swp
;

105 
sw≠_©ãm±s
;

106 
sw≠_suc˚s£s
;

111 
__END_DECLS


	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

61 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


62 
	#SA_RESTART
 0x10000000

	)

63 
	#SA_NODEFER
 0x40000000

	)

65 
	#SA_RESETHAND
 0x80000000

	)

67 #ifde‡
__USE_MISC


68 
	#SA_INTERRUPT
 0x20000000

	)

71 
	#SA_NOMASK
 
SA_NODEFER


	)

72 
	#SA_ONESHOT
 
SA_RESETHAND


	)

73 
	#SA_STACK
 
SA_ONSTACK


	)

77 
	#SIG_BLOCK
 0

	)

78 
	#SIG_UNBLOCK
 1

	)

79 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/stat.h

19 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_STAT_H


24 
	#_BITS_STAT_H
 1

	)

27 
	#_STAT_VER_KERNEL
 0

	)

29 #i‡
__WORDSIZE
 == 32

30 
	#_STAT_VER_SVR4
 2

	)

31 
	#_STAT_VER_LINUX
 3

	)

34 
	#_MKNOD_VER_LINUX
 1

	)

35 
	#_MKNOD_VER_SVR4
 2

	)

36 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‡
__WORDSIZE
 == 32

50 
	m__∑d1
;

52 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‡
__WORDSIZE
 == 32

58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #i‡
__WORDSIZE
 == 64

67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‡
__WORDSIZE
 == 32

71 
	m__∑d2
;

73 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
	m°_˘imí£c
;

105 #i‡
__WORDSIZE
 == 64

106 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #i‡
__WORDSIZE
 == 64

123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #i‡
__WORDSIZE
 == 64

135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

155 
	#°_©ime
 
°_©im
.
tv_£c


	)

156 
	#°_mtime
 
°_mtim
.
tv_£c


	)

157 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

159 
__time_t
 
	m°_©ime
;

160 
	m°_©imí£c
;

161 
__time_t
 
	m°_mtime
;

162 
	m°_mtimí£c
;

163 
__time_t
 
	m°_˘ime
;

164 
	m°_˘imí£c
;

166 #i‡
__WORDSIZE
 == 64

167 
	m__unu£d
[3];

169 
__öo64_t
 
	m°_öo
;

175 
	#_STATBUF_ST_BLKSIZE


	)

176 
	#_STATBUF_ST_RDEV


	)

178 
	#_STATBUF_ST_NSEC


	)

182 
	#__S_IFMT
 0170000

	)

185 
	#__S_IFDIR
 0040000

	)

186 
	#__S_IFCHR
 0020000

	)

187 
	#__S_IFBLK
 0060000

	)

188 
	#__S_IFREG
 0100000

	)

189 
	#__S_IFIFO
 0010000

	)

190 
	#__S_IFLNK
 0120000

	)

191 
	#__S_IFSOCK
 0140000

	)

195 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

196 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

197 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

201 
	#__S_ISUID
 04000

	)

202 
	#__S_ISGID
 02000

	)

203 
	#__S_ISVTX
 01000

	)

204 
	#__S_IREAD
 0400

	)

205 
	#__S_IWRITE
 0200

	)

206 
	#__S_IEXEC
 0100

	)

208 #ifde‡
__USE_ATFILE


209 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

210 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__Àn
))

58  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

59 
	}
}

61 #ifde‡
__USE_GNU


62 
__exã∫_Æways_ölöe
 *

63 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

64 
size_t
 
__Àn
))

66  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

67 
	}
}

76 
__exã∫_Æways_ölöe
 *

77 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

80 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__Àn
))

92 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

93 
	}
}

95 
__exã∫_Æways_ölöe
 

96 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

98 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

99 
	}
}

102 
__exã∫_Æways_ölöe
 *

103 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

105  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

106 
	}
}

108 #ifde‡
__USE_GNU


109 
__exã∫_Æways_ölöe
 *

110 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

112  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

113 
	}
}

117 
__exã∫_Æways_ölöe
 *

118 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

119 
size_t
 
__Àn
))

121  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

122 
	}
}

125 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

126 
size_t
 
__de°Àn
Ë
__THROW
;

127 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

128 
__c⁄°
 *
__§c
,

129 
size_t
 
__n
), 
°≤˝y
);

131 
__exã∫_Æways_ölöe
 *

132 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

134 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

135 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

136  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

137  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

138 
	}
}

141 
__exã∫_Æways_ölöe
 *

142 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

144  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

145 
	}
}

148 
__exã∫_Æways_ölöe
 *

149 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

150 
size_t
 
__Àn
))

152  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

153 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


7 
	~<bôs/w‹dsize.h
>

9 
	#SYS__sys˘l
 
__NR__sys˘l


	)

10 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

11 
	#SYS_ac˘
 
__NR_ac˘


	)

12 
	#SYS_add_key
 
__NR_add_key


	)

13 
	#SYS_adjtimex
 
__NR_adjtimex


	)

14 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

15 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

16 
	#SYS_brk
 
__NR_brk


	)

17 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

18 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

19 
	#SYS_chdú
 
__NR_chdú


	)

20 
	#SYS_chmod
 
__NR_chmod


	)

21 
	#SYS_chown
 
__NR_chown


	)

22 
	#SYS_chroŸ
 
__NR_chroŸ


	)

23 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

24 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

25 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

26 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

27 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

28 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

29 
	#SYS_˛o£
 
__NR_˛o£


	)

30 
	#SYS_¸ót
 
__NR_¸ót


	)

31 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

32 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

33 
	#SYS_dup
 
__NR_dup


	)

34 
	#SYS_dup2
 
__NR_dup2


	)

35 
	#SYS_dup3
 
__NR_dup3


	)

36 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

37 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

38 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

39 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

40 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

41 
	#SYS_evítfd
 
__NR_evítfd


	)

42 
	#SYS_evítfd2
 
__NR_evítfd2


	)

43 
	#SYS_execve
 
__NR_execve


	)

44 
	#SYS_exô
 
__NR_exô


	)

45 
	#SYS_exô_group
 
__NR_exô_group


	)

46 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

47 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

48 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

49 
	#SYS_fchdú
 
__NR_fchdú


	)

50 
	#SYS_fchmod
 
__NR_fchmod


	)

51 
	#SYS_fchmod©
 
__NR_fchmod©


	)

52 
	#SYS_fchown
 
__NR_fchown


	)

53 
	#SYS_fchow«t
 
__NR_fchow«t


	)

54 
	#SYS_f˙é
 
__NR_f˙é


	)

55 
	#SYS_fd©async
 
__NR_fd©async


	)

56 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

57 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

58 
	#SYS_Êock
 
__NR_Êock


	)

59 
	#SYS_f‹k
 
__NR_f‹k


	)

60 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

61 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

62 
	#SYS_f°©
 
__NR_f°©


	)

63 
	#SYS_f°©fs
 
__NR_f°©fs


	)

64 
	#SYS_fsync
 
__NR_fsync


	)

65 
	#SYS_·runˇã
 
__NR_·runˇã


	)

66 
	#SYS_fuãx
 
__NR_fuãx


	)

67 
	#SYS_futimeßt
 
__NR_futimeßt


	)

68 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

69 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

70 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

71 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

72 
	#SYS_gëcwd
 
__NR_gëcwd


	)

73 
	#SYS_gëdíts
 
__NR_gëdíts


	)

74 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

75 
	#SYS_gëegid
 
__NR_gëegid


	)

76 
	#SYS_gëeuid
 
__NR_gëeuid


	)

77 
	#SYS_gëgid
 
__NR_gëgid


	)

78 
	#SYS_gëgroups
 
__NR_gëgroups


	)

79 
	#SYS_gëôimî
 
__NR_gëôimî


	)

80 
	#SYS_gëpgid
 
__NR_gëpgid


	)

81 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

82 
	#SYS_gëpid
 
__NR_gëpid


	)

83 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

84 
	#SYS_gëµid
 
__NR_gëµid


	)

85 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

86 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

87 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

88 
	#SYS_gëæimô
 
__NR_gëæimô


	)

89 
	#SYS_gërußge
 
__NR_gërußge


	)

90 
	#SYS_gësid
 
__NR_gësid


	)

91 
	#SYS_gëtid
 
__NR_gëtid


	)

92 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

93 
	#SYS_gëuid
 
__NR_gëuid


	)

94 
	#SYS_gëx©å
 
__NR_gëx©å


	)

95 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

96 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

97 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

98 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

99 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

100 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

101 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

102 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

103 
	#SYS_io_£tup
 
__NR_io_£tup


	)

104 
	#SYS_io_submô
 
__NR_io_submô


	)

105 
	#SYS_io˘l
 
__NR_io˘l


	)

106 
	#SYS_i›îm
 
__NR_i›îm


	)

107 
	#SYS_i›l
 
__NR_i›l


	)

108 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

109 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

110 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

111 
	#SYS_key˘l
 
__NR_key˘l


	)

112 
	#SYS_kûl
 
__NR_kûl


	)

113 
	#SYS_lchown
 
__NR_lchown


	)

114 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

115 
	#SYS_lök
 
__NR_lök


	)

116 
	#SYS_lök©
 
__NR_lök©


	)

117 
	#SYS_li°x©å
 
__NR_li°x©å


	)

118 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

119 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

120 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

121 
	#SYS_l£ek
 
__NR_l£ek


	)

122 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

123 
	#SYS_l°©
 
__NR_l°©


	)

124 
	#SYS_madvi£
 
__NR_madvi£


	)

125 
	#SYS_mböd
 
__NR_mböd


	)

126 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

127 
	#SYS_möc‹e
 
__NR_möc‹e


	)

128 
	#SYS_mkdú
 
__NR_mkdú


	)

129 
	#SYS_mkdú©
 
__NR_mkdú©


	)

130 
	#SYS_mknod
 
__NR_mknod


	)

131 
	#SYS_mknod©
 
__NR_mknod©


	)

132 
	#SYS_mlock
 
__NR_mlock


	)

133 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

134 
	#SYS_mm≠
 
__NR_mm≠


	)

135 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

136 
	#SYS_mou¡
 
__NR_mou¡


	)

137 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

138 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

139 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

140 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

141 
	#SYS_mq_›í
 
__NR_mq_›í


	)

142 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

143 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

144 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

145 
	#SYS_mªm≠
 
__NR_mªm≠


	)

146 
	#SYS_msync
 
__NR_msync


	)

147 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

148 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

149 
	#SYS_munm≠
 
__NR_munm≠


	)

150 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

151 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

152 
	#SYS_›í
 
__NR_›í


	)

153 
	#SYS_›í©
 
__NR_›í©


	)

154 
	#SYS_∑u£
 
__NR_∑u£


	)

155 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

156 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

157 
	#SYS_pùe
 
__NR_pùe


	)

158 
	#SYS_pùe2
 
__NR_pùe2


	)

159 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

160 
	#SYS_pﬁl
 
__NR_pﬁl


	)

161 
	#SYS_µﬁl
 
__NR_µﬁl


	)

162 
	#SYS_¥˘l
 
__NR_¥˘l


	)

163 
	#SYS_¥ód64
 
__NR_¥ód64


	)

164 
	#SYS_¥ódv
 
__NR_¥ódv


	)

165 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

166 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

167 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

168 
	#SYS_±ø˚
 
__NR_±ø˚


	)

169 
	#SYS_puçmsg
 
__NR_puçmsg


	)

170 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

171 
	#SYS_pwrôev
 
__NR_pwrôev


	)

172 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

173 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

174 
	#SYS_ªad
 
__NR_ªad


	)

175 
	#SYS_ªadahód
 
__NR_ªadahód


	)

176 
	#SYS_ªadlök
 
__NR_ªadlök


	)

177 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

178 
	#SYS_ªadv
 
__NR_ªadv


	)

179 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

180 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

181 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

182 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

183 
	#SYS_ª«me
 
__NR_ª«me


	)

184 
	#SYS_ª«mót
 
__NR_ª«mót


	)

185 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

186 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

187 
	#SYS_rmdú
 
__NR_rmdú


	)

188 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

189 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

190 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

191 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

192 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

193 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

194 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

195 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

196 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

197 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

198 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

199 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

200 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

201 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

202 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

203 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

204 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

205 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

206 
	#SYS_£À˘
 
__NR_£À˘


	)

207 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

208 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

209 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

210 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

211 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

212 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

213 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

214 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

215 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

216 
	#SYS_£tgid
 
__NR_£tgid


	)

217 
	#SYS_£tgroups
 
__NR_£tgroups


	)

218 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

219 
	#SYS_£tôimî
 
__NR_£tôimî


	)

220 
	#SYS_£äs
 
__NR_£äs


	)

221 
	#SYS_£çgid
 
__NR_£çgid


	)

222 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

223 
	#SYS_£åegid
 
__NR_£åegid


	)

224 
	#SYS_£åesgid
 
__NR_£åesgid


	)

225 
	#SYS_£åesuid
 
__NR_£åesuid


	)

226 
	#SYS_£åeuid
 
__NR_£åeuid


	)

227 
	#SYS_£ålimô
 
__NR_£ålimô


	)

228 
	#SYS_£tsid
 
__NR_£tsid


	)

229 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

230 
	#SYS_£tuid
 
__NR_£tuid


	)

231 
	#SYS_£tx©å
 
__NR_£tx©å


	)

232 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

233 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

234 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

235 
	#SYS_•li˚
 
__NR_•li˚


	)

236 
	#SYS_°©
 
__NR_°©


	)

237 
	#SYS_°©fs
 
__NR_°©fs


	)

238 
	#SYS_sw≠off
 
__NR_sw≠off


	)

239 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

240 
	#SYS_symlök
 
__NR_symlök


	)

241 
	#SYS_symlök©
 
__NR_symlök©


	)

242 
	#SYS_sync
 
__NR_sync


	)

243 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

244 
	#SYS_syncfs
 
__NR_syncfs


	)

245 
	#SYS_sysfs
 
__NR_sysfs


	)

246 
	#SYS_sysöfo
 
__NR_sysöfo


	)

247 
	#SYS_sy¶og
 
__NR_sy¶og


	)

248 
	#SYS_ãe
 
__NR_ãe


	)

249 
	#SYS_tgkûl
 
__NR_tgkûl


	)

250 
	#SYS_time
 
__NR_time


	)

251 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

252 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

253 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

254 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

255 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

256 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

257 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

258 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

259 
	#SYS_times
 
__NR_times


	)

260 
	#SYS_tkûl
 
__NR_tkûl


	)

261 
	#SYS_åunˇã
 
__NR_åunˇã


	)

262 
	#SYS_umask
 
__NR_umask


	)

263 
	#SYS_umou¡2
 
__NR_umou¡2


	)

264 
	#SYS_u«me
 
__NR_u«me


	)

265 
	#SYS_u∆ök
 
__NR_u∆ök


	)

266 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

267 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

268 
	#SYS_u£lib
 
__NR_u£lib


	)

269 
	#SYS_u°©
 
__NR_u°©


	)

270 
	#SYS_utime
 
__NR_utime


	)

271 
	#SYS_utimíßt
 
__NR_utimíßt


	)

272 
	#SYS_utimes
 
__NR_utimes


	)

273 
	#SYS_vf‹k
 
__NR_vf‹k


	)

274 
	#SYS_vh™gup
 
__NR_vh™gup


	)

275 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

276 
	#SYS_v£rvî
 
__NR_v£rvî


	)

277 
	#SYS_waô4
 
__NR_waô4


	)

278 
	#SYS_waôid
 
__NR_waôid


	)

279 
	#SYS_wrôe
 
__NR_wrôe


	)

280 
	#SYS_wrôev
 
__NR_wrôev


	)

281 #i‡
__WORDSIZE
 == 64

282 
	#SYS_ac˚±
 
__NR_ac˚±


	)

283 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

284 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

285 
	#SYS_böd
 
__NR_böd


	)

286 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

287 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

288 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

289 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

290 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

291 
	#SYS_gë_˝u
 
__NR_gë_˝u


	)

292 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

293 
	#SYS_gësock«me
 
__NR_gësock«me


	)

294 
	#SYS_gësock›t
 
__NR_gësock›t


	)

295 
	#SYS_li°í
 
__NR_li°í


	)

296 
	#SYS_msg˘l
 
__NR_msg˘l


	)

297 
	#SYS_msggë
 
__NR_msggë


	)

298 
	#SYS_msgrcv
 
__NR_msgrcv


	)

299 
	#SYS_msg¢d
 
__NR_msg¢d


	)

300 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

301 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

302 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

303 
	#SYS_¥limô64
 
__NR_¥limô64


	)

304 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

305 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

306 
	#SYS_£curôy
 
__NR_£curôy


	)

307 
	#SYS_£m˘l
 
__NR_£m˘l


	)

308 
	#SYS_£mgë
 
__NR_£mgë


	)

309 
	#SYS_£m›
 
__NR_£m›


	)

310 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

311 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

312 
	#SYS_£ndto
 
__NR_£ndto


	)

313 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

314 
	#SYS_shm©
 
__NR_shm©


	)

315 
	#SYS_shm˘l
 
__NR_shm˘l


	)

316 
	#SYS_shmdt
 
__NR_shmdt


	)

317 
	#SYS_shmgë
 
__NR_shmgë


	)

318 
	#SYS_shutdown
 
__NR_shutdown


	)

319 
	#SYS_sockë
 
__NR_sockë


	)

320 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

321 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

323 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

324 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

325 
	#SYS_bdÊush
 
__NR_bdÊush


	)

326 
	#SYS_bªak
 
__NR_bªak


	)

327 
	#SYS_chown32
 
__NR_chown32


	)

328 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

329 
	#SYS_fchown32
 
__NR_fchown32


	)

330 
	#SYS_f˙é64
 
__NR_f˙é64


	)

331 
	#SYS_f°©64
 
__NR_f°©64


	)

332 
	#SYS_f°©©64
 
__NR_f°©©64


	)

333 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

334 
	#SYS_·ime
 
__NR_·ime


	)

335 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

336 
	#SYS_gë˝u
 
__NR_gë˝u


	)

337 
	#SYS_gëegid32
 
__NR_gëegid32


	)

338 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

339 
	#SYS_gëgid32
 
__NR_gëgid32


	)

340 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

341 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

342 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

343 
	#SYS_gëuid32
 
__NR_gëuid32


	)

344 
	#SYS_gây
 
__NR_gây


	)

345 
	#SYS_idÀ
 
__NR_idÀ


	)

346 
	#SYS_ùc
 
__NR_ùc


	)

347 
	#SYS_lchown32
 
__NR_lchown32


	)

348 
	#SYS_lock
 
__NR_lock


	)

349 
	#SYS_l°©64
 
__NR_l°©64


	)

350 
	#SYS_madvi£1
 
__NR_madvi£1


	)

351 
	#SYS_mm≠2
 
__NR_mm≠2


	)

352 
	#SYS_mpx
 
__NR_mpx


	)

353 
	#SYS_ni˚
 
__NR_ni˚


	)

354 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

355 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

356 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

357 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

358 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

359 
	#SYS_¥of
 
__NR_¥of


	)

360 
	#SYS_¥ofû
 
__NR_¥ofû


	)

361 
	#SYS_ªaddú
 
__NR_ªaddú


	)

362 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

363 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

364 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

365 
	#SYS_£tgid32
 
__NR_£tgid32


	)

366 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

367 
	#SYS_£åegid32
 
__NR_£åegid32


	)

368 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

369 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

370 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

371 
	#SYS_£tuid32
 
__NR_£tuid32


	)

372 
	#SYS_sgëmask
 
__NR_sgëmask


	)

373 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

374 
	#SYS_sig«l
 
__NR_sig«l


	)

375 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

376 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

377 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

378 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

379 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

380 
	#SYS_s£tmask
 
__NR_s£tmask


	)

381 
	#SYS_°©64
 
__NR_°©64


	)

382 
	#SYS_°©fs64
 
__NR_°©fs64


	)

383 
	#SYS_°ime
 
__NR_°ime


	)

384 
	#SYS_°ty
 
__NR_°ty


	)

385 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

386 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

387 
	#SYS_ulimô
 
__NR_ulimô


	)

388 
	#SYS_umou¡
 
__NR_umou¡


	)

389 
	#SYS_vm86
 
__NR_vm86


	)

390 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

391 
	#SYS_waôpid
 
__NR_waôpid


	)

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

61 
	#TIMER_ABSTIME
 1

	)

67 #ifde‡
__√ed_timevÆ


68 #unde‡
__√ed_timevÆ


69 #i‚de‡
_STRUCT_TIMEVAL


70 
	#_STRUCT_TIMEVAL
 1

	)

71 
	~<bôs/ty≥s.h
>

75 
	stimevÆ


77 
__time_t
 
	mtv_£c
;

78 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

24 
	#__WCHAR_MAX
 (2147483647)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

96 #unde‡
__USE_ISOC99


97 #unde‡
__USE_ISOC95


98 #unde‡
__USE_POSIX


99 #unde‡
__USE_POSIX2


100 #unde‡
__USE_POSIX199309


101 #unde‡
__USE_POSIX199506


102 #unde‡
__USE_XOPEN


103 #unde‡
__USE_XOPEN_EXTENDED


104 #unde‡
__USE_UNIX98


105 #unde‡
__USE_XOPEN2K


106 #unde‡
__USE_XOPEN2KXSI


107 #unde‡
__USE_XOPEN2K8


108 #unde‡
__USE_XOPEN2K8XSI


109 #unde‡
__USE_LARGEFILE


110 #unde‡
__USE_LARGEFILE64


111 #unde‡
__USE_FILE_OFFSET64


112 #unde‡
__USE_BSD


113 #unde‡
__USE_SVID


114 #unde‡
__USE_MISC


115 #unde‡
__USE_ATFILE


116 #unde‡
__USE_GNU


117 #unde‡
__USE_REENTRANT


118 #unde‡
__USE_FORTIFY_LEVEL


119 #unde‡
__FAVOR_BSD


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

129 
	#__USE_ANSI
 1

	)

138 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


139 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

140 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

142 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

147 #i‡
deföed
 
_BSD_SOURCE
 && \

148 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

149 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

150 
	#__FAVOR_BSD
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_POSIX_SOURCE


160 
	#_POSIX_SOURCE
 1

	)

161 #unde‡
_POSIX_C_SOURCE


162 
	#_POSIX_C_SOURCE
 200809L

	)

163 #unde‡
_XOPEN_SOURCE


164 
	#_XOPEN_SOURCE
 700

	)

165 #unde‡
_XOPEN_SOURCE_EXTENDED


166 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

167 #unde‡
_LARGEFILE64_SOURCE


168 
	#_LARGEFILE64_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

180 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

181 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

182 
	#_BSD_SOURCE
 1

	)

183 
	#_SVID_SOURCE
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

192 
	#__USE_ISOC99
 1

	)

196 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

197 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

198 
	#__USE_ISOC95
 1

	)

203 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

204 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

205 
	#_POSIX_SOURCE
 1

	)

206 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

207 
	#_POSIX_C_SOURCE
 2

	)

208 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

209 
	#_POSIX_C_SOURCE
 199506L

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

211 
	#_POSIX_C_SOURCE
 200112L

	)

213 
	#_POSIX_C_SOURCE
 200809L

	)

215 
	#__USE_POSIX_IMPLICITLY
 1

	)

218 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


219 
	#__USE_POSIX
 1

	)

222 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


223 
	#__USE_POSIX2
 1

	)

226 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

227 
	#__USE_POSIX199309
 1

	)

230 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

231 
	#__USE_POSIX199506
 1

	)

234 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

235 
	#__USE_XOPEN2K
 1

	)

236 #unde‡
__USE_ISOC95


237 
	#__USE_ISOC95
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

243 
	#__USE_XOPEN2K8
 1

	)

244 #unde‡
_ATFILE_SOURCE


245 
	#_ATFILE_SOURCE
 1

	)

248 #ifdef 
_XOPEN_SOURCE


249 
	#__USE_XOPEN
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

251 
	#__USE_XOPEN_EXTENDED
 1

	)

252 
	#__USE_UNIX98
 1

	)

253 #unde‡
_LARGEFILE_SOURCE


254 
	#_LARGEFILE_SOURCE
 1

	)

255 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

257 
	#__USE_XOPEN2K8
 1

	)

258 
	#__USE_XOPEN2K8XSI
 1

	)

260 
	#__USE_XOPEN2K
 1

	)

261 
	#__USE_XOPEN2KXSI
 1

	)

262 #unde‡
__USE_ISOC95


263 
	#__USE_ISOC95
 1

	)

264 #unde‡
__USE_ISOC99


265 
	#__USE_ISOC99
 1

	)

268 #ifde‡
_XOPEN_SOURCE_EXTENDED


269 
	#__USE_XOPEN_EXTENDED
 1

	)

274 #ifde‡
_LARGEFILE_SOURCE


275 
	#__USE_LARGEFILE
 1

	)

278 #ifde‡
_LARGEFILE64_SOURCE


279 
	#__USE_LARGEFILE64
 1

	)

282 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

283 
	#__USE_FILE_OFFSET64
 1

	)

286 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


287 
	#__USE_MISC
 1

	)

290 #ifdef 
_BSD_SOURCE


291 
	#__USE_BSD
 1

	)

294 #ifdef 
_SVID_SOURCE


295 
	#__USE_SVID
 1

	)

298 #ifdef 
_ATFILE_SOURCE


299 
	#__USE_ATFILE
 1

	)

302 #ifdef 
_GNU_SOURCE


303 
	#__USE_GNU
 1

	)

306 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


307 
	#__USE_REENTRANT
 1

	)

310 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

311 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0

312 #i‡!
__GNUC_PREREQ
 (4, 1)

313 #ifde‡
__GNUC_RH_RELEASE__


314 #w¨nög 
_FORTIFY_SOURCE
 
suµ‹ãd
 
⁄ly
 
wôh
 
GCC
 4.1 
™d
 
œãr


316 
	#__USE_FORTIFY_LEVEL
 0

	)

317 #ñi‡
_FORTIFY_SOURCE
 > 1

318 
	#__USE_FORTIFY_LEVEL
 2

	)

320 
	#__USE_FORTIFY_LEVEL
 1

	)

323 
	#__USE_FORTIFY_LEVEL
 0

	)

327 
	#__STDC_IEC_559__
 1

	)

328 
	#__STDC_IEC_559_COMPLEX__
 1

	)

331 
	#__STDC_ISO_10646__
 200009L

	)

339 #unde‡
__GNU_LIBRARY__


340 
	#__GNU_LIBRARY__
 6

	)

344 
	#__GLIBC__
 2

	)

345 
	#__GLIBC_MINOR__
 12

	)

347 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

348 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

351 #i‡
deföed
 
__GNUC__
 \

352 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

353 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

354 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

355 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

359 #i‚de‡
__ASSEMBLER__


360 #i‚de‡
_SYS_CDEFS_H


361 
	~<sys/cdefs.h
>

366 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


367 
	#__USE_LARGEFILE
 1

	)

368 
	#__USE_LARGEFILE64
 1

	)

374 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

375 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

376 && 
deföed
 
	g__exã∫_ölöe


377 
	#__USE_EXTERN_INLINES
 1

	)

385 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
Ë
__THROW
;

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/infiniband/ofa_verbs.h

1 #i‚de‡
INFINIBAND_OFA_VERBS_H


2 
	#INFINIBAND_OFA_VERBS_H


	)

4 
	gibv_§q_öô_©å
;

5 
	gibv_cq
;

6 
	gibv_pd
;

7 
	gibv_qp_öô_©å
;

8 
	gibv_qp_©å
;

11 #ifde‡
__GNUC__


12 
	#DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

14 
	#DEPRECATED


	)

18 
	#LEGACY_XRC_SRQ_HANDLE
 0xffffffff

	)

20 
	sibv_xrc_domaö
 {

21 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

22 
uöt32_t
 
	mh™dÀ
;

25 
	sibv_§q_Àgacy
 {

26 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

27 *
	m§q_c⁄ãxt
;

28 
ibv_pd
 *
	mpd
;

29 
uöt32_t
 
	mh™dÀ
;

31 
uöt32_t
 
	mevíts_com∂ëed
;

33 
uöt32_t
 
	mxrc_§q_num_bö_com∑t
;

34 
ibv_xrc_domaö
 *
	mxrc_domaö_bö_com∑t
;

35 
ibv_cq
 *
	mxrc_cq_bö_com∑t
;

37 
±hªad_muãx_t
 
	mmuãx
;

38 
±hªad_c⁄d_t
 
	mc⁄d
;

40 *
	mibv_§q
;

44 
uöt32_t
 
	mxrc_§q_num
;

45 
ibv_xrc_domaö
 *
	mxrc_domaö
;

46 
ibv_cq
 *
	mxrc_cq
;

72 
ibv_xrc_domaö
 *
	$ibv_›í_xrc_domaö
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

73 
fd
, 
oÊag
Ë
DEPRECATED
;

89 
ibv_§q
 *
	$ibv_¸óã_xrc_§q
(
ibv_pd
 *
pd
,

90 
ibv_xrc_domaö
 *
xrc_domaö
,

91 
ibv_cq
 *
xrc_cq
,

92 
ibv_§q_öô_©å
 *
§q_öô_©å
Ë
DEPRECATED
;

102 
	$ibv_˛o£_xrc_domaö
(
ibv_xrc_domaö
 *
d
Ë
DEPRECATED
;

126 
	$ibv_¸óã_xrc_rcv_qp
(
ibv_qp_öô_©å
 *
öô_©å
,

127 
uöt32_t
 *
xrc_rcv_q≤
Ë
DEPRECATED
;

152 
	$ibv_modify_xrc_rcv_qp
(
ibv_xrc_domaö
 *
xrc_domaö
,

153 
uöt32_t
 
xrc_qp_num
,

154 
ibv_qp_©å
 *
©å
, 
©å_mask
Ë
DEPRECATED
;

168 
	$ibv_quîy_xrc_rcv_qp
(
ibv_xrc_domaö
 *
xrc_domaö
, 
uöt32_t
 
xrc_qp_num
,

169 
ibv_qp_©å
 *
©å
, 
©å_mask
,

170 
ibv_qp_öô_©å
 *
öô_©å
Ë
DEPRECATED
;

185 
	$ibv_ªg_xrc_rcv_qp
(
ibv_xrc_domaö
 *
xrc_domaö
,

186 
uöt32_t
 
xrc_qp_num
Ë
DEPRECATED
;

204 
	$ibv_uƒeg_xrc_rcv_qp
(
ibv_xrc_domaö
 *
xrc_domaö
,

205 
uöt32_t
 
xrc_qp_num
Ë
DEPRECATED
;

	@/usr/include/infiniband/verbs_exp.h

36 #i‚de‡
INFINIBAND_VERBS_EXP_H


37 
	#INFINIBAND_VERBS_EXP_H


	)

39 
	~<öföib™d/vîbs.h
>

40 
	~<°dio.h
>

42 #i‡
__GNUC__
 >= 3

43 
	#__©åibuã_c⁄°
 
	`__©åibuã__
((c⁄°))

	)

45 
	#__©åibuã_c⁄°


	)

48 
	gBEGIN_C_DECLS


50 
	#IBV_EXP_RET_ON_INVALID_COMP_MASK
(
vÆ
, 
vÆid_mask
, 
ªt
) \

51 i‡((
vÆ
Ë> (
vÆid_mask
)) { \

52 
	`Ârötf
(
°dîr
, "%s: invalid comp_mask !!! (comp_mask = 0x%x valid_mask = 0x%x)\n", \

53 
__FUNCTION__
, 
vÆ
, 
vÆid_mask
); \

54 
î∫o
 = 
EINVAL
; \

55  
ªt
; \

56 }

	)

58 
	#IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
vÆ
, 
vÆid_mask
) \

59 
	`IBV_EXP_RET_ON_INVALID_COMP_MASK
(
vÆ
, 
vÆid_mask
, 
NULL
)

	)

61 
	#IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
vÆ
, 
vÆid_mask
) \

62 
	`IBV_EXP_RET_ON_INVALID_COMP_MASK
(
vÆ
, 
vÆid_mask
, 
EINVAL
)

	)

65 
	#IBV_EXP_IMPLICIT_MR_SIZE
 (~((
size_t
)0))

	)

67 
	eibv_exp_func_«me
 {

68 
	mIBV_EXP_POST_SEND_FUNC
,

69 
	mIBV_EXP_POLL_CQ_FUNC
,

70 
	mIBV_POST_SEND_FUNC
,

71 
	mIBV_POLL_CQ_FUNC
,

72 
	mIBV_POST_RECV_FUNC


75 
	eibv_exp_°¨t_vÆues
 {

76 
	mIBV_EXP_START_ENUM
 = 0x40,

77 
	mIBV_EXP_START_FLAG_LOC
 = 0x20,

78 
	mIBV_EXP_START_FLAG
 = (1ULL << 
IBV_EXP_START_FLAG_LOC
),

84 
	eibv_exp_©omic_ˇp
 {

85 
	mIBV_EXP_ATOMIC_NONE
 = 
IBV_ATOMIC_NONE
,

86 
	mIBV_EXP_ATOMIC_HCA
 = 
IBV_ATOMIC_HCA
,

87 
	mIBV_EXP_ATOMIC_GLOB
 = 
IBV_ATOMIC_GLOB
,

89 
	mIBV_EXP_ATOMIC_HCA_REPLY_BE
 = 
IBV_EXP_START_ENUM


95 
	eibv_exp_devi˚_ˇp_Êags
 {

96 
	mIBV_EXP_DEVICE_RESIZE_MAX_WR
 = 
IBV_DEVICE_RESIZE_MAX_WR
,

97 
	mIBV_EXP_DEVICE_BAD_PKEY_CNTR
 = 
IBV_DEVICE_BAD_PKEY_CNTR
,

98 
	mIBV_EXP_DEVICE_BAD_QKEY_CNTR
 = 
IBV_DEVICE_BAD_QKEY_CNTR
,

99 
	mIBV_EXP_DEVICE_RAW_MULTI
 = 
IBV_DEVICE_RAW_MULTI
,

100 
	mIBV_EXP_DEVICE_AUTO_PATH_MIG
 = 
IBV_DEVICE_AUTO_PATH_MIG
,

101 
	mIBV_EXP_DEVICE_CHANGE_PHY_PORT
 = 
IBV_DEVICE_CHANGE_PHY_PORT
,

102 
	mIBV_EXP_DEVICE_UD_AV_PORT_ENFORCE
 = 
IBV_DEVICE_UD_AV_PORT_ENFORCE
,

103 
	mIBV_EXP_DEVICE_CURR_QP_STATE_MOD
 = 
IBV_DEVICE_CURR_QP_STATE_MOD
,

104 
	mIBV_EXP_DEVICE_SHUTDOWN_PORT
 = 
IBV_DEVICE_SHUTDOWN_PORT
,

105 
	mIBV_EXP_DEVICE_INIT_TYPE
 = 
IBV_DEVICE_INIT_TYPE
,

106 
	mIBV_EXP_DEVICE_PORT_ACTIVE_EVENT
 = 
IBV_DEVICE_PORT_ACTIVE_EVENT
,

107 
	mIBV_EXP_DEVICE_SYS_IMAGE_GUID
 = 
IBV_DEVICE_SYS_IMAGE_GUID
,

108 
	mIBV_EXP_DEVICE_RC_RNR_NAK_GEN
 = 
IBV_DEVICE_RC_RNR_NAK_GEN
,

109 
	mIBV_EXP_DEVICE_SRQ_RESIZE
 = 
IBV_DEVICE_SRQ_RESIZE
,

110 
	mIBV_EXP_DEVICE_N_NOTIFY_CQ
 = 
IBV_DEVICE_N_NOTIFY_CQ
,

111 
	mIBV_EXP_DEVICE_XRC
 = 
IBV_DEVICE_XRC
,

113 
	mIBV_EXP_DEVICE_DC_TRANSPORT
 = (
IBV_EXP_START_FLAG
 << 0),

114 
	mIBV_EXP_DEVICE_QPG
 = (
IBV_EXP_START_FLAG
 << 1),

115 
	mIBV_EXP_DEVICE_UD_RSS
 = (
IBV_EXP_START_FLAG
 << 2),

116 
	mIBV_EXP_DEVICE_UD_TSS
 = (
IBV_EXP_START_FLAG
 << 3),

117 
	mIBV_EXP_DEVICE_EXT_ATOMICS
 = (
IBV_EXP_START_FLAG
 << 4),

118 
	mIBV_EXP_DEVICE_NOP
 = (
IBV_EXP_START_FLAG
 << 5),

119 
	mIBV_EXP_DEVICE_UMR
 = (
IBV_EXP_START_FLAG
 << 6),

120 
	mIBV_EXP_DEVICE_ODP
 = (
IBV_EXP_START_FLAG
 << 7),

121 
	mIBV_EXP_DEVICE_MEM_WINDOW
 = (
IBV_EXP_START_FLAG
 << 17),

122 
	mIBV_EXP_DEVICE_MEM_MGT_EXTENSIONS
 = (
IBV_EXP_START_FLAG
 << 21),

124 
	mIBV_EXP_DEVICE_MW_TYPE_2A
 = (
IBV_EXP_START_FLAG
 << 23),

125 
	mIBV_EXP_DEVICE_MW_TYPE_2B
 = (
IBV_EXP_START_FLAG
 << 24),

126 
	mIBV_EXP_DEVICE_CROSS_CHANNEL
 = (
IBV_EXP_START_FLAG
 << 28),

127 
	mIBV_EXP_DEVICE_MANAGED_FLOW_STEERING
 = (
IBV_EXP_START_FLAG
 << 29),

128 
	mIBV_EXP_DEVICE_MR_ALLOCATE
 = (
IBV_EXP_START_FLAG
 << 30),

129 
	mIBV_EXP_DEVICE_SHARED_MR
 = (
IBV_EXP_START_FLAG
 << 31),

136 
	eibv_exp_devi˚_©å_comp_mask
 {

137 
	mIBV_EXP_DEVICE_ATTR_CALC_CAP
 = (1 << 0),

138 
	mIBV_EXP_DEVICE_ATTR_WITH_TIMESTAMP_MASK
 = (1 << 1),

139 
	mIBV_EXP_DEVICE_ATTR_WITH_HCA_CORE_CLOCK
 = (1 << 2),

140 
	mIBV_EXP_DEVICE_ATTR_EXP_CAP_FLAGS
 = (1 << 3),

141 
	mIBV_EXP_DEVICE_DC_RD_REQ
 = (1 << 4),

142 
	mIBV_EXP_DEVICE_DC_RD_RES
 = (1 << 5),

143 
	mIBV_EXP_DEVICE_ATTR_INLINE_RECV_SZ
 = (1 << 6),

144 
	mIBV_EXP_DEVICE_ATTR_RSS_TBL_SZ
 = (1 << 7),

145 
	mIBV_EXP_DEVICE_ATTR_EXT_ATOMIC_ARGS
 = (1 << 8),

146 
	mIBV_EXP_DEVICE_ATTR_UMR
 = (1 << 9),

147 
	mIBV_EXP_DEVICE_ATTR_ODP
 = (1 << 10),

148 
	mIBV_EXP_DEVICE_ATTR_MAX_DCT
 = (1 << 11),

150 
	mIBV_EXP_DEVICE_ATTR_RESERVED
 = (1 << 12),

153 
	sibv_exp_devi˚_ˇlc_ˇp
 {

154 
uöt64_t
 
	md©a_ty≥s
;

155 
uöt64_t
 
	md©a_sizes
;

156 
uöt64_t
 
	möt_›s
;

157 
uöt64_t
 
	muöt_›s
;

158 
uöt64_t
 
	mÂ_›s
;

161 
	sibv_exp_ext_©omics_∑øms
 {

162 
uöt64_t
 
	mlog_©omic_¨g_sizes
;

163 
uöt32_t
 
	mmax_Á_bô_bound¨y
;

164 
uöt32_t
 
	mlog_max_©omic_ölöe
;

167 
	eibv_odp_gíîÆ_ˇp_bôs
 {

168 
	mIBV_EXP_ODP_SUPPORT
 = 1 << 0,

171 
	eibv_odp_å™•‹t_ˇp_bôs
 {

172 
	mIBV_EXP_ODP_SUPPORT_SEND
 = 1 << 0,

173 
	mIBV_EXP_ODP_SUPPORT_RECV
 = 1 << 1,

174 
	mIBV_EXP_ODP_SUPPORT_WRITE
 = 1 << 2,

175 
	mIBV_EXP_ODP_SUPPORT_READ
 = 1 << 3,

176 
	mIBV_EXP_ODP_SUPPORT_ATOMIC
 = 1 << 4,

177 
	mIBV_EXP_ODP_SUPPORT_SRQ_RECV
 = 1 << 5,

180 
	sibv_exp_umr_ˇps
 {

181 
uöt32_t
 
	mmax_klm_li°_size
;

182 
uöt32_t
 
	mmax_£nd_wqe_ölöe_klms
;

183 
uöt32_t
 
	mmax_umr_ªcursi⁄_dïth
;

184 
uöt32_t
 
	mmax_umr_°ride_dimísi⁄
;

187 
	sibv_exp_odp_ˇps
 {

188 
uöt64_t
 
	mgíîÆ_odp_ˇps
;

190 
uöt32_t
 
	mrc_odp_ˇps
;

191 
uöt32_t
 
	muc_odp_ˇps
;

192 
uöt32_t
 
	mud_odp_ˇps
;

193 
uöt32_t
 
	mdc_odp_ˇps
;

194 
uöt32_t
 
	mxrc_odp_ˇps
;

195 
uöt32_t
 
	møw_ëh_odp_ˇps
;

196 } 
	m≥r_å™•‹t_ˇps
;

199 
	sibv_exp_devi˚_©å
 {

200 
	mfw_vî
[64];

201 
uöt64_t
 
	mnode_guid
;

202 
uöt64_t
 
	msys_image_guid
;

203 
uöt64_t
 
	mmax_mr_size
;

204 
uöt64_t
 
	m∑ge_size_ˇp
;

205 
uöt32_t
 
	mvíd‹_id
;

206 
uöt32_t
 
	mvíd‹_∑π_id
;

207 
uöt32_t
 
	mhw_vî
;

208 
	mmax_qp
;

209 
	mmax_qp_wr
;

210 
	mª£rved
;

211 
	mmax_sge
;

212 
	mmax_sge_rd
;

213 
	mmax_cq
;

214 
	mmax_cqe
;

215 
	mmax_mr
;

216 
	mmax_pd
;

217 
	mmax_qp_rd_©om
;

218 
	mmax_ì_rd_©om
;

219 
	mmax_ªs_rd_©om
;

220 
	mmax_qp_öô_rd_©om
;

221 
	mmax_ì_öô_rd_©om
;

222 
ibv_exp_©omic_ˇp
 
	mexp_©omic_ˇp
;

223 
	mmax_ì
;

224 
	mmax_rdd
;

225 
	mmax_mw
;

226 
	mmax_øw_ùv6_qp
;

227 
	mmax_øw_ëhy_qp
;

228 
	mmax_mˇ°_gΩ
;

229 
	mmax_mˇ°_qp_©èch
;

230 
	mmax_tŸÆ_mˇ°_qp_©èch
;

231 
	mmax_ah
;

232 
	mmax_fmr
;

233 
	mmax_m≠_≥r_fmr
;

234 
	mmax_§q
;

235 
	mmax_§q_wr
;

236 
	mmax_§q_sge
;

237 
uöt16_t
 
	mmax_pkeys
;

238 
uöt8_t
 
	mloˇl_ˇ_ack_dñay
;

239 
uöt8_t
 
	mphys_p‹t_˙t
;

240 
uöt32_t
 
	mcomp_mask
;

241 
ibv_exp_devi˚_ˇlc_ˇp
 
	mˇlc_ˇp
;

242 
uöt64_t
 
	mtime°amp_mask
;

243 
uöt64_t
 
	mhˇ_c‹e_˛ock
;

244 
uöt64_t
 
	mexp_devi˚_ˇp_Êags
;

245 
	mmax_dc_ªq_rd_©om
;

246 
	mmax_dc_ªs_rd_©om
;

247 
	mölöe_ªcv_sz
;

248 
uöt32_t
 
	mmax_rss_tbl_sz
;

249 
ibv_exp_ext_©omics_∑øms
 
	mext_©om
;

250 
ibv_exp_umr_ˇps
 
	mumr_ˇps
;

251 
ibv_exp_odp_ˇps
 
	modp_ˇps
;

252 
	mmax_d˘
;

255 
	eibv_exp_ac˚ss_Êags
 {

256 
	mIBV_EXP_ACCESS_LOCAL_WRITE
 = 
IBV_ACCESS_LOCAL_WRITE
,

257 
	mIBV_EXP_ACCESS_REMOTE_WRITE
 = 
IBV_ACCESS_REMOTE_WRITE
,

258 
	mIBV_EXP_ACCESS_REMOTE_READ
 = 
IBV_ACCESS_REMOTE_READ
,

259 
	mIBV_EXP_ACCESS_REMOTE_ATOMIC
 = 
IBV_ACCESS_REMOTE_ATOMIC
,

260 
	mIBV_EXP_ACCESS_MW_BIND
 = 
IBV_ACCESS_MW_BIND
,

262 
	mIBV_EXP_ACCESS_ALLOCATE_MR
 = (
IBV_EXP_START_FLAG
 << 5),

263 
	mIBV_EXP_ACCESS_SHARED_MR_USER_READ
 = (
IBV_EXP_START_FLAG
 << 6),

264 
	mIBV_EXP_ACCESS_SHARED_MR_USER_WRITE
 = (
IBV_EXP_START_FLAG
 << 7),

265 
	mIBV_EXP_ACCESS_SHARED_MR_GROUP_READ
 = (
IBV_EXP_START_FLAG
 << 8),

266 
	mIBV_EXP_ACCESS_SHARED_MR_GROUP_WRITE
 = (
IBV_EXP_START_FLAG
 << 9),

267 
	mIBV_EXP_ACCESS_SHARED_MR_OTHER_READ
 = (
IBV_EXP_START_FLAG
 << 10),

268 
	mIBV_EXP_ACCESS_SHARED_MR_OTHER_WRITE
 = (
IBV_EXP_START_FLAG
 << 11),

269 
	mIBV_EXP_ACCESS_NO_RDMA
 = (
IBV_EXP_START_FLAG
 << 12),

270 
	mIBV_EXP_ACCESS_MW_ZERO_BASED
 = (
IBV_EXP_START_FLAG
 << 13),

271 
	mIBV_EXP_ACCESS_ON_DEMAND
 = (
IBV_EXP_START_FLAG
 << 14),

272 
	mIBV_EXP_ACCESS_RELAXED
 = (
IBV_EXP_START_FLAG
 << 15),

274 
	mIBV_EXP_ACCESS_RESERVED
 = (
IBV_EXP_START_FLAG
 << 16)

278 
	sibv_exp_mw_böd_öfo
 {

279 
ibv_mr
 *
	mmr
;

280 
uöt64_t
 
	maddr
;

281 
uöt64_t
 
	mÀngth
;

282 
uöt64_t
 
	mexp_mw_ac˚ss_Êags
;

288 
	eibv_exp_böd_mw_comp_mask
 {

289 
	mIBV_EXP_BIND_MW_RESERVED
 = (1 << 0)

293 
	sibv_exp_mw_böd
 {

294 
ibv_qp
 *
	mqp
;

295 
ibv_mw
 *
	mmw
;

296 
uöt64_t
 
	mwr_id
;

297 
uöt64_t
 
	mexp_£nd_Êags
;

298 
ibv_exp_mw_böd_öfo
 
	mböd_öfo
;

299 
uöt32_t
 
	mcomp_mask
;

302 
	eibv_exp_ˇlc_›
 {

303 
	mIBV_EXP_CALC_OP_ADD
 = 0,

304 
	mIBV_EXP_CALC_OP_MAXLOC
,

305 
	mIBV_EXP_CALC_OP_BAND
,

306 
	mIBV_EXP_CALC_OP_BXOR
,

307 
	mIBV_EXP_CALC_OP_BOR
,

308 
	mIBV_EXP_CALC_OP_NUMBER


311 
	eibv_exp_ˇlc_d©a_ty≥
 {

312 
	mIBV_EXP_CALC_DATA_TYPE_INT
 = 0,

313 
	mIBV_EXP_CALC_DATA_TYPE_UINT
,

314 
	mIBV_EXP_CALC_DATA_TYPE_FLOAT
,

315 
	mIBV_EXP_CALC_DATA_TYPE_NUMBER


318 
	eibv_exp_ˇlc_d©a_size
 {

319 
	mIBV_EXP_CALC_DATA_SIZE_64_BIT
 = 0,

320 
	mIBV_EXP_CALC_DATA_SIZE_NUMBER


323 
	eibv_exp_wr_›code
 {

324 
	mIBV_EXP_WR_RDMA_WRITE
 = 
IBV_WR_RDMA_WRITE
,

325 
	mIBV_EXP_WR_RDMA_WRITE_WITH_IMM
 = 
IBV_WR_RDMA_WRITE_WITH_IMM
,

326 
	mIBV_EXP_WR_SEND
 = 
IBV_WR_SEND
,

327 
	mIBV_EXP_WR_SEND_WITH_IMM
 = 
IBV_WR_SEND_WITH_IMM
,

328 
	mIBV_EXP_WR_RDMA_READ
 = 
IBV_WR_RDMA_READ
,

329 
	mIBV_EXP_WR_ATOMIC_CMP_AND_SWP
 = 
IBV_WR_ATOMIC_CMP_AND_SWP
,

330 
	mIBV_EXP_WR_ATOMIC_FETCH_AND_ADD
 = 
IBV_WR_ATOMIC_FETCH_AND_ADD
,

332 
	mIBV_EXP_WR_SEND_WITH_INV
 = 8 + 
IBV_EXP_START_ENUM
,

333 
	mIBV_EXP_WR_LOCAL_INV
 = 10 + 
IBV_EXP_START_ENUM
,

334 
	mIBV_EXP_WR_BIND_MW
 = 14 + 
IBV_EXP_START_ENUM
,

335 
	mIBV_EXP_WR_SEND_ENABLE
 = 0x20 + 
IBV_EXP_START_ENUM
,

336 
	mIBV_EXP_WR_RECV_ENABLE
,

337 
	mIBV_EXP_WR_CQE_WAIT
,

338 
	mIBV_EXP_WR_EXT_MASKED_ATOMIC_CMP_AND_SWP
,

339 
	mIBV_EXP_WR_EXT_MASKED_ATOMIC_FETCH_AND_ADD
,

340 
	mIBV_EXP_WR_NOP
,

341 
	mIBV_EXP_WR_UMR_FILL
,

342 
	mIBV_EXP_WR_UMR_INVALIDATE
,

345 
	eibv_exp_£nd_Êags
 {

346 
	mIBV_EXP_SEND_FENCE
 = 
IBV_SEND_FENCE
,

347 
	mIBV_EXP_SEND_SIGNALED
 = 
IBV_SEND_SIGNALED
,

348 
	mIBV_EXP_SEND_SOLICITED
 = 
IBV_SEND_SOLICITED
,

349 
	mIBV_EXP_SEND_INLINE
 = 
IBV_SEND_INLINE
,

351 
	mIBV_EXP_SEND_IP_CSUM
 = (
IBV_EXP_START_FLAG
 << 0),

352 
	mIBV_EXP_SEND_WITH_CALC
 = (
IBV_EXP_START_FLAG
 << 1),

353 
	mIBV_EXP_SEND_WAIT_EN_LAST
 = (
IBV_EXP_START_FLAG
 << 2),

354 
	mIBV_EXP_SEND_EXT_ATOMIC_INLINE
 = (
IBV_EXP_START_FLAG
 << 3),

357 
	sibv_exp_cmp_sw≠
 {

358 
uöt64_t
 
	mcom∑ª_mask
;

359 
uöt64_t
 
	mcom∑ª_vÆ
;

360 
uöt64_t
 
	msw≠_vÆ
;

361 
uöt64_t
 
	msw≠_mask
;

364 
	sibv_exp_„tch_add
 {

365 
uöt64_t
 
	madd_vÆ
;

366 
uöt64_t
 
	mfõld_bound¨y
;

373 
	eibv_exp_£nd_wr_comp_mask
 {

374 
	mIBV_EXP_SEND_WR_ATTR_RESERVED
 = 1 << 0

377 
	sibv_exp_mem_ªgi⁄
 {

378 
uöt64_t
 
	mba£_addr
;

379 
ibv_mr
 *
	mmr
;

380 
size_t
 
	mÀngth
;

383 
	sibv_exp_mem_ª≥©_block
 {

384 
uöt64_t
 
	mba£_addr
;

385 
ibv_mr
 *
	mmr
;

386 
size_t
 *
	mbyã_cou¡
;

387 
size_t
 *
	m°ride
;

390 
	eibv_exp_umr_wr_ty≥
 {

391 
	mIBV_EXP_UMR_MR_LIST
,

392 
	mIBV_EXP_UMR_REPEAT


395 
	sibv_exp_£nd_wr
 {

396 
uöt64_t
 
	mwr_id
;

397 
ibv_exp_£nd_wr
 *
	m√xt
;

398 
ibv_sge
 *
	msg_li°
;

399 
	mnum_sge
;

400 
ibv_exp_wr_›code
 
	mexp_›code
;

401 
	mª£rved
;

403 
uöt32_t
 
	mimm_d©a
;

404 
uöt32_t
 
	mövÆid©e_rkey
;

405 } 
	mex
;

408 
uöt64_t
 
	mªmŸe_addr
;

409 
uöt32_t
 
	mrkey
;

410 } 
	mrdma
;

412 
uöt64_t
 
	mªmŸe_addr
;

413 
uöt64_t
 
	mcom∑ª_add
;

414 
uöt64_t
 
	msw≠
;

415 
uöt32_t
 
	mrkey
;

416 } 
	m©omic
;

418 
ibv_ah
 *
	mah
;

419 
uöt32_t
 
	mªmŸe_q≤
;

420 
uöt32_t
 
	mªmŸe_qkey
;

421 } 
	mud
;

422 } 
	mwr
;

426 
uöt32_t
 
	mªmŸe_§qn
;

427 } 
	mxrc
;

428 } 
	mqp_ty≥
;

430 
uöt32_t
 
	mxrc_ªmŸe_§q_num
;

434 
uöt64_t
 
	mªmŸe_addr
;

435 
uöt32_t
 
	mrkey
;

436 } 
	mrdma
;

438 
uöt64_t
 
	mªmŸe_addr
;

439 
uöt64_t
 
	mcom∑ª_add
;

440 
uöt64_t
 
	msw≠
;

441 
uöt32_t
 
	mrkey
;

442 } 
	m©omic
;

444 
ibv_cq
 *
	mcq
;

445 
öt32_t
 
	mcq_cou¡
;

446 } 
	mcqe_waô
;

448 
ibv_qp
 *
	mqp
;

449 
öt32_t
 
	mwqe_cou¡
;

450 } 
	mwqe_íabÀ
;

451 } 
	mèsk
;

454 
ibv_exp_ˇlc_›
 
	mˇlc_›
;

455 
ibv_exp_ˇlc_d©a_ty≥
 
	md©a_ty≥
;

456 
ibv_exp_ˇlc_d©a_size
 
	md©a_size
;

457 } 
	mˇlc
;

458 } 
	m›
;

460 
ibv_ah
 *
	mah
;

461 
uöt64_t
 
	md˘_ac˚ss_key
;

462 
uöt32_t
 
	md˘_numbî
;

463 } 
	mdc
;

465 
ibv_mw
 *
	mmw
;

466 
uöt32_t
 
	mrkey
;

467 
ibv_exp_mw_böd_öfo
 
	mböd_öfo
;

468 } 
	mböd_mw
;

469 
uöt64_t
 
	mexp_£nd_Êags
;

470 
uöt32_t
 
	mcomp_mask
;

473 
uöt32_t
 
	mumr_ty≥
;

474 
ibv_exp_mkey_li°_c⁄èöî
 *
	mmem‹y_obje˘s
;

475 
uöt64_t
 
	mexp_ac˚ss
;

476 
ibv_mr
 *
	mmodifõd_mr
;

477 
uöt64_t
 
	mba£_addr
;

478 
uöt32_t
 
	mnum_mrs
;

480 
ibv_exp_mem_ªgi⁄
 *
	mmem_ªg_li°
;

482 
ibv_exp_mem_ª≥©_block
 *
	mmem_ª≥©_block_li°
;

483 
size_t
 *
	mª≥©_cou¡
;

484 
uöt32_t
 
	m°ride_dim
;

485 } 
	mrb
;

486 } 
	mmem_li°
;

487 } 
	mumr
;

489 
uöt32_t
 
	mlog_¨g_sz
;

490 
uöt64_t
 
	mªmŸe_addr
;

491 
uöt32_t
 
	mrkey
;

502 
ibv_exp_cmp_sw≠
 
	mcmp_sw≠
;

503 
ibv_exp_„tch_add
 
	m„tch_add
;

504 } 
	m›
;

505 } 
	mölöe_d©a
;

507 } 
	mwr_d©a
;

508 } 
	mmasked_©omics
;

509 } 
	mext_›
;

515 
	eibv_exp_vÆues_comp_mask
 {

516 
	mIBV_EXP_VALUES_HW_CLOCK_NS
 = 1 << 0,

517 
	mIBV_EXP_VALUES_HW_CLOCK
 = 1 << 1,

518 
	mIBV_EXP_VALUES_RESERVED
 = 1 << 2

521 
	sibv_exp_vÆues
 {

522 
uöt32_t
 
	mcomp_mask
;

523 
uöt64_t
 
	mhw˛ock_ns
;

524 
uöt64_t
 
	mhw˛ock
;

530 
	eibv_exp_cq_¸óã_Êags
 {

531 
	mIBV_EXP_CQ_CREATE_CROSS_CHANNEL
 = 1 << 0,

532 
	mIBV_EXP_CQ_TIMESTAMP
 = 1 << 1,

533 
	mIBV_EXP_CQ_TIMESTAMP_TO_SYS_TIME
 = 1 << 2,

540 
	mIBV_EXP_CQ_CREATE_FLAGS_MASK
 = 
IBV_EXP_CQ_CREATE_CROSS_CHANNEL
 |

541 
IBV_EXP_CQ_TIMESTAMP
 |

542 
IBV_EXP_CQ_TIMESTAMP_TO_SYS_TIME
,

549 
	eibv_exp_cq_öô_©å_mask
 {

550 
	mIBV_EXP_CQ_INIT_ATTR_FLAGS
 = 1 << 0,

551 
	mIBV_EXP_CQ_INIT_ATTR_RESERVED
 = 1 << 1,

554 
	sibv_exp_cq_öô_©å
 {

555 
uöt32_t
 
	mcomp_mask
;

556 
uöt32_t
 
	mÊags
;

563 
	eibv_exp_ah_©å_©å_comp_mask
 {

564 
	mIBV_EXP_AH_ATTR_LL
 = 1 << 0,

565 
	mIBV_EXP_AH_ATTR_VID
 = 1 << 1,

566 
	mIBV_EXP_AH_ATTR_RESERVED
 = 1 << 2

569 
	eŒ_addªss_ty≥
 {

570 
	mLL_ADDRESS_UNKNOWN
,

571 
	mLL_ADDRESS_IB
,

572 
	mLL_ADDRESS_ETH
,

573 
	mLL_ADDRESS_SIZE


576 
	sibv_exp_ah_©å
 {

577 
ibv_globÆ_rouã
 
	mgrh
;

578 
uöt16_t
 
	mdlid
;

579 
uöt8_t
 
	m¶
;

580 
uöt8_t
 
	m§c_∑th_bôs
;

581 
uöt8_t
 
	m°©ic_øã
;

582 
uöt8_t
 
	mis_globÆ
;

583 
uöt8_t
 
	mp‹t_num
;

584 
uöt32_t
 
	mcomp_mask
;

586 
Œ_addªss_ty≥
 
	mty≥
;

587 
uöt32_t
 
	mÀn
;

588 *
	maddªss
;

589 } 
	mŒ_addªss
;

590 
uöt16_t
 
	mvid
;

596 
	eibv_exp_qp_©å_mask
 {

597 
	mIBV_EXP_QP_STATE
 = 
IBV_QP_STATE
,

598 
	mIBV_EXP_QP_CUR_STATE
 = 
IBV_QP_CUR_STATE
,

599 
	mIBV_EXP_QP_EN_SQD_ASYNC_NOTIFY
 = 
IBV_QP_EN_SQD_ASYNC_NOTIFY
,

600 
	mIBV_EXP_QP_ACCESS_FLAGS
 = 
IBV_QP_ACCESS_FLAGS
,

601 
	mIBV_EXP_QP_PKEY_INDEX
 = 
IBV_QP_PKEY_INDEX
,

602 
	mIBV_EXP_QP_PORT
 = 
IBV_QP_PORT
,

603 
	mIBV_EXP_QP_QKEY
 = 
IBV_QP_QKEY
,

604 
	mIBV_EXP_QP_AV
 = 
IBV_QP_AV
,

605 
	mIBV_EXP_QP_PATH_MTU
 = 
IBV_QP_PATH_MTU
,

606 
	mIBV_EXP_QP_TIMEOUT
 = 
IBV_QP_TIMEOUT
,

607 
	mIBV_EXP_QP_RETRY_CNT
 = 
IBV_QP_RETRY_CNT
,

608 
	mIBV_EXP_QP_RNR_RETRY
 = 
IBV_QP_RNR_RETRY
,

609 
	mIBV_EXP_QP_RQ_PSN
 = 
IBV_QP_RQ_PSN
,

610 
	mIBV_EXP_QP_MAX_QP_RD_ATOMIC
 = 
IBV_QP_MAX_QP_RD_ATOMIC
,

611 
	mIBV_EXP_QP_ALT_PATH
 = 
IBV_QP_ALT_PATH
,

612 
	mIBV_EXP_QP_MIN_RNR_TIMER
 = 
IBV_QP_MIN_RNR_TIMER
,

613 
	mIBV_EXP_QP_SQ_PSN
 = 
IBV_QP_SQ_PSN
,

614 
	mIBV_EXP_QP_MAX_DEST_RD_ATOMIC
 = 
IBV_QP_MAX_DEST_RD_ATOMIC
,

615 
	mIBV_EXP_QP_PATH_MIG_STATE
 = 
IBV_QP_PATH_MIG_STATE
,

616 
	mIBV_EXP_QP_CAP
 = 
IBV_QP_CAP
,

617 
	mIBV_EXP_QP_DEST_QPN
 = 
IBV_QP_DEST_QPN
,

619 
	mIBV_EXP_QP_GROUP_RSS
 = 
IBV_EXP_START_FLAG
 << 21,

620 
	mIBV_EXP_QP_DC_KEY
 = 
IBV_EXP_START_FLAG
 << 22,

627 
	eibv_exp_qp_©å_comp_mask
 {

628 
	mIBV_EXP_QP_ATTR_RESERVED
 = 1 << 0

631 
	sibv_exp_qp_©å
 {

632 
ibv_qp_°©e
 
	mqp_°©e
;

633 
ibv_qp_°©e
 
	mcur_qp_°©e
;

634 
ibv_mtu
 
	m∑th_mtu
;

635 
ibv_mig_°©e
 
	m∑th_mig_°©e
;

636 
uöt32_t
 
	mqkey
;

637 
uöt32_t
 
	mrq_p¢
;

638 
uöt32_t
 
	msq_p¢
;

639 
uöt32_t
 
	mde°_qp_num
;

640 
	mqp_ac˚ss_Êags
;

641 
ibv_qp_ˇp
 
	mˇp
;

642 
ibv_ah_©å
 
	mah_©å
;

643 
ibv_ah_©å
 
	mÆt_ah_©å
;

644 
uöt16_t
 
	mpkey_ödex
;

645 
uöt16_t
 
	mÆt_pkey_ödex
;

646 
uöt8_t
 
	mí_sqd_async_nŸify
;

647 
uöt8_t
 
	msq_døöög
;

648 
uöt8_t
 
	mmax_rd_©omic
;

649 
uöt8_t
 
	mmax_de°_rd_©omic
;

650 
uöt8_t
 
	mmö_∫r_timî
;

651 
uöt8_t
 
	mp‹t_num
;

652 
uöt8_t
 
	mtimeout
;

653 
uöt8_t
 
	mªåy_˙t
;

654 
uöt8_t
 
	m∫r_ªåy
;

655 
uöt8_t
 
	mÆt_p‹t_num
;

656 
uöt8_t
 
	mÆt_timeout
;

657 
uöt64_t
 
	md˘_key
;

658 
uöt32_t
 
	mcomp_mask
;

665 
	eibv_exp_qp_öô_©å_comp_mask
 {

666 
	mIBV_EXP_QP_INIT_ATTR_PD
 = 1 << 0,

667 
	mIBV_EXP_QP_INIT_ATTR_XRCD
 = 1 << 1,

668 
	mIBV_EXP_QP_INIT_ATTR_CREATE_FLAGS
 = 1 << 2,

669 
	mIBV_EXP_QP_INIT_ATTR_INL_RECV
 = 1 << 3,

670 
	mIBV_EXP_QP_INIT_ATTR_QPG
 = 1 << 4,

671 
	mIBV_EXP_QP_INIT_ATTR_ATOMICS_ARG
 = 1 << 5,

672 
	mIBV_EXP_QP_INIT_ATTR_MAX_INL_KLMS
 = 1 << 6,

673 
	mIBV_EXP_QP_INIT_ATTR_RESERVED
 = 1 << 7

676 
	eibv_exp_qpg_ty≥
 {

677 
	mIBV_EXP_QPG_NONE
 = 0,

678 
	mIBV_EXP_QPG_PARENT
 = (1<<0),

679 
	mIBV_EXP_QPG_CHILD_RX
 = (1<<1),

680 
	mIBV_EXP_QPG_CHILD_TX
 = (1<<2)

683 
	sibv_exp_qpg_öô_©åib
 {

684 
uöt32_t
 
	mtss_chûd_cou¡
;

685 
uöt32_t
 
	mrss_chûd_cou¡
;

688 
	sibv_exp_qpg
 {

689 
uöt32_t
 
	mqpg_ty≥
;

691 
ibv_qp
 *
	mqpg_∑ª¡
;

692 
ibv_exp_qpg_öô_©åib
 
	m∑ª¡_©åib
;

699 
	eibv_exp_qp_¸óã_Êags
 {

700 
	mIBV_EXP_QP_CREATE_CROSS_CHANNEL
 = (1 << 2),

701 
	mIBV_EXP_QP_CREATE_MANAGED_SEND
 = (1 << 3),

702 
	mIBV_EXP_QP_CREATE_MANAGED_RECV
 = (1 << 4),

703 
	mIBV_EXP_QP_CREATE_IGNORE_SQ_OVERFLOW
 = (1 << 6),

704 
	mIBV_EXP_QP_CREATE_IGNORE_RQ_OVERFLOW
 = (1 << 7),

705 
	mIBV_EXP_QP_CREATE_ATOMIC_BE_REPLY
 = (1 << 8),

706 
	mIBV_EXP_QP_CREATE_UMR
 = (1 << 9),

708 
	mIBV_EXP_QP_CREATE_MASK
 = (0x000003DC)

711 
	sibv_exp_qp_öô_©å
 {

712 *
	mqp_c⁄ãxt
;

713 
ibv_cq
 *
	m£nd_cq
;

714 
ibv_cq
 *
	mªcv_cq
;

715 
ibv_§q
 *
	m§q
;

716 
ibv_qp_ˇp
 
	mˇp
;

717 
ibv_qp_ty≥
 
	mqp_ty≥
;

718 
	msq_sig_Æl
;

720 
uöt32_t
 
	mcomp_mask
;

721 
ibv_pd
 *
	mpd
;

722 
ibv_xrcd
 *
	mxrcd
;

723 
uöt32_t
 
	mexp_¸óã_Êags
;

725 
uöt32_t
 
	mmax_öl_ªcv
;

726 
ibv_exp_qpg
 
	mqpg
;

727 
uöt32_t
 
	mmax_©omic_¨g
;

728 
uöt32_t
 
	mmax_öl_£nd_klms
;

734 
	eibv_exp_d˘_öô_©å_comp_mask
 {

735 
	mIBV_EXP_DCT_INIT_ATTR_RESERVED
 = 1 << 0

739 
	mIBV_EXP_DCT_CREATE_FLAGS_MASK
 = (1 << 0) - 1,

742 
	sibv_exp_d˘_öô_©å
 {

743 
ibv_pd
 *
	mpd
;

744 
ibv_cq
 *
	mcq
;

745 
ibv_§q
 *
	m§q
;

746 
uöt64_t
 
	mdc_key
;

747 
uöt8_t
 
	mp‹t
;

748 
uöt32_t
 
	mac˚ss_Êags
;

749 
uöt8_t
 
	mmö_∫r_timî
;

750 
uöt8_t
 
	mt˛ass
;

751 
uöt32_t
 
	mÊow_œbñ
;

752 
ibv_mtu
 
	mmtu
;

753 
uöt8_t
 
	mpkey_ödex
;

754 
uöt8_t
 
	mgid_ödex
;

755 
uöt8_t
 
	mh›_limô
;

756 
uöt32_t
 
	mölöe_size
;

757 
uöt32_t
 
	m¸óã_Êags
;

758 
uöt32_t
 
	mcomp_mask
;

762 
	mIBV_EXP_DCT_STATE_ACTIVE
 = 0,

763 
	mIBV_EXP_DCT_STATE_DRAINING
 = 1,

764 
	mIBV_EXP_DCT_STATE_DRAINED
 = 2

770 
	eibv_exp_d˘_©å_comp_mask
 {

771 
	mIBV_EXP_DCT_ATTR_RESERVED
 = 1 << 0

774 
	sibv_exp_d˘_©å
 {

775 
uöt64_t
 
	mdc_key
;

776 
uöt8_t
 
	mp‹t
;

777 
uöt32_t
 
	mac˚ss_Êags
;

778 
uöt8_t
 
	mmö_∫r_timî
;

779 
uöt8_t
 
	mt˛ass
;

780 
uöt32_t
 
	mÊow_œbñ
;

781 
ibv_mtu
 
	mmtu
;

782 
uöt8_t
 
	mpkey_ödex
;

783 
uöt8_t
 
	mgid_ödex
;

784 
uöt8_t
 
	mh›_limô
;

785 
uöt32_t
 
	mkey_viﬁ©i⁄s
;

786 
uöt8_t
 
	m°©e
;

787 
ibv_§q
 *
	m§q
;

788 
ibv_cq
 *
	mcq
;

789 
ibv_pd
 *
	mpd
;

790 
uöt32_t
 
	mcomp_mask
;

794 
	mIBV_EXP_QUERY_PORT_STATE
 = 1 << 0,

795 
	mIBV_EXP_QUERY_PORT_MAX_MTU
 = 1 << 1,

796 
	mIBV_EXP_QUERY_PORT_ACTIVE_MTU
 = 1 << 2,

797 
	mIBV_EXP_QUERY_PORT_GID_TBL_LEN
 = 1 << 3,

798 
	mIBV_EXP_QUERY_PORT_CAP_FLAGS
 = 1 << 4,

799 
	mIBV_EXP_QUERY_PORT_MAX_MSG_SZ
 = 1 << 5,

800 
	mIBV_EXP_QUERY_PORT_BAD_PKEY_CNTR
 = 1 << 6,

801 
	mIBV_EXP_QUERY_PORT_QKEY_VIOL_CNTR
 = 1 << 7,

802 
	mIBV_EXP_QUERY_PORT_PKEY_TBL_LEN
 = 1 << 8,

803 
	mIBV_EXP_QUERY_PORT_LID
 = 1 << 9,

804 
	mIBV_EXP_QUERY_PORT_SM_LID
 = 1 << 10,

805 
	mIBV_EXP_QUERY_PORT_LMC
 = 1 << 11,

806 
	mIBV_EXP_QUERY_PORT_MAX_VL_NUM
 = 1 << 12,

807 
	mIBV_EXP_QUERY_PORT_SM_SL
 = 1 << 13,

808 
	mIBV_EXP_QUERY_PORT_SUBNET_TIMEOUT
 = 1 << 14,

809 
	mIBV_EXP_QUERY_PORT_INIT_TYPE_REPLY
 = 1 << 15,

810 
	mIBV_EXP_QUERY_PORT_ACTIVE_WIDTH
 = 1 << 16,

811 
	mIBV_EXP_QUERY_PORT_ACTIVE_SPEED
 = 1 << 17,

812 
	mIBV_EXP_QUERY_PORT_PHYS_STATE
 = 1 << 18,

813 
	mIBV_EXP_QUERY_PORT_LINK_LAYER
 = 1 << 19,

815 
	mIBV_EXP_QUERY_PORT_STD_MASK
 = (1 << 20) - 1,

817 
	mIBV_EXP_QUERY_PORT_MASK
 = 
IBV_EXP_QUERY_PORT_STD_MASK
,

824 
	eibv_exp_quîy_p‹t_©å_comp_mask
 {

825 
	mIBV_EXP_QUERY_PORT_ATTR_MASK1
 = 1 << 0,

826 
	mIBV_EXP_QUERY_PORT_ATTR_RESERVED
 = 1 << 1,

828 
	mIBV_EXP_QUERY_PORT_ATTR_MASKS
 = 
IBV_EXP_QUERY_PORT_ATTR_RESERVED
 - 1

831 
	sibv_exp_p‹t_©å
 {

834 
ibv_p‹t_°©e
 
	m°©e
;

835 
ibv_mtu
 
	mmax_mtu
;

836 
ibv_mtu
 
	ma˘ive_mtu
;

837 
	mgid_tbl_Àn
;

838 
uöt32_t
 
	mp‹t_ˇp_Êags
;

839 
uöt32_t
 
	mmax_msg_sz
;

840 
uöt32_t
 
	mbad_pkey_˙å
;

841 
uöt32_t
 
	mqkey_viﬁ_˙å
;

842 
uöt16_t
 
	mpkey_tbl_Àn
;

843 
uöt16_t
 
	mlid
;

844 
uöt16_t
 
	msm_lid
;

845 
uöt8_t
 
	mlmc
;

846 
uöt8_t
 
	mmax_vl_num
;

847 
uöt8_t
 
	msm_¶
;

848 
uöt8_t
 
	msub√t_timeout
;

849 
uöt8_t
 
	möô_ty≥_ª∂y
;

850 
uöt8_t
 
	ma˘ive_width
;

851 
uöt8_t
 
	ma˘ive_•ìd
;

852 
uöt8_t
 
	mphys_°©e
;

853 
uöt8_t
 
	mlök_œyî
;

854 
uöt8_t
 
	mª£rved
;

856 
ibv_p‹t_©å
 
	mp‹t_©å
;

858 
uöt32_t
 
	mcomp_mask
;

859 
uöt32_t
 
	mmask1
;

862 
	eibv_exp_cq_©å_mask
 {

863 
	mIBV_EXP_CQ_MODERATION
 = 1 << 0,

864 
	mIBV_EXP_CQ_CAP_FLAGS
 = 1 << 1

867 
	eibv_exp_cq_ˇp_Êags
 {

868 
	mIBV_EXP_CQ_IGNORE_OVERRUN
 = (1 << 0),

870 
	mIBV_EXP_CQ_CAP_MASK
 = (0x00000001)

877 
	eibv_exp_cq_©å_comp_mask
 {

878 
	mIBV_EXP_CQ_ATTR_MODERATION
 = (1 << 0),

879 
	mIBV_EXP_CQ_ATTR_CQ_CAP_FLAGS
 = (1 << 1),

881 
	mIBV_EXP_CQ_ATTR_RESERVED
 = (1 << 2)

884 
	sibv_exp_cq_©å
 {

885 
uöt32_t
 
	mcomp_mask
;

887 
uöt16_t
 
	mcq_cou¡
;

888 
uöt16_t
 
	mcq_≥riod
;

889 } 
	mmodî©i⁄
;

890 
uöt32_t
 
	mcq_ˇp_Êags
;

893 
	eibv_exp_ªªg_mr_Êags
 {

894 
	mIBV_EXP_REREG_MR_CHANGE_TRANSLATION
 = 
IBV_REREG_MR_CHANGE_TRANSLATION
,

895 
	mIBV_EXP_REREG_MR_CHANGE_PD
 = 
IBV_REREG_MR_CHANGE_PD
,

896 
	mIBV_EXP_REREG_MR_CHANGE_ACCESS
 = 
IBV_REREG_MR_CHANGE_ACCESS
,

897 
	mIBV_EXP_REREG_MR_KEEP_VALID
 = 
IBV_REREG_MR_KEEP_VALID
,

898 
	mIBV_EXP_REREG_MR_FLAGS_SUPPORTED
 = ((
IBV_EXP_REREG_MR_KEEP_VALID
 << 1) - 1)

901 
	eibv_exp_ªªg_mr_©å_mask
 {

902 
	mIBV_EXP_REREG_MR_ATTR_RESERVED
 = (1 << 0),

905 
	sibv_exp_ªªg_mr_©å
 {

906 
uöt32_t
 
	mcomp_mask
;

912 
	eibv_exp_ªg_sh¨ed_mr_comp_mask
 {

913 
	mIBV_EXP_REG_SHARED_MR_RESERVED
 = (1 << 0)

916 
	sibv_exp_ªg_sh¨ed_mr_ö
 {

917 
uöt32_t
 
	mmr_h™dÀ
;

918 
ibv_pd
 *
	mpd
;

919 *
	maddr
;

920 
uöt64_t
 
	mexp_ac˚ss
;

921 
uöt32_t
 
	mcomp_mask
;

924 
	eibv_exp_Êow_Êags
 {

925 
	mIBV_EXP_FLOW_ATTR_FLAGS_ALLOW_LOOP_BACK
 = 1,

928 
	eibv_exp_Êow_©å_ty≥
 {

930 
	mIBV_EXP_FLOW_ATTR_NORMAL
 = 0x0,

934 
	mIBV_EXP_FLOW_ATTR_ALL_DEFAULT
 = 0x1,

938 
	mIBV_EXP_FLOW_ATTR_MC_DEFAULT
 = 0x2,

940 
	mIBV_EXP_FLOW_ATTR_SNIFFER
 = 0x3,

943 
	eibv_exp_Êow_•ec_ty≥
 {

944 
	mIBV_EXP_FLOW_SPEC_ETH
 = 0x20,

945 
	mIBV_EXP_FLOW_SPEC_IB
 = 0x21,

946 
	mIBV_EXP_FLOW_SPEC_IPV4
 = 0x30,

947 
	mIBV_EXP_FLOW_SPEC_TCP
 = 0x40,

948 
	mIBV_EXP_FLOW_SPEC_UDP
 = 0x41,

951 
	sibv_exp_Êow_ëh_fûãr
 {

952 
uöt8_t
 
	md°_mac
[6];

953 
uöt8_t
 
	m§c_mac
[6];

954 
uöt16_t
 
	mëhî_ty≥
;

958 
uöt16_t
 
	mvœn_èg
;

961 
	sibv_exp_Êow_•ec_ëh
 {

962 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

963 
uöt16_t
 
	msize
;

964 
ibv_exp_Êow_ëh_fûãr
 
	mvÆ
;

965 
ibv_exp_Êow_ëh_fûãr
 
	mmask
;

968 
	sibv_exp_Êow_ib_fûãr
 {

969 
uöt32_t
 
	mq≤
;

970 
uöt8_t
 
	md°_gid
[16];

973 
	sibv_exp_Êow_•ec_ib
 {

974 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

975 
uöt16_t
 
	msize
;

976 
ibv_exp_Êow_ib_fûãr
 
	mvÆ
;

977 
ibv_exp_Êow_ib_fûãr
 
	mmask
;

980 
	sibv_exp_Êow_ùv4_fûãr
 {

981 
uöt32_t
 
	m§c_ù
;

982 
uöt32_t
 
	md°_ù
;

985 
	sibv_exp_Êow_•ec_ùv4
 {

986 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

987 
uöt16_t
 
	msize
;

988 
ibv_exp_Êow_ùv4_fûãr
 
	mvÆ
;

989 
ibv_exp_Êow_ùv4_fûãr
 
	mmask
;

992 
	sibv_exp_Êow_t˝_udp_fûãr
 {

993 
uöt16_t
 
	md°_p‹t
;

994 
uöt16_t
 
	m§c_p‹t
;

997 
	sibv_exp_Êow_•ec_t˝_udp
 {

998 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

999 
uöt16_t
 
	msize
;

1000 
ibv_exp_Êow_t˝_udp_fûãr
 
	mvÆ
;

1001 
ibv_exp_Êow_t˝_udp_fûãr
 
	mmask
;

1004 
	sibv_exp_Êow_•ec
 {

1007 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

1008 
uöt16_t
 
	msize
;

1009 } 
	mhdr
;

1010 
ibv_exp_Êow_•ec_ib
 
	mib
;

1011 
ibv_exp_Êow_•ec_ëh
 
	mëh
;

1012 
ibv_exp_Êow_•ec_ùv4
 
	mùv4
;

1013 
ibv_exp_Êow_•ec_t˝_udp
 
	mt˝_udp
;

1017 
	sibv_exp_Êow_©å
 {

1018 
ibv_exp_Êow_©å_ty≥
 
	mty≥
;

1019 
uöt16_t
 
	msize
;

1020 
uöt16_t
 
	m¥i‹ôy
;

1021 
uöt8_t
 
	mnum_of_•ecs
;

1022 
uöt8_t
 
	mp‹t
;

1023 
uöt32_t
 
	mÊags
;

1028 
uöt64_t
 
	mª£rved
;

1031 
	sibv_exp_Êow
 {

1032 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

1033 
uöt32_t
 
	mh™dÀ
;

1036 
	sibv_exp_d˘
 {

1037 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

1038 
uöt32_t
 
	mh™dÀ
;

1039 
uöt32_t
 
	md˘_num
;

1040 
ibv_pd
 *
	mpd
;

1041 
ibv_§q
 *
	m§q
;

1042 
ibv_cq
 *
	mcq
;

1043 
±hªad_muãx_t
 
	mmuãx
;

1044 
±hªad_c⁄d_t
 
	mc⁄d
;

1045 
uöt32_t
 
	mevíts_com∂ëed
;

1048 
	eibv_exp_wc_›code
 {

1049 
	mIBV_EXP_WC_SEND
,

1050 
	mIBV_EXP_WC_RDMA_WRITE
,

1051 
	mIBV_EXP_WC_RDMA_READ
,

1052 
	mIBV_EXP_WC_COMP_SWAP
,

1053 
	mIBV_EXP_WC_FETCH_ADD
,

1054 
	mIBV_EXP_WC_BIND_MW
,

1055 
	mIBV_EXP_WC_LOCAL_INV
 = 7,

1056 
	mIBV_EXP_WC_MASKED_COMP_SWAP
 = 9,

1057 
	mIBV_EXP_WC_MASKED_FETCH_ADD
 = 10,

1058 
	mIBV_EXP_WC_UMR
 = 0x100,

1063 
	mIBV_EXP_WC_RECV
 = 1 << 7,

1064 
	mIBV_EXP_WC_RECV_RDMA_WITH_IMM


1067 
	eibv_exp_wc_Êags
 {

1068 
	mIBV_EXP_WC_GRH
 = 
IBV_WC_GRH
,

1069 
	mIBV_EXP_WC_WITH_IMM
 = 
IBV_WC_WITH_IMM
,

1071 
	mIBV_EXP_WC_WITH_INV
 = 
IBV_EXP_START_FLAG
 << 2,

1072 
	mIBV_EXP_WC_WITH_SL
 = 
IBV_EXP_START_FLAG
 << 4,

1073 
	mIBV_EXP_WC_WITH_SLID
 = 
IBV_EXP_START_FLAG
 << 5,

1074 
	mIBV_EXP_WC_WITH_TIMESTAMP
 = 
IBV_EXP_START_FLAG
 << 6,

1075 
	mIBV_EXP_WC_QP
 = 
IBV_EXP_START_FLAG
 << 7,

1076 
	mIBV_EXP_WC_SRQ
 = 
IBV_EXP_START_FLAG
 << 8,

1077 
	mIBV_EXP_WC_DCT
 = 
IBV_EXP_START_FLAG
 << 9,

1080 
	sibv_exp_wc
 {

1081 
uöt64_t
 
	mwr_id
;

1082 
ibv_wc_°©us
 
	m°©us
;

1083 
ibv_exp_wc_›code
 
	mexp_›code
;

1084 
uöt32_t
 
	mvíd‹_îr
;

1085 
uöt32_t
 
	mbyã_Àn
;

1086 
uöt32_t
 
	mimm_d©a
;

1087 
uöt32_t
 
	mqp_num
;

1088 
uöt32_t
 
	m§c_qp
;

1089 
	mª£rved
;

1090 
uöt16_t
 
	mpkey_ödex
;

1091 
uöt16_t
 
	m¶id
;

1092 
uöt8_t
 
	m¶
;

1093 
uöt8_t
 
	mdlid_∑th_bôs
;

1094 
uöt64_t
 
	mtime°amp
;

1095 
ibv_qp
 *
	mqp
;

1096 
ibv_§q
 *
	m§q
;

1097 
ibv_exp_d˘
 *
	md˘
;

1098 
uöt64_t
 
	mexp_wc_Êags
;

1104 
	eibv_exp_¥e„tch_©å_comp_mask
 {

1105 
	mIBV_EXP_PREFETCH_MR_RESERVED
 = (1 << 0),

1111 
	eibv_exp_¥e„tch_©å_Êags
 {

1113 
	mIBV_EXP_PREFETCH_WRITE_ACCESS
 = (1 << 0),

1116 
	sibv_exp_¥e„tch_©å
 {

1118 
uöt32_t
 
	mÊags
;

1120 *
	maddr
;

1122 
size_t
 
	mÀngth
;

1123 
uöt32_t
 
	mcomp_mask
;

1129 
	eibv_exp_ªg_mr_ö_comp_mask
 {

1131 
	mIBV_EXP_REG_MR_RESERVED
 = (1 << 0)

1133 
	sibv_exp_ªg_mr_ö
 {

1134 
ibv_pd
 *
	mpd
;

1135 *
	maddr
;

1136 
size_t
 
	mÀngth
;

1137 
uöt64_t
 
	mexp_ac˚ss
;

1138 
uöt32_t
 
	mcomp_mask
;

1142 
	eibv_exp_èsk_ty≥
 {

1143 
	mIBV_EXP_TASK_SEND
 = 0,

1144 
	mIBV_EXP_TASK_RECV
 = 1

1150 
	eibv_exp_èsk_comp_mask
 {

1151 
	mIBV_EXP_TASK_RESERVED
 = (1 << 0)

1154 
	sibv_exp_èsk
 {

1155 
ibv_exp_èsk_ty≥
 
	mèsk_ty≥
;

1157 
ibv_qp
 *
	mqp
;

1159 
ibv_exp_£nd_wr
 *
	m£nd_wr
;

1160 
ibv_ªcv_wr
 *
	mªcv_wr
;

1162 } 
	môem
;

1163 
ibv_exp_èsk
 *
	m√xt
;

1164 
uöt32_t
 
	mcomp_mask
;

1170 
	eibv_exp_¨m_©å_comp_mask
 {

1171 
	mIBV_EXP_ARM_ATTR_RESERVED
 = (1 << 0)

1173 
	sibv_exp_¨m_©å
 {

1174 
uöt32_t
 
	mcomp_mask
;

1177 
	eibv_exp_mr_¸óã_Êags
 {

1178 
	mIBV_EXP_MR_SIGNATURE_EN
 = (1 << 0),

1179 
	mIBV_EXP_MR_INDIRECT_KLMS
 = (1 << 1)

1182 
	sibv_exp_mr_öô_©å
 {

1183 
uöt32_t
 
	mmax_klm_li°_size
;

1184 
uöt32_t
 
	m¸óã_Êags
;

1185 
uöt64_t
 
	mexp_ac˚ss_Êags
;

1191 
	eibv_exp_¸óã_mr_ö_comp_mask
 {

1192 
	mIBV_EXP_CREATE_MR_IN_RESERVED
 = (1 << 0)

1195 
	sibv_exp_¸óã_mr_ö
 {

1196 
ibv_pd
 *
	mpd
;

1197 
ibv_exp_mr_öô_©å
 
	m©å
;

1198 
uöt32_t
 
	mcomp_mask
;

1204 
	eibv_exp_mkey_©å_comp_mask
 {

1205 
	mIBV_EXP_MKEY_ATTR_RESERVED
 = (1 << 0)

1208 
	sibv_exp_mkey_©å
 {

1209 
uöt32_t
 
	mmax_klm_li°_size
;

1210 
uöt32_t
 
	mcomp_mask
;

1213 
	sibv_exp_mkey_li°_c⁄èöî
 {

1214 
uöt32_t
 
	mmax_klm_li°_size
;

1215 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

1218 
	eibv_exp_mkey_li°_ty≥
 {

1219 
	mIBV_EXP_MKEY_LIST_TYPE_INDIRECT_MR


1225 
	eibv_exp_Æloc_mkey_li°_comp_mask
 {

1226 
	mIBV_EXP_MKEY_LIST_CONTAINER_RESERVED
 = (1 << 0)

1229 
	sibv_exp_mkey_li°_c⁄èöî_©å
 {

1230 
ibv_pd
 *
	mpd
;

1231 
uöt32_t
 
	mmkey_li°_ty≥
;

1232 
uöt32_t
 
	mmax_klm_li°_size
;

1233 
uöt32_t
 
	mcomp_mask
;

1236 
	svîbs_c⁄ãxt_exp
 {

1238 (*
	mexp_ªªg_mr
)(
ibv_mr
 *
	mmr
, 
	mÊags
, 
ibv_pd
 *
	mpd
,

1239 *
	maddr
, 
size_t
 
	mÀngth
, 
uöt64_t
 
	mac˚ss
,

1240 
ibv_exp_ªªg_mr_©å
 *
	m©å
);

1241 (*
	mdrv_exp_ªªg_mr
)(
ibv_mr
 *
	mmr
, 
	mÊags
, 
ibv_pd
 *
	mpd
,

1242 *
	maddr
, 
size_t
 
	mÀngth
, 
uöt64_t
 
	mac˚ss
,

1243 
ibv_exp_ªªg_mr_©å
 *
	m©å
);

1244 (*
	mdrv_exp_¥e„tch_mr
)(
ibv_mr
 *
	mmr
,

1245 
ibv_exp_¥e„tch_©å
 *
	m©å
);

1246 (*
	mlib_exp_¥e„tch_mr
)(
ibv_mr
 *
	mmr
,

1247 
ibv_exp_¥e„tch_©å
 *
	m©å
);

1248 
	mibv_exp_mkey_li°_c⁄èöî
 * (*
	mdrv_exp_Æloc_mkey_li°_mem‹y
)(
ibv_exp_mkey_li°_c⁄èöî_©å
 *
	m©å
);

1249 
	mibv_exp_mkey_li°_c⁄èöî
 * (*
	mlib_exp_Æloc_mkey_li°_mem‹y
)(
ibv_exp_mkey_li°_c⁄èöî_©å
 *
	m©å
);

1250 (*
	mdrv_exp_dóŒoc_mkey_li°_mem‹y
)(
ibv_exp_mkey_li°_c⁄èöî
 *
	mmem
);

1251 (*
	mlib_exp_dóŒoc_mkey_li°_mem‹y
)(
ibv_exp_mkey_li°_c⁄èöî
 *
	mmem
);

1252 (*
	mdrv_exp_quîy_mkey
)(
ibv_mr
 *
	mmr
, 
ibv_exp_mkey_©å
 *
	mmkey_©å
);

1253 (*
	mlib_exp_quîy_mkey
)(
ibv_mr
 *
	mmr
, 
ibv_exp_mkey_©å
 *
	mmkey_©å
);

1254 
	mibv_mr
 * (*
	mdrv_exp_¸óã_mr
)(
ibv_exp_¸óã_mr_ö
 *
	mö
);

1255 
	mibv_mr
 * (*
	mlib_exp_¸óã_mr
)(
ibv_exp_¸óã_mr_ö
 *
	mö
);

1256 (*
	mdrv_exp_¨m_d˘
)(
ibv_exp_d˘
 *
	md˘
, 
ibv_exp_¨m_©å
 *
	m©å
);

1257 (*
	mlib_exp_¨m_d˘
)(
ibv_exp_d˘
 *
	md˘
, 
ibv_exp_¨m_©å
 *
	m©å
);

1258 (*
	mdrv_exp_böd_mw
)(
ibv_exp_mw_böd
 *
	mmw_böd
);

1259 (*
	mlib_exp_böd_mw
)(
ibv_exp_mw_böd
 *
	mmw_böd
);

1260 (*
	mdrv_exp_po°_£nd
)(
ibv_qp
 *
	mqp
,

1261 
ibv_exp_£nd_wr
 *
	mwr
,

1262 
ibv_exp_£nd_wr
 **
	mbad_wr
);

1263 
	mibv_mr
 * (*
	mdrv_exp_ªg_mr
)(
ibv_exp_ªg_mr_ö
 *
	mö
);

1264 
	mibv_mr
 * (*
	mlib_exp_ªg_mr
)(
ibv_exp_ªg_mr_ö
 *
	mö
);

1265 
	mibv_ah
 * (*
	mdrv_exp_ibv_¸óã_ah
)(
ibv_pd
 *
	mpd
,

1266 
ibv_exp_ah_©å
 *
	m©å_exp
);

1267 (*
	mdrv_exp_quîy_vÆues
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, 
	mq_vÆues
,

1268 
ibv_exp_vÆues
 *
	mvÆues
);

1269 
	mibv_cq
 * (*
	mexp_¸óã_cq
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, 
	mcqe
,

1270 
ibv_comp_ch™√l
 *
	mch™√l
,

1271 
	mcomp_ve˘‹
, 
ibv_exp_cq_öô_©å
 *
	m©å
);

1272 (*
	mdrv_exp_ibv_pﬁl_cq
)(
ibv_cq
 *
	mibcq
, 
	mnum_íåõs
,

1273 
ibv_exp_wc
 *
	mwc
, 
uöt32_t
 
	mwc_size
);

1274 * (*
	mdrv_exp_gë_Àgacy_xrc
Ë(
ibv_§q
 *
	mibv_§q
);

1275 (*
	mdrv_exp_£t_Àgacy_xrc
Ë(
ibv_§q
 *
	mibv_§q
, *
	mÀgacy_xrc
);

1276 
	mibv_mr
 * (*
	mdrv_exp_ibv_ªg_sh¨ed_mr
)(
ibv_exp_ªg_sh¨ed_mr_ö
 *
	mö
);

1277 
	mibv_mr
 * (*
	mlib_exp_ibv_ªg_sh¨ed_mr
)(
ibv_exp_ªg_sh¨ed_mr_ö
 *
	mö
);

1278 (*
	mdrv_exp_modify_qp
)(
ibv_qp
 *
	mqp
, 
ibv_exp_qp_©å
 *
	m©å
,

1279 
uöt64_t
 
	mexp_©å_mask
);

1280 (*
	mlib_exp_modify_qp
)(
ibv_qp
 *
	mqp
, 
ibv_exp_qp_©å
 *
	m©å
,

1281 
uöt64_t
 
	mexp_©å_mask
);

1282 (*
	mdrv_exp_po°_èsk
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

1283 
ibv_exp_èsk
 *
	mèsk
,

1284 
ibv_exp_èsk
 **
	mbad_èsk
);

1285 (*
	mlib_exp_po°_èsk
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

1286 
ibv_exp_èsk
 *
	mèsk
,

1287 
ibv_exp_èsk
 **
	mbad_èsk
);

1288 (*
	mdrv_exp_modify_cq
)(
ibv_cq
 *
	mcq
,

1289 
ibv_exp_cq_©å
 *
	m©å
, 
	m©å_mask
);

1290 (*
	mlib_exp_modify_cq
)(
ibv_cq
 *
	mcq
,

1291 
ibv_exp_cq_©å
 *
	m©å
, 
	m©å_mask
);

1292 (*
	mdrv_exp_ibv_de°roy_Êow
Ë(
ibv_exp_Êow
 *
	mÊow
);

1293 (*
	mlib_exp_ibv_de°roy_Êow
Ë(
ibv_exp_Êow
 *
	mÊow
);

1294 
	mibv_exp_Êow
 * (*
	mdrv_exp_ibv_¸óã_Êow
Ë(
ibv_qp
 *
	mqp
,

1295 
ibv_exp_Êow_©å


1296 *
	mÊow_©å
);

1297 
	mibv_exp_Êow
 * (*
	mlib_exp_ibv_¸óã_Êow
Ë(
ibv_qp
 *
	mqp
,

1298 
ibv_exp_Êow_©å


1299 *
	mÊow_©å
);

1301 (*
	mdrv_exp_quîy_p‹t
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, 
uöt8_t
 
	mp‹t_num
,

1302 
ibv_exp_p‹t_©å
 *
	mp‹t_©å
);

1303 (*
	mlib_exp_quîy_p‹t
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, 
uöt8_t
 
	mp‹t_num
,

1304 
ibv_exp_p‹t_©å
 *
	mp‹t_©å
);

1305 
	mibv_exp_d˘
 *(*
	m¸óã_d˘
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

1306 
ibv_exp_d˘_öô_©å
 *
	m©å
);

1307 (*
	mde°roy_d˘
)(
ibv_exp_d˘
 *
	md˘
);

1308 (*
	mquîy_d˘
)(
ibv_exp_d˘
 *
	md˘
, 
ibv_exp_d˘_©å
 *
	m©å
);

1309 (*
	mdrv_exp_quîy_devi˚
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

1310 
ibv_exp_devi˚_©å
 *
	m©å
);

1311 (*
	mlib_exp_quîy_devi˚
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

1312 
ibv_exp_devi˚_©å
 *
	m©å
);

1313 
	mibv_qp
 *(*
	mdrv_exp_¸óã_qp
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

1314 
ibv_exp_qp_öô_©å
 *
	möô_©å
);

1315 
	mibv_qp
 *(*
	mlib_exp_¸óã_qp
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

1316 
ibv_exp_qp_öô_©å
 *
	möô_©å
);

1317 
size_t
 
	msz
;

1322 
ölöe
 
vîbs_c⁄ãxt_exp
 *
	$vîbs_gë_exp_˘x
(
ibv_c⁄ãxt
 *
˘x
)

1324 
vîbs_c⁄ãxt
 *
≠p_ex_˘x
 = 
	`vîbs_gë_˘x
(
˘x
);

1325 *
a˘uÆ_ex_˘x
;

1327 i‡(!
≠p_ex_˘x
 || !◊µ_ex_˘x->
has_comp_mask
 & 
VERBS_CONTEXT_EXP
))

1328  
NULL
;

1330 
a˘uÆ_ex_˘x
 = ((*)
˘x
Ë- (
≠p_ex_˘x
->
sz
 - (
ibv_c⁄ãxt
));

1332  (
vîbs_c⁄ãxt_exp
 *)(
a˘uÆ_ex_˘x
 - (verbs_context_exp));

1333 
	}
}

1335 
	#vîbs_gë_exp_˘x_›
(
˘x
, 
›
) ({ \

1336 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x
(
˘x
); \

1337 (!
v˘x
 || (v˘x->
sz
 < (*v˘xË- 
	`off£tof
(
vîbs_c⁄ãxt_exp
, 
›
)) || \

1338 !
v˘x
->
›
Ë? 
NULL
 : v˘x; })

	)

1340 
	#vîbs_£t_exp_˘x_›
(
_v˘x
, 
›
, 
±r
) ({ \

1341 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
_v˘x
; \

1342 i‡(
v˘x
 && (v˘x->
sz
 >(*v˘xË- 
	`off£tof
(
vîbs_c⁄ãxt_exp
, 
›
))) \

1343 
v˘x
->
›
 = 
±r
; })

	)

1346 
ölöe
 
ibv_qp
 *

1347 
	$ibv_exp_¸óã_qp
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
ibv_exp_qp_öô_©å
 *
qp_öô_©å
)

1349 
vîbs_c⁄ãxt_exp
 *
v˘x
;

1350 
uöt32_t
 
mask
 = 
qp_öô_©å
->
comp_mask
;

1352 i‡(
mask
 =
IBV_EXP_QP_INIT_ATTR_PD
)

1353  
	`ibv_¸óã_qp
(
qp_öô_©å
->
pd
,

1354 (
ibv_qp_öô_©å
 *Ë
qp_öô_©å
);

1356 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
lib_exp_¸óã_qp
);

1357 i‡(!
v˘x
) {

1358 
î∫o
 = 
ENOSYS
;

1359  
NULL
;

1361 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
qp_öô_©å
->
comp_mask
,

1362 
IBV_EXP_QP_INIT_ATTR_RESERVED
 - 1);

1364  
v˘x
->
	`lib_exp_¸óã_qp
(
c⁄ãxt
, 
qp_öô_©å
);

1365 
	}
}

1367 
ölöe
 
	$ibv_exp_quîy_devi˚
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1368 
ibv_exp_devi˚_©å
 *
©å
)

1370 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
,

1371 
lib_exp_quîy_devi˚
);

1372 i‡(!
v˘x
)

1373  
ENOSYS
;

1375 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

1376 
IBV_EXP_DEVICE_ATTR_RESERVED
 - 1);

1377  
v˘x
->
	`lib_exp_quîy_devi˚
(
c⁄ãxt
, 
©å
);

1378 
	}
}

1380 
ölöe
 
ibv_exp_d˘
 *

1381 
	$ibv_exp_¸óã_d˘
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1382 
ibv_exp_d˘_öô_©å
 *
©å
)

1384 
vîbs_c⁄ãxt_exp
 *
v˘x
;

1385 
ibv_exp_d˘
 *
d˘
;

1387 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
¸óã_d˘
);

1388 i‡(!
v˘x
) {

1389 
î∫o
 = 
ENOSYS
;

1390  
NULL
;

1393 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

1394 
IBV_EXP_DCT_INIT_ATTR_RESERVED
 - 1);

1395 
	`±hªad_muãx_lock
(&
c⁄ãxt
->
muãx
);

1396 
d˘
 = 
v˘x
->
	`¸óã_d˘
(
c⁄ãxt
, 
©å
);

1397 i‡(
d˘
)

1398 
d˘
->
c⁄ãxt
 = context;

1400 
	`±hªad_muãx_u∆ock
(&
c⁄ãxt
->
muãx
);

1402  
d˘
;

1403 
	}
}

1405 
ölöe
 
	$ibv_exp_de°roy_d˘
(
ibv_exp_d˘
 *
d˘
)

1407 
vîbs_c⁄ãxt_exp
 *
v˘x
;

1408 
ibv_c⁄ãxt
 *
c⁄ãxt
 = 
d˘
->context;

1409 
îr
;

1411 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
de°roy_d˘
);

1412 i‡(!
v˘x
) {

1413 
î∫o
 = 
ENOSYS
;

1414  
î∫o
;

1417 
	`±hªad_muãx_lock
(&
c⁄ãxt
->
muãx
);

1418 
îr
 = 
v˘x
->
	`de°roy_d˘
(
d˘
);

1419 
	`±hªad_muãx_u∆ock
(&
c⁄ãxt
->
muãx
);

1421  
îr
;

1422 
	}
}

1424 
ölöe
 
	$ibv_exp_quîy_d˘
(
ibv_exp_d˘
 *
d˘
,

1425 
ibv_exp_d˘_©å
 *
©å
)

1427 
vîbs_c⁄ãxt_exp
 *
v˘x
;

1428 
ibv_c⁄ãxt
 *
c⁄ãxt
 = 
d˘
->context;

1429 
îr
;

1431 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
quîy_d˘
);

1432 i‡(!
v˘x
) {

1433 
î∫o
 = 
ENOSYS
;

1434  
î∫o
;

1437 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

1438 
IBV_EXP_DCT_ATTR_RESERVED
 - 1);

1439 
	`±hªad_muãx_lock
(&
c⁄ãxt
->
muãx
);

1440 
îr
 = 
v˘x
->
	`quîy_d˘
(
d˘
, 
©å
);

1441 
	`±hªad_muãx_u∆ock
(&
c⁄ãxt
->
muãx
);

1443  
îr
;

1444 
	}
}

1446 
ölöe
 
	$ibv_exp_¨m_d˘
(
ibv_exp_d˘
 *
d˘
,

1447 
ibv_exp_¨m_©å
 *
©å
)

1449 
vîbs_c⁄ãxt_exp
 *
v˘x
;

1450 
ibv_c⁄ãxt
 *
c⁄ãxt
 = 
d˘
->context;

1451 
îr
;

1453 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
lib_exp_¨m_d˘
);

1454 i‡(!
v˘x
) {

1455 
î∫o
 = 
ENOSYS
;

1456  
î∫o
;

1459 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

1460 
IBV_EXP_ARM_ATTR_RESERVED
 - 1);

1461 
	`±hªad_muãx_lock
(&
c⁄ãxt
->
muãx
);

1462 
îr
 = 
v˘x
->
	`lib_exp_¨m_d˘
(
d˘
, 
©å
);

1463 
	`±hªad_muãx_u∆ock
(&
c⁄ãxt
->
muãx
);

1465  
îr
;

1466 
	}
}

1468 
ölöe
 
	$ibv_exp_quîy_p‹t
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1469 
uöt8_t
 
p‹t_num
,

1470 
ibv_exp_p‹t_©å
 *
p‹t_©å
)

1472 
vîbs_c⁄ãxt_exp
 *
v˘x
;

1474 i‡(0 =
p‹t_©å
->
comp_mask
)

1475  
	`ibv_quîy_p‹t
(
c⁄ãxt
, 
p‹t_num
,

1476 &
p‹t_©å
->port_attr);

1479 i‡((!
p‹t_©å
->
comp_mask
 & 
IBV_EXP_QUERY_PORT_ATTR_MASK1
) ||

1480 (
p‹t_©å
->
comp_mask
 & ~
IBV_EXP_QUERY_PORT_ATTR_MASKS
) ||

1481 (
p‹t_©å
->
mask1
 & ~
IBV_EXP_QUERY_PORT_MASK
)) {

1482 
î∫o
 = 
EINVAL
;

1483  -
î∫o
;

1486 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
lib_exp_quîy_p‹t
);

1488 i‡(!
v˘x
) {

1490 i‡(
p‹t_©å
->
comp_mask
 =
IBV_EXP_QUERY_PORT_ATTR_MASK1
 &&

1491 !(
p‹t_©å
->
mask1
 & ~
IBV_EXP_QUERY_PORT_STD_MASK
))

1492  
	`ibv_quîy_p‹t
(
c⁄ãxt
, 
p‹t_num
,

1493 &
p‹t_©å
->port_attr);

1496 
î∫o
 = 
ENOSYS
;

1497  -
î∫o
;

1499 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
p‹t_©å
->
comp_mask
,

1500 
IBV_EXP_QUERY_PORT_ATTR_RESERVED
 - 1);

1502  
v˘x
->
	`lib_exp_quîy_p‹t
(
c⁄ãxt
, 
p‹t_num
, 
p‹t_©å
);

1503 
	}
}

1508 
ölöe
 
	$ibv_exp_po°_èsk
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1509 
ibv_exp_èsk
 *
èsk
,

1510 
ibv_exp_èsk
 **
bad_èsk
)

1512 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
,

1513 
lib_exp_po°_èsk
);

1514 i‡(!
v˘x
)

1515  
ENOSYS
;

1517 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
èsk
->
comp_mask
,

1518 
IBV_EXP_TASK_RESERVED
 - 1);

1520  
v˘x
->
	`lib_exp_po°_èsk
(
c⁄ãxt
, 
èsk
, 
bad_èsk
);

1521 
	}
}

1523 
ölöe
 
	$ibv_exp_quîy_vÆues
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
q_vÆues
,

1524 
ibv_exp_vÆues
 *
vÆues
)

1526 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
,

1527 
drv_exp_quîy_vÆues
);

1528 i‡(!
v˘x
) {

1529 
î∫o
 = 
ENOSYS
;

1530  -
î∫o
;

1532 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
vÆues
->
comp_mask
,

1533 
IBV_EXP_VALUES_RESERVED
 - 1);

1535  
v˘x
->
	`drv_exp_quîy_vÆues
(
c⁄ãxt
, 
q_vÆues
, 
vÆues
);

1536 
	}
}

1538 
ölöe
 
ibv_exp_Êow
 *
	$ibv_exp_¸óã_Êow
(
ibv_qp
 *
qp
,

1539 
ibv_exp_Êow_©å
 *
Êow
)

1541 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
qp
->
c⁄ãxt
,

1542 
lib_exp_ibv_¸óã_Êow
);

1543 i‡(!
v˘x
 || !v˘x->
lib_exp_ibv_¸óã_Êow
)

1544  
NULL
;

1546 i‡(
Êow
->
ª£rved
 != 0L) {

1547 
	`Ârötf
(
°dîr
, "%s:%d: flow->ª£rved mu° bê0\n", 
__FUNCTION__
, 
__LINE__
);

1548 
Êow
->
ª£rved
 = 0L;

1551  
v˘x
->
	`lib_exp_ibv_¸óã_Êow
(
qp
, 
Êow
);

1552 
	}
}

1554 
ölöe
 
	$ibv_exp_de°roy_Êow
(
ibv_exp_Êow
 *
Êow_id
)

1556 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
Êow_id
->
c⁄ãxt
,

1557 
lib_exp_ibv_de°roy_Êow
);

1558 i‡(!
v˘x
 || !v˘x->
lib_exp_ibv_de°roy_Êow
)

1559  -
ENOSYS
;

1561  
v˘x
->
	`lib_exp_ibv_de°roy_Êow
(
Êow_id
);

1562 
	}
}

1564 
ölöe
 
	$ibv_exp_pﬁl_cq
(
ibv_cq
 *
ibcq
, 
num_íåõs
,

1565 
ibv_exp_wc
 *
wc
, 
uöt32_t
 
wc_size
)

1567 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ibcq
->
c⁄ãxt
,

1568 
drv_exp_ibv_pﬁl_cq
);

1569 i‡(!
v˘x
)

1570  -
ENOSYS
;

1572  
v˘x
->
	`drv_exp_ibv_pﬁl_cq
(
ibcq
, 
num_íåõs
, 
wc
, 
wc_size
);

1573 
	}
}

1578 
ölöe
 
	$ibv_exp_po°_£nd
(
ibv_qp
 *
qp
,

1579 
ibv_exp_£nd_wr
 *
wr
,

1580 
ibv_exp_£nd_wr
 **
bad_wr
)

1582 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
qp
->
c⁄ãxt
,

1583 
drv_exp_po°_£nd
);

1584 i‡(!
v˘x
)

1585  -
ENOSYS
;

1587  
v˘x
->
	`drv_exp_po°_£nd
(
qp
, 
wr
, 
bad_wr
);

1588 
	}
}

1594 
ölöe
 
ibv_mr
 *
	$ibv_exp_ªg_sh¨ed_mr
(
ibv_exp_ªg_sh¨ed_mr_ö
 *
mr_ö
)

1596 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
mr_ö
->
pd
->
c⁄ãxt
,

1597 
lib_exp_ibv_ªg_sh¨ed_mr
);

1598 i‡(!
v˘x
) {

1599 
î∫o
 = 
ENOSYS
;

1600  
NULL
;

1602 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
mr_ö
->
comp_mask
,

1603 
IBV_EXP_REG_SHARED_MR_RESERVED
 - 1);

1605  
v˘x
->
	`lib_exp_ibv_ªg_sh¨ed_mr
(
mr_ö
);

1606 
	}
}

1615 
ölöe
 
	$ibv_exp_modify_cq
(
ibv_cq
 *
cq
,

1616 
ibv_exp_cq_©å
 *
cq_©å
,

1617 
cq_©å_mask
)

1619 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
cq
->
c⁄ãxt
,

1620 
lib_exp_modify_cq
);

1621 i‡(!
v˘x
)

1622  
ENOSYS
;

1624 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
cq_©å
->
comp_mask
,

1625 
IBV_EXP_CQ_ATTR_RESERVED
 - 1);

1627  
v˘x
->
	`lib_exp_modify_cq
(
cq
, 
cq_©å
, 
cq_©å_mask
);

1628 
	}
}

1630 
ölöe
 
ibv_cq
 *
	$ibv_exp_¸óã_cq
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1631 
cqe
,

1632 *
cq_c⁄ãxt
,

1633 
ibv_comp_ch™√l
 *
ch™√l
,

1634 
comp_ve˘‹
,

1635 
ibv_exp_cq_öô_©å
 *
©å
)

1637 
vîbs_c⁄ãxt_exp
 *
v˘x
;

1638 
ibv_cq
 *
cq
;

1640 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
exp_¸óã_cq
);

1641 i‡(!
v˘x
) {

1642 
î∫o
 = 
ENOSYS
;

1643  
NULL
;

1646 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

1647 
IBV_EXP_CQ_INIT_ATTR_RESERVED
 - 1);

1648 
	`±hªad_muãx_lock
(&
c⁄ãxt
->
muãx
);

1649 
cq
 = 
v˘x
->
	`exp_¸óã_cq
(
c⁄ãxt
, 
cqe
, 
ch™√l
, 
comp_ve˘‹
, 
©å
);

1650 i‡(
cq
) {

1651 
cq
->
c⁄ãxt
 = context;

1652 
cq
->
ch™√l
 = channel;

1653 i‡(
ch™√l
)

1654 ++
ch™√l
->
ªf˙t
;

1655 
cq
->
cq_c⁄ãxt
 = cq_context;

1656 
cq
->
comp_evíts_com∂ëed
 = 0;

1657 
cq
->
async_evíts_com∂ëed
 = 0;

1658 
	`±hªad_muãx_öô
(&
cq
->
muãx
, 
NULL
);

1659 
	`±hªad_c⁄d_öô
(&
cq
->
c⁄d
, 
NULL
);

1662 
	`±hªad_muãx_u∆ock
(&
c⁄ãxt
->
muãx
);

1664  
cq
;

1665 
	}
}

1672 
ölöe
 

1673 
	$ibv_exp_modify_qp
(
ibv_qp
 *
qp
, 
ibv_exp_qp_©å
 *
©å
, 
uöt64_t
 
exp_©å_mask
)

1675 
vîbs_c⁄ãxt_exp
 *
v˘x
;

1677 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
qp
->
c⁄ãxt
, 
lib_exp_modify_qp
);

1678 i‡(!
v˘x
) {

1679 
î∫o
 = 
ENOSYS
;

1680  
î∫o
;

1682 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

1683 
IBV_EXP_QP_ATTR_RESERVED
 - 1);

1685  
v˘x
->
	`lib_exp_modify_qp
(
qp
, 
©å
, 
exp_©å_mask
);

1686 
	}
}

1691 
ölöe
 
ibv_mr
 *
	$ibv_exp_ªg_mr
(
ibv_exp_ªg_mr_ö
 *
ö
)

1693 
vîbs_c⁄ãxt_exp
 *
v˘x
;

1695 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ö
->
pd
->
c⁄ãxt
, 
lib_exp_ªg_mr
);

1696 i‡(!
v˘x
) {

1697 
î∫o
 = 
ENOSYS
;

1698  
NULL
;

1700 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
ö
->
comp_mask
,

1701 
IBV_EXP_REG_MR_RESERVED
 - 1);

1703  
v˘x
->
	`lib_exp_ªg_mr
(
ö
);

1704 
	}
}

1710 
ölöe
 
	$ibv_exp_böd_mw
(
ibv_exp_mw_böd
 *
mw_böd
)

1712 
vîbs_c⁄ãxt_exp
 *
v˘x
;

1714 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
mw_böd
->
mw
->
c⁄ãxt
, 
lib_exp_böd_mw
);

1715 i‡(!
v˘x
) {

1716 
î∫o
 = 
ENOSYS
;

1717  
î∫o
;

1719 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
mw_böd
->
comp_mask
,

1720 
IBV_EXP_BIND_MW_RESERVED
 - 1);

1722  
v˘x
->
	`lib_exp_böd_mw
(
mw_böd
);

1723 
	}
}

1736 
ölöe
 
	$ibv_exp_¥e„tch_mr
(

1737 
ibv_mr
 *
mr
,

1738 
ibv_exp_¥e„tch_©å
 *
©å
)

1740 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
mr
->
c⁄ãxt
,

1741 
lib_exp_¥e„tch_mr
);

1743 i‡(!
v˘x
) {

1744 
î∫o
 = 
ENOSYS
;

1745  
î∫o
;

1747 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

1748 
IBV_EXP_PREFETCH_MR_RESERVED
 - 1);

1750  
v˘x
->
	`lib_exp_¥e„tch_mr
(
mr
, 
©å
);

1751 
	}
}

1753 (*
	tdrv_exp_po°_£nd_func
)(
	tibv_qp
 *
	tqp
,

1754 
	tibv_exp_£nd_wr
 *
	twr
,

1755 
	tibv_exp_£nd_wr
 **
	tbad_wr
);

1756 (*
	tdrv_po°_£nd_func
)(
	tibv_qp
 *
	tqp
, 
	tibv_£nd_wr
 *
	twr
,

1757 
	tibv_£nd_wr
 **
	tbad_wr
);

1758 (*
	tdrv_exp_pﬁl_cq_func
)(
	tibv_cq
 *
	tibcq
, 
	tnum_íåõs
,

1759 
	tibv_exp_wc
 *
	twc
, 
	tuöt32_t
 
	twc_size
);

1760 (*
	tdrv_pﬁl_cq_func
)(
	tibv_cq
 *
	tcq
, 
	tnum_íåõs
, 
	tibv_wc
 *
	twc
);

1761 (*
	tdrv_po°_ªcv_func
)(
	tibv_qp
 *
	tqp
, 
	tibv_ªcv_wr
 *
	twr
,

1762 
	tibv_ªcv_wr
 **
	tbad_wr
);

1764 
ölöe
 *
	$ibv_exp_gë_¥ovidî_func
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1765 
ibv_exp_func_«me
 
«me
)

1767 
vîbs_c⁄ãxt_exp
 *
v˘x
;

1769 
«me
) {

1770 
IBV_EXP_POST_SEND_FUNC
:

1771 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
drv_exp_po°_£nd
);

1772 i‡(!
v˘x
)

1773 
îr‹
;

1775  (*)
v˘x
->
drv_exp_po°_£nd
;

1777 
IBV_EXP_POLL_CQ_FUNC
:

1778 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
drv_exp_ibv_pﬁl_cq
);

1779 i‡(!
v˘x
)

1780 
îr‹
;

1782  (*)
v˘x
->
drv_exp_ibv_pﬁl_cq
;

1784 
IBV_POST_SEND_FUNC
:

1785 i‡(!
c⁄ãxt
->
›s
.
po°_£nd
)

1786 
îr‹
;

1788  (*)
c⁄ãxt
->
›s
.
po°_£nd
;

1790 
IBV_POLL_CQ_FUNC
:

1791 i‡(!
c⁄ãxt
->
›s
.
pﬁl_cq
)

1792 
îr‹
;

1794  (*)
c⁄ãxt
->
›s
.
pﬁl_cq
;

1796 
IBV_POST_RECV_FUNC
:

1797 i‡(!
c⁄ãxt
->
›s
.
po°_ªcv
)

1798 
îr‹
;

1800  (*)
c⁄ãxt
->
›s
.
po°_ªcv
;

1806 
îr‹
:

1807 
î∫o
 = 
ENOSYS
;

1808  
NULL
;

1809 
	}
}

1811 
ölöe
 
ibv_mr
 *
	$ibv_exp_¸óã_mr
(
ibv_exp_¸óã_mr_ö
 *
ö
)

1813 
vîbs_c⁄ãxt_exp
 *
v˘x
;

1814 
ibv_mr
 *
mr
;

1816 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ö
->
pd
->
c⁄ãxt
, 
lib_exp_¸óã_mr
);

1817 i‡(!
v˘x
) {

1818 
î∫o
 = 
ENOSYS
;

1819  
NULL
;

1822 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
ö
->
comp_mask
,

1823 
IBV_EXP_CREATE_MR_IN_RESERVED
 - 1);

1824 
mr
 = 
v˘x
->
	`lib_exp_¸óã_mr
(
ö
);

1825 i‡(
mr
)

1826 
mr
->
pd
 = 
ö
->pd;

1828  
mr
;

1829 
	}
}

1831 
ölöe
 
	$ibv_exp_quîy_mkey
(
ibv_mr
 *
mr
,

1832 
ibv_exp_mkey_©å
 *
©å
)

1834 
vîbs_c⁄ãxt_exp
 *
v˘x
;

1836 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
mr
->
c⁄ãxt
, 
lib_exp_quîy_mkey
);

1837 i‡(!
v˘x
) {

1838 
î∫o
 = 
ENOSYS
;

1839  
î∫o
;

1842 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

1843 
IBV_EXP_MKEY_ATTR_RESERVED
 - 1);

1845  
v˘x
->
	`lib_exp_quîy_mkey
(
mr
, 
©å
);

1846 
	}
}

1848 
ölöe
 
	$ibv_exp_dóŒoc_mkey_li°_mem‹y
(
ibv_exp_mkey_li°_c⁄èöî
 *
mem
)

1850 
vîbs_c⁄ãxt_exp
 *
v˘x
;

1852 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
mem
->
c⁄ãxt
,

1853 
lib_exp_dóŒoc_mkey_li°_mem‹y
);

1854 i‡(!
v˘x
) {

1855 
î∫o
 = 
ENOSYS
;

1856  
î∫o
;

1859  
v˘x
->
	`lib_exp_dóŒoc_mkey_li°_mem‹y
(
mem
);

1860 
	}
}

1862 
ölöe
 
ibv_exp_mkey_li°_c⁄èöî
 *

1863 
	$ibv_exp_Æloc_mkey_li°_mem‹y
(
ibv_exp_mkey_li°_c⁄èöî_©å
 *
©å
)

1865 
vîbs_c⁄ãxt_exp
 *
v˘x
;

1867 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
©å
->
pd
->
c⁄ãxt
,

1868 
lib_exp_Æloc_mkey_li°_mem‹y
);

1869 i‡(!
v˘x
) {

1870 
î∫o
 = 
ENOSYS
;

1871  
NULL
;

1874 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

1875 
IBV_EXP_MKEY_LIST_CONTAINER_RESERVED
 - 1);

1877  
v˘x
->
	`lib_exp_Æloc_mkey_li°_mem‹y
(
©å
);

1878 
	}
}

1885 
ölöe
 
	$ibv_exp_ªªg_mr
(
ibv_mr
 *
mr
, 
Êags
,

1886 
ibv_pd
 *
pd
, *
addr
,

1887 
size_t
 
Àngth
, 
uöt64_t
 
exp_ac˚ss
,

1888 
ibv_exp_ªªg_mr_©å
 *
©å
)

1890 
vîbs_c⁄ãxt_exp
 *
v˘x
;

1892 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
mr
->
c⁄ãxt
, 
exp_ªªg_mr
);

1893 i‡(!
v˘x
)

1894  
î∫o
 = 
ENOSYS
;

1896 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

1897 
IBV_EXP_REREG_MR_ATTR_RESERVED
 - 1);

1899  
v˘x
->
	`exp_ªªg_mr
(
mr
, 
Êags
, 
pd
, 
addr
, 
Àngth
, 
exp_ac˚ss
, 
©å
);

1900 
	}
}

1902 
	gEND_C_DECLS


1904 #unde‡
__©åibuã_c⁄°


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/numacompat1.h

1 
	#numa_£t_öãæóve_mask
(
m
Ë
	`numa_£t_öãæóve_mask_com∑t
(m)

	)

2 
	#numa_gë_öãæóve_mask
(Ë
	`numa_gë_öãæóve_mask_com∑t
()

	)

3 
	#numa_böd
(
m
Ë
	`numa_böd_com∑t
(m)

	)

4 
	#numa_gë_memböd
(
m
Ë
	`numa_gë_memböd_com∑t
(m)

	)

5 
	#numa_£t_memböd
(
m
Ë
	`numa_£t_memböd_com∑t
(m)

	)

6 
	#numa_Æloc_öãæóved_sub£t
(
s
,
m
Ë
	`numa_Æloc_öãæóved_sub£t_com∑t
(s,m)

	)

7 
	#numa_run_⁄_node_mask
(
m
Ë
	`numa_run_⁄_node_mask_com∑t
(m)

	)

8 
	#numa_gë_run_node_mask
(Ë
	`numa_gë_run_node_mask_com∑t
()

	)

9 
	#numa_öãæóve_mem‹y
(
°
,
si
,
m
Ë
	`numa_öãæóve_mem‹y_com∑t
(°,si,m)

	)

10 
	#numa_t⁄odemask_mem‹y
(
°
,
si
,
m
Ë
	`numa_t⁄odemask_mem‹y_com∑t
(°,si,m)

	)

11 
	#numa_sched_gëafföôy
(
p
,
l
,
m
Ë
	`numa_sched_gëafföôy_com∑t
’,l,m)

	)

12 
	#numa_sched_£èfföôy
(
p
,
l
,
m
Ë
	`numa_sched_£èfföôy_com∑t
’,l,m)

	)

13 
	#numa_node_to_˝us
(
n
,
b
,
bl
Ë
	`numa_node_to_˝us_com∑t
“,b,bl)

	)

14 
	#nodemask_zîo
(
m
Ë
	`nodemask_zîo_com∑t
(m)

	)

15 
	#nodemask_£t
(
m
, 
n
Ë
	`nodemask_£t_com∑t
(m,Ç)

	)

16 
	#nodemask_˛r
(
m
, 
n
Ë
	`nodemask_˛r_com∑t
(m,Ç)

	)

17 
	#nodemask_is£t
(
m
, 
n
Ë
	`nodemask_is£t_com∑t
(m,Ç)

	)

18 
	#nodemask_equÆ
(
a
, 
b
Ë
	`nodemask_equÆ_com∑t
◊, b)

	)

	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

60 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

61 
	#__FD_ISSET
(
d
, 
£t
) \

62 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

25 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

28 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


29 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

30 #ñi‡
	t_IO_MTSAFE_IO


31 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


34 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

35 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

36 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

38 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

41 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

42 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

43 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

44 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

45 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

46 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

48 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


49 
	t_IO_acquúe_lock
(
	t_Â
) \

50 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

51 
	`_IO_Êockfûe
 (
_Â
)

	)

53 
	#_IO_ªÀa£_lock
(
_Â
) \

54 
	`_IO_fu∆ockfûe
 (
_Â
); \

55 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3) \

136 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
	g__GNUC__
 == 4 \

137 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

138 && 
__GNUC_RH_RELEASE__
 >= 31)

139 
	#__w¨nde˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

141 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

142 
	#__îr‹de˛
(
«me
, 
msg
) \

143 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

145 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

146 
	#__w¨«âr
(
msg
)

	)

147 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

151 #i‡
__GNUC_PREREQ
 (2,97)

153 
	#__Êex¨r
 []

	)

155 #ifde‡
__GNUC__


156 
	#__Êex¨r
 [0]

	)

158 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

159 
	#__Êex¨r
 []

	)

162 
	#__Êex¨r
 [1]

	)

178 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

180 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 #ifde‡
__˝lu•lus


182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

188 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

189 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

202 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

203 
	#__©åibuã__
(
xyz
Ë

	)

209 #i‡
__GNUC_PREREQ
 (2,96)

210 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

212 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (2,96)

219 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

221 
	#__©åibuã_puª__


	)

227 #i‡
__GNUC_PREREQ
 (3,1)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

229 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

231 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

232 
	#__©åibuã_noölöe__


	)

236 #i‡
__GNUC_PREREQ
 (3,2)

237 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

239 
	#__©åibuã_dïªˇãd__


	)

248 #i‡
__GNUC_PREREQ
 (2,8)

249 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

251 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

258 #i‡
__GNUC_PREREQ
 (2,97)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

260 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

262 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

267 #i‡
__GNUC_PREREQ
 (3,3)

268 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

270 
	#__n⁄nuŒ
(
∑øms
)

	)

275 #i‡
__GNUC_PREREQ
 (3,4)

276 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

277 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

278 #i‡
__USE_FORTIFY_LEVEL
 > 0

279 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

282 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

284 #i‚de‡
__wur


285 
	#__wur


	)

289 #i‡
__GNUC_PREREQ
 (3,2)

290 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

292 
	#__Æways_ölöe
 
__ölöe


	)

297 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

298 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

299 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

300 && 
__GNUC_RH_RELEASE__
 >= 31)

301 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


302 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

303 #i‡
__GNUC_PREREQ
 (4,3) \

304 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

305 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

306 && 
__GNUC_RH_RELEASE__
 >= 31)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 \

311 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

314 
	#__exã∫_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__exã∫_Æways_ölöe
 \

317 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

319 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

326 #i‡
__GNUC_PREREQ
 (4,3) \

327 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

328 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

329 && 
__GNUC_RH_RELEASE__
 >= 31)

330 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

331 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

338 #i‡!
__GNUC_PREREQ
 (2,8)

339 
	#__exãnsi⁄__


	)

343 #i‡!
__GNUC_PREREQ
 (2,92)

344 
	#__ª°ri˘


	)

350 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


351 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

353 #ifde‡
__GNUC__


354 
	#__ª°ri˘_¨r


	)

356 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

357 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

360 
	#__ª°ri˘_¨r


	)

365 
	~<bôs/w‹dsize.h
>

367 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


368 
	#__LDBL_COMPAT
 1

	)

369 #ifde‡
__REDIRECT


370 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

371 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

372 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

373 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

374 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

375 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

376 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

377 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

378 
	#__LDBL_REDIR_DECL
(
«me
) \

379 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

380 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

381 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

386 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


387 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

388 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

389 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

390 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

391 
	#__LDBL_REDIR_DECL
(
«me
)

	)

392 #ifde‡
__REDIRECT


393 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

394 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

395 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

562 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

563 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

567 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

568 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

663 
__isoc99_swsˇnf
)

664 
__THROW
 ;

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

718 
__THROW
 ;

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

64 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

65 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

68 
__exã∫_Æways_ölöe
 
wch¨_t
 *

69 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
))

71 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

73 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

74  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

75 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

77 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

78  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

79 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

81  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

82 
	}
}

85 #ifde‡
__USE_GNU


86 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

87 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

88 
size_t
 
__ns1
Ë
__THROW
;

89 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

90 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

91 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

92 
size_t
 
__n
), 
wmemp˝y
);

93 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

94 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

95 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

96 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

97 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

100 
__exã∫_Æways_ölöe
 
wch¨_t
 *

101 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

102 
size_t
 
__n
))

104 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

106 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

107  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

108 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

110 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

111  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

112 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

114  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

115 
	}
}

119 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

120 
size_t
 
__ns
Ë
__THROW
;

121 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

122 
size_t
 
__n
), 
wmem£t
);

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

124 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

125 
size_t
 
__ns
), 
__wmem£t_chk
)

126 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

129 
__exã∫_Æways_ölöe
 
wch¨_t
 *

130 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

132 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

134 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

135  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

137 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

138  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

139 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

141  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

142 
	}
}

145 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

146 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

147 
size_t
 
__n
Ë
__THROW
;

148 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

149 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

150 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

152 
__exã∫_Æways_ölöe
 
wch¨_t
 *

153 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

155 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

156  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

157  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

158 
	}
}

161 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

163 
size_t
 
__de°Àn
Ë
__THROW
;

164 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

165 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

168 
__exã∫_Æways_ölöe
 
wch¨_t
 *

169 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

171 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

172  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

173  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

174 
	}
}

177 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

178 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

179 
size_t
 
__de°Àn
Ë
__THROW
;

180 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

181 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

182 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

183 
size_t
 
__n
), 
wc¢˝y
);

184 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

185 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

186 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

187 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

188 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

191 
__exã∫_Æways_ölöe
 
wch¨_t
 *

192 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

193 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

224 
size_t
 
__n
))

226 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

228 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

229  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

230 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

231 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

232  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

233 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

235  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

236 
	}
}

239 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

240 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

241 
size_t
 
__de°Àn
Ë
__THROW
;

242 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

243 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

244 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

246 
__exã∫_Æways_ölöe
 
wch¨_t
 *

247 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

249 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

250  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

251  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

252 
	}
}

255 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

256 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

257 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

258 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

259 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

260 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

261 
size_t
 
__n
), 
wc¢ˇt
);

263 
__exã∫_Æways_ölöe
 
wch¨_t
 *

264 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

265 
size_t
 
__n
))

267 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

268  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

269 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

270  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

271 
	}
}

274 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

275 
__Êag
, 
size_t
 
__s_Àn
,

276 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

277 
__THROW
 ;

279 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

280 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

281 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

282 
sw¥ötf
);

284 #ifde‡
__va_¨g_∑ck


285 
__exã∫_Æways_ölöe
 

286 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

287 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

289 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

290  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

291 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

292 
__fmt
, 
	`__va_¨g_∑ck
 ());

293  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

294 
	}
}

295 #ñi‡!
deföed
 
__˝lu•lus


297 
	#sw¥ötf
(
s
, 
n
, ...) \

298 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

299 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

300 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

301 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

304 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

305 
__Êag
, 
size_t
 
__s_Àn
,

306 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

307 
__gnuc_va_li°
 
__¨g
)

308 
__THROW
 ;

310 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

311 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

312 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

313 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

315 
__exã∫_Æways_ölöe
 

316 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

317 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

319 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

320  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

321 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

322  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

323 
	}
}

326 #i‡
__USE_FORTIFY_LEVEL
 > 1

328 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

329 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

330 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

333 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

335 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

336 
__gnuc_va_li°
 
__≠
);

338 #ifde‡
__va_¨g_∑ck


339 
__exã∫_Æways_ölöe
 

340 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

342  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

343 
	}
}

345 
__exã∫_Æways_ölöe
 

346 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

348  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

349 
	`__va_¨g_∑ck
 ());

350 
	}
}

351 #ñi‡!
deföed
 
__˝lu•lus


352 
	#w¥ötf
(...) \

353 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

354 
	#fw¥ötf
(
°ªam
, ...) \

355 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

358 
__exã∫_Æways_ölöe
 

359 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

361  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

362 
	}
}

364 
__exã∫_Æways_ölöe
 

365 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

366 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

368  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

369 
	}
}

373 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

374 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

375 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

376 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

377 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

378 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

379 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

380 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

381 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

384 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

385 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

387 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

389 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

390  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

391 
__n
, 
__°ªam
);

393 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

394  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

395 
__n
, 
__°ªam
);

397  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

398 
	}
}

400 #ifde‡
__USE_GNU


401 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

402 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

403 
__wur
;

404 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

405 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

406 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

407 
__wur
;

408 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

409 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

410 
__FILE
 *
__ª°ri˘
 
__°ªam
),

411 
__fgëws_u∆ocked_chk
)

412 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

415 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

416 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

418 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

420 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

421  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

422 
__n
, 
__°ªam
);

424 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

425  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

426 
__n
, 
__°ªam
);

428  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

429 
	}
}

433 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

434 
mb°©e_t
 *
__ª°ri˘
 
__p
,

435 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

436 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

437 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

438 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

440 
__exã∫_Æways_ölöe
 
__wur
 
size_t


441 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

442 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

447 
	#__WCHAR_MB_LEN_MAX
 16

	)

448 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


451 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

452  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

453  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

454 
	}
}

457 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

458 
__c⁄°
 **
__ª°ri˘
 
__§c
,

459 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

460 
size_t
 
__d°Àn
Ë
__THROW
;

461 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

462 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

463 
__c⁄°
 **
__ª°ri˘
 
__§c
,

464 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

465 
mb§towcs
);

466 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

467 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

468 
__c⁄°
 **
__ª°ri˘
 
__§c
,

469 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

470 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

471 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

474 
__exã∫_Æways_ölöe
 
size_t


475 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

476 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

478 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

480 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

481  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

485  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

486 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

488  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

489 
	}
}

492 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

493 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

494 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

495 
size_t
 
__d°Àn
Ë
__THROW
;

496 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

497 (*
__ª°ri˘
 
__d°
,

498 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

499 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

500 
wc§tombs
);

501 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

502 (*
__ª°ri˘
 
__d°
,

503 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

504 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

505 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

506 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

508 
__exã∫_Æways_ölöe
 
size_t


509 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

510 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

512 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

514 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

515  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

517 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

518  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

520  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

521 
	}
}

524 #ifde‡
__USE_GNU


525 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

526 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

527 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

528 
size_t
 
__d°Àn
Ë
__THROW
;

529 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

530 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

531 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

532 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

533 
mb¢πowcs
);

534 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

535 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

536 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

537 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

538 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

539 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

542 
__exã∫_Æways_ölöe
 
size_t


543 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

544 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

546 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

548 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

549  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

553  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

554 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

556  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

557 
	}
}

560 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

561 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

562 
size_t
 
__nwc
, size_à
__Àn
,

563 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

564 
__THROW
;

565 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

566 (*
__ª°ri˘
 
__d°
,

567 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

568 
size_t
 
__nwc
, size_à
__Àn
,

569 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

570 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

571 (*
__ª°ri˘
 
__d°
,

572 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

573 
size_t
 
__nwc
, size_à
__Àn
,

574 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

575 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

576 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

578 
__exã∫_Æways_ölöe
 
size_t


579 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

580 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

582 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

584 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

585  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

589  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

590 
	`__bos
 (
__d°
));

592  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

593 
	}
}

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@
1
.
1
/usr/include
198
13210
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/include/arch/cc.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/include/arch/perf.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/include/arch/sys_arch.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/include/netif/fifo.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/include/netif/ibvif.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/include/netif/list.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/include/netif/tcpdump.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/lib/app/main.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/lib/lwipopts.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/lib/lwippools.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/lib/unixlib.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/lwip_chksum.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/netif/fifo.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/netif/ibvif.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/netif/list.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/netif/tcpdump.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/perf.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/linux/sys_arch.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/api/api_lib.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/api/api_msg.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/api/epoll.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/api/err.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/api/netbuf.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/api/netdb.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/api/netifapi.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/api/sockets.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/api/tcpip.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/def.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/init.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/ipv4/autoip.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/ipv4/icmp.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/ipv4/igmp.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/ipv4/inet.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/ipv4/inet_chksum.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/ipv4/ip.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/ipv4/ip_addr.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/ipv4/ip_frag.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/mem.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/memp.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/netif.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/pbuf.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/stats.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/sys.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/tcp.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/tcp_in.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/tcp_out.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/core/timers.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/ipv4/lwip/autoip.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/ipv4/lwip/icmp.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/ipv4/lwip/igmp.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/ipv4/lwip/inet.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/ipv4/lwip/inet_chksum.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/ipv4/lwip/ip.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/ipv4/lwip/ip_addr.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/ipv4/lwip/ip_frag.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/api.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/api_msg.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/arch.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/debug.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/def.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/epoll.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/err.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/init.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/mem.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/memp.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/memp_std.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/netbuf.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/netdb.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/netif.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/netifapi.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/opt.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/pbuf.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/sample_tracepoint.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/sample_tracepoint.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/sio.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/snmp.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/snmp_asn1.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/snmp_msg.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/snmp_structs.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/sockets.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/stats.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/sys.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/tcp.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/tcp_impl.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/tcpip.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/tcpip_thread.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/lwip/timers.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/include/netif/etharp.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/src/netif/etharp.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/core/test_mem.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/core/test_mem.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/etharp/test_etharp.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/etharp/test_etharp.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/lwip_check.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/lwip_unittests.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/tcp/tcp_helper.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/tcp/tcp_helper.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/tcp/test_tcp.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/tcp/test_tcp.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/tcp/test_tcp_oos.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/tcp/test_tcp_oos.h
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/udp/test_udp.c
/net/hu21/mkumar68/aos_project/lwip_tcp_client_90/Project_1_lwip_socket_dyn/lwip/test/unit/udp/test_udp.h
/usr/include/assert.h
/usr/include/byteswap.h
/usr/include/errno.h
/usr/include/infiniband/verbs.h
/usr/include/numa.h
/usr/include/pthread.h
/usr/include/sched.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/ipc.h
/usr/include/sys/mman.h
/usr/include/sys/shm.h
/usr/include/sys/stat.h
/usr/include/sys/syscall.h
/usr/include/sys/time.h
/usr/include/sys/times.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/asm/unistd.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/ipc.h
/usr/include/bits/ipctypes.h
/usr/include/bits/mman.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/sched.h
/usr/include/bits/setjmp.h
/usr/include/bits/shm.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/syscall.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/uio.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/infiniband/ofa_verbs.h
/usr/include/infiniband/verbs_exp.h
/usr/include/libio.h
/usr/include/numacompat1.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ucontext.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/select.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/ctype.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/sys/cdefs.h
/usr/include/asm/errno.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-64.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
