#include "lwip/init.h"
#include "lwip/sys.h"
#include "lwip/mem.h"
#include "lwip/memp.h"
#include "lwip/pbuf.h"
#include "lwip/tcp.h"
#include "lwip/tcpip.h"
#include "lwip/netif.h"
#include "lwip/stats.h"
#include "lwip/sockets.h"
#include <byteswap.h>
#include "netif/ibvif.h"
#include <time.h>
#include <sys/time.h>
#include "lwip/stats.h"
#include <signal.h>
#include "lwip/sample_tracepoint.h"
#include "lwip/epoll.h"

struct thread_struct {
   int cpu;
   int    connfd;
   struct sockaddr_in cliaddr;
};

/*void print_stats (int sig)
{
   //stats_display();
   exit(1);
}*/

/*void *
server_handle_client_conn(void *arg)
{
   struct thread_struct t_data = *(struct thread_struct *)arg;
   socklen_t clilen;
   char mesg[1000];
   clilen = sizeof(t_data.cliaddr);
   int n;
   int flag = 1;
   lwip_thread_aff(t_data.cpu);
   pthread_yield();
   int result = lwip_setsockopt(t_data.connfd,
                           IPPROTO_TCP,
                           TCP_NODELAY,
                           (char *) &flag,
                           sizeof(int));
   if (result < 0) {
       printf("couldn't disable nagle\n");
   }
   for(;;) {
          //n = lwip_recvfrom(t_data.connfd,mesg,1000,0,(struct sockaddr *)&t_data.cliaddr,&clilen);
          n = lwip_recvfrom(t_data.connfd,mesg,100,0,NULL,NULL);
	  //tracepoint(sample_tracepoint, message, "Application received packet\n");
          if ((n==0) || (n == -1)) {
             printf("recv error\n");
             break;
          }
          //lwip_sendto(t_data.connfd,mesg,n,0,(struct sockaddr *)&t_data.cliaddr,sizeof(t_data.cliaddr));
   }
   close(t_data.connfd);
}

void *
handle_listener (void *arg) {
  int cpu = *(int *) arg;
  int listenfd, connfd;
  struct sockaddr_in servaddr, cliaddr;
  struct thread_struct thread_data[1000];
  socklen_t clilen;
  pid_t     childpid;
  pthread_t tmp;
  int index;

  lwip_thread_aff(cpu);
  pthread_yield();
  listenfd = lwip_socket(AF_INET,SOCK_STREAM,0);
  memset(&servaddr,0,sizeof(struct sockaddr_in));
  servaddr.sin_family = AF_INET;
  servaddr.sin_addr.s_addr=inet_addr("10.0.0.1");
  servaddr.sin_port=bswap_16(80);
  lwip_bind(listenfd, (struct sockaddr *)&servaddr, sizeof(servaddr));
  lwip_listen(listenfd, 1024);
  index = 0;
  for(;;)
  {
    clilen = sizeof(cliaddr);
    connfd = lwip_accept(listenfd,(struct sockaddr *)&cliaddr,&clilen);
    thread_data[index].connfd = connfd;
    thread_data[index].cliaddr = cliaddr;
    thread_data[index].cpu = cpu;

    pthread_create(&tmp, NULL, (void *(*)(void *)) server_handle_client_conn, (void *)&thread_data[index]);
    index++;
  }
  close(listenfd);
}*/

int main(int argc, char **argv) {
 int listenfd, connfd;
 struct sockaddr_in servaddr, cliaddr;
 socklen_t clilen;
 u32_t     opt, ret;
 signed int n;
 struct lwip_epoll_event event;
 char mesg[1000];
 
 lwip_thread_aff(12);
 tcpip_init(NULL, NULL);

 listenfd = lwip_socket(AF_INET,SOCK_STREAM,0);
 opt = lwip_fcntl(listenfd, F_GETFL, 0);
 opt |= O_NONBLOCK;
 ret = lwip_fcntl(listenfd, F_SETFL, opt);
 memset(&servaddr,0,sizeof(struct sockaddr_in));
 servaddr.sin_family = AF_INET;
 servaddr.sin_addr.s_addr=inet_addr(argv[1]);
 servaddr.sin_port=bswap_16(80);
 lwip_bind(listenfd, (struct sockaddr *)&servaddr, sizeof(servaddr));
 lwip_listen(listenfd, 1024);
 event.events |= EPOLLIN;
 lwip_epoll_ctl(listenfd, &event);
 event.events = 0;

 while(1) {
   lwip_epoll_wait(0, &event);
   if (event.events & EPOLLIN) {
     /* Handle incoming packet here */
     n = lwip_recvfrom(event.data.sockid,mesg,100,0,NULL,NULL);
     if ((n==0) || (n == -1)) {
       printf("recv error %d\n", n);
       break;
     }
     //lwip_sendto(event.data.sockid,mesg,n,0,NULL,0);
   } else {
     /* Handle new connections here */
     connfd = lwip_accept(listenfd,(struct sockaddr *)&cliaddr,&clilen);
     if (connfd == -1) {
       printf("recv error %d\n", n);
       break;
     }
     opt = lwip_fcntl(connfd, F_GETFL, 0);
     opt |= O_NONBLOCK;
     ret = lwip_fcntl(connfd, F_SETFL, opt);
     event.events |= EPOLLIN;
     lwip_epoll_ctl(connfd, &event);
   }
   event.events = 0;
 }
 return 1;
}
