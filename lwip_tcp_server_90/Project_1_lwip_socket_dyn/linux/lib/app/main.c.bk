#include "lwip/init.h"
#include "lwip/sys.h"
#include "lwip/mem.h"
#include "lwip/memp.h"
#include "lwip/pbuf.h"
#include "lwip/tcp.h"
#include "lwip/tcpip.h"
#include "lwip/netif.h"
#include "lwip/stats.h"
#include "lwip/sockets.h"
#include <byteswap.h>
#include "netif/ibvif.h"
#include <time.h>
#include <sys/time.h>
#include "lwip/stats.h"
#include <signal.h>

struct thread_struct {
   int    connfd;
   struct sockaddr_in cliaddr;
};

struct netif netif;

init_netif() {
  ip_addr_t ipaddr, netmask, gateway;

  IP4_ADDR(&gateway, 10,0,0,3);
  IP4_ADDR(&ipaddr, 10,0,0,1);
  IP4_ADDR(&netmask, 255,255,0,0);

  netif_add(&netif, &ipaddr, &netmask, &gateway, NULL, ibvif_init,
            tcpip_input);

  netif_set_default(&netif);
}

void print_stats (int sig)
{
   stats_display();
   exit(1);
}

void *
server_handle_client_conn(void *arg)
{
   struct thread_struct t_data = *(struct thread_struct *)arg;
   socklen_t clilen;
   char mesg[1000];
   char send[1000];
   strcpy(send, "hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohello");
   clilen = sizeof(t_data.cliaddr);
   int n;
   for(;;) {
          n = lwip_recvfrom(t_data.connfd,mesg,1000,0,(struct sockaddr *)&t_data.cliaddr,&clilen);
          if (n==0) break;
          //lwip_sendto(t_data.connfd,send,100,0,(struct sockaddr *)&t_data.cliaddr,sizeof(t_data.cliaddr));
   }
   close(t_data.connfd);
}

int main(int argc, char**argv) {
 int listenfd, connfd;
 struct sockaddr_in servaddr, cliaddr;
 struct thread_struct thread_data;
 socklen_t clilen;
 pid_t     childpid;
 u32_t     n;
 struct timespec start;
 int code;
 pthread_t tmp;
 
 tcpip_init(NULL, NULL);
 init_netif();
 listenfd = lwip_socket(AF_INET,SOCK_STREAM,0);
 memset(&servaddr,0,sizeof(struct sockaddr_in));
 servaddr.sin_family = AF_INET;
 servaddr.sin_addr.s_addr=inet_addr(argv[1]);
 servaddr.sin_port=bswap_16(80);
 lwip_bind(listenfd, (struct sockaddr *)&servaddr, sizeof(servaddr));
 
 lwip_listen(listenfd, 1024);
 signal(SIGINT, print_stats);
 
 for(;;)
 {
    clilen = sizeof(cliaddr);
    connfd = lwip_accept(listenfd,(struct sockaddr *)&cliaddr,&clilen);
    thread_data.connfd = connfd;
    thread_data.cliaddr = cliaddr;

    code = pthread_create(&tmp, NULL, server_handle_client_conn, (void *)&thread_data);
    if (code) {
      printf("Thread creation failed\n");
      exit(1);
    }
 }
 close(listenfd);
}
